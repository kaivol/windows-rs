#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
pub trait CIE4ConnectionPoint_Impl: ::windows_core::BaseImpl + super::super::System::Com::IConnectionPoint_Impl {
    fn DoInvokeIE4(this: &Self::This, pf: *mut super::super::Foundation::BOOL, ppv: *mut *mut ::core::ffi::c_void, dispid: i32, pdispparams: *mut super::super::System::Com::DISPPARAMS) -> ::windows_core::Result<()>;
    fn DoInvokePIDLIE4(this: &Self::This, dispid: i32, pidl: *mut Common::ITEMIDLIST, fcancancel: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for CIE4ConnectionPoint {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IConnectionPoint);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: CIE4ConnectionPoint_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for CIE4ConnectionPoint {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DoInvokeIE4<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: CIE4ConnectionPoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pf: *mut super::super::Foundation::BOOL, ppv: *mut *mut ::core::ffi::c_void, dispid: i32, pdispparams: *mut super::super::System::Com::DISPPARAMS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DoInvokeIE4(this, ::core::mem::transmute_copy(&pf), ::core::mem::transmute_copy(&ppv), ::core::mem::transmute_copy(&dispid), ::core::mem::transmute_copy(&pdispparams)).into())
        }
        unsafe extern "system" fn DoInvokePIDLIE4<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: CIE4ConnectionPoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispid: i32, pidl: *mut Common::ITEMIDLIST, fcancancel: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DoInvokePIDLIE4(this, ::core::mem::transmute_copy(&dispid), ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&fcancancel)).into())
        }
        CIE4ConnectionPoint_Vtbl {
            base__: <super::super::System::Com::IConnectionPoint as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DoInvokeIE4: DoInvokeIE4::<Identity, Impl, OFFSET>,
            DoInvokePIDLIE4: DoInvokePIDLIE4::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait DFConstraint_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Value(this: &Self::This) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for DFConstraint {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DFConstraint_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DFConstraint {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DFConstraint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Value<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DFConstraint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pv: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Value(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pv, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        DFConstraint_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Name: Name::<Identity, Impl, OFFSET>,
            Value: Value::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait DShellFolderViewEvents_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for DShellFolderViewEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DShellFolderViewEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DShellFolderViewEvents {
    const VTABLE: Self::Vtable = { DShellFolderViewEvents_Vtbl { base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait DShellNameSpaceEvents_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for DShellNameSpaceEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DShellNameSpaceEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DShellNameSpaceEvents {
    const VTABLE: Self::Vtable = { DShellNameSpaceEvents_Vtbl { base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait DShellWindowsEvents_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for DShellWindowsEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DShellWindowsEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DShellWindowsEvents {
    const VTABLE: Self::Vtable = { DShellWindowsEvents_Vtbl { base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait DWebBrowserEvents_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for DWebBrowserEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DWebBrowserEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DWebBrowserEvents {
    const VTABLE: Self::Vtable = { DWebBrowserEvents_Vtbl { base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait DWebBrowserEvents2_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for DWebBrowserEvents2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DWebBrowserEvents2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DWebBrowserEvents2 {
    const VTABLE: Self::Vtable = { DWebBrowserEvents2_Vtbl { base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait Folder_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Title(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn ParentFolder(this: &Self::This) -> ::windows_core::Result<Folder>;
    fn Items(this: &Self::This) -> ::windows_core::Result<FolderItems>;
    fn ParseName(this: &Self::This, bname: &::windows_core::BSTR) -> ::windows_core::Result<FolderItem>;
    fn NewFolder(this: &Self::This, bname: &::windows_core::BSTR, voptions: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn MoveHere(this: &Self::This, vitem: &super::super::System::Variant::VARIANT, voptions: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn CopyHere(this: &Self::This, vitem: &super::super::System::Variant::VARIANT, voptions: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn GetDetailsOf(this: &Self::This, vitem: &super::super::System::Variant::VARIANT, icolumn: i32) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for Folder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for Folder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Title<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Title(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ParentFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParentFolder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Items<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Items(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ParseName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParseName(this, ::core::mem::transmute(&bname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NewFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bname: ::std::mem::MaybeUninit<::windows_core::BSTR>, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NewFolder(this, ::core::mem::transmute(&bname), ::core::mem::transmute(&voptions)).into())
        }
        unsafe extern "system" fn MoveHere<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveHere(this, ::core::mem::transmute(&vitem), ::core::mem::transmute(&voptions)).into())
        }
        unsafe extern "system" fn CopyHere<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vitem: super::super::System::Variant::VARIANT, voptions: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyHere(this, ::core::mem::transmute(&vitem), ::core::mem::transmute(&voptions)).into())
        }
        unsafe extern "system" fn GetDetailsOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vitem: super::super::System::Variant::VARIANT, icolumn: i32, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDetailsOf(this, ::core::mem::transmute(&vitem), ::core::mem::transmute_copy(&icolumn)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        Folder_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Title: Title::<Identity, Impl, OFFSET>,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            ParentFolder: ParentFolder::<Identity, Impl, OFFSET>,
            Items: Items::<Identity, Impl, OFFSET>,
            ParseName: ParseName::<Identity, Impl, OFFSET>,
            NewFolder: NewFolder::<Identity, Impl, OFFSET>,
            MoveHere: MoveHere::<Identity, Impl, OFFSET>,
            CopyHere: CopyHere::<Identity, Impl, OFFSET>,
            GetDetailsOf: GetDetailsOf::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait Folder2_Impl: ::windows_core::BaseImpl + Folder_Impl {
    fn Self_(this: &Self::This) -> ::windows_core::Result<FolderItem>;
    fn OfflineStatus(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Synchronize(this: &Self::This) -> ::windows_core::Result<()>;
    fn HaveToShowWebViewBarricade(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn DismissedWebViewBarricade(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for Folder2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(Folder);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for Folder2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Self_<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppfi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Self_(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppfi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OfflineStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pul: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OfflineStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pul, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Synchronize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Synchronize(this).into())
        }
        unsafe extern "system" fn HaveToShowWebViewBarricade<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbhavetoshowwebviewbarricade: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HaveToShowWebViewBarricade(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbhavetoshowwebviewbarricade, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DismissedWebViewBarricade<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DismissedWebViewBarricade(this).into())
        }
        Folder2_Vtbl {
            base__: <Folder as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Self_: Self_::<Identity, Impl, OFFSET>,
            OfflineStatus: OfflineStatus::<Identity, Impl, OFFSET>,
            Synchronize: Synchronize::<Identity, Impl, OFFSET>,
            HaveToShowWebViewBarricade: HaveToShowWebViewBarricade::<Identity, Impl, OFFSET>,
            DismissedWebViewBarricade: DismissedWebViewBarricade::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait Folder3_Impl: ::windows_core::BaseImpl + Folder2_Impl {
    fn ShowWebViewBarricade(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetShowWebViewBarricade(this: &Self::This, bshowwebviewbarricade: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for Folder3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(Folder2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for Folder3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShowWebViewBarricade<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbshowwebviewbarricade: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ShowWebViewBarricade(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbshowwebviewbarricade, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetShowWebViewBarricade<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: Folder3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bshowwebviewbarricade: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShowWebViewBarricade(this, ::core::mem::transmute_copy(&bshowwebviewbarricade)).into())
        }
        Folder3_Vtbl {
            base__: <Folder2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShowWebViewBarricade: ShowWebViewBarricade::<Identity, Impl, OFFSET>,
            SetShowWebViewBarricade: SetShowWebViewBarricade::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItem_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetName(this: &Self::This, bs: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Path(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetLink(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn GetFolder(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn IsLink(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn IsFolder(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn IsFileSystem(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn IsBrowsable(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn ModifyDate(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetModifyDate(this: &Self::This, dt: f64) -> ::windows_core::Result<()>;
    fn Size(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Type(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Verbs(this: &Self::This) -> ::windows_core::Result<FolderItemVerbs>;
    fn InvokeVerb(this: &Self::This, vverb: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetName(this, ::core::mem::transmute(&bs)).into())
        }
        unsafe extern "system" fn Path<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Path(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLink(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsLink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsLink(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsFolder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsFileSystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsFileSystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsBrowsable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsBrowsable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ModifyDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdt: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ModifyDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetModifyDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dt: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetModifyDate(this, ::core::mem::transmute_copy(&dt)).into())
        }
        unsafe extern "system" fn Size<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pul: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Size(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pul, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Verbs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppfic: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Verbs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppfic, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InvokeVerb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vverb: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeVerb(this, ::core::mem::transmute(&vverb)).into())
        }
        FolderItem_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            SetName: SetName::<Identity, Impl, OFFSET>,
            Path: Path::<Identity, Impl, OFFSET>,
            GetLink: GetLink::<Identity, Impl, OFFSET>,
            GetFolder: GetFolder::<Identity, Impl, OFFSET>,
            IsLink: IsLink::<Identity, Impl, OFFSET>,
            IsFolder: IsFolder::<Identity, Impl, OFFSET>,
            IsFileSystem: IsFileSystem::<Identity, Impl, OFFSET>,
            IsBrowsable: IsBrowsable::<Identity, Impl, OFFSET>,
            ModifyDate: ModifyDate::<Identity, Impl, OFFSET>,
            SetModifyDate: SetModifyDate::<Identity, Impl, OFFSET>,
            Size: Size::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            Verbs: Verbs::<Identity, Impl, OFFSET>,
            InvokeVerb: InvokeVerb::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItem2_Impl: ::windows_core::BaseImpl + FolderItem_Impl {
    fn InvokeVerbEx(this: &Self::This, vverb: &super::super::System::Variant::VARIANT, vargs: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ExtendedProperty(this: &Self::This, bstrpropname: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItem2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(FolderItem);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItem2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InvokeVerbEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeVerbEx(this, ::core::mem::transmute(&vverb), ::core::mem::transmute(&vargs)).into())
        }
        unsafe extern "system" fn ExtendedProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpropname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvret: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ExtendedProperty(this, ::core::mem::transmute(&bstrpropname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvret, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        FolderItem2_Vtbl {
            base__: <FolderItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InvokeVerbEx: InvokeVerbEx::<Identity, Impl, OFFSET>,
            ExtendedProperty: ExtendedProperty::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItemVerb_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn DoIt(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItemVerb {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerb_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItemVerb {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerb_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerb_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerb_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DoIt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerb_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DoIt(this).into())
        }
        FolderItemVerb_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            DoIt: DoIt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItemVerbs_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Item(this: &Self::This, index: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<FolderItemVerb>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItemVerbs {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerbs_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItemVerbs {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerbs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerbs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerbs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerbs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::System::Variant::VARIANT, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Item(this, ::core::mem::transmute(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItemVerbs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        FolderItemVerbs_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            Item: Item::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItems_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Item(this: &Self::This, index: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<FolderItem>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItems {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItems {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::System::Variant::VARIANT, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Item(this, ::core::mem::transmute(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        FolderItems_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            Item: Item::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItems2_Impl: ::windows_core::BaseImpl + FolderItems_Impl {
    fn InvokeVerbEx(this: &Self::This, vverb: &super::super::System::Variant::VARIANT, vargs: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItems2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(FolderItems);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItems2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InvokeVerbEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vverb: super::super::System::Variant::VARIANT, vargs: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeVerbEx(this, ::core::mem::transmute(&vverb), ::core::mem::transmute(&vargs)).into())
        }
        FolderItems2_Vtbl { base__: <FolderItems as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, InvokeVerbEx: InvokeVerbEx::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait FolderItems3_Impl: ::windows_core::BaseImpl + FolderItems2_Impl {
    fn Filter(this: &Self::This, grfflags: i32, bstrfilespec: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Verbs(this: &Self::This) -> ::windows_core::Result<FolderItemVerbs>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for FolderItems3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(FolderItems2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for FolderItems3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Filter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfflags: i32, bstrfilespec: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Filter(this, ::core::mem::transmute_copy(&grfflags), ::core::mem::transmute(&bstrfilespec)).into())
        }
        unsafe extern "system" fn Verbs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: FolderItems3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppfic: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Verbs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppfic, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        FolderItems3_Vtbl {
            base__: <FolderItems2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Filter: Filter::<Identity, Impl, OFFSET>,
            Verbs: Verbs::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IACList_Impl: ::windows_core::BaseImpl {
    fn Expand(this: &Self::This, pszexpand: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IACList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IACList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IACList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Expand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IACList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszexpand: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Expand(this, ::core::mem::transmute(&pszexpand)).into())
        }
        IACList_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Expand: Expand::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IACList2_Impl: ::windows_core::BaseImpl + IACList_Impl {
    fn SetOptions(this: &Self::This, dwflag: u32) -> ::windows_core::Result<()>;
    fn GetOptions(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IACList2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IACList);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IACList2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IACList2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IACList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflag: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOptions(this, ::core::mem::transmute_copy(&dwflag)).into())
        }
        unsafe extern "system" fn GetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IACList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflag: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflag, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IACList2_Vtbl {
            base__: <IACList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetOptions: SetOptions::<Identity, Impl, OFFSET>,
            GetOptions: GetOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IAccessibilityDockingService_Impl: ::windows_core::BaseImpl {
    fn GetAvailableSize(this: &Self::This, hmonitor: super::super::Graphics::Gdi::HMONITOR, pcxfixed: *mut u32, pcymax: *mut u32) -> ::windows_core::Result<()>;
    fn DockWindow(this: &Self::This, hwnd: super::super::Foundation::HWND, hmonitor: super::super::Graphics::Gdi::HMONITOR, cyrequested: u32, pcallback: ::core::option::Option<&IAccessibilityDockingServiceCallback>) -> ::windows_core::Result<()>;
    fn UndockWindow(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IAccessibilityDockingService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibilityDockingService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAccessibilityDockingService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAvailableSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibilityDockingService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, pcxfixed: *mut u32, pcymax: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAvailableSize(this, ::core::mem::transmute_copy(&hmonitor), ::core::mem::transmute_copy(&pcxfixed), ::core::mem::transmute_copy(&pcymax)).into())
        }
        unsafe extern "system" fn DockWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibilityDockingService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hmonitor: super::super::Graphics::Gdi::HMONITOR, cyrequested: u32, pcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DockWindow(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&hmonitor), ::core::mem::transmute_copy(&cyrequested), ::windows_core::from_raw_borrowed(&pcallback)).into())
        }
        unsafe extern "system" fn UndockWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibilityDockingService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UndockWindow(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        IAccessibilityDockingService_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAvailableSize: GetAvailableSize::<Identity, Impl, OFFSET>,
            DockWindow: DockWindow::<Identity, Impl, OFFSET>,
            UndockWindow: UndockWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAccessibilityDockingServiceCallback_Impl: ::windows_core::BaseImpl {
    fn Undocked(this: &Self::This, undockreason: UNDOCK_REASON) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAccessibilityDockingServiceCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibilityDockingServiceCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAccessibilityDockingServiceCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Undocked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibilityDockingServiceCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, undockreason: UNDOCK_REASON) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Undocked(this, ::core::mem::transmute_copy(&undockreason)).into())
        }
        IAccessibilityDockingServiceCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Undocked: Undocked::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAccessibleObject_Impl: ::windows_core::BaseImpl {
    fn SetAccessibleName(this: &Self::This, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAccessibleObject {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibleObject_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAccessibleObject {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAccessibleName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAccessibleObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAccessibleName(this, ::core::mem::transmute(&pszname)).into())
        }
        IAccessibleObject_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAccessibleName: SetAccessibleName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IActionProgress_Impl: ::windows_core::BaseImpl {
    fn Begin(this: &Self::This, action: SPACTION, flags: u32) -> ::windows_core::Result<()>;
    fn UpdateProgress(this: &Self::This, ulcompleted: u64, ultotal: u64) -> ::windows_core::Result<()>;
    fn UpdateText(this: &Self::This, sptext: SPTEXT, psztext: &::windows_core::PCWSTR, fmaycompact: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn QueryCancel(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn ResetCancel(this: &Self::This) -> ::windows_core::Result<()>;
    fn End(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IActionProgress {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IActionProgress {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Begin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, action: SPACTION, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Begin(this, ::core::mem::transmute_copy(&action), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn UpdateProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcompleted: u64, ultotal: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateProgress(this, ::core::mem::transmute_copy(&ulcompleted), ::core::mem::transmute_copy(&ultotal)).into())
        }
        unsafe extern "system" fn UpdateText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sptext: SPTEXT, psztext: ::windows_core::PCWSTR, fmaycompact: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateText(this, ::core::mem::transmute_copy(&sptext), ::core::mem::transmute(&psztext), ::core::mem::transmute_copy(&fmaycompact)).into())
        }
        unsafe extern "system" fn QueryCancel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcancelled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryCancel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcancelled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResetCancel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetCancel(this).into())
        }
        unsafe extern "system" fn End<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::End(this).into())
        }
        IActionProgress_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Begin: Begin::<Identity, Impl, OFFSET>,
            UpdateProgress: UpdateProgress::<Identity, Impl, OFFSET>,
            UpdateText: UpdateText::<Identity, Impl, OFFSET>,
            QueryCancel: QueryCancel::<Identity, Impl, OFFSET>,
            ResetCancel: ResetCancel::<Identity, Impl, OFFSET>,
            End: End::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IActionProgressDialog_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, flags: u32, psztitle: &::windows_core::PCWSTR, pszcancel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IActionProgressDialog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgressDialog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IActionProgressDialog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, psztitle: ::windows_core::PCWSTR, pszcancel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&psztitle), ::core::mem::transmute(&pszcancel)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IActionProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        IActionProgressDialog_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IAppActivationUIInfo_Impl: ::windows_core::BaseImpl {
    fn GetMonitor(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HMONITOR>;
    fn GetInvokePoint(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::POINT>;
    fn GetShowCommand(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetShowUI(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetKeyState(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IAppActivationUIInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppActivationUIInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAppActivationUIInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMonitor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppActivationUIInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMonitor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInvokePoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppActivationUIInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInvokePoint(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetShowCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppActivationUIInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetShowCommand(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetShowUI<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppActivationUIInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetShowUI(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKeyState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppActivationUIInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeyState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAppActivationUIInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMonitor: GetMonitor::<Identity, Impl, OFFSET>,
            GetInvokePoint: GetInvokePoint::<Identity, Impl, OFFSET>,
            GetShowCommand: GetShowCommand::<Identity, Impl, OFFSET>,
            GetShowUI: GetShowUI::<Identity, Impl, OFFSET>,
            GetKeyState: GetKeyState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAppPublisher_Impl: ::windows_core::BaseImpl {
    fn GetNumberOfCategories(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCategories(this: &Self::This) -> ::windows_core::Result<APPCATEGORYINFOLIST>;
    fn GetNumberOfApps(this: &Self::This) -> ::windows_core::Result<u32>;
    fn EnumApps(this: &Self::This, pappcategoryid: *const ::windows_core::GUID) -> ::windows_core::Result<IEnumPublishedApps>;
}
impl ::windows_core::Iids for IAppPublisher {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppPublisher_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAppPublisher {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberOfCategories<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppPublisher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcat: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfCategories(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCategories<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppPublisher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pappcategorylist: *mut APPCATEGORYINFOLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCategories(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pappcategorylist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOfApps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppPublisher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwapps: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfApps(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwapps, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumApps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppPublisher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pappcategoryid: *const ::windows_core::GUID, ppepa: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumApps(this, ::core::mem::transmute_copy(&pappcategoryid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppepa, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAppPublisher_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberOfCategories: GetNumberOfCategories::<Identity, Impl, OFFSET>,
            GetCategories: GetCategories::<Identity, Impl, OFFSET>,
            GetNumberOfApps: GetNumberOfApps::<Identity, Impl, OFFSET>,
            EnumApps: EnumApps::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IAppVisibility_Impl: ::windows_core::BaseImpl {
    fn GetAppVisibilityOnMonitor(this: &Self::This, hmonitor: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::Result<MONITOR_APP_VISIBILITY>;
    fn IsLauncherVisible(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn Advise(this: &Self::This, pcallback: ::core::option::Option<&IAppVisibilityEvents>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IAppVisibility {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibility_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAppVisibility {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAppVisibilityOnMonitor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, pmode: *mut MONITOR_APP_VISIBILITY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAppVisibilityOnMonitor(this, ::core::mem::transmute_copy(&hmonitor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsLauncherVisible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfvisible: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsLauncherVisible(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfvisible, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&pcallback)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        IAppVisibility_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAppVisibilityOnMonitor: GetAppVisibilityOnMonitor::<Identity, Impl, OFFSET>,
            IsLauncherVisible: IsLauncherVisible::<Identity, Impl, OFFSET>,
            Advise: Advise::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IAppVisibilityEvents_Impl: ::windows_core::BaseImpl {
    fn AppVisibilityOnMonitorChanged(this: &Self::This, hmonitor: super::super::Graphics::Gdi::HMONITOR, previousmode: MONITOR_APP_VISIBILITY, currentmode: MONITOR_APP_VISIBILITY) -> ::windows_core::Result<()>;
    fn LauncherVisibilityChange(this: &Self::This, currentvisiblestate: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IAppVisibilityEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibilityEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAppVisibilityEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AppVisibilityOnMonitorChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibilityEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmonitor: super::super::Graphics::Gdi::HMONITOR, previousmode: MONITOR_APP_VISIBILITY, currentmode: MONITOR_APP_VISIBILITY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppVisibilityOnMonitorChanged(this, ::core::mem::transmute_copy(&hmonitor), ::core::mem::transmute_copy(&previousmode), ::core::mem::transmute_copy(&currentmode)).into())
        }
        unsafe extern "system" fn LauncherVisibilityChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAppVisibilityEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentvisiblestate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LauncherVisibilityChange(this, ::core::mem::transmute_copy(&currentvisiblestate)).into())
        }
        IAppVisibilityEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AppVisibilityOnMonitorChanged: AppVisibilityOnMonitorChanged::<Identity, Impl, OFFSET>,
            LauncherVisibilityChange: LauncherVisibilityChange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IApplicationActivationManager_Impl: ::windows_core::BaseImpl {
    fn ActivateApplication(this: &Self::This, appusermodelid: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR, options: ACTIVATEOPTIONS) -> ::windows_core::Result<u32>;
    fn ActivateForFile(this: &Self::This, appusermodelid: &::windows_core::PCWSTR, itemarray: ::core::option::Option<&IShellItemArray>, verb: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn ActivateForProtocol(this: &Self::This, appusermodelid: &::windows_core::PCWSTR, itemarray: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IApplicationActivationManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationActivationManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationActivationManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ActivateApplication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationActivationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, appusermodelid: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR, options: ACTIVATEOPTIONS, processid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ActivateApplication(this, ::core::mem::transmute(&appusermodelid), ::core::mem::transmute(&arguments), ::core::mem::transmute_copy(&options)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(processid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ActivateForFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationActivationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, appusermodelid: ::windows_core::PCWSTR, itemarray: *mut ::core::ffi::c_void, verb: ::windows_core::PCWSTR, processid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ActivateForFile(this, ::core::mem::transmute(&appusermodelid), ::windows_core::from_raw_borrowed(&itemarray), ::core::mem::transmute(&verb)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(processid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ActivateForProtocol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationActivationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, appusermodelid: ::windows_core::PCWSTR, itemarray: *mut ::core::ffi::c_void, processid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ActivateForProtocol(this, ::core::mem::transmute(&appusermodelid), ::windows_core::from_raw_borrowed(&itemarray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(processid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IApplicationActivationManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ActivateApplication: ActivateApplication::<Identity, Impl, OFFSET>,
            ActivateForFile: ActivateForFile::<Identity, Impl, OFFSET>,
            ActivateForProtocol: ActivateForProtocol::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IApplicationAssociationRegistration_Impl: ::windows_core::BaseImpl {
    fn QueryCurrentDefault(this: &Self::This, pszquery: &::windows_core::PCWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn QueryAppIsDefault(this: &Self::This, pszquery: &::windows_core::PCWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn QueryAppIsDefaultAll(this: &Self::This, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetAppAsDefault(this: &Self::This, pszappregistryname: &::windows_core::PCWSTR, pszset: &::windows_core::PCWSTR, atsettype: ASSOCIATIONTYPE) -> ::windows_core::Result<()>;
    fn SetAppAsDefaultAll(this: &Self::This, pszappregistryname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ClearUserAssociations(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IApplicationAssociationRegistration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationAssociationRegistration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryCurrentDefault<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszquery: ::windows_core::PCWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, ppszassociation: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryCurrentDefault(this, ::core::mem::transmute(&pszquery), ::core::mem::transmute_copy(&atquerytype), ::core::mem::transmute_copy(&alquerylevel)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszassociation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueryAppIsDefault<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszquery: ::windows_core::PCWSTR, atquerytype: ASSOCIATIONTYPE, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: ::windows_core::PCWSTR, pfdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryAppIsDefault(this, ::core::mem::transmute(&pszquery), ::core::mem::transmute_copy(&atquerytype), ::core::mem::transmute_copy(&alquerylevel), ::core::mem::transmute(&pszappregistryname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfdefault, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueryAppIsDefaultAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, alquerylevel: ASSOCIATIONLEVEL, pszappregistryname: ::windows_core::PCWSTR, pfdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryAppIsDefaultAll(this, ::core::mem::transmute_copy(&alquerylevel), ::core::mem::transmute(&pszappregistryname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfdefault, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAppAsDefault<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappregistryname: ::windows_core::PCWSTR, pszset: ::windows_core::PCWSTR, atsettype: ASSOCIATIONTYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppAsDefault(this, ::core::mem::transmute(&pszappregistryname), ::core::mem::transmute(&pszset), ::core::mem::transmute_copy(&atsettype)).into())
        }
        unsafe extern "system" fn SetAppAsDefaultAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappregistryname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppAsDefaultAll(this, ::core::mem::transmute(&pszappregistryname)).into())
        }
        unsafe extern "system" fn ClearUserAssociations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearUserAssociations(this).into())
        }
        IApplicationAssociationRegistration_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            QueryCurrentDefault: QueryCurrentDefault::<Identity, Impl, OFFSET>,
            QueryAppIsDefault: QueryAppIsDefault::<Identity, Impl, OFFSET>,
            QueryAppIsDefaultAll: QueryAppIsDefaultAll::<Identity, Impl, OFFSET>,
            SetAppAsDefault: SetAppAsDefault::<Identity, Impl, OFFSET>,
            SetAppAsDefaultAll: SetAppAsDefaultAll::<Identity, Impl, OFFSET>,
            ClearUserAssociations: ClearUserAssociations::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IApplicationAssociationRegistrationUI_Impl: ::windows_core::BaseImpl {
    fn LaunchAdvancedAssociationUI(this: &Self::This, pszappregistryname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IApplicationAssociationRegistrationUI {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistrationUI_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationAssociationRegistrationUI {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LaunchAdvancedAssociationUI<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationAssociationRegistrationUI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappregistryname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchAdvancedAssociationUI(this, ::core::mem::transmute(&pszappregistryname)).into())
        }
        IApplicationAssociationRegistrationUI_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LaunchAdvancedAssociationUI: LaunchAdvancedAssociationUI::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IApplicationDesignModeSettings_Impl: ::windows_core::BaseImpl {
    fn SetNativeDisplaySize(this: &Self::This, nativedisplaysizepixels: &super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn SetScaleFactor(this: &Self::This, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::Result<()>;
    fn SetApplicationViewState(this: &Self::This, viewstate: APPLICATION_VIEW_STATE) -> ::windows_core::Result<()>;
    fn ComputeApplicationSize(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::SIZE>;
    fn IsApplicationViewStateSupported(this: &Self::This, viewstate: APPLICATION_VIEW_STATE, nativedisplaysizepixels: &super::super::Foundation::SIZE, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn TriggerEdgeGesture(this: &Self::This, edgegesturekind: EDGE_GESTURE_KIND) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IApplicationDesignModeSettings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationDesignModeSettings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetNativeDisplaySize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nativedisplaysizepixels: super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNativeDisplaySize(this, ::core::mem::transmute(&nativedisplaysizepixels)).into())
        }
        unsafe extern "system" fn SetScaleFactor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scalefactor: Common::DEVICE_SCALE_FACTOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScaleFactor(this, ::core::mem::transmute_copy(&scalefactor)).into())
        }
        unsafe extern "system" fn SetApplicationViewState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, viewstate: APPLICATION_VIEW_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetApplicationViewState(this, ::core::mem::transmute_copy(&viewstate)).into())
        }
        unsafe extern "system" fn ComputeApplicationSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, applicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ComputeApplicationSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(applicationsizepixels, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsApplicationViewStateSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, viewstate: APPLICATION_VIEW_STATE, nativedisplaysizepixels: super::super::Foundation::SIZE, scalefactor: Common::DEVICE_SCALE_FACTOR, supported: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsApplicationViewStateSupported(this, ::core::mem::transmute_copy(&viewstate), ::core::mem::transmute(&nativedisplaysizepixels), ::core::mem::transmute_copy(&scalefactor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(supported, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TriggerEdgeGesture<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, edgegesturekind: EDGE_GESTURE_KIND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TriggerEdgeGesture(this, ::core::mem::transmute_copy(&edgegesturekind)).into())
        }
        IApplicationDesignModeSettings_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetNativeDisplaySize: SetNativeDisplaySize::<Identity, Impl, OFFSET>,
            SetScaleFactor: SetScaleFactor::<Identity, Impl, OFFSET>,
            SetApplicationViewState: SetApplicationViewState::<Identity, Impl, OFFSET>,
            ComputeApplicationSize: ComputeApplicationSize::<Identity, Impl, OFFSET>,
            IsApplicationViewStateSupported: IsApplicationViewStateSupported::<Identity, Impl, OFFSET>,
            TriggerEdgeGesture: TriggerEdgeGesture::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IApplicationDesignModeSettings2_Impl: ::windows_core::BaseImpl + IApplicationDesignModeSettings_Impl {
    fn SetNativeDisplayOrientation(this: &Self::This, nativedisplayorientation: NATIVE_DISPLAY_ORIENTATION) -> ::windows_core::Result<()>;
    fn SetApplicationViewOrientation(this: &Self::This, vieworientation: APPLICATION_VIEW_ORIENTATION) -> ::windows_core::Result<()>;
    fn SetAdjacentDisplayEdges(this: &Self::This, adjacentdisplayedges: ADJACENT_DISPLAY_EDGES) -> ::windows_core::Result<()>;
    fn SetIsOnLockScreen(this: &Self::This, isonlockscreen: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetApplicationViewMinWidth(this: &Self::This, viewminwidth: APPLICATION_VIEW_MIN_WIDTH) -> ::windows_core::Result<()>;
    fn GetApplicationSizeBounds(this: &Self::This, minapplicationsizepixels: *mut super::super::Foundation::SIZE, maxapplicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn GetApplicationViewOrientation(this: &Self::This, applicationsizepixels: &super::super::Foundation::SIZE) -> ::windows_core::Result<APPLICATION_VIEW_ORIENTATION>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IApplicationDesignModeSettings2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IApplicationDesignModeSettings);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationDesignModeSettings2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetNativeDisplayOrientation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nativedisplayorientation: NATIVE_DISPLAY_ORIENTATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNativeDisplayOrientation(this, ::core::mem::transmute_copy(&nativedisplayorientation)).into())
        }
        unsafe extern "system" fn SetApplicationViewOrientation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vieworientation: APPLICATION_VIEW_ORIENTATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetApplicationViewOrientation(this, ::core::mem::transmute_copy(&vieworientation)).into())
        }
        unsafe extern "system" fn SetAdjacentDisplayEdges<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adjacentdisplayedges: ADJACENT_DISPLAY_EDGES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAdjacentDisplayEdges(this, ::core::mem::transmute_copy(&adjacentdisplayedges)).into())
        }
        unsafe extern "system" fn SetIsOnLockScreen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isonlockscreen: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIsOnLockScreen(this, ::core::mem::transmute_copy(&isonlockscreen)).into())
        }
        unsafe extern "system" fn SetApplicationViewMinWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, viewminwidth: APPLICATION_VIEW_MIN_WIDTH) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetApplicationViewMinWidth(this, ::core::mem::transmute_copy(&viewminwidth)).into())
        }
        unsafe extern "system" fn GetApplicationSizeBounds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minapplicationsizepixels: *mut super::super::Foundation::SIZE, maxapplicationsizepixels: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetApplicationSizeBounds(this, ::core::mem::transmute_copy(&minapplicationsizepixels), ::core::mem::transmute_copy(&maxapplicationsizepixels)).into())
        }
        unsafe extern "system" fn GetApplicationViewOrientation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDesignModeSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, applicationsizepixels: super::super::Foundation::SIZE, vieworientation: *mut APPLICATION_VIEW_ORIENTATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetApplicationViewOrientation(this, ::core::mem::transmute(&applicationsizepixels)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(vieworientation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IApplicationDesignModeSettings2_Vtbl {
            base__: <IApplicationDesignModeSettings as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetNativeDisplayOrientation: SetNativeDisplayOrientation::<Identity, Impl, OFFSET>,
            SetApplicationViewOrientation: SetApplicationViewOrientation::<Identity, Impl, OFFSET>,
            SetAdjacentDisplayEdges: SetAdjacentDisplayEdges::<Identity, Impl, OFFSET>,
            SetIsOnLockScreen: SetIsOnLockScreen::<Identity, Impl, OFFSET>,
            SetApplicationViewMinWidth: SetApplicationViewMinWidth::<Identity, Impl, OFFSET>,
            GetApplicationSizeBounds: GetApplicationSizeBounds::<Identity, Impl, OFFSET>,
            GetApplicationViewOrientation: GetApplicationViewOrientation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IApplicationDestinations_Impl: ::windows_core::BaseImpl {
    fn SetAppID(this: &Self::This, pszappid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RemoveDestination(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveAllDestinations(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IApplicationDestinations {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDestinations_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationDestinations {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAppID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDestinations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppID(this, ::core::mem::transmute(&pszappid)).into())
        }
        unsafe extern "system" fn RemoveDestination<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDestinations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveDestination(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn RemoveAllDestinations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDestinations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllDestinations(this).into())
        }
        IApplicationDestinations_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAppID: SetAppID::<Identity, Impl, OFFSET>,
            RemoveDestination: RemoveDestination::<Identity, Impl, OFFSET>,
            RemoveAllDestinations: RemoveAllDestinations::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IApplicationDocumentLists_Impl: ::windows_core::BaseImpl {
    fn SetAppID(this: &Self::This, pszappid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetList(this: &Self::This, listtype: APPDOCLISTTYPE, citemsdesired: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IApplicationDocumentLists {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDocumentLists_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IApplicationDocumentLists {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAppID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDocumentLists_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppID(this, ::core::mem::transmute(&pszappid)).into())
        }
        unsafe extern "system" fn GetList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IApplicationDocumentLists_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, listtype: APPDOCLISTTYPE, citemsdesired: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetList(this, ::core::mem::transmute_copy(&listtype), ::core::mem::transmute_copy(&citemsdesired), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IApplicationDocumentLists_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAppID: SetAppID::<Identity, Impl, OFFSET>,
            GetList: GetList::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IAssocHandler_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetUIName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetIconLocation(this: &Self::This, ppszpath: *mut ::windows_core::PWSTR, pindex: *mut i32) -> ::windows_core::Result<()>;
    fn IsRecommended(this: &Self::This) -> ::windows_core::HRESULT;
    fn MakeDefault(this: &Self::This, pszdescription: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Invoke(this: &Self::This, pdo: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
    fn CreateInvoker(this: &Self::This, pdo: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<IAssocHandlerInvoker>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IAssocHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAssocHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsz, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUIName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUIName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsz, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszpath: *mut ::windows_core::PWSTR, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIconLocation(this, ::core::mem::transmute_copy(&ppszpath), ::core::mem::transmute_copy(&pindex)).into())
        }
        unsafe extern "system" fn IsRecommended<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsRecommended(this))
        }
        unsafe extern "system" fn MakeDefault<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdescription: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MakeDefault(this, ::core::mem::transmute(&pszdescription)).into())
        }
        unsafe extern "system" fn Invoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Invoke(this, ::windows_core::from_raw_borrowed(&pdo)).into())
        }
        unsafe extern "system" fn CreateInvoker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdo: *mut ::core::ffi::c_void, ppinvoker: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateInvoker(this, ::windows_core::from_raw_borrowed(&pdo)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppinvoker, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAssocHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetUIName: GetUIName::<Identity, Impl, OFFSET>,
            GetIconLocation: GetIconLocation::<Identity, Impl, OFFSET>,
            IsRecommended: IsRecommended::<Identity, Impl, OFFSET>,
            MakeDefault: MakeDefault::<Identity, Impl, OFFSET>,
            Invoke: Invoke::<Identity, Impl, OFFSET>,
            CreateInvoker: CreateInvoker::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAssocHandlerInvoker_Impl: ::windows_core::BaseImpl {
    fn SupportsSelection(this: &Self::This) -> ::windows_core::Result<()>;
    fn Invoke(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAssocHandlerInvoker {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandlerInvoker_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAssocHandlerInvoker {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SupportsSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandlerInvoker_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SupportsSelection(this).into())
        }
        unsafe extern "system" fn Invoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAssocHandlerInvoker_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Invoke(this).into())
        }
        IAssocHandlerInvoker_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SupportsSelection: SupportsSelection::<Identity, Impl, OFFSET>,
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IAttachmentExecute_Impl: ::windows_core::BaseImpl {
    fn SetClientTitle(this: &Self::This, psztitle: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetClientGuid(this: &Self::This, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetLocalPath(this: &Self::This, pszlocalpath: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFileName(this: &Self::This, pszfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetSource(this: &Self::This, pszsource: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetReferrer(this: &Self::This, pszreferrer: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CheckPolicy(this: &Self::This) -> ::windows_core::Result<()>;
    fn Prompt(this: &Self::This, hwnd: super::super::Foundation::HWND, prompt: ATTACHMENT_PROMPT) -> ::windows_core::Result<ATTACHMENT_ACTION>;
    fn Save(this: &Self::This) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, hwnd: super::super::Foundation::HWND, pszverb: &::windows_core::PCWSTR, phprocess: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn SaveWithUI(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn ClearClientState(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IAttachmentExecute {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAttachmentExecute {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetClientTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientTitle(this, ::core::mem::transmute(&psztitle)).into())
        }
        unsafe extern "system" fn SetClientGuid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientGuid(this, ::core::mem::transmute_copy(&guid)).into())
        }
        unsafe extern "system" fn SetLocalPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszlocalpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocalPath(this, ::core::mem::transmute(&pszlocalpath)).into())
        }
        unsafe extern "system" fn SetFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileName(this, ::core::mem::transmute(&pszfilename)).into())
        }
        unsafe extern "system" fn SetSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszsource: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSource(this, ::core::mem::transmute(&pszsource)).into())
        }
        unsafe extern "system" fn SetReferrer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszreferrer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReferrer(this, ::core::mem::transmute(&pszreferrer)).into())
        }
        unsafe extern "system" fn CheckPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckPolicy(this).into())
        }
        unsafe extern "system" fn Prompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prompt: ATTACHMENT_PROMPT, paction: *mut ATTACHMENT_ACTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Prompt(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&prompt)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(paction, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Save<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Save(this).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pszverb: ::windows_core::PCWSTR, phprocess: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute(&pszverb), ::core::mem::transmute_copy(&phprocess)).into())
        }
        unsafe extern "system" fn SaveWithUI<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveWithUI(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn ClearClientState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttachmentExecute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearClientState(this).into())
        }
        IAttachmentExecute_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetClientTitle: SetClientTitle::<Identity, Impl, OFFSET>,
            SetClientGuid: SetClientGuid::<Identity, Impl, OFFSET>,
            SetLocalPath: SetLocalPath::<Identity, Impl, OFFSET>,
            SetFileName: SetFileName::<Identity, Impl, OFFSET>,
            SetSource: SetSource::<Identity, Impl, OFFSET>,
            SetReferrer: SetReferrer::<Identity, Impl, OFFSET>,
            CheckPolicy: CheckPolicy::<Identity, Impl, OFFSET>,
            Prompt: Prompt::<Identity, Impl, OFFSET>,
            Save: Save::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            SaveWithUI: SaveWithUI::<Identity, Impl, OFFSET>,
            ClearClientState: ClearClientState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IAutoComplete_Impl: ::windows_core::BaseImpl {
    fn Init(this: &Self::This, hwndedit: super::super::Foundation::HWND, punkacl: ::core::option::Option<&::windows_core::IUnknown>, pwszregkeypath: &::windows_core::PCWSTR, pwszquickcomplete: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Enable(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IAutoComplete {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoComplete_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAutoComplete {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoComplete_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndedit: super::super::Foundation::HWND, punkacl: *mut ::core::ffi::c_void, pwszregkeypath: ::windows_core::PCWSTR, pwszquickcomplete: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Init(this, ::core::mem::transmute_copy(&hwndedit), ::windows_core::from_raw_borrowed(&punkacl), ::core::mem::transmute(&pwszregkeypath), ::core::mem::transmute(&pwszquickcomplete)).into())
        }
        unsafe extern "system" fn Enable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoComplete_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Enable(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        IAutoComplete_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Init: Init::<Identity, Impl, OFFSET>,
            Enable: Enable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IAutoComplete2_Impl: ::windows_core::BaseImpl + IAutoComplete_Impl {
    fn SetOptions(this: &Self::This, dwflag: u32) -> ::windows_core::Result<()>;
    fn GetOptions(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IAutoComplete2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IAutoComplete);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoComplete2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAutoComplete2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoComplete2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflag: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOptions(this, ::core::mem::transmute_copy(&dwflag)).into())
        }
        unsafe extern "system" fn GetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoComplete2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflag: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflag, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAutoComplete2_Vtbl {
            base__: <IAutoComplete as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetOptions: SetOptions::<Identity, Impl, OFFSET>,
            GetOptions: GetOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAutoCompleteDropDown_Impl: ::windows_core::BaseImpl {
    fn GetDropDownStatus(this: &Self::This, pdwflags: *mut u32, ppwszstring: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn ResetEnumerator(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAutoCompleteDropDown {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoCompleteDropDown_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAutoCompleteDropDown {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDropDownStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoCompleteDropDown_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, ppwszstring: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDropDownStatus(this, ::core::mem::transmute_copy(&pdwflags), ::core::mem::transmute_copy(&ppwszstring)).into())
        }
        unsafe extern "system" fn ResetEnumerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAutoCompleteDropDown_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetEnumerator(this).into())
        }
        IAutoCompleteDropDown_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDropDownStatus: GetDropDownStatus::<Identity, Impl, OFFSET>,
            ResetEnumerator: ResetEnumerator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IBandHost_Impl: ::windows_core::BaseImpl {
    fn CreateBand(this: &Self::This, rclsidband: *const ::windows_core::GUID, favailable: super::super::Foundation::BOOL, fvisible: super::super::Foundation::BOOL, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetBandAvailability(this: &Self::This, rclsidband: *const ::windows_core::GUID, favailable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn DestroyBand(this: &Self::This, rclsidband: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IBandHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBandHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows_core::GUID, favailable: super::super::Foundation::BOOL, fvisible: super::super::Foundation::BOOL, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateBand(this, ::core::mem::transmute_copy(&rclsidband), ::core::mem::transmute_copy(&favailable), ::core::mem::transmute_copy(&fvisible), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn SetBandAvailability<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows_core::GUID, favailable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBandAvailability(this, ::core::mem::transmute_copy(&rclsidband), ::core::mem::transmute_copy(&favailable)).into())
        }
        unsafe extern "system" fn DestroyBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsidband: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DestroyBand(this, ::core::mem::transmute_copy(&rclsidband)).into())
        }
        IBandHost_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateBand: CreateBand::<Identity, Impl, OFFSET>,
            SetBandAvailability: SetBandAvailability::<Identity, Impl, OFFSET>,
            DestroyBand: DestroyBand::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Ole\"`"]
#[cfg(feature = "Win32_System_Ole")]
pub trait IBandSite_Impl: ::windows_core::BaseImpl {
    fn AddBand(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EnumBands(this: &Self::This, uband: u32) -> ::windows_core::Result<u32>;
    fn QueryBand(this: &Self::This, dwbandid: u32, ppstb: *mut ::core::option::Option<IDeskBand>, pdwstate: *mut u32, pszname: ::windows_core::PWSTR, cchname: i32) -> ::windows_core::Result<()>;
    fn SetBandState(this: &Self::This, dwbandid: u32, dwmask: u32, dwstate: u32) -> ::windows_core::Result<()>;
    fn RemoveBand(this: &Self::This, dwbandid: u32) -> ::windows_core::Result<()>;
    fn GetBandObject(this: &Self::This, dwbandid: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetBandSiteInfo(this: &Self::This, pbsinfo: *const BANDSITEINFO) -> ::windows_core::Result<()>;
    fn GetBandSiteInfo(this: &Self::This, pbsinfo: *mut BANDSITEINFO) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Ole")]
impl ::windows_core::Iids for IBandSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Ole")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBandSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddBand(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn EnumBands<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uband: u32, pdwbandid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumBands(this, ::core::mem::transmute_copy(&uband)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwbandid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueryBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbandid: u32, ppstb: *mut *mut ::core::ffi::c_void, pdwstate: *mut u32, pszname: ::windows_core::PWSTR, cchname: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryBand(this, ::core::mem::transmute_copy(&dwbandid), ::core::mem::transmute_copy(&ppstb), ::core::mem::transmute_copy(&pdwstate), ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cchname)).into())
        }
        unsafe extern "system" fn SetBandState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbandid: u32, dwmask: u32, dwstate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBandState(this, ::core::mem::transmute_copy(&dwbandid), ::core::mem::transmute_copy(&dwmask), ::core::mem::transmute_copy(&dwstate)).into())
        }
        unsafe extern "system" fn RemoveBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbandid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBand(this, ::core::mem::transmute_copy(&dwbandid)).into())
        }
        unsafe extern "system" fn GetBandObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbandid: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBandObject(this, ::core::mem::transmute_copy(&dwbandid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn SetBandSiteInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbsinfo: *const BANDSITEINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBandSiteInfo(this, ::core::mem::transmute_copy(&pbsinfo)).into())
        }
        unsafe extern "system" fn GetBandSiteInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBandSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbsinfo: *mut BANDSITEINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBandSiteInfo(this, ::core::mem::transmute_copy(&pbsinfo)).into())
        }
        IBandSite_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddBand: AddBand::<Identity, Impl, OFFSET>,
            EnumBands: EnumBands::<Identity, Impl, OFFSET>,
            QueryBand: QueryBand::<Identity, Impl, OFFSET>,
            SetBandState: SetBandState::<Identity, Impl, OFFSET>,
            RemoveBand: RemoveBand::<Identity, Impl, OFFSET>,
            GetBandObject: GetBandObject::<Identity, Impl, OFFSET>,
            SetBandSiteInfo: SetBandSiteInfo::<Identity, Impl, OFFSET>,
            GetBandSiteInfo: GetBandSiteInfo::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IBannerNotificationHandler_Impl: ::windows_core::BaseImpl {
    fn OnBannerEvent(this: &Self::This, notification: *const BANNER_NOTIFICATION) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IBannerNotificationHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBannerNotificationHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBannerNotificationHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnBannerEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBannerNotificationHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, notification: *const BANNER_NOTIFICATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBannerEvent(this, ::core::mem::transmute_copy(&notification)).into())
        }
        IBannerNotificationHandler_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnBannerEvent: OnBannerEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Graphics_Gdi\"`"]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub trait IBanneredBar_Impl: ::windows_core::BaseImpl {
    fn SetIconSize(this: &Self::This, iicon: u32) -> ::windows_core::Result<()>;
    fn GetIconSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetBitmap(this: &Self::This, hbitmap: super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::Result<()>;
    fn GetBitmap(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::windows_core::Iids for IBanneredBar {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBanneredBar_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBanneredBar {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBanneredBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iicon: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconSize(this, ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn GetIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBanneredBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piicon: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIconSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piicon, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBanneredBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hbitmap: super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBitmap(this, ::core::mem::transmute_copy(&hbitmap)).into())
        }
        unsafe extern "system" fn GetBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBanneredBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phbitmap: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBitmap(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbitmap, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBanneredBar_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetIconSize: SetIconSize::<Identity, Impl, OFFSET>,
            GetIconSize: GetIconSize::<Identity, Impl, OFFSET>,
            SetBitmap: SetBitmap::<Identity, Impl, OFFSET>,
            GetBitmap: GetBitmap::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IBrowserFrameOptions_Impl: ::windows_core::BaseImpl {
    fn GetFrameOptions(this: &Self::This, dwmask: u32) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IBrowserFrameOptions {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserFrameOptions_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBrowserFrameOptions {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFrameOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserFrameOptions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmask: u32, pdwoptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFrameOptions(this, ::core::mem::transmute_copy(&dwmask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwoptions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBrowserFrameOptions_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFrameOptions: GetFrameOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
pub trait IBrowserService_Impl: ::windows_core::BaseImpl {
    fn GetParentSite(this: &Self::This) -> ::windows_core::Result<super::super::System::Ole::IOleInPlaceSite>;
    fn SetTitle(this: &Self::This, psv: ::core::option::Option<&IShellView>, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetTitle(this: &Self::This, psv: ::core::option::Option<&IShellView>, pszname: ::windows_core::PWSTR, cchname: u32) -> ::windows_core::Result<()>;
    fn GetOleObject(this: &Self::This) -> ::windows_core::Result<super::super::System::Ole::IOleObject>;
    fn GetTravelLog(this: &Self::This) -> ::windows_core::Result<ITravelLog>;
    fn ShowControlWindow(this: &Self::This, id: u32, fshow: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn IsControlWindowShown(this: &Self::This, id: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn IEGetDisplayName(this: &Self::This, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::Result<()>;
    fn IEParseDisplayName(this: &Self::This, uicp: u32, pwszpath: &::windows_core::PCWSTR) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn DisplayParseError(this: &Self::This, hres: ::windows_core::HRESULT, pwszpath: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn NavigateToPidl(this: &Self::This, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::Result<()>;
    fn SetNavigateState(this: &Self::This, bnstate: BNSTATE) -> ::windows_core::Result<()>;
    fn GetNavigateState(this: &Self::This) -> ::windows_core::Result<BNSTATE>;
    fn NotifyRedirect(this: &Self::This, psv: ::core::option::Option<&IShellView>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn UpdateWindowList(this: &Self::This) -> ::windows_core::Result<()>;
    fn UpdateBackForwardState(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetFlags(this: &Self::This, dwflags: u32, dwflagmask: u32) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn CanNavigateNow(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetPidl(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn SetReferrer(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn GetBrowserIndex(this: &Self::This) -> u32;
    fn GetBrowserByIndex(this: &Self::This, dwid: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetHistoryObject(this: &Self::This, ppole: *mut ::core::option::Option<super::super::System::Ole::IOleObject>, pstm: *mut ::core::option::Option<super::super::System::Com::IStream>, ppbc: *mut ::core::option::Option<super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()>;
    fn SetHistoryObject(this: &Self::This, pole: ::core::option::Option<&super::super::System::Ole::IOleObject>, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CacheOLEServer(this: &Self::This, pole: ::core::option::Option<&super::super::System::Ole::IOleObject>) -> ::windows_core::Result<()>;
    fn GetSetCodePage(this: &Self::This, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn OnHttpEquiv(this: &Self::This, psv: ::core::option::Option<&IShellView>, fdone: super::super::Foundation::BOOL, pvarargin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn GetPalette(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HPALETTE>;
    fn RegisterWindow(this: &Self::This, fforceregister: super::super::Foundation::BOOL, swc: ShellWindowTypeConstants) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IBrowserService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBrowserService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetParentSite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppipsite: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetParentSite(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppipsite, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTitle(this, ::windows_core::from_raw_borrowed(&psv), ::core::mem::transmute(&pszname)).into())
        }
        unsafe extern "system" fn GetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pszname: ::windows_core::PWSTR, cchname: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTitle(this, ::windows_core::from_raw_borrowed(&psv), ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cchname)).into())
        }
        unsafe extern "system" fn GetOleObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppobjv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOleObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppobjv, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTravelLog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptl: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTravelLog(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShowControlWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, fshow: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowControlWindow(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&fshow)).into())
        }
        unsafe extern "system" fn IsControlWindowShown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, pfshown: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsControlWindowShown(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfshown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IEGetDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pwszname: ::windows_core::PWSTR, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IEGetDisplayName(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&pwszname), ::core::mem::transmute_copy(&uflags)).into())
        }
        unsafe extern "system" fn IEParseDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uicp: u32, pwszpath: ::windows_core::PCWSTR, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IEParseDisplayName(this, ::core::mem::transmute_copy(&uicp), ::core::mem::transmute(&pwszpath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidlout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisplayParseError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hres: ::windows_core::HRESULT, pwszpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisplayParseError(this, ::core::mem::transmute_copy(&hres), ::core::mem::transmute(&pwszpath)).into())
        }
        unsafe extern "system" fn NavigateToPidl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, grfhlnf: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NavigateToPidl(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&grfhlnf)).into())
        }
        unsafe extern "system" fn SetNavigateState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bnstate: BNSTATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNavigateState(this, ::core::mem::transmute_copy(&bnstate)).into())
        }
        unsafe extern "system" fn GetNavigateState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbnstate: *mut BNSTATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNavigateState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbnstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NotifyRedirect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pfdidbrowse: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NotifyRedirect(this, ::windows_core::from_raw_borrowed(&psv), ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfdidbrowse, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UpdateWindowList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateWindowList(this).into())
        }
        unsafe extern "system" fn UpdateBackForwardState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateBackForwardState(this).into())
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, dwflagmask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&dwflagmask)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CanNavigateNow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CanNavigateNow(this).into())
        }
        unsafe extern "system" fn GetPidl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPidl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetReferrer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReferrer(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn GetBrowserIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBrowserIndex(this))
        }
        unsafe extern "system" fn GetBrowserByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwid: u32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBrowserByIndex(this, ::core::mem::transmute_copy(&dwid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHistoryObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppole: *mut *mut ::core::ffi::c_void, pstm: *mut *mut ::core::ffi::c_void, ppbc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetHistoryObject(this, ::core::mem::transmute_copy(&ppole), ::core::mem::transmute_copy(&pstm), ::core::mem::transmute_copy(&ppbc)).into())
        }
        unsafe extern "system" fn SetHistoryObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pole: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHistoryObject(this, ::windows_core::from_raw_borrowed(&pole), ::core::mem::transmute_copy(&fislocalanchor)).into())
        }
        unsafe extern "system" fn CacheOLEServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pole: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CacheOLEServer(this, ::windows_core::from_raw_borrowed(&pole)).into())
        }
        unsafe extern "system" fn GetSetCodePage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarin: *const super::super::System::Variant::VARIANT, pvarout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSetCodePage(this, ::core::mem::transmute_copy(&pvarin)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnHttpEquiv<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, fdone: super::super::Foundation::BOOL, pvarargin: *const super::super::System::Variant::VARIANT, pvarargout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnHttpEquiv(this, ::windows_core::from_raw_borrowed(&psv), ::core::mem::transmute_copy(&fdone), ::core::mem::transmute_copy(&pvarargin)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarargout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPalette<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hpal: *mut super::super::Graphics::Gdi::HPALETTE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPalette(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hpal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fforceregister: super::super::Foundation::BOOL, swc: ShellWindowTypeConstants) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterWindow(this, ::core::mem::transmute_copy(&fforceregister), ::core::mem::transmute_copy(&swc)).into())
        }
        IBrowserService_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetParentSite: GetParentSite::<Identity, Impl, OFFSET>,
            SetTitle: SetTitle::<Identity, Impl, OFFSET>,
            GetTitle: GetTitle::<Identity, Impl, OFFSET>,
            GetOleObject: GetOleObject::<Identity, Impl, OFFSET>,
            GetTravelLog: GetTravelLog::<Identity, Impl, OFFSET>,
            ShowControlWindow: ShowControlWindow::<Identity, Impl, OFFSET>,
            IsControlWindowShown: IsControlWindowShown::<Identity, Impl, OFFSET>,
            IEGetDisplayName: IEGetDisplayName::<Identity, Impl, OFFSET>,
            IEParseDisplayName: IEParseDisplayName::<Identity, Impl, OFFSET>,
            DisplayParseError: DisplayParseError::<Identity, Impl, OFFSET>,
            NavigateToPidl: NavigateToPidl::<Identity, Impl, OFFSET>,
            SetNavigateState: SetNavigateState::<Identity, Impl, OFFSET>,
            GetNavigateState: GetNavigateState::<Identity, Impl, OFFSET>,
            NotifyRedirect: NotifyRedirect::<Identity, Impl, OFFSET>,
            UpdateWindowList: UpdateWindowList::<Identity, Impl, OFFSET>,
            UpdateBackForwardState: UpdateBackForwardState::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            CanNavigateNow: CanNavigateNow::<Identity, Impl, OFFSET>,
            GetPidl: GetPidl::<Identity, Impl, OFFSET>,
            SetReferrer: SetReferrer::<Identity, Impl, OFFSET>,
            GetBrowserIndex: GetBrowserIndex::<Identity, Impl, OFFSET>,
            GetBrowserByIndex: GetBrowserByIndex::<Identity, Impl, OFFSET>,
            GetHistoryObject: GetHistoryObject::<Identity, Impl, OFFSET>,
            SetHistoryObject: SetHistoryObject::<Identity, Impl, OFFSET>,
            CacheOLEServer: CacheOLEServer::<Identity, Impl, OFFSET>,
            GetSetCodePage: GetSetCodePage::<Identity, Impl, OFFSET>,
            OnHttpEquiv: OnHttpEquiv::<Identity, Impl, OFFSET>,
            GetPalette: GetPalette::<Identity, Impl, OFFSET>,
            RegisterWindow: RegisterWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IBrowserService2_Impl: ::windows_core::BaseImpl + IBrowserService_Impl {
    fn WndProcBS(this: &Self::This, hwnd: super::super::Foundation::HWND, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT;
    fn SetAsDefFolderSettings(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetViewRect(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::RECT>;
    fn OnSize(this: &Self::This, wparam: super::super::Foundation::WPARAM) -> ::windows_core::Result<()>;
    fn OnCreate(this: &Self::This, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows_core::Result<()>;
    fn OnCommand(this: &Self::This, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT;
    fn OnDestroy(this: &Self::This) -> ::windows_core::Result<()>;
    fn OnNotify(this: &Self::This, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT;
    fn OnSetFocus(this: &Self::This) -> ::windows_core::Result<()>;
    fn OnFrameWindowActivateBS(this: &Self::This, factive: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn ReleaseShellView(this: &Self::This) -> ::windows_core::Result<()>;
    fn ActivatePendingView(this: &Self::This) -> ::windows_core::Result<()>;
    fn CreateViewWindow(this: &Self::This, psvnew: ::core::option::Option<&IShellView>, psvold: ::core::option::Option<&IShellView>, prcview: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn CreateBrowserPropSheetExt(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetViewWindow(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn GetBaseBrowserData(this: &Self::This) -> ::windows_core::Result<*mut BASEBROWSERDATALH>;
    fn PutBaseBrowserData(this: &Self::This) -> *mut BASEBROWSERDATALH;
    fn InitializeTravelLog(this: &Self::This, ptl: ::core::option::Option<&ITravelLog>, dw: u32) -> ::windows_core::Result<()>;
    fn SetTopBrowser(this: &Self::This) -> ::windows_core::Result<()>;
    fn Offline(this: &Self::This, icmd: i32) -> ::windows_core::Result<()>;
    fn AllowViewResize(this: &Self::This, f: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetActivateState(this: &Self::This, u: u32) -> ::windows_core::Result<()>;
    fn UpdateSecureLockIcon(this: &Self::This, esecurelock: i32) -> ::windows_core::Result<()>;
    fn InitializeDownloadManager(this: &Self::This) -> ::windows_core::Result<()>;
    fn InitializeTransitionSite(this: &Self::This) -> ::windows_core::Result<()>;
    fn _Initialize(this: &Self::This, hwnd: super::super::Foundation::HWND, pauto: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn _CancelPendingNavigationAsync(this: &Self::This) -> ::windows_core::Result<()>;
    fn _CancelPendingView(this: &Self::This) -> ::windows_core::Result<()>;
    fn _MaySaveChanges(this: &Self::This) -> ::windows_core::Result<()>;
    fn _PauseOrResumeView(this: &Self::This, fpaused: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn _DisableModeless(this: &Self::This) -> ::windows_core::Result<()>;
    fn _NavigateToPidl2(this: &Self::This, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows_core::Result<()>;
    fn _TryShell2Rename(this: &Self::This, psv: ::core::option::Option<&IShellView>, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn _SwitchActivationNow(this: &Self::This) -> ::windows_core::Result<()>;
    fn _ExecChildren(this: &Self::This, punkbar: ::core::option::Option<&::windows_core::IUnknown>, fbroadcast: super::super::Foundation::BOOL, pguidcmdgroup: *const ::windows_core::GUID, ncmdid: u32, ncmdexecopt: u32, pvarargin: *const super::super::System::Variant::VARIANT, pvarargout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn _SendChildren(this: &Self::This, hwndbar: super::super::Foundation::HWND, fbroadcast: super::super::Foundation::BOOL, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
    fn GetFolderSetData(this: &Self::This, pfsd: *mut FOLDERSETDATA) -> ::windows_core::Result<()>;
    fn _OnFocusChange(this: &Self::This, itb: u32) -> ::windows_core::Result<()>;
    fn v_ShowHideChildWindows(this: &Self::This, fchildonly: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn _get_itbLastFocus(this: &Self::This) -> u32;
    fn _put_itbLastFocus(this: &Self::This, itblastfocus: u32) -> ::windows_core::Result<()>;
    fn _UIActivateView(this: &Self::This, ustate: u32) -> ::windows_core::Result<()>;
    fn _GetViewBorderRect(this: &Self::This, prc: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn _UpdateViewRectSize(this: &Self::This) -> ::windows_core::Result<()>;
    fn _ResizeNextBorder(this: &Self::This, itb: u32) -> ::windows_core::Result<()>;
    fn _ResizeView(this: &Self::This) -> ::windows_core::Result<()>;
    fn _GetEffectiveClientArea(this: &Self::This, lprectborder: *mut super::super::Foundation::RECT, hmon: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::Result<()>;
    fn v_GetViewStream(this: &Self::This, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: &::windows_core::PCWSTR) -> ::core::option::Option<super::super::System::Com::IStream>;
    fn ForwardViewMsg(this: &Self::This, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT;
    fn SetAcceleratorMenu(this: &Self::This, hacc: super::WindowsAndMessaging::HACCEL) -> ::windows_core::Result<()>;
    fn _GetToolbarCount(this: &Self::This) -> i32;
    fn _GetToolbarItem(this: &Self::This, itb: i32) -> *mut TOOLBARITEM;
    fn _SaveToolbars(this: &Self::This, pstm: ::core::option::Option<&super::super::System::Com::IStream>) -> ::windows_core::Result<()>;
    fn _LoadToolbars(this: &Self::This, pstm: ::core::option::Option<&super::super::System::Com::IStream>) -> ::windows_core::Result<()>;
    fn _CloseAndReleaseToolbars(this: &Self::This, fclose: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn v_MayGetNextToolbarFocus(this: &Self::This, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn _ResizeNextBorderHelper(this: &Self::This, itb: u32, busehmonitor: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn _FindTBar(this: &Self::This, punksrc: ::core::option::Option<&::windows_core::IUnknown>) -> u32;
    fn _SetFocus(this: &Self::This, ptbi: *const TOOLBARITEM, hwnd: super::super::Foundation::HWND, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
    fn v_MayTranslateAccelerator(this: &Self::This, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
    fn _GetBorderDWHelper(this: &Self::This, punksrc: ::core::option::Option<&::windows_core::IUnknown>, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn v_CheckZoneCrossing(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IBrowserService2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IBrowserService);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBrowserService2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn WndProcBS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WndProcBS(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)))
        }
        unsafe extern "system" fn SetAsDefFolderSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAsDefFolderSettings(this).into())
        }
        unsafe extern "system" fn GetViewRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetViewRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wparam: super::super::Foundation::WPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSize(this, ::core::mem::transmute_copy(&wparam)).into())
        }
        unsafe extern "system" fn OnCreate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcs: *const super::WindowsAndMessaging::CREATESTRUCTW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnCreate(this, ::core::mem::transmute_copy(&pcs)).into())
        }
        unsafe extern "system" fn OnCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnCommand(this, ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)))
        }
        unsafe extern "system" fn OnDestroy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDestroy(this).into())
        }
        unsafe extern "system" fn OnNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnm: *const super::Controls::NMHDR) -> super::super::Foundation::LRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNotify(this, ::core::mem::transmute_copy(&pnm)))
        }
        unsafe extern "system" fn OnSetFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSetFocus(this).into())
        }
        unsafe extern "system" fn OnFrameWindowActivateBS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, factive: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFrameWindowActivateBS(this, ::core::mem::transmute_copy(&factive)).into())
        }
        unsafe extern "system" fn ReleaseShellView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReleaseShellView(this).into())
        }
        unsafe extern "system" fn ActivatePendingView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivatePendingView(this).into())
        }
        unsafe extern "system" fn CreateViewWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psvnew: *mut ::core::ffi::c_void, psvold: *mut ::core::ffi::c_void, prcview: *const super::super::Foundation::RECT, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateViewWindow(this, ::windows_core::from_raw_borrowed(&psvnew), ::windows_core::from_raw_borrowed(&psvold), ::core::mem::transmute_copy(&prcview)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateBrowserPropSheetExt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateBrowserPropSheetExt(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetViewWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwndview: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetViewWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwndview, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBaseBrowserData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbbd: *mut *mut BASEBROWSERDATALH) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBaseBrowserData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbbd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PutBaseBrowserData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> *mut BASEBROWSERDATALH {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PutBaseBrowserData(this))
        }
        unsafe extern "system" fn InitializeTravelLog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptl: *mut ::core::ffi::c_void, dw: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeTravelLog(this, ::windows_core::from_raw_borrowed(&ptl), ::core::mem::transmute_copy(&dw)).into())
        }
        unsafe extern "system" fn SetTopBrowser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTopBrowser(this).into())
        }
        unsafe extern "system" fn Offline<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icmd: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Offline(this, ::core::mem::transmute_copy(&icmd)).into())
        }
        unsafe extern "system" fn AllowViewResize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, f: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AllowViewResize(this, ::core::mem::transmute_copy(&f)).into())
        }
        unsafe extern "system" fn SetActivateState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, u: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetActivateState(this, ::core::mem::transmute_copy(&u)).into())
        }
        unsafe extern "system" fn UpdateSecureLockIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, esecurelock: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateSecureLockIcon(this, ::core::mem::transmute_copy(&esecurelock)).into())
        }
        unsafe extern "system" fn InitializeDownloadManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDownloadManager(this).into())
        }
        unsafe extern "system" fn InitializeTransitionSite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeTransitionSite(this).into())
        }
        unsafe extern "system" fn _Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pauto: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_Initialize(this, ::core::mem::transmute_copy(&hwnd), ::windows_core::from_raw_borrowed(&pauto)).into())
        }
        unsafe extern "system" fn _CancelPendingNavigationAsync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_CancelPendingNavigationAsync(this).into())
        }
        unsafe extern "system" fn _CancelPendingView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_CancelPendingView(this).into())
        }
        unsafe extern "system" fn _MaySaveChanges<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_MaySaveChanges(this).into())
        }
        unsafe extern "system" fn _PauseOrResumeView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fpaused: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_PauseOrResumeView(this, ::core::mem::transmute_copy(&fpaused)).into())
        }
        unsafe extern "system" fn _DisableModeless<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_DisableModeless(this).into())
        }
        unsafe extern "system" fn _NavigateToPidl2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, grfhlnf: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_NavigateToPidl2(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&grfhlnf), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn _TryShell2Rename<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_TryShell2Rename(this, ::windows_core::from_raw_borrowed(&psv), ::core::mem::transmute_copy(&pidlnew)).into())
        }
        unsafe extern "system" fn _SwitchActivationNow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_SwitchActivationNow(this).into())
        }
        unsafe extern "system" fn _ExecChildren<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkbar: *mut ::core::ffi::c_void, fbroadcast: super::super::Foundation::BOOL, pguidcmdgroup: *const ::windows_core::GUID, ncmdid: u32, ncmdexecopt: u32, pvarargin: *const super::super::System::Variant::VARIANT, pvarargout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_ExecChildren(this, ::windows_core::from_raw_borrowed(&punkbar), ::core::mem::transmute_copy(&fbroadcast), ::core::mem::transmute_copy(&pguidcmdgroup), ::core::mem::transmute_copy(&ncmdid), ::core::mem::transmute_copy(&ncmdexecopt), ::core::mem::transmute_copy(&pvarargin), ::core::mem::transmute_copy(&pvarargout)).into())
        }
        unsafe extern "system" fn _SendChildren<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndbar: super::super::Foundation::HWND, fbroadcast: super::super::Foundation::BOOL, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_SendChildren(this, ::core::mem::transmute_copy(&hwndbar), ::core::mem::transmute_copy(&fbroadcast), ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)).into())
        }
        unsafe extern "system" fn GetFolderSetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfsd: *mut FOLDERSETDATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolderSetData(this, ::core::mem::transmute_copy(&pfsd)).into())
        }
        unsafe extern "system" fn _OnFocusChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itb: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_OnFocusChange(this, ::core::mem::transmute_copy(&itb)).into())
        }
        unsafe extern "system" fn v_ShowHideChildWindows<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchildonly: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::v_ShowHideChildWindows(this, ::core::mem::transmute_copy(&fchildonly)).into())
        }
        unsafe extern "system" fn _get_itbLastFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_get_itbLastFocus(this))
        }
        unsafe extern "system" fn _put_itbLastFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itblastfocus: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_put_itbLastFocus(this, ::core::mem::transmute_copy(&itblastfocus)).into())
        }
        unsafe extern "system" fn _UIActivateView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ustate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_UIActivateView(this, ::core::mem::transmute_copy(&ustate)).into())
        }
        unsafe extern "system" fn _GetViewBorderRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_GetViewBorderRect(this, ::core::mem::transmute_copy(&prc)).into())
        }
        unsafe extern "system" fn _UpdateViewRectSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_UpdateViewRectSize(this).into())
        }
        unsafe extern "system" fn _ResizeNextBorder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itb: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_ResizeNextBorder(this, ::core::mem::transmute_copy(&itb)).into())
        }
        unsafe extern "system" fn _ResizeView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_ResizeView(this).into())
        }
        unsafe extern "system" fn _GetEffectiveClientArea<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lprectborder: *mut super::super::Foundation::RECT, hmon: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_GetEffectiveClientArea(this, ::core::mem::transmute_copy(&lprectborder), ::core::mem::transmute_copy(&hmon)).into())
        }
        unsafe extern "system" fn v_GetViewStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *mut Common::ITEMIDLIST, grfmode: u32, pwszname: ::windows_core::PCWSTR) -> ::core::option::Option<super::super::System::Com::IStream> {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::v_GetViewStream(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&grfmode), ::core::mem::transmute(&pwszname)))
        }
        unsafe extern "system" fn ForwardViewMsg<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> super::super::Foundation::LRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ForwardViewMsg(this, ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)))
        }
        unsafe extern "system" fn SetAcceleratorMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hacc: super::WindowsAndMessaging::HACCEL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAcceleratorMenu(this, ::core::mem::transmute_copy(&hacc)).into())
        }
        unsafe extern "system" fn _GetToolbarCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> i32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_GetToolbarCount(this))
        }
        unsafe extern "system" fn _GetToolbarItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itb: i32) -> *mut TOOLBARITEM {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_GetToolbarItem(this, ::core::mem::transmute_copy(&itb)))
        }
        unsafe extern "system" fn _SaveToolbars<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstm: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_SaveToolbars(this, ::windows_core::from_raw_borrowed(&pstm)).into())
        }
        unsafe extern "system" fn _LoadToolbars<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstm: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_LoadToolbars(this, ::windows_core::from_raw_borrowed(&pstm)).into())
        }
        unsafe extern "system" fn _CloseAndReleaseToolbars<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fclose: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_CloseAndReleaseToolbars(this, ::core::mem::transmute_copy(&fclose)).into())
        }
        unsafe extern "system" fn v_MayGetNextToolbarFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpmsg: *const super::WindowsAndMessaging::MSG, itbnext: u32, citb: i32, pptbi: *mut *mut TOOLBARITEM, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::v_MayGetNextToolbarFocus(this, ::core::mem::transmute_copy(&lpmsg), ::core::mem::transmute_copy(&itbnext), ::core::mem::transmute_copy(&citb), ::core::mem::transmute_copy(&pptbi), ::core::mem::transmute_copy(&phwnd)).into())
        }
        unsafe extern "system" fn _ResizeNextBorderHelper<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itb: u32, busehmonitor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_ResizeNextBorderHelper(this, ::core::mem::transmute_copy(&itb), ::core::mem::transmute_copy(&busehmonitor)).into())
        }
        unsafe extern "system" fn _FindTBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_FindTBar(this, ::windows_core::from_raw_borrowed(&punksrc)))
        }
        unsafe extern "system" fn _SetFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptbi: *const TOOLBARITEM, hwnd: super::super::Foundation::HWND, lpmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_SetFocus(this, ::core::mem::transmute_copy(&ptbi), ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&lpmsg)).into())
        }
        unsafe extern "system" fn v_MayTranslateAccelerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *mut super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::v_MayTranslateAccelerator(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        unsafe extern "system" fn _GetBorderDWHelper<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, lprectborder: *mut super::super::Foundation::RECT, busehmonitor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_GetBorderDWHelper(this, ::windows_core::from_raw_borrowed(&punksrc), ::core::mem::transmute_copy(&lprectborder), ::core::mem::transmute_copy(&busehmonitor)).into())
        }
        unsafe extern "system" fn v_CheckZoneCrossing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::v_CheckZoneCrossing(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        IBrowserService2_Vtbl {
            base__: <IBrowserService as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            WndProcBS: WndProcBS::<Identity, Impl, OFFSET>,
            SetAsDefFolderSettings: SetAsDefFolderSettings::<Identity, Impl, OFFSET>,
            GetViewRect: GetViewRect::<Identity, Impl, OFFSET>,
            OnSize: OnSize::<Identity, Impl, OFFSET>,
            OnCreate: OnCreate::<Identity, Impl, OFFSET>,
            OnCommand: OnCommand::<Identity, Impl, OFFSET>,
            OnDestroy: OnDestroy::<Identity, Impl, OFFSET>,
            OnNotify: OnNotify::<Identity, Impl, OFFSET>,
            OnSetFocus: OnSetFocus::<Identity, Impl, OFFSET>,
            OnFrameWindowActivateBS: OnFrameWindowActivateBS::<Identity, Impl, OFFSET>,
            ReleaseShellView: ReleaseShellView::<Identity, Impl, OFFSET>,
            ActivatePendingView: ActivatePendingView::<Identity, Impl, OFFSET>,
            CreateViewWindow: CreateViewWindow::<Identity, Impl, OFFSET>,
            CreateBrowserPropSheetExt: CreateBrowserPropSheetExt::<Identity, Impl, OFFSET>,
            GetViewWindow: GetViewWindow::<Identity, Impl, OFFSET>,
            GetBaseBrowserData: GetBaseBrowserData::<Identity, Impl, OFFSET>,
            PutBaseBrowserData: PutBaseBrowserData::<Identity, Impl, OFFSET>,
            InitializeTravelLog: InitializeTravelLog::<Identity, Impl, OFFSET>,
            SetTopBrowser: SetTopBrowser::<Identity, Impl, OFFSET>,
            Offline: Offline::<Identity, Impl, OFFSET>,
            AllowViewResize: AllowViewResize::<Identity, Impl, OFFSET>,
            SetActivateState: SetActivateState::<Identity, Impl, OFFSET>,
            UpdateSecureLockIcon: UpdateSecureLockIcon::<Identity, Impl, OFFSET>,
            InitializeDownloadManager: InitializeDownloadManager::<Identity, Impl, OFFSET>,
            InitializeTransitionSite: InitializeTransitionSite::<Identity, Impl, OFFSET>,
            _Initialize: _Initialize::<Identity, Impl, OFFSET>,
            _CancelPendingNavigationAsync: _CancelPendingNavigationAsync::<Identity, Impl, OFFSET>,
            _CancelPendingView: _CancelPendingView::<Identity, Impl, OFFSET>,
            _MaySaveChanges: _MaySaveChanges::<Identity, Impl, OFFSET>,
            _PauseOrResumeView: _PauseOrResumeView::<Identity, Impl, OFFSET>,
            _DisableModeless: _DisableModeless::<Identity, Impl, OFFSET>,
            _NavigateToPidl2: _NavigateToPidl2::<Identity, Impl, OFFSET>,
            _TryShell2Rename: _TryShell2Rename::<Identity, Impl, OFFSET>,
            _SwitchActivationNow: _SwitchActivationNow::<Identity, Impl, OFFSET>,
            _ExecChildren: _ExecChildren::<Identity, Impl, OFFSET>,
            _SendChildren: _SendChildren::<Identity, Impl, OFFSET>,
            GetFolderSetData: GetFolderSetData::<Identity, Impl, OFFSET>,
            _OnFocusChange: _OnFocusChange::<Identity, Impl, OFFSET>,
            v_ShowHideChildWindows: v_ShowHideChildWindows::<Identity, Impl, OFFSET>,
            _get_itbLastFocus: _get_itbLastFocus::<Identity, Impl, OFFSET>,
            _put_itbLastFocus: _put_itbLastFocus::<Identity, Impl, OFFSET>,
            _UIActivateView: _UIActivateView::<Identity, Impl, OFFSET>,
            _GetViewBorderRect: _GetViewBorderRect::<Identity, Impl, OFFSET>,
            _UpdateViewRectSize: _UpdateViewRectSize::<Identity, Impl, OFFSET>,
            _ResizeNextBorder: _ResizeNextBorder::<Identity, Impl, OFFSET>,
            _ResizeView: _ResizeView::<Identity, Impl, OFFSET>,
            _GetEffectiveClientArea: _GetEffectiveClientArea::<Identity, Impl, OFFSET>,
            v_GetViewStream: v_GetViewStream::<Identity, Impl, OFFSET>,
            ForwardViewMsg: ForwardViewMsg::<Identity, Impl, OFFSET>,
            SetAcceleratorMenu: SetAcceleratorMenu::<Identity, Impl, OFFSET>,
            _GetToolbarCount: _GetToolbarCount::<Identity, Impl, OFFSET>,
            _GetToolbarItem: _GetToolbarItem::<Identity, Impl, OFFSET>,
            _SaveToolbars: _SaveToolbars::<Identity, Impl, OFFSET>,
            _LoadToolbars: _LoadToolbars::<Identity, Impl, OFFSET>,
            _CloseAndReleaseToolbars: _CloseAndReleaseToolbars::<Identity, Impl, OFFSET>,
            v_MayGetNextToolbarFocus: v_MayGetNextToolbarFocus::<Identity, Impl, OFFSET>,
            _ResizeNextBorderHelper: _ResizeNextBorderHelper::<Identity, Impl, OFFSET>,
            _FindTBar: _FindTBar::<Identity, Impl, OFFSET>,
            _SetFocus: _SetFocus::<Identity, Impl, OFFSET>,
            v_MayTranslateAccelerator: v_MayTranslateAccelerator::<Identity, Impl, OFFSET>,
            _GetBorderDWHelper: _GetBorderDWHelper::<Identity, Impl, OFFSET>,
            v_CheckZoneCrossing: v_CheckZoneCrossing::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IBrowserService3_Impl: ::windows_core::BaseImpl + IBrowserService2_Impl {
    fn _PositionViewWindow(this: &Self::This, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn IEParseDisplayNameEx(this: &Self::This, uicp: u32, pwszpath: &::windows_core::PCWSTR, dwflags: u32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IBrowserService3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IBrowserService2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBrowserService3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn _PositionViewWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_PositionViewWindow(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&prc)).into())
        }
        unsafe extern "system" fn IEParseDisplayNameEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uicp: u32, pwszpath: ::windows_core::PCWSTR, dwflags: u32, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IEParseDisplayNameEx(this, ::core::mem::transmute_copy(&uicp), ::core::mem::transmute(&pwszpath), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidlout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBrowserService3_Vtbl {
            base__: <IBrowserService2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            _PositionViewWindow: _PositionViewWindow::<Identity, Impl, OFFSET>,
            IEParseDisplayNameEx: IEParseDisplayNameEx::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IBrowserService4_Impl: ::windows_core::BaseImpl + IBrowserService3_Impl {
    fn ActivateView(this: &Self::This, fpendingview: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SaveViewState(this: &Self::This) -> ::windows_core::Result<()>;
    fn _ResizeAllBorders(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IBrowserService4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IBrowserService3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBrowserService4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ActivateView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fpendingview: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateView(this, ::core::mem::transmute_copy(&fpendingview)).into())
        }
        unsafe extern "system" fn SaveViewState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveViewState(this).into())
        }
        unsafe extern "system" fn _ResizeAllBorders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBrowserService4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_ResizeAllBorders(this).into())
        }
        IBrowserService4_Vtbl {
            base__: <IBrowserService3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ActivateView: ActivateView::<Identity, Impl, OFFSET>,
            SaveViewState: SaveViewState::<Identity, Impl, OFFSET>,
            _ResizeAllBorders: _ResizeAllBorders::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ICDBurn_Impl: ::windows_core::BaseImpl {
    fn GetRecorderDriveLetter(this: &Self::This, pszdrive: ::windows_core::PWSTR, cch: u32) -> ::windows_core::Result<()>;
    fn Burn(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn HasRecordableDrive(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ICDBurn {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICDBurn_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICDBurn {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRecorderDriveLetter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICDBurn_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdrive: ::windows_core::PWSTR, cch: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecorderDriveLetter(this, ::core::mem::transmute_copy(&pszdrive), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn Burn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICDBurn_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Burn(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn HasRecordableDrive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICDBurn_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfhasrecorder: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HasRecordableDrive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfhasrecorder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICDBurn_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRecorderDriveLetter: GetRecorderDriveLetter::<Identity, Impl, OFFSET>,
            Burn: Burn::<Identity, Impl, OFFSET>,
            HasRecordableDrive: HasRecordableDrive::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICDBurnExt_Impl: ::windows_core::BaseImpl {
    fn GetSupportedActionTypes(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for ICDBurnExt {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICDBurnExt_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICDBurnExt {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSupportedActionTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICDBurnExt_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwactions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSupportedActionTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwactions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICDBurnExt_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSupportedActionTypes: GetSupportedActionTypes::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait ICategorizer_Impl: ::windows_core::BaseImpl {
    fn GetDescription(this: &Self::This, pszdesc: ::windows_core::PWSTR, cch: u32) -> ::windows_core::Result<()>;
    fn GetCategory(this: &Self::This, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgcategoryids: *mut u32) -> ::windows_core::Result<()>;
    fn GetCategoryInfo(this: &Self::This, dwcategoryid: u32, pci: *mut CATEGORY_INFO) -> ::windows_core::Result<()>;
    fn CompareCategory(this: &Self::This, csfflags: CATSORT_FLAGS, dwcategoryid1: u32, dwcategoryid2: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for ICategorizer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategorizer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICategorizer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategorizer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdesc: ::windows_core::PWSTR, cch: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&pszdesc), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn GetCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategorizer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgcategoryids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCategory(this, ::core::mem::transmute_copy(&cidl), ::core::mem::transmute_copy(&apidl), ::core::mem::transmute_copy(&rgcategoryids)).into())
        }
        unsafe extern "system" fn GetCategoryInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategorizer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcategoryid: u32, pci: *mut CATEGORY_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCategoryInfo(this, ::core::mem::transmute_copy(&dwcategoryid), ::core::mem::transmute_copy(&pci)).into())
        }
        unsafe extern "system" fn CompareCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategorizer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, csfflags: CATSORT_FLAGS, dwcategoryid1: u32, dwcategoryid2: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CompareCategory(this, ::core::mem::transmute_copy(&csfflags), ::core::mem::transmute_copy(&dwcategoryid1), ::core::mem::transmute_copy(&dwcategoryid2)).into())
        }
        ICategorizer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            GetCategory: GetCategory::<Identity, Impl, OFFSET>,
            GetCategoryInfo: GetCategoryInfo::<Identity, Impl, OFFSET>,
            CompareCategory: CompareCategory::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait ICategoryProvider_Impl: ::windows_core::BaseImpl {
    fn CanCategorizeOnSCID(this: &Self::This, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn GetDefaultCategory(this: &Self::This, pguid: *mut ::windows_core::GUID, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn GetCategoryForSCID(this: &Self::This, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::GUID>;
    fn EnumCategories(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IEnumGUID>;
    fn GetCategoryName(this: &Self::This, pguid: *const ::windows_core::GUID, pszname: ::windows_core::PWSTR, cch: u32) -> ::windows_core::Result<()>;
    fn CreateCategory(this: &Self::This, pguid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for ICategoryProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICategoryProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CanCategorizeOnSCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CanCategorizeOnSCID(this, ::core::mem::transmute_copy(&pscid)).into())
        }
        unsafe extern "system" fn GetDefaultCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDefaultCategory(this, ::core::mem::transmute_copy(&pguid), ::core::mem::transmute_copy(&pscid)).into())
        }
        unsafe extern "system" fn GetCategoryForSCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCategoryForSCID(this, ::core::mem::transmute_copy(&pscid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumCategories<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, penum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumCategories(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(penum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCategoryName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows_core::GUID, pszname: ::windows_core::PWSTR, cch: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCategoryName(this, ::core::mem::transmute_copy(&pguid), ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn CreateCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICategoryProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateCategory(this, ::core::mem::transmute_copy(&pguid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        ICategoryProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CanCategorizeOnSCID: CanCategorizeOnSCID::<Identity, Impl, OFFSET>,
            GetDefaultCategory: GetDefaultCategory::<Identity, Impl, OFFSET>,
            GetCategoryForSCID: GetCategoryForSCID::<Identity, Impl, OFFSET>,
            EnumCategories: EnumCategories::<Identity, Impl, OFFSET>,
            GetCategoryName: GetCategoryName::<Identity, Impl, OFFSET>,
            CreateCategory: CreateCategory::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IColumnManager_Impl: ::windows_core::BaseImpl {
    fn SetColumnInfo(this: &Self::This, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *const CM_COLUMNINFO) -> ::windows_core::Result<()>;
    fn GetColumnInfo(this: &Self::This, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *mut CM_COLUMNINFO) -> ::windows_core::Result<()>;
    fn GetColumnCount(this: &Self::This, dwflags: CM_ENUM_FLAGS) -> ::windows_core::Result<u32>;
    fn GetColumns(this: &Self::This, dwflags: CM_ENUM_FLAGS, rgkeyorder: *mut PropertiesSystem::PROPERTYKEY, ccolumns: u32) -> ::windows_core::Result<()>;
    fn SetColumns(this: &Self::This, rgkeyorder: *const PropertiesSystem::PROPERTYKEY, cvisible: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IColumnManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IColumnManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetColumnInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *const CM_COLUMNINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColumnInfo(this, ::core::mem::transmute_copy(&propkey), ::core::mem::transmute_copy(&pcmci)).into())
        }
        unsafe extern "system" fn GetColumnInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, pcmci: *mut CM_COLUMNINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetColumnInfo(this, ::core::mem::transmute_copy(&propkey), ::core::mem::transmute_copy(&pcmci)).into())
        }
        unsafe extern "system" fn GetColumnCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: CM_ENUM_FLAGS, pucount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetColumnCount(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pucount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: CM_ENUM_FLAGS, rgkeyorder: *mut PropertiesSystem::PROPERTYKEY, ccolumns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetColumns(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&rgkeyorder), ::core::mem::transmute_copy(&ccolumns)).into())
        }
        unsafe extern "system" fn SetColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rgkeyorder: *const PropertiesSystem::PROPERTYKEY, cvisible: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColumns(this, ::core::mem::transmute_copy(&rgkeyorder), ::core::mem::transmute_copy(&cvisible)).into())
        }
        IColumnManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetColumnInfo: SetColumnInfo::<Identity, Impl, OFFSET>,
            GetColumnInfo: GetColumnInfo::<Identity, Impl, OFFSET>,
            GetColumnCount: GetColumnCount::<Identity, Impl, OFFSET>,
            GetColumns: GetColumns::<Identity, Impl, OFFSET>,
            SetColumns: SetColumns::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IColumnProvider_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psci: *const SHCOLUMNINIT) -> ::windows_core::Result<()>;
    fn GetColumnInfo(this: &Self::This, dwindex: u32, psci: *mut SHCOLUMNINFO) -> ::windows_core::Result<()>;
    fn GetItemData(this: &Self::This, pscid: *const PropertiesSystem::PROPERTYKEY, pscd: *const SHCOLUMNDATA) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IColumnProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IColumnProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psci: *const SHCOLUMNINIT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&psci)).into())
        }
        unsafe extern "system" fn GetColumnInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, psci: *mut SHCOLUMNINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetColumnInfo(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&psci)).into())
        }
        unsafe extern "system" fn GetItemData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IColumnProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pscid: *const PropertiesSystem::PROPERTYKEY, pscd: *const SHCOLUMNDATA, pvardata: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemData(this, ::core::mem::transmute_copy(&pscid), ::core::mem::transmute_copy(&pscd)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvardata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IColumnProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetColumnInfo: GetColumnInfo::<Identity, Impl, OFFSET>,
            GetItemData: GetItemData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
pub trait ICommDlgBrowser_Impl: ::windows_core::BaseImpl {
    fn OnDefaultCommand(this: &Self::This, ppshv: ::core::option::Option<&IShellView>) -> ::windows_core::Result<()>;
    fn OnStateChange(this: &Self::This, ppshv: ::core::option::Option<&IShellView>, uchange: u32) -> ::windows_core::Result<()>;
    fn IncludeObject(this: &Self::This, ppshv: ::core::option::Option<&IShellView>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for ICommDlgBrowser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICommDlgBrowser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnDefaultCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDefaultCommand(this, ::windows_core::from_raw_borrowed(&ppshv)).into())
        }
        unsafe extern "system" fn OnStateChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, uchange: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnStateChange(this, ::windows_core::from_raw_borrowed(&ppshv), ::core::mem::transmute_copy(&uchange)).into())
        }
        unsafe extern "system" fn IncludeObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IncludeObject(this, ::windows_core::from_raw_borrowed(&ppshv), ::core::mem::transmute_copy(&pidl)).into())
        }
        ICommDlgBrowser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnDefaultCommand: OnDefaultCommand::<Identity, Impl, OFFSET>,
            OnStateChange: OnStateChange::<Identity, Impl, OFFSET>,
            IncludeObject: IncludeObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
pub trait ICommDlgBrowser2_Impl: ::windows_core::BaseImpl + ICommDlgBrowser_Impl {
    fn Notify(this: &Self::This, ppshv: ::core::option::Option<&IShellView>, dwnotifytype: u32) -> ::windows_core::Result<()>;
    fn GetDefaultMenuText(this: &Self::This, ppshv: ::core::option::Option<&IShellView>, psztext: ::windows_core::PWSTR, cchmax: i32) -> ::windows_core::Result<()>;
    fn GetViewFlags(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for ICommDlgBrowser2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICommDlgBrowser);
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICommDlgBrowser2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Notify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, dwnotifytype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Notify(this, ::windows_core::from_raw_borrowed(&ppshv), ::core::mem::transmute_copy(&dwnotifytype)).into())
        }
        unsafe extern "system" fn GetDefaultMenuText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, psztext: ::windows_core::PWSTR, cchmax: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDefaultMenuText(this, ::windows_core::from_raw_borrowed(&ppshv), ::core::mem::transmute_copy(&psztext), ::core::mem::transmute_copy(&cchmax)).into())
        }
        unsafe extern "system" fn GetViewFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetViewFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICommDlgBrowser2_Vtbl {
            base__: <ICommDlgBrowser as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Notify: Notify::<Identity, Impl, OFFSET>,
            GetDefaultMenuText: GetDefaultMenuText::<Identity, Impl, OFFSET>,
            GetViewFlags: GetViewFlags::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
pub trait ICommDlgBrowser3_Impl: ::windows_core::BaseImpl + ICommDlgBrowser2_Impl {
    fn OnColumnClicked(this: &Self::This, ppshv: ::core::option::Option<&IShellView>, icolumn: i32) -> ::windows_core::Result<()>;
    fn GetCurrentFilter(this: &Self::This, pszfilespec: ::windows_core::PWSTR, cchfilespec: i32) -> ::windows_core::Result<()>;
    fn OnPreViewCreated(this: &Self::This, ppshv: ::core::option::Option<&IShellView>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for ICommDlgBrowser3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICommDlgBrowser2);
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICommDlgBrowser3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnColumnClicked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void, icolumn: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnColumnClicked(this, ::windows_core::from_raw_borrowed(&ppshv), ::core::mem::transmute_copy(&icolumn)).into())
        }
        unsafe extern "system" fn GetCurrentFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfilespec: ::windows_core::PWSTR, cchfilespec: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentFilter(this, ::core::mem::transmute_copy(&pszfilespec), ::core::mem::transmute_copy(&cchfilespec)).into())
        }
        unsafe extern "system" fn OnPreViewCreated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICommDlgBrowser3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnPreViewCreated(this, ::windows_core::from_raw_borrowed(&ppshv)).into())
        }
        ICommDlgBrowser3_Vtbl {
            base__: <ICommDlgBrowser2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnColumnClicked: OnColumnClicked::<Identity, Impl, OFFSET>,
            GetCurrentFilter: GetCurrentFilter::<Identity, Impl, OFFSET>,
            OnPreViewCreated: OnPreViewCreated::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IComputerInfoChangeNotify_Impl: ::windows_core::BaseImpl {
    fn ComputerInfoChanged(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IComputerInfoChangeNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComputerInfoChangeNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComputerInfoChangeNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ComputerInfoChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComputerInfoChangeNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ComputerInfoChanged(this).into())
        }
        IComputerInfoChangeNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ComputerInfoChanged: ComputerInfoChanged::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IConnectableCredentialProviderCredential_Impl: ::windows_core::BaseImpl + ICredentialProviderCredential_Impl {
    fn Connect(this: &Self::This, pqcws: ::core::option::Option<&IQueryContinueWithStatus>) -> ::windows_core::Result<()>;
    fn Disconnect(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IConnectableCredentialProviderCredential {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICredentialProviderCredential);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IConnectableCredentialProviderCredential_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IConnectableCredentialProviderCredential {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Connect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IConnectableCredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqcws: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Connect(this, ::windows_core::from_raw_borrowed(&pqcws)).into())
        }
        unsafe extern "system" fn Disconnect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IConnectableCredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disconnect(this).into())
        }
        IConnectableCredentialProviderCredential_Vtbl {
            base__: <ICredentialProviderCredential as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Connect: Connect::<Identity, Impl, OFFSET>,
            Disconnect: Disconnect::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IContactManagerInterop_Impl: ::windows_core::BaseImpl {
    fn ShowContactCardForWindow(this: &Self::This, appwindow: super::super::Foundation::HWND, contact: ::core::option::Option<&::windows_core::IUnknown>, selection: *const super::super::Foundation::RECT, preferredplacement: FLYOUT_PLACEMENT) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IContactManagerInterop {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContactManagerInterop_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IContactManagerInterop {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShowContactCardForWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContactManagerInterop_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND, contact: *mut ::core::ffi::c_void, selection: *const super::super::Foundation::RECT, preferredplacement: FLYOUT_PLACEMENT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowContactCardForWindow(this, ::core::mem::transmute_copy(&appwindow), ::windows_core::from_raw_borrowed(&contact), ::core::mem::transmute_copy(&selection), ::core::mem::transmute_copy(&preferredplacement)).into())
        }
        IContactManagerInterop_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShowContactCardForWindow: ShowContactCardForWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IContextMenu_Impl: ::windows_core::BaseImpl {
    fn QueryContextMenu(this: &Self::This, hmenu: super::WindowsAndMessaging::HMENU, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows_core::Result<()>;
    fn InvokeCommand(this: &Self::This, pici: *const CMINVOKECOMMANDINFO) -> ::windows_core::Result<()>;
    fn GetCommandString(this: &Self::This, idcmd: usize, utype: u32, preserved: *const u32, pszname: ::windows_core::PSTR, cchmax: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IContextMenu {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IContextMenu {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryContextMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, indexmenu: u32, idcmdfirst: u32, idcmdlast: u32, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryContextMenu(this, ::core::mem::transmute_copy(&hmenu), ::core::mem::transmute_copy(&indexmenu), ::core::mem::transmute_copy(&idcmdfirst), ::core::mem::transmute_copy(&idcmdlast), ::core::mem::transmute_copy(&uflags)).into())
        }
        unsafe extern "system" fn InvokeCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pici: *const CMINVOKECOMMANDINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeCommand(this, ::core::mem::transmute_copy(&pici)).into())
        }
        unsafe extern "system" fn GetCommandString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idcmd: usize, utype: u32, preserved: *const u32, pszname: ::windows_core::PSTR, cchmax: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommandString(this, ::core::mem::transmute_copy(&idcmd), ::core::mem::transmute_copy(&utype), ::core::mem::transmute_copy(&preserved), ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cchmax)).into())
        }
        IContextMenu_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            QueryContextMenu: QueryContextMenu::<Identity, Impl, OFFSET>,
            InvokeCommand: InvokeCommand::<Identity, Impl, OFFSET>,
            GetCommandString: GetCommandString::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IContextMenu2_Impl: ::windows_core::BaseImpl + IContextMenu_Impl {
    fn HandleMenuMsg(this: &Self::This, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IContextMenu2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IContextMenu);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IContextMenu2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn HandleMenuMsg<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HandleMenuMsg(this, ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)).into())
        }
        IContextMenu2_Vtbl { base__: <IContextMenu as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, HandleMenuMsg: HandleMenuMsg::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IContextMenu3_Impl: ::windows_core::BaseImpl + IContextMenu2_Impl {
    fn HandleMenuMsg2(this: &Self::This, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, plresult: *mut super::super::Foundation::LRESULT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IContextMenu3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IContextMenu2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IContextMenu3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn HandleMenuMsg2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenu3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, plresult: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HandleMenuMsg2(this, ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam), ::core::mem::transmute_copy(&plresult)).into())
        }
        IContextMenu3_Vtbl { base__: <IContextMenu2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, HandleMenuMsg2: HandleMenuMsg2::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IContextMenuCB_Impl: ::windows_core::BaseImpl {
    fn CallBack(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, hwndowner: super::super::Foundation::HWND, pdtobj: ::core::option::Option<&super::super::System::Com::IDataObject>, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IContextMenuCB {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenuCB_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IContextMenuCB {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CallBack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenuCB_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, pdtobj: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallBack(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&hwndowner), ::windows_core::from_raw_borrowed(&pdtobj), ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)).into())
        }
        IContextMenuCB_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CallBack: CallBack::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IContextMenuSite_Impl: ::windows_core::BaseImpl {
    fn DoContextMenuPopup(this: &Self::This, punkcontextmenu: ::core::option::Option<&::windows_core::IUnknown>, fflags: u32, pt: &super::super::Foundation::POINT) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IContextMenuSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenuSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IContextMenuSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DoContextMenuPopup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IContextMenuSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkcontextmenu: *mut ::core::ffi::c_void, fflags: u32, pt: super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DoContextMenuPopup(this, ::windows_core::from_raw_borrowed(&punkcontextmenu), ::core::mem::transmute_copy(&fflags), ::core::mem::transmute(&pt)).into())
        }
        IContextMenuSite_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DoContextMenuPopup: DoContextMenuPopup::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ICopyHookA_Impl: ::windows_core::BaseImpl {
    fn CopyCallback(this: &Self::This, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: &::windows_core::PCSTR, dwsrcattribs: u32, pszdestfile: &::windows_core::PCSTR, dwdestattribs: u32) -> u32;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ICopyHookA {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICopyHookA_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICopyHookA {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CopyCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICopyHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: ::windows_core::PCSTR, dwsrcattribs: u32, pszdestfile: ::windows_core::PCSTR, dwdestattribs: u32) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyCallback(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&wfunc), ::core::mem::transmute_copy(&wflags), ::core::mem::transmute(&pszsrcfile), ::core::mem::transmute_copy(&dwsrcattribs), ::core::mem::transmute(&pszdestfile), ::core::mem::transmute_copy(&dwdestattribs)))
        }
        ICopyHookA_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CopyCallback: CopyCallback::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ICopyHookW_Impl: ::windows_core::BaseImpl {
    fn CopyCallback(this: &Self::This, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: &::windows_core::PCWSTR, dwsrcattribs: u32, pszdestfile: &::windows_core::PCWSTR, dwdestattribs: u32) -> u32;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ICopyHookW {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICopyHookW_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICopyHookW {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CopyCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICopyHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, wfunc: u32, wflags: u32, pszsrcfile: ::windows_core::PCWSTR, dwsrcattribs: u32, pszdestfile: ::windows_core::PCWSTR, dwdestattribs: u32) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyCallback(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&wfunc), ::core::mem::transmute_copy(&wflags), ::core::mem::transmute(&pszsrcfile), ::core::mem::transmute_copy(&dwsrcattribs), ::core::mem::transmute(&pszdestfile), ::core::mem::transmute_copy(&dwdestattribs)))
        }
        ICopyHookW_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CopyCallback: CopyCallback::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICreateProcessInputs_Impl: ::windows_core::BaseImpl {
    fn GetCreateFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCreateFlags(this: &Self::This, dwcreationflags: u32) -> ::windows_core::Result<()>;
    fn AddCreateFlags(this: &Self::This, dwcreationflags: u32) -> ::windows_core::Result<()>;
    fn SetHotKey(this: &Self::This, whotkey: u16) -> ::windows_core::Result<()>;
    fn AddStartupFlags(this: &Self::This, dwstartupinfoflags: u32) -> ::windows_core::Result<()>;
    fn SetTitle(this: &Self::This, psztitle: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetEnvironmentVariable(this: &Self::This, pszname: &::windows_core::PCWSTR, pszvalue: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICreateProcessInputs {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICreateProcessInputs {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCreateFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcreationflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCreateFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcreationflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCreateFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcreationflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCreateFlags(this, ::core::mem::transmute_copy(&dwcreationflags)).into())
        }
        unsafe extern "system" fn AddCreateFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcreationflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddCreateFlags(this, ::core::mem::transmute_copy(&dwcreationflags)).into())
        }
        unsafe extern "system" fn SetHotKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHotKey(this, ::core::mem::transmute_copy(&whotkey)).into())
        }
        unsafe extern "system" fn AddStartupFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstartupinfoflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStartupFlags(this, ::core::mem::transmute_copy(&dwstartupinfoflags)).into())
        }
        unsafe extern "system" fn SetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTitle(this, ::core::mem::transmute(&psztitle)).into())
        }
        unsafe extern "system" fn SetEnvironmentVariable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreateProcessInputs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pszvalue: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnvironmentVariable(this, ::core::mem::transmute(&pszname), ::core::mem::transmute(&pszvalue)).into())
        }
        ICreateProcessInputs_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCreateFlags: GetCreateFlags::<Identity, Impl, OFFSET>,
            SetCreateFlags: SetCreateFlags::<Identity, Impl, OFFSET>,
            AddCreateFlags: AddCreateFlags::<Identity, Impl, OFFSET>,
            SetHotKey: SetHotKey::<Identity, Impl, OFFSET>,
            AddStartupFlags: AddStartupFlags::<Identity, Impl, OFFSET>,
            SetTitle: SetTitle::<Identity, Impl, OFFSET>,
            SetEnvironmentVariable: SetEnvironmentVariable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICreatingProcess_Impl: ::windows_core::BaseImpl {
    fn OnCreating(this: &Self::This, pcpi: ::core::option::Option<&ICreateProcessInputs>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICreatingProcess {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreatingProcess_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICreatingProcess {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnCreating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreatingProcess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnCreating(this, ::windows_core::from_raw_borrowed(&pcpi)).into())
        }
        ICreatingProcess_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnCreating: OnCreating::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ICredentialProvider_Impl: ::windows_core::BaseImpl {
    fn SetUsageScenario(this: &Self::This, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32) -> ::windows_core::Result<()>;
    fn SetSerialization(this: &Self::This, pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::Result<()>;
    fn Advise(this: &Self::This, pcpe: ::core::option::Option<&ICredentialProviderEvents>, upadvisecontext: usize) -> ::windows_core::Result<()>;
    fn UnAdvise(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetFieldDescriptorCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFieldDescriptorAt(this: &Self::This, dwindex: u32) -> ::windows_core::Result<*mut CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR>;
    fn GetCredentialCount(this: &Self::This, pdwcount: *mut u32, pdwdefault: *mut u32, pbautologonwithdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetCredentialAt(this: &Self::This, dwindex: u32) -> ::windows_core::Result<ICredentialProviderCredential>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ICredentialProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetUsageScenario<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUsageScenario(this, ::core::mem::transmute_copy(&cpus), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn SetSerialization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpcs: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSerialization(this, ::core::mem::transmute_copy(&pcpcs)).into())
        }
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpe: *mut ::core::ffi::c_void, upadvisecontext: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Advise(this, ::windows_core::from_raw_borrowed(&pcpe), ::core::mem::transmute_copy(&upadvisecontext)).into())
        }
        unsafe extern "system" fn UnAdvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnAdvise(this).into())
        }
        unsafe extern "system" fn GetFieldDescriptorCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldDescriptorCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldDescriptorAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppcpfd: *mut *mut CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldDescriptorAt(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcpfd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCredentialCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32, pdwdefault: *mut u32, pbautologonwithdefault: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCredentialCount(this, ::core::mem::transmute_copy(&pdwcount), ::core::mem::transmute_copy(&pdwdefault), ::core::mem::transmute_copy(&pbautologonwithdefault)).into())
        }
        unsafe extern "system" fn GetCredentialAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppcpc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCredentialAt(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcpc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICredentialProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetUsageScenario: SetUsageScenario::<Identity, Impl, OFFSET>,
            SetSerialization: SetSerialization::<Identity, Impl, OFFSET>,
            Advise: Advise::<Identity, Impl, OFFSET>,
            UnAdvise: UnAdvise::<Identity, Impl, OFFSET>,
            GetFieldDescriptorCount: GetFieldDescriptorCount::<Identity, Impl, OFFSET>,
            GetFieldDescriptorAt: GetFieldDescriptorAt::<Identity, Impl, OFFSET>,
            GetCredentialCount: GetCredentialCount::<Identity, Impl, OFFSET>,
            GetCredentialAt: GetCredentialAt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait ICredentialProviderCredential_Impl: ::windows_core::BaseImpl {
    fn Advise(this: &Self::This, pcpce: ::core::option::Option<&ICredentialProviderCredentialEvents>) -> ::windows_core::Result<()>;
    fn UnAdvise(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetSelected(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetDeselected(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetFieldState(this: &Self::This, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()>;
    fn GetStringValue(this: &Self::This, dwfieldid: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetBitmapValue(this: &Self::This, dwfieldid: u32) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
    fn GetCheckboxValue(this: &Self::This, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn GetSubmitButtonValue(this: &Self::This, dwfieldid: u32) -> ::windows_core::Result<u32>;
    fn GetComboBoxValueCount(this: &Self::This, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows_core::Result<()>;
    fn GetComboBoxValueAt(this: &Self::This, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetStringValue(this: &Self::This, dwfieldid: u32, psz: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetCheckboxValue(this: &Self::This, dwfieldid: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetComboBoxSelectedValue(this: &Self::This, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()>;
    fn CommandLinkClicked(this: &Self::This, dwfieldid: u32) -> ::windows_core::Result<()>;
    fn GetSerialization(this: &Self::This, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()>;
    fn ReportResult(this: &Self::This, ntsstatus: super::super::Foundation::NTSTATUS, ntssubstatus: super::super::Foundation::NTSTATUS, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for ICredentialProviderCredential {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderCredential {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpce: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Advise(this, ::windows_core::from_raw_borrowed(&pcpce)).into())
        }
        unsafe extern "system" fn UnAdvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnAdvise(this).into())
        }
        unsafe extern "system" fn SetSelected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbautologon: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetSelected(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbautologon, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDeselected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDeselected(this).into())
        }
        unsafe extern "system" fn GetFieldState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pcpfs: *mut CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis: *mut CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldState(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&pcpfs), ::core::mem::transmute_copy(&pcpfis)).into())
        }
        unsafe extern "system" fn GetStringValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStringValue(this, ::core::mem::transmute_copy(&dwfieldid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsz, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBitmapValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, phbmp: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBitmapValue(this, ::core::mem::transmute_copy(&dwfieldid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbmp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCheckboxValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pbchecked: *mut super::super::Foundation::BOOL, ppszlabel: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCheckboxValue(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&pbchecked), ::core::mem::transmute_copy(&ppszlabel)).into())
        }
        unsafe extern "system" fn GetSubmitButtonValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pdwadjacentto: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSubmitButtonValue(this, ::core::mem::transmute_copy(&dwfieldid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwadjacentto, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComboBoxValueCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, pcitems: *mut u32, pdwselecteditem: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetComboBoxValueCount(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&pcitems), ::core::mem::transmute_copy(&pdwselecteditem)).into())
        }
        unsafe extern "system" fn GetComboBoxValueAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, dwitem: u32, ppszitem: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComboBoxValueAt(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&dwitem)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStringValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStringValue(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute(&psz)).into())
        }
        unsafe extern "system" fn SetCheckboxValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCheckboxValue(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&bchecked)).into())
        }
        unsafe extern "system" fn SetComboBoxSelectedValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetComboBoxSelectedValue(this, ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&dwselecteditem)).into())
        }
        unsafe extern "system" fn CommandLinkClicked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwfieldid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CommandLinkClicked(this, ::core::mem::transmute_copy(&dwfieldid)).into())
        }
        unsafe extern "system" fn GetSerialization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpgsr: *mut CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSerialization(this, ::core::mem::transmute_copy(&pcpgsr), ::core::mem::transmute_copy(&pcpcs), ::core::mem::transmute_copy(&ppszoptionalstatustext), ::core::mem::transmute_copy(&pcpsioptionalstatusicon)).into())
        }
        unsafe extern "system" fn ReportResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ntsstatus: super::super::Foundation::NTSTATUS, ntssubstatus: super::super::Foundation::NTSTATUS, ppszoptionalstatustext: *mut ::windows_core::PWSTR, pcpsioptionalstatusicon: *mut CREDENTIAL_PROVIDER_STATUS_ICON) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReportResult(this, ::core::mem::transmute_copy(&ntsstatus), ::core::mem::transmute_copy(&ntssubstatus), ::core::mem::transmute_copy(&ppszoptionalstatustext), ::core::mem::transmute_copy(&pcpsioptionalstatusicon)).into())
        }
        ICredentialProviderCredential_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Advise: Advise::<Identity, Impl, OFFSET>,
            UnAdvise: UnAdvise::<Identity, Impl, OFFSET>,
            SetSelected: SetSelected::<Identity, Impl, OFFSET>,
            SetDeselected: SetDeselected::<Identity, Impl, OFFSET>,
            GetFieldState: GetFieldState::<Identity, Impl, OFFSET>,
            GetStringValue: GetStringValue::<Identity, Impl, OFFSET>,
            GetBitmapValue: GetBitmapValue::<Identity, Impl, OFFSET>,
            GetCheckboxValue: GetCheckboxValue::<Identity, Impl, OFFSET>,
            GetSubmitButtonValue: GetSubmitButtonValue::<Identity, Impl, OFFSET>,
            GetComboBoxValueCount: GetComboBoxValueCount::<Identity, Impl, OFFSET>,
            GetComboBoxValueAt: GetComboBoxValueAt::<Identity, Impl, OFFSET>,
            SetStringValue: SetStringValue::<Identity, Impl, OFFSET>,
            SetCheckboxValue: SetCheckboxValue::<Identity, Impl, OFFSET>,
            SetComboBoxSelectedValue: SetComboBoxSelectedValue::<Identity, Impl, OFFSET>,
            CommandLinkClicked: CommandLinkClicked::<Identity, Impl, OFFSET>,
            GetSerialization: GetSerialization::<Identity, Impl, OFFSET>,
            ReportResult: ReportResult::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait ICredentialProviderCredential2_Impl: ::windows_core::BaseImpl + ICredentialProviderCredential_Impl {
    fn GetUserSid(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for ICredentialProviderCredential2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICredentialProviderCredential);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderCredential2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetUserSid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredential2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUserSid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICredentialProviderCredential2_Vtbl { base__: <ICredentialProviderCredential as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetUserSid: GetUserSid::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait ICredentialProviderCredentialEvents_Impl: ::windows_core::BaseImpl {
    fn SetFieldState(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) -> ::windows_core::Result<()>;
    fn SetFieldInteractiveState(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::Result<()>;
    fn SetFieldString(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, psz: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFieldCheckbox(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, bchecked: super::super::Foundation::BOOL, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFieldBitmap(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, hbmp: super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::Result<()>;
    fn SetFieldComboBoxSelectedItem(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::Result<()>;
    fn DeleteFieldComboBoxItem(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, dwitem: u32) -> ::windows_core::Result<()>;
    fn AppendFieldComboBoxItem(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, pszitem: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFieldSubmitButton(this: &Self::This, pcpc: ::core::option::Option<&ICredentialProviderCredential>, dwfieldid: u32, dwadjacentto: u32) -> ::windows_core::Result<()>;
    fn OnCreatingWindow(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for ICredentialProviderCredentialEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderCredentialEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFieldState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, cpfs: CREDENTIAL_PROVIDER_FIELD_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldState(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&cpfs)).into())
        }
        unsafe extern "system" fn SetFieldInteractiveState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldInteractiveState(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&cpfis)).into())
        }
        unsafe extern "system" fn SetFieldString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldString(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute(&psz)).into())
        }
        unsafe extern "system" fn SetFieldCheckbox<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, bchecked: super::super::Foundation::BOOL, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldCheckbox(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&bchecked), ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn SetFieldBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, hbmp: super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldBitmap(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&hbmp)).into())
        }
        unsafe extern "system" fn SetFieldComboBoxSelectedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, dwselecteditem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldComboBoxSelectedItem(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&dwselecteditem)).into())
        }
        unsafe extern "system" fn DeleteFieldComboBoxItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, dwitem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteFieldComboBoxItem(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&dwitem)).into())
        }
        unsafe extern "system" fn AppendFieldComboBoxItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, pszitem: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendFieldComboBoxItem(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute(&pszitem)).into())
        }
        unsafe extern "system" fn SetFieldSubmitButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpc: *mut ::core::ffi::c_void, dwfieldid: u32, dwadjacentto: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldSubmitButton(this, ::windows_core::from_raw_borrowed(&pcpc), ::core::mem::transmute_copy(&dwfieldid), ::core::mem::transmute_copy(&dwadjacentto)).into())
        }
        unsafe extern "system" fn OnCreatingWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwndowner: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnCreatingWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwndowner, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICredentialProviderCredentialEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFieldState: SetFieldState::<Identity, Impl, OFFSET>,
            SetFieldInteractiveState: SetFieldInteractiveState::<Identity, Impl, OFFSET>,
            SetFieldString: SetFieldString::<Identity, Impl, OFFSET>,
            SetFieldCheckbox: SetFieldCheckbox::<Identity, Impl, OFFSET>,
            SetFieldBitmap: SetFieldBitmap::<Identity, Impl, OFFSET>,
            SetFieldComboBoxSelectedItem: SetFieldComboBoxSelectedItem::<Identity, Impl, OFFSET>,
            DeleteFieldComboBoxItem: DeleteFieldComboBoxItem::<Identity, Impl, OFFSET>,
            AppendFieldComboBoxItem: AppendFieldComboBoxItem::<Identity, Impl, OFFSET>,
            SetFieldSubmitButton: SetFieldSubmitButton::<Identity, Impl, OFFSET>,
            OnCreatingWindow: OnCreatingWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait ICredentialProviderCredentialEvents2_Impl: ::windows_core::BaseImpl + ICredentialProviderCredentialEvents_Impl {
    fn BeginFieldUpdates(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndFieldUpdates(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetFieldOptions(this: &Self::This, credential: ::core::option::Option<&ICredentialProviderCredential>, fieldid: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for ICredentialProviderCredentialEvents2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICredentialProviderCredentialEvents);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderCredentialEvents2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginFieldUpdates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginFieldUpdates(this).into())
        }
        unsafe extern "system" fn EndFieldUpdates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndFieldUpdates(this).into())
        }
        unsafe extern "system" fn SetFieldOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialEvents2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, credential: *mut ::core::ffi::c_void, fieldid: u32, options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFieldOptions(this, ::windows_core::from_raw_borrowed(&credential), ::core::mem::transmute_copy(&fieldid), ::core::mem::transmute_copy(&options)).into())
        }
        ICredentialProviderCredentialEvents2_Vtbl {
            base__: <ICredentialProviderCredentialEvents as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginFieldUpdates: BeginFieldUpdates::<Identity, Impl, OFFSET>,
            EndFieldUpdates: EndFieldUpdates::<Identity, Impl, OFFSET>,
            SetFieldOptions: SetFieldOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICredentialProviderCredentialWithFieldOptions_Impl: ::windows_core::BaseImpl {
    fn GetFieldOptions(this: &Self::This, fieldid: u32) -> ::windows_core::Result<CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS>;
}
impl ::windows_core::Iids for ICredentialProviderCredentialWithFieldOptions {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialWithFieldOptions_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderCredentialWithFieldOptions {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFieldOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderCredentialWithFieldOptions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fieldid: u32, options: *mut CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOptions(this, ::core::mem::transmute_copy(&fieldid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICredentialProviderCredentialWithFieldOptions_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFieldOptions: GetFieldOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICredentialProviderEvents_Impl: ::windows_core::BaseImpl {
    fn CredentialsChanged(this: &Self::This, upadvisecontext: usize) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICredentialProviderEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CredentialsChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, upadvisecontext: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CredentialsChanged(this, ::core::mem::transmute_copy(&upadvisecontext)).into())
        }
        ICredentialProviderEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CredentialsChanged: CredentialsChanged::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ICredentialProviderFilter_Impl: ::windows_core::BaseImpl {
    fn Filter(this: &Self::This, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32, rgclsidproviders: *const ::windows_core::GUID, rgballow: *mut super::super::Foundation::BOOL, cproviders: u32) -> ::windows_core::Result<()>;
    fn UpdateRemoteCredential(this: &Self::This, pcpcsin: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsout: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ICredentialProviderFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Filter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dwflags: u32, rgclsidproviders: *const ::windows_core::GUID, rgballow: *mut super::super::Foundation::BOOL, cproviders: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Filter(this, ::core::mem::transmute_copy(&cpus), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&rgclsidproviders), ::core::mem::transmute_copy(&rgballow), ::core::mem::transmute_copy(&cproviders)).into())
        }
        unsafe extern "system" fn UpdateRemoteCredential<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpcsin: *const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcsout: *mut CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateRemoteCredential(this, ::core::mem::transmute_copy(&pcpcsin), ::core::mem::transmute_copy(&pcpcsout)).into())
        }
        ICredentialProviderFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Filter: Filter::<Identity, Impl, OFFSET>,
            UpdateRemoteCredential: UpdateRemoteCredential::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICredentialProviderSetUserArray_Impl: ::windows_core::BaseImpl {
    fn SetUserArray(this: &Self::This, users: ::core::option::Option<&ICredentialProviderUserArray>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICredentialProviderSetUserArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderSetUserArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderSetUserArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetUserArray<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderSetUserArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, users: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUserArray(this, ::windows_core::from_raw_borrowed(&users)).into())
        }
        ICredentialProviderSetUserArray_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetUserArray: SetUserArray::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait ICredentialProviderUser_Impl: ::windows_core::BaseImpl {
    fn GetSid(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetProviderID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetStringValue(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetValue(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for ICredentialProviderUser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderUser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProviderID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, providerid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProviderID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(providerid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStringValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, stringvalue: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStringValue(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(stringvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, value: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICredentialProviderUser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSid: GetSid::<Identity, Impl, OFFSET>,
            GetProviderID: GetProviderID::<Identity, Impl, OFFSET>,
            GetStringValue: GetStringValue::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICredentialProviderUserArray_Impl: ::windows_core::BaseImpl {
    fn SetProviderFilter(this: &Self::This, guidprovidertofilterto: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetAccountOptions(this: &Self::This) -> ::windows_core::Result<CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS>;
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetAt(this: &Self::This, userindex: u32) -> ::windows_core::Result<ICredentialProviderUser>;
}
impl ::windows_core::Iids for ICredentialProviderUserArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUserArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICredentialProviderUserArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetProviderFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUserArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidprovidertofilterto: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderFilter(this, ::core::mem::transmute_copy(&guidprovidertofilterto)).into())
        }
        unsafe extern "system" fn GetAccountOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUserArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, credentialprovideraccountoptions: *mut CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAccountOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(credentialprovideraccountoptions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUserArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, usercount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(usercount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICredentialProviderUserArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, userindex: u32, user: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAt(this, ::core::mem::transmute_copy(&userindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(user, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICredentialProviderUserArray_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetProviderFilter: SetProviderFilter::<Identity, Impl, OFFSET>,
            GetAccountOptions: GetAccountOptions::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetAt: GetAt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait ICurrentItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for ICurrentItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICurrentItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICurrentItem {
    const VTABLE: Self::Vtable = { ICurrentItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICurrentWorkingDirectory_Impl: ::windows_core::BaseImpl {
    fn GetDirectory(this: &Self::This, pwzpath: ::windows_core::PWSTR, cchsize: u32) -> ::windows_core::Result<()>;
    fn SetDirectory(this: &Self::This, pwzpath: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICurrentWorkingDirectory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICurrentWorkingDirectory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICurrentWorkingDirectory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICurrentWorkingDirectory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzpath: ::windows_core::PWSTR, cchsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDirectory(this, ::core::mem::transmute_copy(&pwzpath), ::core::mem::transmute_copy(&cchsize)).into())
        }
        unsafe extern "system" fn SetDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICurrentWorkingDirectory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDirectory(this, ::core::mem::transmute(&pwzpath)).into())
        }
        ICurrentWorkingDirectory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDirectory: GetDirectory::<Identity, Impl, OFFSET>,
            SetDirectory: SetDirectory::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait ICustomDestinationList_Impl: ::windows_core::BaseImpl {
    fn SetAppID(this: &Self::This, pszappid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn BeginList(this: &Self::This, pcminslots: *mut u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn AppendCategory(this: &Self::This, pszcategory: &::windows_core::PCWSTR, poa: ::core::option::Option<&Common::IObjectArray>) -> ::windows_core::Result<()>;
    fn AppendKnownCategory(this: &Self::This, category: KNOWNDESTCATEGORY) -> ::windows_core::Result<()>;
    fn AddUserTasks(this: &Self::This, poa: ::core::option::Option<&Common::IObjectArray>) -> ::windows_core::Result<()>;
    fn CommitList(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRemovedDestinations(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn DeleteList(this: &Self::This, pszappid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AbortList(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for ICustomDestinationList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICustomDestinationList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAppID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppID(this, ::core::mem::transmute(&pszappid)).into())
        }
        unsafe extern "system" fn BeginList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcminslots: *mut u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginList(this, ::core::mem::transmute_copy(&pcminslots), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn AppendCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcategory: ::windows_core::PCWSTR, poa: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendCategory(this, ::core::mem::transmute(&pszcategory), ::windows_core::from_raw_borrowed(&poa)).into())
        }
        unsafe extern "system" fn AppendKnownCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, category: KNOWNDESTCATEGORY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendKnownCategory(this, ::core::mem::transmute_copy(&category)).into())
        }
        unsafe extern "system" fn AddUserTasks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, poa: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddUserTasks(this, ::windows_core::from_raw_borrowed(&poa)).into())
        }
        unsafe extern "system" fn CommitList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CommitList(this).into())
        }
        unsafe extern "system" fn GetRemovedDestinations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRemovedDestinations(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn DeleteList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteList(this, ::core::mem::transmute(&pszappid)).into())
        }
        unsafe extern "system" fn AbortList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICustomDestinationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbortList(this).into())
        }
        ICustomDestinationList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAppID: SetAppID::<Identity, Impl, OFFSET>,
            BeginList: BeginList::<Identity, Impl, OFFSET>,
            AppendCategory: AppendCategory::<Identity, Impl, OFFSET>,
            AppendKnownCategory: AppendKnownCategory::<Identity, Impl, OFFSET>,
            AddUserTasks: AddUserTasks::<Identity, Impl, OFFSET>,
            CommitList: CommitList::<Identity, Impl, OFFSET>,
            GetRemovedDestinations: GetRemovedDestinations::<Identity, Impl, OFFSET>,
            DeleteList: DeleteList::<Identity, Impl, OFFSET>,
            AbortList: AbortList::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IDataObjectAsyncCapability_Impl: ::windows_core::BaseImpl {
    fn SetAsyncMode(this: &Self::This, fdoopasync: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetAsyncMode(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn StartOperation(this: &Self::This, pbcreserved: ::core::option::Option<&super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()>;
    fn InOperation(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn EndOperation(this: &Self::This, hresult: ::windows_core::HRESULT, pbcreserved: ::core::option::Option<&super::super::System::Com::IBindCtx>, dweffects: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IDataObjectAsyncCapability {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectAsyncCapability_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataObjectAsyncCapability {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAsyncMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectAsyncCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fdoopasync: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAsyncMode(this, ::core::mem::transmute_copy(&fdoopasync)).into())
        }
        unsafe extern "system" fn GetAsyncMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectAsyncCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfisopasync: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAsyncMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfisopasync, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartOperation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectAsyncCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbcreserved: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartOperation(this, ::windows_core::from_raw_borrowed(&pbcreserved)).into())
        }
        unsafe extern "system" fn InOperation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectAsyncCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfinasyncop: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InOperation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfinasyncop, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EndOperation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectAsyncCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hresult: ::windows_core::HRESULT, pbcreserved: *mut ::core::ffi::c_void, dweffects: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndOperation(this, ::core::mem::transmute_copy(&hresult), ::windows_core::from_raw_borrowed(&pbcreserved), ::core::mem::transmute_copy(&dweffects)).into())
        }
        IDataObjectAsyncCapability_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAsyncMode: SetAsyncMode::<Identity, Impl, OFFSET>,
            GetAsyncMode: GetAsyncMode::<Identity, Impl, OFFSET>,
            StartOperation: StartOperation::<Identity, Impl, OFFSET>,
            InOperation: InOperation::<Identity, Impl, OFFSET>,
            EndOperation: EndOperation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IDataObjectProvider_Impl: ::windows_core::BaseImpl {
    fn GetDataObject(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDataObject>;
    fn SetDataObject(this: &Self::This, dataobject: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IDataObjectProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataObjectProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDataObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dataobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dataobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDataObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataObjectProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDataObject(this, ::windows_core::from_raw_borrowed(&dataobject)).into())
        }
        IDataObjectProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDataObject: GetDataObject::<Identity, Impl, OFFSET>,
            SetDataObject: SetDataObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDataTransferManagerInterop_Impl: ::windows_core::BaseImpl {
    fn GetForWindow(this: &Self::This, appwindow: super::super::Foundation::HWND, riid: *const ::windows_core::GUID, datatransfermanager: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ShowShareUIForWindow(this: &Self::This, appwindow: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDataTransferManagerInterop {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataTransferManagerInterop_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataTransferManagerInterop {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetForWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataTransferManagerInterop_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND, riid: *const ::windows_core::GUID, datatransfermanager: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetForWindow(this, ::core::mem::transmute_copy(&appwindow), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&datatransfermanager)).into())
        }
        unsafe extern "system" fn ShowShareUIForWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataTransferManagerInterop_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, appwindow: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowShareUIForWindow(this, ::core::mem::transmute_copy(&appwindow)).into())
        }
        IDataTransferManagerInterop_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetForWindow: GetForWindow::<Identity, Impl, OFFSET>,
            ShowShareUIForWindow: ShowShareUIForWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Registry\"`"]
#[cfg(feature = "Win32_System_Registry")]
pub trait IDefaultExtractIconInit_Impl: ::windows_core::BaseImpl {
    fn SetFlags(this: &Self::This, uflags: u32) -> ::windows_core::Result<()>;
    fn SetKey(this: &Self::This, hkey: super::super::System::Registry::HKEY) -> ::windows_core::Result<()>;
    fn SetNormalIcon(this: &Self::This, pszfile: &::windows_core::PCWSTR, iicon: i32) -> ::windows_core::Result<()>;
    fn SetOpenIcon(this: &Self::This, pszfile: &::windows_core::PCWSTR, iicon: i32) -> ::windows_core::Result<()>;
    fn SetShortcutIcon(this: &Self::This, pszfile: &::windows_core::PCWSTR, iicon: i32) -> ::windows_core::Result<()>;
    fn SetDefaultIcon(this: &Self::This, pszfile: &::windows_core::PCWSTR, iicon: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Registry")]
impl ::windows_core::Iids for IDefaultExtractIconInit {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Registry")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDefaultExtractIconInit {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&uflags)).into())
        }
        unsafe extern "system" fn SetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hkey: super::super::System::Registry::HKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKey(this, ::core::mem::transmute_copy(&hkey)).into())
        }
        unsafe extern "system" fn SetNormalIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNormalIcon(this, ::core::mem::transmute(&pszfile), ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn SetOpenIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOpenIcon(this, ::core::mem::transmute(&pszfile), ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn SetShortcutIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShortcutIcon(this, ::core::mem::transmute(&pszfile), ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn SetDefaultIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultExtractIconInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultIcon(this, ::core::mem::transmute(&pszfile), ::core::mem::transmute_copy(&iicon)).into())
        }
        IDefaultExtractIconInit_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            SetKey: SetKey::<Identity, Impl, OFFSET>,
            SetNormalIcon: SetNormalIcon::<Identity, Impl, OFFSET>,
            SetOpenIcon: SetOpenIcon::<Identity, Impl, OFFSET>,
            SetShortcutIcon: SetShortcutIcon::<Identity, Impl, OFFSET>,
            SetDefaultIcon: SetDefaultIcon::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
pub trait IDefaultFolderMenuInitialize_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, hwnd: super::super::Foundation::HWND, pcmcb: ::core::option::Option<&IContextMenuCB>, pidlfolder: *const Common::ITEMIDLIST, psf: ::core::option::Option<&IShellFolder>, cidl: u32, apidl: *const *const Common::ITEMIDLIST, punkassociation: ::core::option::Option<&::windows_core::IUnknown>, ckeys: u32, akeys: *const super::super::System::Registry::HKEY) -> ::windows_core::Result<()>;
    fn SetMenuRestrictions(this: &Self::This, dfmrvalues: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::Result<()>;
    fn GetMenuRestrictions(this: &Self::This, dfmrmask: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::Result<DEFAULT_FOLDER_MENU_RESTRICTIONS>;
    fn SetHandlerClsid(this: &Self::This, rclsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IDefaultFolderMenuInitialize {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultFolderMenuInitialize_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDefaultFolderMenuInitialize {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultFolderMenuInitialize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pcmcb: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, psf: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, punkassociation: *mut ::core::ffi::c_void, ckeys: u32, akeys: *const super::super::System::Registry::HKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&hwnd), ::windows_core::from_raw_borrowed(&pcmcb), ::core::mem::transmute_copy(&pidlfolder), ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&cidl), ::core::mem::transmute_copy(&apidl), ::windows_core::from_raw_borrowed(&punkassociation), ::core::mem::transmute_copy(&ckeys), ::core::mem::transmute_copy(&akeys)).into())
        }
        unsafe extern "system" fn SetMenuRestrictions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultFolderMenuInitialize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dfmrvalues: DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMenuRestrictions(this, ::core::mem::transmute_copy(&dfmrvalues)).into())
        }
        unsafe extern "system" fn GetMenuRestrictions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultFolderMenuInitialize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dfmrmask: DEFAULT_FOLDER_MENU_RESTRICTIONS, pdfmrvalues: *mut DEFAULT_FOLDER_MENU_RESTRICTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMenuRestrictions(this, ::core::mem::transmute_copy(&dfmrmask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdfmrvalues, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHandlerClsid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDefaultFolderMenuInitialize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHandlerClsid(this, ::core::mem::transmute_copy(&rclsid)).into())
        }
        IDefaultFolderMenuInitialize_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            SetMenuRestrictions: SetMenuRestrictions::<Identity, Impl, OFFSET>,
            GetMenuRestrictions: GetMenuRestrictions::<Identity, Impl, OFFSET>,
            SetHandlerClsid: SetHandlerClsid::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IDelegateFolder_Impl: ::windows_core::BaseImpl {
    fn SetItemAlloc(this: &Self::This, pmalloc: ::core::option::Option<&super::super::System::Com::IMalloc>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IDelegateFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDelegateFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDelegateFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetItemAlloc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDelegateFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmalloc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemAlloc(this, ::windows_core::from_raw_borrowed(&pmalloc)).into())
        }
        IDelegateFolder_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetItemAlloc: SetItemAlloc::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IDelegateItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IDelegateItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDelegateItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDelegateItem {
    const VTABLE: Self::Vtable = { IDelegateItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDeskBand_Impl: ::windows_core::BaseImpl + IDockingWindow_Impl {
    fn GetBandInfo(this: &Self::This, dwbandid: u32, dwviewmode: u32, pdbi: *mut DESKBANDINFO) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDeskBand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDockingWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDeskBand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetBandInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbandid: u32, dwviewmode: u32, pdbi: *mut DESKBANDINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBandInfo(this, ::core::mem::transmute_copy(&dwbandid), ::core::mem::transmute_copy(&dwviewmode), ::core::mem::transmute_copy(&pdbi)).into())
        }
        IDeskBand_Vtbl { base__: <IDockingWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetBandInfo: GetBandInfo::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDeskBand2_Impl: ::windows_core::BaseImpl + IDeskBand_Impl {
    fn CanRenderComposited(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetCompositionState(this: &Self::This, fcompositionenabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetCompositionState(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDeskBand2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDeskBand);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBand2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDeskBand2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CanRenderComposited<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBand2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcanrendercomposited: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CanRenderComposited(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcanrendercomposited, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCompositionState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBand2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fcompositionenabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCompositionState(this, ::core::mem::transmute_copy(&fcompositionenabled)).into())
        }
        unsafe extern "system" fn GetCompositionState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBand2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcompositionenabled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCompositionState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcompositionenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDeskBand2_Vtbl {
            base__: <IDeskBand as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CanRenderComposited: CanRenderComposited::<Identity, Impl, OFFSET>,
            SetCompositionState: SetCompositionState::<Identity, Impl, OFFSET>,
            GetCompositionState: GetCompositionState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDeskBandInfo_Impl: ::windows_core::BaseImpl {
    fn GetDefaultBandWidth(this: &Self::This, dwbandid: u32, dwviewmode: u32) -> ::windows_core::Result<i32>;
}
impl ::windows_core::Iids for IDeskBandInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBandInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDeskBandInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDefaultBandWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBandInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbandid: u32, dwviewmode: u32, pnwidth: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultBandWidth(this, ::core::mem::transmute_copy(&dwbandid), ::core::mem::transmute_copy(&dwviewmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnwidth, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDeskBandInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDefaultBandWidth: GetDefaultBandWidth::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDeskBar_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn SetClient(this: &Self::This, punkclient: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetClient(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn OnPosRectChangeDB(this: &Self::This, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDeskBar {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBar_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDeskBar {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkclient: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClient(this, ::windows_core::from_raw_borrowed(&punkclient)).into())
        }
        unsafe extern "system" fn GetClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkclient: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkclient, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnPosRectChangeDB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnPosRectChangeDB(this, ::core::mem::transmute_copy(&prc)).into())
        }
        IDeskBar_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetClient: SetClient::<Identity, Impl, OFFSET>,
            GetClient: GetClient::<Identity, Impl, OFFSET>,
            OnPosRectChangeDB: OnPosRectChangeDB::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDeskBarClient_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn SetDeskBarSite(this: &Self::This, punksite: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn SetModeDBC(this: &Self::This, dwmode: u32) -> ::windows_core::Result<()>;
    fn UIActivateDBC(this: &Self::This, dwstate: u32) -> ::windows_core::Result<()>;
    fn GetSize(this: &Self::This, dwwhich: u32) -> ::windows_core::Result<super::super::Foundation::RECT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDeskBarClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBarClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDeskBarClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDeskBarSite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBarClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punksite: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDeskBarSite(this, ::windows_core::from_raw_borrowed(&punksite)).into())
        }
        unsafe extern "system" fn SetModeDBC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBarClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetModeDBC(this, ::core::mem::transmute_copy(&dwmode)).into())
        }
        unsafe extern "system" fn UIActivateDBC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBarClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UIActivateDBC(this, ::core::mem::transmute_copy(&dwstate)).into())
        }
        unsafe extern "system" fn GetSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDeskBarClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwwhich: u32, prc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSize(this, ::core::mem::transmute_copy(&dwwhich)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDeskBarClient_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDeskBarSite: SetDeskBarSite::<Identity, Impl, OFFSET>,
            SetModeDBC: SetModeDBC::<Identity, Impl, OFFSET>,
            UIActivateDBC: UIActivateDBC::<Identity, Impl, OFFSET>,
            GetSize: GetSize::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDesktopGadget_Impl: ::windows_core::BaseImpl {
    fn RunGadget(this: &Self::This, gadgetpath: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDesktopGadget {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopGadget_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDesktopGadget {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RunGadget<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopGadget_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, gadgetpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RunGadget(this, ::core::mem::transmute(&gadgetpath)).into())
        }
        IDesktopGadget_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, RunGadget: RunGadget::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDesktopWallpaper_Impl: ::windows_core::BaseImpl {
    fn SetWallpaper(this: &Self::This, monitorid: &::windows_core::PCWSTR, wallpaper: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetWallpaper(this: &Self::This, monitorid: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetMonitorDevicePathAt(this: &Self::This, monitorindex: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetMonitorDevicePathCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMonitorRECT(this: &Self::This, monitorid: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::Foundation::RECT>;
    fn SetBackgroundColor(this: &Self::This, color: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
    fn GetBackgroundColor(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::COLORREF>;
    fn SetPosition(this: &Self::This, position: DESKTOP_WALLPAPER_POSITION) -> ::windows_core::Result<()>;
    fn GetPosition(this: &Self::This) -> ::windows_core::Result<DESKTOP_WALLPAPER_POSITION>;
    fn SetSlideshow(this: &Self::This, items: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<()>;
    fn GetSlideshow(this: &Self::This) -> ::windows_core::Result<IShellItemArray>;
    fn SetSlideshowOptions(this: &Self::This, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: u32) -> ::windows_core::Result<()>;
    fn GetSlideshowOptions(this: &Self::This, options: *mut DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: *mut u32) -> ::windows_core::Result<()>;
    fn AdvanceSlideshow(this: &Self::This, monitorid: &::windows_core::PCWSTR, direction: DESKTOP_SLIDESHOW_DIRECTION) -> ::windows_core::Result<()>;
    fn GetStatus(this: &Self::This) -> ::windows_core::Result<DESKTOP_SLIDESHOW_STATE>;
    fn Enable(this: &Self::This, enable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDesktopWallpaper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDesktopWallpaper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetWallpaper<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, wallpaper: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWallpaper(this, ::core::mem::transmute(&monitorid), ::core::mem::transmute(&wallpaper)).into())
        }
        unsafe extern "system" fn GetWallpaper<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, wallpaper: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWallpaper(this, ::core::mem::transmute(&monitorid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(wallpaper, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMonitorDevicePathAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, monitorindex: u32, monitorid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMonitorDevicePathAt(this, ::core::mem::transmute_copy(&monitorindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(monitorid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMonitorDevicePathCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMonitorDevicePathCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMonitorRECT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, displayrect: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMonitorRECT(this, ::core::mem::transmute(&monitorid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(displayrect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBackgroundColor(this, ::core::mem::transmute_copy(&color)).into())
        }
        unsafe extern "system" fn GetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: *mut super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBackgroundColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(color, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: DESKTOP_WALLPAPER_POSITION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPosition(this, ::core::mem::transmute_copy(&position)).into())
        }
        unsafe extern "system" fn GetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: *mut DESKTOP_WALLPAPER_POSITION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(position, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSlideshow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, items: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSlideshow(this, ::windows_core::from_raw_borrowed(&items)).into())
        }
        unsafe extern "system" fn GetSlideshow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, items: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSlideshow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(items, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSlideshowOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSlideshowOptions(this, ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&slideshowtick)).into())
        }
        unsafe extern "system" fn GetSlideshowOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut DESKTOP_SLIDESHOW_OPTIONS, slideshowtick: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSlideshowOptions(this, ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&slideshowtick)).into())
        }
        unsafe extern "system" fn AdvanceSlideshow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, monitorid: ::windows_core::PCWSTR, direction: DESKTOP_SLIDESHOW_DIRECTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AdvanceSlideshow(this, ::core::mem::transmute(&monitorid), ::core::mem::transmute_copy(&direction)).into())
        }
        unsafe extern "system" fn GetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, state: *mut DESKTOP_SLIDESHOW_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(state, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Enable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDesktopWallpaper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Enable(this, ::core::mem::transmute_copy(&enable)).into())
        }
        IDesktopWallpaper_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetWallpaper: SetWallpaper::<Identity, Impl, OFFSET>,
            GetWallpaper: GetWallpaper::<Identity, Impl, OFFSET>,
            GetMonitorDevicePathAt: GetMonitorDevicePathAt::<Identity, Impl, OFFSET>,
            GetMonitorDevicePathCount: GetMonitorDevicePathCount::<Identity, Impl, OFFSET>,
            GetMonitorRECT: GetMonitorRECT::<Identity, Impl, OFFSET>,
            SetBackgroundColor: SetBackgroundColor::<Identity, Impl, OFFSET>,
            GetBackgroundColor: GetBackgroundColor::<Identity, Impl, OFFSET>,
            SetPosition: SetPosition::<Identity, Impl, OFFSET>,
            GetPosition: GetPosition::<Identity, Impl, OFFSET>,
            SetSlideshow: SetSlideshow::<Identity, Impl, OFFSET>,
            GetSlideshow: GetSlideshow::<Identity, Impl, OFFSET>,
            SetSlideshowOptions: SetSlideshowOptions::<Identity, Impl, OFFSET>,
            GetSlideshowOptions: GetSlideshowOptions::<Identity, Impl, OFFSET>,
            AdvanceSlideshow: AdvanceSlideshow::<Identity, Impl, OFFSET>,
            GetStatus: GetStatus::<Identity, Impl, OFFSET>,
            Enable: Enable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IDestinationStreamFactory_Impl: ::windows_core::BaseImpl {
    fn GetDestinationStream(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IStream>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IDestinationStreamFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDestinationStreamFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDestinationStreamFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDestinationStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDestinationStreamFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstm: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDestinationStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDestinationStreamFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDestinationStream: GetDestinationStream::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IDisplayItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IDisplayItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDisplayItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDisplayItem {
    const VTABLE: Self::Vtable = { IDisplayItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDocViewSite_Impl: ::windows_core::BaseImpl {
    fn OnSetTitle(this: &Self::This, pvtitle: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDocViewSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDocViewSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDocViewSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnSetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDocViewSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvtitle: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSetTitle(this, ::core::mem::transmute_copy(&pvtitle)).into())
        }
        IDocViewSite_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnSetTitle: OnSetTitle::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDockingWindow_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn ShowDW(this: &Self::This, fshow: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseDW(this: &Self::This, dwreserved: u32) -> ::windows_core::Result<()>;
    fn ResizeBorderDW(this: &Self::This, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: ::core::option::Option<&::windows_core::IUnknown>, freserved: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDockingWindow {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindow_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDockingWindow {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShowDW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindow_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fshow: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowDW(this, ::core::mem::transmute_copy(&fshow)).into())
        }
        unsafe extern "system" fn CloseDW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindow_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseDW(this, ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn ResizeBorderDW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindow_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prcborder: *const super::super::Foundation::RECT, punktoolbarsite: *mut ::core::ffi::c_void, freserved: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResizeBorderDW(this, ::core::mem::transmute_copy(&prcborder), ::windows_core::from_raw_borrowed(&punktoolbarsite), ::core::mem::transmute_copy(&freserved)).into())
        }
        IDockingWindow_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShowDW: ShowDW::<Identity, Impl, OFFSET>,
            CloseDW: CloseDW::<Identity, Impl, OFFSET>,
            ResizeBorderDW: ResizeBorderDW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDockingWindowFrame_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn AddToolbar(this: &Self::This, punksrc: ::core::option::Option<&::windows_core::IUnknown>, pwszitem: &::windows_core::PCWSTR, dwaddflags: u32) -> ::windows_core::Result<()>;
    fn RemoveToolbar(this: &Self::This, punksrc: ::core::option::Option<&::windows_core::IUnknown>, dwremoveflags: u32) -> ::windows_core::Result<()>;
    fn FindToolbar(this: &Self::This, pwszitem: &::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDockingWindowFrame {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowFrame_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDockingWindowFrame {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddToolbar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, pwszitem: ::windows_core::PCWSTR, dwaddflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddToolbar(this, ::windows_core::from_raw_borrowed(&punksrc), ::core::mem::transmute(&pwszitem), ::core::mem::transmute_copy(&dwaddflags)).into())
        }
        unsafe extern "system" fn RemoveToolbar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punksrc: *mut ::core::ffi::c_void, dwremoveflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveToolbar(this, ::windows_core::from_raw_borrowed(&punksrc), ::core::mem::transmute_copy(&dwremoveflags)).into())
        }
        unsafe extern "system" fn FindToolbar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszitem: ::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindToolbar(this, ::core::mem::transmute(&pwszitem), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IDockingWindowFrame_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddToolbar: AddToolbar::<Identity, Impl, OFFSET>,
            RemoveToolbar: RemoveToolbar::<Identity, Impl, OFFSET>,
            FindToolbar: FindToolbar::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IDockingWindowSite_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn GetBorderDW(this: &Self::This, punkobj: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<super::super::Foundation::RECT>;
    fn RequestBorderSpaceDW(this: &Self::This, punkobj: ::core::option::Option<&::windows_core::IUnknown>, pbw: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn SetBorderSpaceDW(this: &Self::This, punkobj: ::core::option::Option<&::windows_core::IUnknown>, pbw: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDockingWindowSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDockingWindowSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetBorderDW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, prcborder: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBorderDW(this, ::windows_core::from_raw_borrowed(&punkobj)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prcborder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RequestBorderSpaceDW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, pbw: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RequestBorderSpaceDW(this, ::windows_core::from_raw_borrowed(&punkobj), ::core::mem::transmute_copy(&pbw)).into())
        }
        unsafe extern "system" fn SetBorderSpaceDW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDockingWindowSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, pbw: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBorderSpaceDW(this, ::windows_core::from_raw_borrowed(&punkobj), ::core::mem::transmute_copy(&pbw)).into())
        }
        IDockingWindowSite_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetBorderDW: GetBorderDW::<Identity, Impl, OFFSET>,
            RequestBorderSpaceDW: RequestBorderSpaceDW::<Identity, Impl, OFFSET>,
            SetBorderSpaceDW: SetBorderSpaceDW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
pub trait IDragSourceHelper_Impl: ::windows_core::BaseImpl {
    fn InitializeFromBitmap(this: &Self::This, pshdi: *const SHDRAGIMAGE, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
    fn InitializeFromWindow(this: &Self::This, hwnd: super::super::Foundation::HWND, ppt: *const super::super::Foundation::POINT, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IDragSourceHelper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDragSourceHelper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDragSourceHelper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDragSourceHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pshdi: *const SHDRAGIMAGE, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromBitmap(this, ::core::mem::transmute_copy(&pshdi), ::windows_core::from_raw_borrowed(&pdataobject)).into())
        }
        unsafe extern "system" fn InitializeFromWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDragSourceHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ppt: *const super::super::Foundation::POINT, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromWindow(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&ppt), ::windows_core::from_raw_borrowed(&pdataobject)).into())
        }
        IDragSourceHelper_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromBitmap: InitializeFromBitmap::<Identity, Impl, OFFSET>,
            InitializeFromWindow: InitializeFromWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
pub trait IDragSourceHelper2_Impl: ::windows_core::BaseImpl + IDragSourceHelper_Impl {
    fn SetFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IDragSourceHelper2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDragSourceHelper);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDragSourceHelper2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDragSourceHelper2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDragSourceHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        IDragSourceHelper2_Vtbl { base__: <IDragSourceHelper as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetFlags: SetFlags::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
pub trait IDropTargetHelper_Impl: ::windows_core::BaseImpl {
    fn DragEnter(this: &Self::This, hwndtarget: super::super::Foundation::HWND, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<()>;
    fn DragLeave(this: &Self::This) -> ::windows_core::Result<()>;
    fn DragOver(this: &Self::This, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<()>;
    fn Drop(this: &Self::This, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::Result<()>;
    fn Show(this: &Self::This, fshow: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IDropTargetHelper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDropTargetHelper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDropTargetHelper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DragEnter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDropTargetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtarget: super::super::Foundation::HWND, pdataobject: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DragEnter(this, ::core::mem::transmute_copy(&hwndtarget), ::windows_core::from_raw_borrowed(&pdataobject), ::core::mem::transmute_copy(&ppt), ::core::mem::transmute_copy(&dweffect)).into())
        }
        unsafe extern "system" fn DragLeave<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDropTargetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DragLeave(this).into())
        }
        unsafe extern "system" fn DragOver<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDropTargetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DragOver(this, ::core::mem::transmute_copy(&ppt), ::core::mem::transmute_copy(&dweffect)).into())
        }
        unsafe extern "system" fn Drop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDropTargetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdataobject: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, dweffect: super::super::System::Ole::DROPEFFECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Drop(this, ::windows_core::from_raw_borrowed(&pdataobject), ::core::mem::transmute_copy(&ppt), ::core::mem::transmute_copy(&dweffect)).into())
        }
        unsafe extern "system" fn Show<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDropTargetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fshow: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Show(this, ::core::mem::transmute_copy(&fshow)).into())
        }
        IDropTargetHelper_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DragEnter: DragEnter::<Identity, Impl, OFFSET>,
            DragLeave: DragLeave::<Identity, Impl, OFFSET>,
            DragOver: DragOver::<Identity, Impl, OFFSET>,
            Drop: Drop::<Identity, Impl, OFFSET>,
            Show: Show::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDynamicHWHandler_Impl: ::windows_core::BaseImpl {
    fn GetDynamicInfo(this: &Self::This, pszdeviceid: &::windows_core::PCWSTR, dwcontenttype: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IDynamicHWHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicHWHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDynamicHWHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDynamicInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicHWHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, dwcontenttype: u32, ppszaction: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDynamicInfo(this, ::core::mem::transmute(&pszdeviceid), ::core::mem::transmute_copy(&dwcontenttype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszaction, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDynamicHWHandler_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetDynamicInfo: GetDynamicInfo::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumACString_Impl: ::windows_core::BaseImpl + super::super::System::Com::IEnumString_Impl {
    fn NextItem(this: &Self::This, pszurl: ::windows_core::PWSTR, cchmax: u32, pulsortindex: *mut u32) -> ::windows_core::Result<()>;
    fn SetEnumOptions(this: &Self::This, dwoptions: u32) -> ::windows_core::Result<()>;
    fn GetEnumOptions(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IEnumACString {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IEnumString);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumACString_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumACString {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NextItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumACString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PWSTR, cchmax: u32, pulsortindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NextItem(this, ::core::mem::transmute_copy(&pszurl), ::core::mem::transmute_copy(&cchmax), ::core::mem::transmute_copy(&pulsortindex)).into())
        }
        unsafe extern "system" fn SetEnumOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumACString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoptions: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnumOptions(this, ::core::mem::transmute_copy(&dwoptions)).into())
        }
        unsafe extern "system" fn GetEnumOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumACString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwoptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEnumOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwoptions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumACString_Vtbl {
            base__: <super::super::System::Com::IEnumString as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            NextItem: NextItem::<Identity, Impl, OFFSET>,
            SetEnumOptions: SetEnumOptions::<Identity, Impl, OFFSET>,
            GetEnumOptions: GetEnumOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumAssocHandlers_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<IAssocHandler>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IEnumAssocHandlers {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumAssocHandlers_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumAssocHandlers {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumAssocHandlers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        IEnumAssocHandlers_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Next: Next::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumExplorerCommand_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, puicommand: *mut ::core::option::Option<IExplorerCommand>, pceltfetched: *mut u32) -> ::windows_core::HRESULT;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumExplorerCommand>;
}
impl ::windows_core::Iids for IEnumExplorerCommand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExplorerCommand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumExplorerCommand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, puicommand: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&puicommand), ::core::mem::transmute_copy(&pceltfetched)))
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumExplorerCommand_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumExtraSearch_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut EXTRASEARCH, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumExtraSearch>;
}
impl ::windows_core::Iids for IEnumExtraSearch {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExtraSearch_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumExtraSearch {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExtraSearch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut EXTRASEARCH, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExtraSearch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExtraSearch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumExtraSearch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumExtraSearch_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IEnumFullIDList_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumFullIDList>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IEnumFullIDList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumFullIDList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumFullIDList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumFullIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumFullIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumFullIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumFullIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumFullIDList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumHLITEM_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut HLITEM, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumHLITEM>;
}
impl ::windows_core::Iids for IEnumHLITEM {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumHLITEM_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumHLITEM {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumHLITEM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut HLITEM, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumHLITEM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumHLITEM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumHLITEM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppienumhlitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppienumhlitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumHLITEM_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IEnumIDList_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows_core::HRESULT;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::HRESULT;
    fn Reset(this: &Self::This) -> ::windows_core::HRESULT;
    fn Clone(this: &Self::This, ppenum: *mut ::core::option::Option<IEnumIDList>) -> ::windows_core::HRESULT;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IEnumIDList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumIDList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumIDList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut Common::ITEMIDLIST, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)))
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)))
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this))
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clone(this, ::core::mem::transmute_copy(&ppenum)))
        }
        IEnumIDList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumObjects_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, riid: *const ::windows_core::GUID, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumObjects>;
}
impl ::windows_core::Iids for IEnumObjects {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumObjects_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumObjects {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, riid: *const ::windows_core::GUID, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumObjects_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumPublishedApps_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This) -> ::windows_core::Result<IPublishedApp>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IEnumPublishedApps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumPublishedApps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumPublishedApps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumPublishedApps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pia: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Next(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pia, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumPublishedApps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        IEnumPublishedApps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumReadyCallback_Impl: ::windows_core::BaseImpl {
    fn EnumReady(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IEnumReadyCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumReadyCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumReadyCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnumReady<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumReadyCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumReady(this).into())
        }
        IEnumReadyCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, EnumReady: EnumReady::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumResources_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, psir: *mut SHELL_ITEM_RESOURCE, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumResources>;
}
impl ::windows_core::Iids for IEnumResources {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumResources_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumResources {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, psir: *mut SHELL_ITEM_RESOURCE, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&psir), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenumr: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumResources_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumShellItems_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<IShellItem>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumShellItems>;
}
impl ::windows_core::Iids for IEnumShellItems {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumShellItems_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumShellItems {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumShellItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumShellItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumShellItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumShellItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumShellItems_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumSyncMgrConflict_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<ISyncMgrConflict>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumSyncMgrConflict>;
}
impl ::windows_core::Iids for IEnumSyncMgrConflict {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrConflict_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumSyncMgrConflict {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumSyncMgrConflict_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumSyncMgrEvents_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<ISyncMgrEvent>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumSyncMgrEvents>;
}
impl ::windows_core::Iids for IEnumSyncMgrEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumSyncMgrEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumSyncMgrEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumSyncMgrSyncItems_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<ISyncMgrSyncItem>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumSyncMgrSyncItems>;
}
impl ::windows_core::Iids for IEnumSyncMgrSyncItems {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrSyncItems_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumSyncMgrSyncItems {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrSyncItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrSyncItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrSyncItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumSyncMgrSyncItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumSyncMgrSyncItems_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumTravelLogEntry_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<ITravelLogEntry>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumTravelLogEntry>;
}
impl ::windows_core::Iids for IEnumTravelLogEntry {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTravelLogEntry_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumTravelLogEntry {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTravelLogEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTravelLogEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTravelLogEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTravelLogEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumTravelLogEntry_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IEnumerableView_Impl: ::windows_core::BaseImpl {
    fn SetEnumReadyCallback(this: &Self::This, percb: ::core::option::Option<&IEnumReadyCallback>) -> ::windows_core::Result<()>;
    fn CreateEnumIDListFromContents(this: &Self::This, pidlfolder: *const Common::ITEMIDLIST, dwenumflags: u32) -> ::windows_core::Result<IEnumIDList>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IEnumerableView {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumerableView_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumerableView {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetEnumReadyCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumerableView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, percb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnumReadyCallback(this, ::windows_core::from_raw_borrowed(&percb)).into())
        }
        unsafe extern "system" fn CreateEnumIDListFromContents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumerableView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, dwenumflags: u32, ppenumidlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateEnumIDListFromContents(this, ::core::mem::transmute_copy(&pidlfolder), ::core::mem::transmute_copy(&dwenumflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumidlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumerableView_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetEnumReadyCallback: SetEnumReadyCallback::<Identity, Impl, OFFSET>,
            CreateEnumIDListFromContents: CreateEnumIDListFromContents::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IExecuteCommand_Impl: ::windows_core::BaseImpl {
    fn SetKeyState(this: &Self::This, grfkeystate: u32) -> ::windows_core::Result<()>;
    fn SetParameters(this: &Self::This, pszparameters: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetPosition(this: &Self::This, pt: &super::super::Foundation::POINT) -> ::windows_core::Result<()>;
    fn SetShowWindow(this: &Self::This, nshow: i32) -> ::windows_core::Result<()>;
    fn SetNoShowUI(this: &Self::This, fnoshowui: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetDirectory(this: &Self::This, pszdirectory: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IExecuteCommand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExecuteCommand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetKeyState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfkeystate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyState(this, ::core::mem::transmute_copy(&grfkeystate)).into())
        }
        unsafe extern "system" fn SetParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszparameters: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParameters(this, ::core::mem::transmute(&pszparameters)).into())
        }
        unsafe extern "system" fn SetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pt: super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPosition(this, ::core::mem::transmute(&pt)).into())
        }
        unsafe extern "system" fn SetShowWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nshow: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShowWindow(this, ::core::mem::transmute_copy(&nshow)).into())
        }
        unsafe extern "system" fn SetNoShowUI<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fnoshowui: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNoShowUI(this, ::core::mem::transmute_copy(&fnoshowui)).into())
        }
        unsafe extern "system" fn SetDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdirectory: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDirectory(this, ::core::mem::transmute(&pszdirectory)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this).into())
        }
        IExecuteCommand_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetKeyState: SetKeyState::<Identity, Impl, OFFSET>,
            SetParameters: SetParameters::<Identity, Impl, OFFSET>,
            SetPosition: SetPosition::<Identity, Impl, OFFSET>,
            SetShowWindow: SetShowWindow::<Identity, Impl, OFFSET>,
            SetNoShowUI: SetNoShowUI::<Identity, Impl, OFFSET>,
            SetDirectory: SetDirectory::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IExecuteCommandApplicationHostEnvironment_Impl: ::windows_core::BaseImpl {
    fn GetValue(this: &Self::This) -> ::windows_core::Result<AHE_TYPE>;
}
impl ::windows_core::Iids for IExecuteCommandApplicationHostEnvironment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommandApplicationHostEnvironment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExecuteCommandApplicationHostEnvironment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommandApplicationHostEnvironment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pahe: *mut AHE_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pahe, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExecuteCommandApplicationHostEnvironment_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetValue: GetValue::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IExecuteCommandHost_Impl: ::windows_core::BaseImpl {
    fn GetUIMode(this: &Self::This) -> ::windows_core::Result<EC_HOST_UI_MODE>;
}
impl ::windows_core::Iids for IExecuteCommandHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommandHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExecuteCommandHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetUIMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExecuteCommandHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puimode: *mut EC_HOST_UI_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUIMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puimode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExecuteCommandHost_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetUIMode: GetUIMode::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IExpDispSupport_Impl: ::windows_core::BaseImpl {
    fn FindConnectionPoint(this: &Self::This, riid: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::IConnectionPoint>;
    fn OnTranslateAccelerator(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::Result<()>;
    fn OnInvoke(this: &Self::This, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IExpDispSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExpDispSupport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FindConnectionPoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppccp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindConnectionPoint(this, ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppccp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnTranslateAccelerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnTranslateAccelerator(this, ::core::mem::transmute_copy(&pmsg), ::core::mem::transmute_copy(&grfmodifiers)).into())
        }
        unsafe extern "system" fn OnInvoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnInvoke(this, ::core::mem::transmute_copy(&dispidmember), ::core::mem::transmute_copy(&iid), ::core::mem::transmute_copy(&lcid), ::core::mem::transmute_copy(&wflags), ::core::mem::transmute_copy(&pdispparams), ::core::mem::transmute_copy(&pvarresult), ::core::mem::transmute_copy(&pexcepinfo), ::core::mem::transmute_copy(&puargerr)).into())
        }
        IExpDispSupport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FindConnectionPoint: FindConnectionPoint::<Identity, Impl, OFFSET>,
            OnTranslateAccelerator: OnTranslateAccelerator::<Identity, Impl, OFFSET>,
            OnInvoke: OnInvoke::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IExpDispSupportXP_Impl: ::windows_core::BaseImpl {
    fn FindCIE4ConnectionPoint(this: &Self::This, riid: *const ::windows_core::GUID) -> ::windows_core::Result<CIE4ConnectionPoint>;
    fn OnTranslateAccelerator(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::Result<()>;
    fn OnInvoke(this: &Self::This, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IExpDispSupportXP {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupportXP_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExpDispSupportXP {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FindCIE4ConnectionPoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupportXP_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppccp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindCIE4ConnectionPoint(this, ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppccp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnTranslateAccelerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupportXP_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, grfmodifiers: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnTranslateAccelerator(this, ::core::mem::transmute_copy(&pmsg), ::core::mem::transmute_copy(&grfmodifiers)).into())
        }
        unsafe extern "system" fn OnInvoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExpDispSupportXP_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispidmember: i32, iid: *const ::windows_core::GUID, lcid: u32, wflags: u16, pdispparams: *const super::super::System::Com::DISPPARAMS, pvarresult: *mut super::super::System::Variant::VARIANT, pexcepinfo: *mut super::super::System::Com::EXCEPINFO, puargerr: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnInvoke(this, ::core::mem::transmute_copy(&dispidmember), ::core::mem::transmute_copy(&iid), ::core::mem::transmute_copy(&lcid), ::core::mem::transmute_copy(&wflags), ::core::mem::transmute_copy(&pdispparams), ::core::mem::transmute_copy(&pvarresult), ::core::mem::transmute_copy(&pexcepinfo), ::core::mem::transmute_copy(&puargerr)).into())
        }
        IExpDispSupportXP_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FindCIE4ConnectionPoint: FindCIE4ConnectionPoint::<Identity, Impl, OFFSET>,
            OnTranslateAccelerator: OnTranslateAccelerator::<Identity, Impl, OFFSET>,
            OnInvoke: OnInvoke::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IExplorerBrowser_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, pfs: *const FOLDERSETTINGS) -> ::windows_core::Result<()>;
    fn Destroy(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetRect(this: &Self::This, phdwp: *mut super::WindowsAndMessaging::HDWP, rcbrowser: &super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn SetPropertyBag(this: &Self::This, pszpropertybag: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetEmptyText(this: &Self::This, pszemptytext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFolderSettings(this: &Self::This, pfs: *const FOLDERSETTINGS) -> ::windows_core::Result<()>;
    fn Advise(this: &Self::This, psbe: ::core::option::Option<&IExplorerBrowserEvents>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn SetOptions(this: &Self::This, dwflag: EXPLORER_BROWSER_OPTIONS) -> ::windows_core::Result<()>;
    fn GetOptions(this: &Self::This) -> ::windows_core::Result<EXPLORER_BROWSER_OPTIONS>;
    fn BrowseToIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST, uflags: u32) -> ::windows_core::Result<()>;
    fn BrowseToObject(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, uflags: u32) -> ::windows_core::Result<()>;
    fn FillFromObject(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, dwflags: EXPLORER_BROWSER_FILL_FLAGS) -> ::windows_core::Result<()>;
    fn RemoveAll(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCurrentView(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IExplorerBrowser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExplorerBrowser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, pfs: *const FOLDERSETTINGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&hwndparent), ::core::mem::transmute_copy(&prc), ::core::mem::transmute_copy(&pfs)).into())
        }
        unsafe extern "system" fn Destroy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Destroy(this).into())
        }
        unsafe extern "system" fn SetRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phdwp: *mut super::WindowsAndMessaging::HDWP, rcbrowser: super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRect(this, ::core::mem::transmute_copy(&phdwp), ::core::mem::transmute(&rcbrowser)).into())
        }
        unsafe extern "system" fn SetPropertyBag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpropertybag: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPropertyBag(this, ::core::mem::transmute(&pszpropertybag)).into())
        }
        unsafe extern "system" fn SetEmptyText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszemptytext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEmptyText(this, ::core::mem::transmute(&pszemptytext)).into())
        }
        unsafe extern "system" fn SetFolderSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfs: *const FOLDERSETTINGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderSettings(this, ::core::mem::transmute_copy(&pfs)).into())
        }
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psbe: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&psbe)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn SetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflag: EXPLORER_BROWSER_OPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOptions(this, ::core::mem::transmute_copy(&dwflag)).into())
        }
        unsafe extern "system" fn GetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflag: *mut EXPLORER_BROWSER_OPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflag, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BrowseToIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BrowseToIDList(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&uflags)).into())
        }
        unsafe extern "system" fn BrowseToObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BrowseToObject(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&uflags)).into())
        }
        unsafe extern "system" fn FillFromObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, dwflags: EXPLORER_BROWSER_FILL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillFromObject(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn RemoveAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAll(this).into())
        }
        unsafe extern "system" fn GetCurrentView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentView(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IExplorerBrowser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Destroy: Destroy::<Identity, Impl, OFFSET>,
            SetRect: SetRect::<Identity, Impl, OFFSET>,
            SetPropertyBag: SetPropertyBag::<Identity, Impl, OFFSET>,
            SetEmptyText: SetEmptyText::<Identity, Impl, OFFSET>,
            SetFolderSettings: SetFolderSettings::<Identity, Impl, OFFSET>,
            Advise: Advise::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
            SetOptions: SetOptions::<Identity, Impl, OFFSET>,
            GetOptions: GetOptions::<Identity, Impl, OFFSET>,
            BrowseToIDList: BrowseToIDList::<Identity, Impl, OFFSET>,
            BrowseToObject: BrowseToObject::<Identity, Impl, OFFSET>,
            FillFromObject: FillFromObject::<Identity, Impl, OFFSET>,
            RemoveAll: RemoveAll::<Identity, Impl, OFFSET>,
            GetCurrentView: GetCurrentView::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
pub trait IExplorerBrowserEvents_Impl: ::windows_core::BaseImpl {
    fn OnNavigationPending(this: &Self::This, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn OnViewCreated(this: &Self::This, psv: ::core::option::Option<&IShellView>) -> ::windows_core::Result<()>;
    fn OnNavigationComplete(this: &Self::This, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn OnNavigationFailed(this: &Self::This, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IExplorerBrowserEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowserEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExplorerBrowserEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnNavigationPending<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowserEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNavigationPending(this, ::core::mem::transmute_copy(&pidlfolder)).into())
        }
        unsafe extern "system" fn OnViewCreated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowserEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnViewCreated(this, ::windows_core::from_raw_borrowed(&psv)).into())
        }
        unsafe extern "system" fn OnNavigationComplete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowserEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNavigationComplete(this, ::core::mem::transmute_copy(&pidlfolder)).into())
        }
        unsafe extern "system" fn OnNavigationFailed<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerBrowserEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNavigationFailed(this, ::core::mem::transmute_copy(&pidlfolder)).into())
        }
        IExplorerBrowserEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnNavigationPending: OnNavigationPending::<Identity, Impl, OFFSET>,
            OnViewCreated: OnViewCreated::<Identity, Impl, OFFSET>,
            OnNavigationComplete: OnNavigationComplete::<Identity, Impl, OFFSET>,
            OnNavigationFailed: OnNavigationFailed::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IExplorerCommand_Impl: ::windows_core::BaseImpl {
    fn GetTitle(this: &Self::This, psiitemarray: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetIcon(this: &Self::This, psiitemarray: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetToolTip(this: &Self::This, psiitemarray: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetCanonicalName(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetState(this: &Self::This, psiitemarray: ::core::option::Option<&IShellItemArray>, foktobeslow: super::super::Foundation::BOOL) -> ::windows_core::Result<u32>;
    fn Invoke(this: &Self::This, psiitemarray: ::core::option::Option<&IShellItemArray>, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn EnumSubCommands(this: &Self::This) -> ::windows_core::Result<IEnumExplorerCommand>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IExplorerCommand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExplorerCommand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTitle(this, ::windows_core::from_raw_borrowed(&psiitemarray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, ppszicon: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIcon(this, ::windows_core::from_raw_borrowed(&psiitemarray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszicon, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetToolTip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, ppszinfotip: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetToolTip(this, ::windows_core::from_raw_borrowed(&psiitemarray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszinfotip, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCanonicalName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidcommandname: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCanonicalName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidcommandname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, foktobeslow: super::super::Foundation::BOOL, pcmdstate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetState(this, ::windows_core::from_raw_borrowed(&psiitemarray), ::core::mem::transmute_copy(&foktobeslow)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcmdstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Invoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Invoke(this, ::windows_core::from_raw_borrowed(&psiitemarray), ::windows_core::from_raw_borrowed(&pbc)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumSubCommands<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumSubCommands(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExplorerCommand_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTitle: GetTitle::<Identity, Impl, OFFSET>,
            GetIcon: GetIcon::<Identity, Impl, OFFSET>,
            GetToolTip: GetToolTip::<Identity, Impl, OFFSET>,
            GetCanonicalName: GetCanonicalName::<Identity, Impl, OFFSET>,
            GetState: GetState::<Identity, Impl, OFFSET>,
            Invoke: Invoke::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            EnumSubCommands: EnumSubCommands::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IExplorerCommandProvider_Impl: ::windows_core::BaseImpl {
    fn GetCommands(this: &Self::This, punksite: ::core::option::Option<&::windows_core::IUnknown>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetCommand(this: &Self::This, rguidcommandid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IExplorerCommandProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommandProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExplorerCommandProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCommands<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommandProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punksite: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommands(this, ::windows_core::from_raw_borrowed(&punksite), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommandProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidcommandid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommand(this, ::core::mem::transmute_copy(&rguidcommandid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IExplorerCommandProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCommands: GetCommands::<Identity, Impl, OFFSET>,
            GetCommand: GetCommand::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IExplorerCommandState_Impl: ::windows_core::BaseImpl {
    fn GetState(this: &Self::This, psiitemarray: ::core::option::Option<&IShellItemArray>, foktobeslow: super::super::Foundation::BOOL) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IExplorerCommandState {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommandState_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExplorerCommandState {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerCommandState_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitemarray: *mut ::core::ffi::c_void, foktobeslow: super::super::Foundation::BOOL, pcmdstate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetState(this, ::windows_core::from_raw_borrowed(&psiitemarray), ::core::mem::transmute_copy(&foktobeslow)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcmdstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExplorerCommandState_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetState: GetState::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IExplorerPaneVisibility_Impl: ::windows_core::BaseImpl {
    fn GetPaneState(this: &Self::This, ep: *const ::windows_core::GUID) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IExplorerPaneVisibility {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerPaneVisibility_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExplorerPaneVisibility {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPaneState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExplorerPaneVisibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ep: *const ::windows_core::GUID, peps: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPaneState(this, ::core::mem::transmute_copy(&ep)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(peps, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExplorerPaneVisibility_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetPaneState: GetPaneState::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IExtensionServices_Impl: ::windows_core::BaseImpl {
    fn SetAdditionalHeaders(this: &Self::This, pwzadditionalheaders: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetAuthenticateData(this: &Self::This, phwnd: super::super::Foundation::HWND, pwzusername: &::windows_core::PCWSTR, pwzpassword: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IExtensionServices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtensionServices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExtensionServices {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAdditionalHeaders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtensionServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzadditionalheaders: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAdditionalHeaders(this, ::core::mem::transmute(&pwzadditionalheaders)).into())
        }
        unsafe extern "system" fn SetAuthenticateData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtensionServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwnd: super::super::Foundation::HWND, pwzusername: ::windows_core::PCWSTR, pwzpassword: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAuthenticateData(this, ::core::mem::transmute_copy(&phwnd), ::core::mem::transmute(&pwzusername), ::core::mem::transmute(&pwzpassword)).into())
        }
        IExtensionServices_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAdditionalHeaders: SetAdditionalHeaders::<Identity, Impl, OFFSET>,
            SetAuthenticateData: SetAuthenticateData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub trait IExtractIconA_Impl: ::windows_core::BaseImpl {
    fn GetIconLocation(this: &Self::This, uflags: u32, psziconfile: ::windows_core::PSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::Result<()>;
    fn Extract(this: &Self::This, pszfile: &::windows_core::PCSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::windows_core::Iids for IExtractIconA {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractIconA_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExtractIconA {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractIconA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uflags: u32, psziconfile: ::windows_core::PSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIconLocation(this, ::core::mem::transmute_copy(&uflags), ::core::mem::transmute_copy(&psziconfile), ::core::mem::transmute_copy(&cchmax), ::core::mem::transmute_copy(&piindex), ::core::mem::transmute_copy(&pwflags)).into())
        }
        unsafe extern "system" fn Extract<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractIconA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Extract(this, ::core::mem::transmute(&pszfile), ::core::mem::transmute_copy(&niconindex), ::core::mem::transmute_copy(&phiconlarge), ::core::mem::transmute_copy(&phiconsmall), ::core::mem::transmute_copy(&niconsize)).into())
        }
        IExtractIconA_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetIconLocation: GetIconLocation::<Identity, Impl, OFFSET>,
            Extract: Extract::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub trait IExtractIconW_Impl: ::windows_core::BaseImpl {
    fn GetIconLocation(this: &Self::This, uflags: u32, psziconfile: ::windows_core::PWSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::Result<()>;
    fn Extract(this: &Self::This, pszfile: &::windows_core::PCWSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::windows_core::Iids for IExtractIconW {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractIconW_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExtractIconW {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractIconW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uflags: u32, psziconfile: ::windows_core::PWSTR, cchmax: u32, piindex: *mut i32, pwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIconLocation(this, ::core::mem::transmute_copy(&uflags), ::core::mem::transmute_copy(&psziconfile), ::core::mem::transmute_copy(&cchmax), ::core::mem::transmute_copy(&piindex), ::core::mem::transmute_copy(&pwflags)).into())
        }
        unsafe extern "system" fn Extract<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractIconW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR, niconindex: u32, phiconlarge: *mut super::WindowsAndMessaging::HICON, phiconsmall: *mut super::WindowsAndMessaging::HICON, niconsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Extract(this, ::core::mem::transmute(&pszfile), ::core::mem::transmute_copy(&niconindex), ::core::mem::transmute_copy(&phiconlarge), ::core::mem::transmute_copy(&phiconsmall), ::core::mem::transmute_copy(&niconsize)).into())
        }
        IExtractIconW_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetIconLocation: GetIconLocation::<Identity, Impl, OFFSET>,
            Extract: Extract::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IExtractImage_Impl: ::windows_core::BaseImpl {
    fn GetLocation(this: &Self::This, pszpathbuffer: ::windows_core::PWSTR, cch: u32, pdwpriority: *mut u32, prgsize: *const super::super::Foundation::SIZE, dwrecclrdepth: u32, pdwflags: *mut u32) -> ::windows_core::Result<()>;
    fn Extract(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IExtractImage {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractImage_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExtractImage {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractImage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpathbuffer: ::windows_core::PWSTR, cch: u32, pdwpriority: *mut u32, prgsize: *const super::super::Foundation::SIZE, dwrecclrdepth: u32, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLocation(this, ::core::mem::transmute_copy(&pszpathbuffer), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&pdwpriority), ::core::mem::transmute_copy(&prgsize), ::core::mem::transmute_copy(&dwrecclrdepth), ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn Extract<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractImage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phbmpthumbnail: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Extract(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbmpthumbnail, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExtractImage_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLocation: GetLocation::<Identity, Impl, OFFSET>,
            Extract: Extract::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IExtractImage2_Impl: ::windows_core::BaseImpl + IExtractImage_Impl {
    fn GetDateStamp(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::FILETIME>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IExtractImage2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IExtractImage);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractImage2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IExtractImage2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDateStamp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IExtractImage2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdatestamp: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDateStamp(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdatestamp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IExtractImage2_Vtbl { base__: <IExtractImage as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetDateStamp: GetDateStamp::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IFileDialog_Impl: ::windows_core::BaseImpl + IModalWindow_Impl {
    fn SetFileTypes(this: &Self::This, cfiletypes: u32, rgfilterspec: *const Common::COMDLG_FILTERSPEC) -> ::windows_core::Result<()>;
    fn SetFileTypeIndex(this: &Self::This, ifiletype: u32) -> ::windows_core::Result<()>;
    fn GetFileTypeIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Advise(this: &Self::This, pfde: ::core::option::Option<&IFileDialogEvents>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn SetOptions(this: &Self::This, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::Result<()>;
    fn GetOptions(this: &Self::This) -> ::windows_core::Result<FILEOPENDIALOGOPTIONS>;
    fn SetDefaultFolder(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn SetFolder(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn GetFolder(this: &Self::This) -> ::windows_core::Result<IShellItem>;
    fn GetCurrentSelection(this: &Self::This) -> ::windows_core::Result<IShellItem>;
    fn SetFileName(this: &Self::This, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetFileName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetTitle(this: &Self::This, psztitle: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetOkButtonLabel(this: &Self::This, psztext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFileNameLabel(this: &Self::This, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetResult(this: &Self::This) -> ::windows_core::Result<IShellItem>;
    fn AddPlace(this: &Self::This, psi: ::core::option::Option<&IShellItem>, fdap: FDAP) -> ::windows_core::Result<()>;
    fn SetDefaultExtension(this: &Self::This, pszdefaultextension: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn SetClientGuid(this: &Self::This, guid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn ClearClientData(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetFilter(this: &Self::This, pfilter: ::core::option::Option<&IShellItemFilter>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IFileDialog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IModalWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileDialog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFileTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cfiletypes: u32, rgfilterspec: *const Common::COMDLG_FILTERSPEC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileTypes(this, ::core::mem::transmute_copy(&cfiletypes), ::core::mem::transmute_copy(&rgfilterspec)).into())
        }
        unsafe extern "system" fn SetFileTypeIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ifiletype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileTypeIndex(this, ::core::mem::transmute_copy(&ifiletype)).into())
        }
        unsafe extern "system" fn GetFileTypeIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pifiletype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFileTypeIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pifiletype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfde: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&pfde)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn SetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fos: FILEOPENDIALOGOPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOptions(this, ::core::mem::transmute_copy(&fos)).into())
        }
        unsafe extern "system" fn GetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfos: *mut FILEOPENDIALOGOPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfos, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultFolder(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn SetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolder(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn GetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSelection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileName(this, ::core::mem::transmute(&pszname)).into())
        }
        unsafe extern "system" fn GetFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFileName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTitle(this, ::core::mem::transmute(&psztitle)).into())
        }
        unsafe extern "system" fn SetOkButtonLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOkButtonLabel(this, ::core::mem::transmute(&psztext)).into())
        }
        unsafe extern "system" fn SetFileNameLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileNameLabel(this, ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn GetResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetResult(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddPlace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, fdap: FDAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPlace(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&fdap)).into())
        }
        unsafe extern "system" fn SetDefaultExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdefaultextension: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultExtension(this, ::core::mem::transmute(&pszdefaultextension)).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this, ::core::mem::transmute_copy(&hr)).into())
        }
        unsafe extern "system" fn SetClientGuid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientGuid(this, ::core::mem::transmute_copy(&guid)).into())
        }
        unsafe extern "system" fn ClearClientData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearClientData(this).into())
        }
        unsafe extern "system" fn SetFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfilter: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFilter(this, ::windows_core::from_raw_borrowed(&pfilter)).into())
        }
        IFileDialog_Vtbl {
            base__: <IModalWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFileTypes: SetFileTypes::<Identity, Impl, OFFSET>,
            SetFileTypeIndex: SetFileTypeIndex::<Identity, Impl, OFFSET>,
            GetFileTypeIndex: GetFileTypeIndex::<Identity, Impl, OFFSET>,
            Advise: Advise::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
            SetOptions: SetOptions::<Identity, Impl, OFFSET>,
            GetOptions: GetOptions::<Identity, Impl, OFFSET>,
            SetDefaultFolder: SetDefaultFolder::<Identity, Impl, OFFSET>,
            SetFolder: SetFolder::<Identity, Impl, OFFSET>,
            GetFolder: GetFolder::<Identity, Impl, OFFSET>,
            GetCurrentSelection: GetCurrentSelection::<Identity, Impl, OFFSET>,
            SetFileName: SetFileName::<Identity, Impl, OFFSET>,
            GetFileName: GetFileName::<Identity, Impl, OFFSET>,
            SetTitle: SetTitle::<Identity, Impl, OFFSET>,
            SetOkButtonLabel: SetOkButtonLabel::<Identity, Impl, OFFSET>,
            SetFileNameLabel: SetFileNameLabel::<Identity, Impl, OFFSET>,
            GetResult: GetResult::<Identity, Impl, OFFSET>,
            AddPlace: AddPlace::<Identity, Impl, OFFSET>,
            SetDefaultExtension: SetDefaultExtension::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
            SetClientGuid: SetClientGuid::<Identity, Impl, OFFSET>,
            ClearClientData: ClearClientData::<Identity, Impl, OFFSET>,
            SetFilter: SetFilter::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IFileDialog2_Impl: ::windows_core::BaseImpl + IFileDialog_Impl {
    fn SetCancelButtonLabel(this: &Self::This, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetNavigationRoot(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IFileDialog2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IFileDialog);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileDialog2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetCancelButtonLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCancelButtonLabel(this, ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn SetNavigationRoot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialog2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNavigationRoot(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        IFileDialog2_Vtbl {
            base__: <IFileDialog as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetCancelButtonLabel: SetCancelButtonLabel::<Identity, Impl, OFFSET>,
            SetNavigationRoot: SetNavigationRoot::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFileDialogControlEvents_Impl: ::windows_core::BaseImpl {
    fn OnItemSelected(this: &Self::This, pfdc: ::core::option::Option<&IFileDialogCustomize>, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<()>;
    fn OnButtonClicked(this: &Self::This, pfdc: ::core::option::Option<&IFileDialogCustomize>, dwidctl: u32) -> ::windows_core::Result<()>;
    fn OnCheckButtonToggled(this: &Self::This, pfdc: ::core::option::Option<&IFileDialogCustomize>, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OnControlActivating(this: &Self::This, pfdc: ::core::option::Option<&IFileDialogCustomize>, dwidctl: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFileDialogControlEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogControlEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileDialogControlEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnItemSelected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnItemSelected(this, ::windows_core::from_raw_borrowed(&pfdc), ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem)).into())
        }
        unsafe extern "system" fn OnButtonClicked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnButtonClicked(this, ::windows_core::from_raw_borrowed(&pfdc), ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn OnCheckButtonToggled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnCheckButtonToggled(this, ::windows_core::from_raw_borrowed(&pfdc), ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&bchecked)).into())
        }
        unsafe extern "system" fn OnControlActivating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfdc: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnControlActivating(this, ::windows_core::from_raw_borrowed(&pfdc), ::core::mem::transmute_copy(&dwidctl)).into())
        }
        IFileDialogControlEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnItemSelected: OnItemSelected::<Identity, Impl, OFFSET>,
            OnButtonClicked: OnButtonClicked::<Identity, Impl, OFFSET>,
            OnCheckButtonToggled: OnCheckButtonToggled::<Identity, Impl, OFFSET>,
            OnControlActivating: OnControlActivating::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFileDialogCustomize_Impl: ::windows_core::BaseImpl {
    fn EnableOpenDropDown(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<()>;
    fn AddMenu(this: &Self::This, dwidctl: u32, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddPushButton(this: &Self::This, dwidctl: u32, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddComboBox(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<()>;
    fn AddRadioButtonList(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<()>;
    fn AddCheckButton(this: &Self::This, dwidctl: u32, pszlabel: &::windows_core::PCWSTR, bchecked: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn AddEditBox(this: &Self::This, dwidctl: u32, psztext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddSeparator(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<()>;
    fn AddText(this: &Self::This, dwidctl: u32, psztext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetControlLabel(this: &Self::This, dwidctl: u32, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetControlState(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<CDCONTROLSTATEF>;
    fn SetControlState(this: &Self::This, dwidctl: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::Result<()>;
    fn GetEditBoxText(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<*mut u16>;
    fn SetEditBoxText(this: &Self::This, dwidctl: u32, psztext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetCheckButtonState(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetCheckButtonState(this: &Self::This, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn AddControlItem(this: &Self::This, dwidctl: u32, dwiditem: u32, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RemoveControlItem(this: &Self::This, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<()>;
    fn RemoveAllControlItems(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<()>;
    fn GetControlItemState(this: &Self::This, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<CDCONTROLSTATEF>;
    fn SetControlItemState(this: &Self::This, dwidctl: u32, dwiditem: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::Result<()>;
    fn GetSelectedControlItem(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<u32>;
    fn SetSelectedControlItem(this: &Self::This, dwidctl: u32, dwiditem: u32) -> ::windows_core::Result<()>;
    fn StartVisualGroup(this: &Self::This, dwidctl: u32, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EndVisualGroup(this: &Self::This) -> ::windows_core::Result<()>;
    fn MakeProminent(this: &Self::This, dwidctl: u32) -> ::windows_core::Result<()>;
    fn SetControlItemText(this: &Self::This, dwidctl: u32, dwiditem: u32, pszlabel: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFileDialogCustomize {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileDialogCustomize {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnableOpenDropDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableOpenDropDown(this, ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn AddMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddMenu(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn AddPushButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPushButton(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn AddComboBox<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddComboBox(this, ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn AddRadioButtonList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRadioButtonList(this, ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn AddCheckButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddCheckButton(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&pszlabel), ::core::mem::transmute_copy(&bchecked)).into())
        }
        unsafe extern "system" fn AddEditBox<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEditBox(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&psztext)).into())
        }
        unsafe extern "system" fn AddSeparator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSeparator(this, ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn AddText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddText(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&psztext)).into())
        }
        unsafe extern "system" fn SetControlLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetControlLabel(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn GetControlState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pdwstate: *mut CDCONTROLSTATEF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetControlState(this, ::core::mem::transmute_copy(&dwidctl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetControlState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetControlState(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwstate)).into())
        }
        unsafe extern "system" fn GetEditBoxText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, ppsztext: *mut *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEditBoxText(this, ::core::mem::transmute_copy(&dwidctl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsztext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEditBoxText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, psztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEditBoxText(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&psztext)).into())
        }
        unsafe extern "system" fn GetCheckButtonState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pbchecked: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCheckButtonState(this, ::core::mem::transmute_copy(&dwidctl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbchecked, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCheckButtonState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, bchecked: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCheckButtonState(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&bchecked)).into())
        }
        unsafe extern "system" fn AddControlItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddControlItem(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem), ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn RemoveControlItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveControlItem(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem)).into())
        }
        unsafe extern "system" fn RemoveAllControlItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllControlItems(this, ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn GetControlItemState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pdwstate: *mut CDCONTROLSTATEF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetControlItemState(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetControlItemState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, dwstate: CDCONTROLSTATEF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetControlItemState(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem), ::core::mem::transmute_copy(&dwstate)).into())
        }
        unsafe extern "system" fn GetSelectedControlItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pdwiditem: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectedControlItem(this, ::core::mem::transmute_copy(&dwidctl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwiditem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSelectedControlItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSelectedControlItem(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem)).into())
        }
        unsafe extern "system" fn StartVisualGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartVisualGroup(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute(&pszlabel)).into())
        }
        unsafe extern "system" fn EndVisualGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndVisualGroup(this).into())
        }
        unsafe extern "system" fn MakeProminent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MakeProminent(this, ::core::mem::transmute_copy(&dwidctl)).into())
        }
        unsafe extern "system" fn SetControlItemText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogCustomize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwidctl: u32, dwiditem: u32, pszlabel: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetControlItemText(this, ::core::mem::transmute_copy(&dwidctl), ::core::mem::transmute_copy(&dwiditem), ::core::mem::transmute(&pszlabel)).into())
        }
        IFileDialogCustomize_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnableOpenDropDown: EnableOpenDropDown::<Identity, Impl, OFFSET>,
            AddMenu: AddMenu::<Identity, Impl, OFFSET>,
            AddPushButton: AddPushButton::<Identity, Impl, OFFSET>,
            AddComboBox: AddComboBox::<Identity, Impl, OFFSET>,
            AddRadioButtonList: AddRadioButtonList::<Identity, Impl, OFFSET>,
            AddCheckButton: AddCheckButton::<Identity, Impl, OFFSET>,
            AddEditBox: AddEditBox::<Identity, Impl, OFFSET>,
            AddSeparator: AddSeparator::<Identity, Impl, OFFSET>,
            AddText: AddText::<Identity, Impl, OFFSET>,
            SetControlLabel: SetControlLabel::<Identity, Impl, OFFSET>,
            GetControlState: GetControlState::<Identity, Impl, OFFSET>,
            SetControlState: SetControlState::<Identity, Impl, OFFSET>,
            GetEditBoxText: GetEditBoxText::<Identity, Impl, OFFSET>,
            SetEditBoxText: SetEditBoxText::<Identity, Impl, OFFSET>,
            GetCheckButtonState: GetCheckButtonState::<Identity, Impl, OFFSET>,
            SetCheckButtonState: SetCheckButtonState::<Identity, Impl, OFFSET>,
            AddControlItem: AddControlItem::<Identity, Impl, OFFSET>,
            RemoveControlItem: RemoveControlItem::<Identity, Impl, OFFSET>,
            RemoveAllControlItems: RemoveAllControlItems::<Identity, Impl, OFFSET>,
            GetControlItemState: GetControlItemState::<Identity, Impl, OFFSET>,
            SetControlItemState: SetControlItemState::<Identity, Impl, OFFSET>,
            GetSelectedControlItem: GetSelectedControlItem::<Identity, Impl, OFFSET>,
            SetSelectedControlItem: SetSelectedControlItem::<Identity, Impl, OFFSET>,
            StartVisualGroup: StartVisualGroup::<Identity, Impl, OFFSET>,
            EndVisualGroup: EndVisualGroup::<Identity, Impl, OFFSET>,
            MakeProminent: MakeProminent::<Identity, Impl, OFFSET>,
            SetControlItemText: SetControlItemText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IFileDialogEvents_Impl: ::windows_core::BaseImpl {
    fn OnFileOk(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>) -> ::windows_core::Result<()>;
    fn OnFolderChanging(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>, psifolder: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnFolderChange(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>) -> ::windows_core::Result<()>;
    fn OnSelectionChange(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>) -> ::windows_core::Result<()>;
    fn OnShareViolation(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<FDE_SHAREVIOLATION_RESPONSE>;
    fn OnTypeChange(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>) -> ::windows_core::Result<()>;
    fn OnOverwrite(this: &Self::This, pfd: ::core::option::Option<&IFileDialog>, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<FDE_OVERWRITE_RESPONSE>;
}
impl ::windows_core::Iids for IFileDialogEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileDialogEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnFileOk<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFileOk(this, ::windows_core::from_raw_borrowed(&pfd)).into())
        }
        unsafe extern "system" fn OnFolderChanging<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void, psifolder: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFolderChanging(this, ::windows_core::from_raw_borrowed(&pfd), ::windows_core::from_raw_borrowed(&psifolder)).into())
        }
        unsafe extern "system" fn OnFolderChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFolderChange(this, ::windows_core::from_raw_borrowed(&pfd)).into())
        }
        unsafe extern "system" fn OnSelectionChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSelectionChange(this, ::windows_core::from_raw_borrowed(&pfd)).into())
        }
        unsafe extern "system" fn OnShareViolation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, presponse: *mut FDE_SHAREVIOLATION_RESPONSE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnShareViolation(this, ::windows_core::from_raw_borrowed(&pfd), ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(presponse, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnTypeChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnTypeChange(this, ::windows_core::from_raw_borrowed(&pfd)).into())
        }
        unsafe extern "system" fn OnOverwrite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileDialogEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, presponse: *mut FDE_OVERWRITE_RESPONSE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnOverwrite(this, ::windows_core::from_raw_borrowed(&pfd), ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(presponse, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFileDialogEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnFileOk: OnFileOk::<Identity, Impl, OFFSET>,
            OnFolderChanging: OnFolderChanging::<Identity, Impl, OFFSET>,
            OnFolderChange: OnFolderChange::<Identity, Impl, OFFSET>,
            OnSelectionChange: OnSelectionChange::<Identity, Impl, OFFSET>,
            OnShareViolation: OnShareViolation::<Identity, Impl, OFFSET>,
            OnTypeChange: OnTypeChange::<Identity, Impl, OFFSET>,
            OnOverwrite: OnOverwrite::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFileIsInUse_Impl: ::windows_core::BaseImpl {
    fn GetAppName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetUsage(this: &Self::This) -> ::windows_core::Result<FILE_USAGE_TYPE>;
    fn GetCapabilities(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSwitchToHWND(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn CloseFile(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFileIsInUse {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIsInUse_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileIsInUse {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAppName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIsInUse_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAppName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIsInUse_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfut: *mut FILE_USAGE_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUsage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfut, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIsInUse_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcapflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcapflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSwitchToHWND<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIsInUse_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSwitchToHWND(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CloseFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIsInUse_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseFile(this).into())
        }
        IFileIsInUse_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAppName: GetAppName::<Identity, Impl, OFFSET>,
            GetUsage: GetUsage::<Identity, Impl, OFFSET>,
            GetCapabilities: GetCapabilities::<Identity, Impl, OFFSET>,
            GetSwitchToHWND: GetSwitchToHWND::<Identity, Impl, OFFSET>,
            CloseFile: CloseFile::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IFileOpenDialog_Impl: ::windows_core::BaseImpl + IFileDialog_Impl {
    fn GetResults(this: &Self::This) -> ::windows_core::Result<IShellItemArray>;
    fn GetSelectedItems(this: &Self::This) -> ::windows_core::Result<IShellItemArray>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IFileOpenDialog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IFileDialog);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOpenDialog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileOpenDialog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetResults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOpenDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetResults(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectedItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOpenDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsai: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectedItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsai, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFileOpenDialog_Vtbl {
            base__: <IFileDialog as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetResults: GetResults::<Identity, Impl, OFFSET>,
            GetSelectedItems: GetSelectedItems::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IFileOperation_Impl: ::windows_core::BaseImpl {
    fn Advise(this: &Self::This, pfops: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn SetOperationFlags(this: &Self::This, dwoperationflags: FILEOPERATION_FLAGS) -> ::windows_core::Result<()>;
    fn SetProgressMessage(this: &Self::This, pszmessage: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetProgressDialog(this: &Self::This, popd: ::core::option::Option<&IOperationsProgressDialog>) -> ::windows_core::Result<()>;
    fn SetProperties(this: &Self::This, pproparray: ::core::option::Option<&PropertiesSystem::IPropertyChangeArray>) -> ::windows_core::Result<()>;
    fn SetOwnerWindow(this: &Self::This, hwndowner: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn ApplyPropertiesToItem(this: &Self::This, psiitem: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn ApplyPropertiesToItems(this: &Self::This, punkitems: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RenameItem(this: &Self::This, psiitem: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, pfopsitem: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<()>;
    fn RenameItems(this: &Self::This, punkitems: ::core::option::Option<&::windows_core::IUnknown>, psznewname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn MoveItem(this: &Self::This, psiitem: ::core::option::Option<&IShellItem>, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, pfopsitem: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<()>;
    fn MoveItems(this: &Self::This, punkitems: ::core::option::Option<&::windows_core::IUnknown>, psidestinationfolder: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn CopyItem(this: &Self::This, psiitem: ::core::option::Option<&IShellItem>, psidestinationfolder: ::core::option::Option<&IShellItem>, pszcopyname: &::windows_core::PCWSTR, pfopsitem: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<()>;
    fn CopyItems(this: &Self::This, punkitems: ::core::option::Option<&::windows_core::IUnknown>, psidestinationfolder: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn DeleteItem(this: &Self::This, psiitem: ::core::option::Option<&IShellItem>, pfopsitem: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<()>;
    fn DeleteItems(this: &Self::This, punkitems: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn NewItem(this: &Self::This, psidestinationfolder: ::core::option::Option<&IShellItem>, dwfileattributes: u32, pszname: &::windows_core::PCWSTR, psztemplatename: &::windows_core::PCWSTR, pfopsitem: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<()>;
    fn PerformOperations(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetAnyOperationsAborted(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IFileOperation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileOperation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfops: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&pfops)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn SetOperationFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoperationflags: FILEOPERATION_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOperationFlags(this, ::core::mem::transmute_copy(&dwoperationflags)).into())
        }
        unsafe extern "system" fn SetProgressMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszmessage: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgressMessage(this, ::core::mem::transmute(&pszmessage)).into())
        }
        unsafe extern "system" fn SetProgressDialog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, popd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgressDialog(this, ::windows_core::from_raw_borrowed(&popd)).into())
        }
        unsafe extern "system" fn SetProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pproparray: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProperties(this, ::windows_core::from_raw_borrowed(&pproparray)).into())
        }
        unsafe extern "system" fn SetOwnerWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOwnerWindow(this, ::core::mem::transmute_copy(&hwndowner)).into())
        }
        unsafe extern "system" fn ApplyPropertiesToItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ApplyPropertiesToItem(this, ::windows_core::from_raw_borrowed(&psiitem)).into())
        }
        unsafe extern "system" fn ApplyPropertiesToItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ApplyPropertiesToItems(this, ::windows_core::from_raw_borrowed(&punkitems)).into())
        }
        unsafe extern "system" fn RenameItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RenameItem(this, ::windows_core::from_raw_borrowed(&psiitem), ::core::mem::transmute(&psznewname), ::windows_core::from_raw_borrowed(&pfopsitem)).into())
        }
        unsafe extern "system" fn RenameItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RenameItems(this, ::windows_core::from_raw_borrowed(&punkitems), ::core::mem::transmute(&psznewname)).into())
        }
        unsafe extern "system" fn MoveItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveItem(this, ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname), ::windows_core::from_raw_borrowed(&pfopsitem)).into())
        }
        unsafe extern "system" fn MoveItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveItems(this, ::windows_core::from_raw_borrowed(&punkitems), ::windows_core::from_raw_borrowed(&psidestinationfolder)).into())
        }
        unsafe extern "system" fn CopyItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, pszcopyname: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyItem(this, ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&pszcopyname), ::windows_core::from_raw_borrowed(&pfopsitem)).into())
        }
        unsafe extern "system" fn CopyItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyItems(this, ::windows_core::from_raw_borrowed(&punkitems), ::windows_core::from_raw_borrowed(&psidestinationfolder)).into())
        }
        unsafe extern "system" fn DeleteItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteItem(this, ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&pfopsitem)).into())
        }
        unsafe extern "system" fn DeleteItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkitems: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteItems(this, ::windows_core::from_raw_borrowed(&punkitems)).into())
        }
        unsafe extern "system" fn NewItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, dwfileattributes: u32, pszname: ::windows_core::PCWSTR, psztemplatename: ::windows_core::PCWSTR, pfopsitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NewItem(this, ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute_copy(&dwfileattributes), ::core::mem::transmute(&pszname), ::core::mem::transmute(&psztemplatename), ::windows_core::from_raw_borrowed(&pfopsitem)).into())
        }
        unsafe extern "system" fn PerformOperations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PerformOperations(this).into())
        }
        unsafe extern "system" fn GetAnyOperationsAborted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfanyoperationsaborted: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAnyOperationsAborted(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfanyoperationsaborted, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFileOperation_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Advise: Advise::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
            SetOperationFlags: SetOperationFlags::<Identity, Impl, OFFSET>,
            SetProgressMessage: SetProgressMessage::<Identity, Impl, OFFSET>,
            SetProgressDialog: SetProgressDialog::<Identity, Impl, OFFSET>,
            SetProperties: SetProperties::<Identity, Impl, OFFSET>,
            SetOwnerWindow: SetOwnerWindow::<Identity, Impl, OFFSET>,
            ApplyPropertiesToItem: ApplyPropertiesToItem::<Identity, Impl, OFFSET>,
            ApplyPropertiesToItems: ApplyPropertiesToItems::<Identity, Impl, OFFSET>,
            RenameItem: RenameItem::<Identity, Impl, OFFSET>,
            RenameItems: RenameItems::<Identity, Impl, OFFSET>,
            MoveItem: MoveItem::<Identity, Impl, OFFSET>,
            MoveItems: MoveItems::<Identity, Impl, OFFSET>,
            CopyItem: CopyItem::<Identity, Impl, OFFSET>,
            CopyItems: CopyItems::<Identity, Impl, OFFSET>,
            DeleteItem: DeleteItem::<Identity, Impl, OFFSET>,
            DeleteItems: DeleteItems::<Identity, Impl, OFFSET>,
            NewItem: NewItem::<Identity, Impl, OFFSET>,
            PerformOperations: PerformOperations::<Identity, Impl, OFFSET>,
            GetAnyOperationsAborted: GetAnyOperationsAborted::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IFileOperation2_Impl: ::windows_core::BaseImpl + IFileOperation_Impl {
    fn SetOperationFlags2(this: &Self::This, operationflags2: FILE_OPERATION_FLAGS2) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IFileOperation2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IFileOperation);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileOperation2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOperationFlags2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperation2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, operationflags2: FILE_OPERATION_FLAGS2) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOperationFlags2(this, ::core::mem::transmute_copy(&operationflags2)).into())
        }
        IFileOperation2_Vtbl { base__: <IFileOperation as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetOperationFlags2: SetOperationFlags2::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IFileOperationProgressSink_Impl: ::windows_core::BaseImpl {
    fn StartOperations(this: &Self::This) -> ::windows_core::Result<()>;
    fn FinishOperations(this: &Self::This, hrresult: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn PreRenameItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn PostRenameItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, hrrename: ::windows_core::HRESULT, psinewlycreated: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn PreMoveItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn PostMoveItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, hrmove: ::windows_core::HRESULT, psinewlycreated: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn PreCopyItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn PostCopyItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, hrcopy: ::windows_core::HRESULT, psinewlycreated: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn PreDeleteItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn PostDeleteItem(this: &Self::This, dwflags: u32, psiitem: ::core::option::Option<&IShellItem>, hrdelete: ::windows_core::HRESULT, psinewlycreated: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn PreNewItem(this: &Self::This, dwflags: u32, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn PostNewItem(this: &Self::This, dwflags: u32, psidestinationfolder: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, psztemplatename: &::windows_core::PCWSTR, dwfileattributes: u32, hrnew: ::windows_core::HRESULT, psinewitem: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn UpdateProgress(this: &Self::This, iworktotal: u32, iworksofar: u32) -> ::windows_core::Result<()>;
    fn ResetTimer(this: &Self::This) -> ::windows_core::Result<()>;
    fn PauseTimer(this: &Self::This) -> ::windows_core::Result<()>;
    fn ResumeTimer(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IFileOperationProgressSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileOperationProgressSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartOperations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartOperations(this).into())
        }
        unsafe extern "system" fn FinishOperations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrresult: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FinishOperations(this, ::core::mem::transmute_copy(&hrresult)).into())
        }
        unsafe extern "system" fn PreRenameItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreRenameItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::core::mem::transmute(&psznewname)).into())
        }
        unsafe extern "system" fn PostRenameItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, hrrename: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostRenameItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::core::mem::transmute(&psznewname), ::core::mem::transmute_copy(&hrrename), ::windows_core::from_raw_borrowed(&psinewlycreated)).into())
        }
        unsafe extern "system" fn PreMoveItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreMoveItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname)).into())
        }
        unsafe extern "system" fn PostMoveItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, hrmove: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostMoveItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname), ::core::mem::transmute_copy(&hrmove), ::windows_core::from_raw_borrowed(&psinewlycreated)).into())
        }
        unsafe extern "system" fn PreCopyItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreCopyItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname)).into())
        }
        unsafe extern "system" fn PostCopyItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, hrcopy: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostCopyItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname), ::core::mem::transmute_copy(&hrcopy), ::windows_core::from_raw_borrowed(&psinewlycreated)).into())
        }
        unsafe extern "system" fn PreDeleteItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreDeleteItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem)).into())
        }
        unsafe extern "system" fn PostDeleteItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psiitem: *mut ::core::ffi::c_void, hrdelete: ::windows_core::HRESULT, psinewlycreated: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostDeleteItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psiitem), ::core::mem::transmute_copy(&hrdelete), ::windows_core::from_raw_borrowed(&psinewlycreated)).into())
        }
        unsafe extern "system" fn PreNewItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreNewItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname)).into())
        }
        unsafe extern "system" fn PostNewItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, psidestinationfolder: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, psztemplatename: ::windows_core::PCWSTR, dwfileattributes: u32, hrnew: ::windows_core::HRESULT, psinewitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostNewItem(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&psidestinationfolder), ::core::mem::transmute(&psznewname), ::core::mem::transmute(&psztemplatename), ::core::mem::transmute_copy(&dwfileattributes), ::core::mem::transmute_copy(&hrnew), ::windows_core::from_raw_borrowed(&psinewitem)).into())
        }
        unsafe extern "system" fn UpdateProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iworktotal: u32, iworksofar: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateProgress(this, ::core::mem::transmute_copy(&iworktotal), ::core::mem::transmute_copy(&iworksofar)).into())
        }
        unsafe extern "system" fn ResetTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetTimer(this).into())
        }
        unsafe extern "system" fn PauseTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PauseTimer(this).into())
        }
        unsafe extern "system" fn ResumeTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileOperationProgressSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResumeTimer(this).into())
        }
        IFileOperationProgressSink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartOperations: StartOperations::<Identity, Impl, OFFSET>,
            FinishOperations: FinishOperations::<Identity, Impl, OFFSET>,
            PreRenameItem: PreRenameItem::<Identity, Impl, OFFSET>,
            PostRenameItem: PostRenameItem::<Identity, Impl, OFFSET>,
            PreMoveItem: PreMoveItem::<Identity, Impl, OFFSET>,
            PostMoveItem: PostMoveItem::<Identity, Impl, OFFSET>,
            PreCopyItem: PreCopyItem::<Identity, Impl, OFFSET>,
            PostCopyItem: PostCopyItem::<Identity, Impl, OFFSET>,
            PreDeleteItem: PreDeleteItem::<Identity, Impl, OFFSET>,
            PostDeleteItem: PostDeleteItem::<Identity, Impl, OFFSET>,
            PreNewItem: PreNewItem::<Identity, Impl, OFFSET>,
            PostNewItem: PostNewItem::<Identity, Impl, OFFSET>,
            UpdateProgress: UpdateProgress::<Identity, Impl, OFFSET>,
            ResetTimer: ResetTimer::<Identity, Impl, OFFSET>,
            PauseTimer: PauseTimer::<Identity, Impl, OFFSET>,
            ResumeTimer: ResumeTimer::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IFileSaveDialog_Impl: ::windows_core::BaseImpl + IFileDialog_Impl {
    fn SetSaveAsItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn SetProperties(this: &Self::This, pstore: ::core::option::Option<&PropertiesSystem::IPropertyStore>) -> ::windows_core::Result<()>;
    fn SetCollectedProperties(this: &Self::This, plist: ::core::option::Option<&PropertiesSystem::IPropertyDescriptionList>, fappenddefault: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetProperties(this: &Self::This) -> ::windows_core::Result<PropertiesSystem::IPropertyStore>;
    fn ApplyProperties(this: &Self::This, psi: ::core::option::Option<&IShellItem>, pstore: ::core::option::Option<&PropertiesSystem::IPropertyStore>, hwnd: super::super::Foundation::HWND, psink: ::core::option::Option<&IFileOperationProgressSink>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IFileSaveDialog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IFileDialog);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSaveDialog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileSaveDialog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSaveAsItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSaveDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSaveAsItem(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn SetProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSaveDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstore: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProperties(this, ::windows_core::from_raw_borrowed(&pstore)).into())
        }
        unsafe extern "system" fn SetCollectedProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSaveDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plist: *mut ::core::ffi::c_void, fappenddefault: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCollectedProperties(this, ::windows_core::from_raw_borrowed(&plist), ::core::mem::transmute_copy(&fappenddefault)).into())
        }
        unsafe extern "system" fn GetProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSaveDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstore: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperties(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstore, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ApplyProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSaveDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pstore: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, psink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ApplyProperties(this, ::windows_core::from_raw_borrowed(&psi), ::windows_core::from_raw_borrowed(&pstore), ::core::mem::transmute_copy(&hwnd), ::windows_core::from_raw_borrowed(&psink)).into())
        }
        IFileSaveDialog_Vtbl {
            base__: <IFileDialog as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetSaveAsItem: SetSaveAsItem::<Identity, Impl, OFFSET>,
            SetProperties: SetProperties::<Identity, Impl, OFFSET>,
            SetCollectedProperties: SetCollectedProperties::<Identity, Impl, OFFSET>,
            GetProperties: GetProperties::<Identity, Impl, OFFSET>,
            ApplyProperties: ApplyProperties::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IFileSearchBand_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn SetFocus(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetSearchParameters(this: &Self::This, pbstrsearchid: *const ::windows_core::BSTR, bnavtoresults: super::super::Foundation::VARIANT_BOOL, pvarscope: *const super::super::System::Variant::VARIANT, pvarqueryfile: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn SearchID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Scope(this: &Self::This) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn QueryFile(this: &Self::This) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IFileSearchBand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSearchBand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileSearchBand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSearchBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFocus(this).into())
        }
        unsafe extern "system" fn SetSearchParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSearchBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsearchid: *const ::std::mem::MaybeUninit<::windows_core::BSTR>, bnavtoresults: super::super::Foundation::VARIANT_BOOL, pvarscope: *const super::super::System::Variant::VARIANT, pvarqueryfile: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSearchParameters(this, ::core::mem::transmute_copy(&pbstrsearchid), ::core::mem::transmute_copy(&bnavtoresults), ::core::mem::transmute_copy(&pvarscope), ::core::mem::transmute_copy(&pvarqueryfile)).into())
        }
        unsafe extern "system" fn SearchID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSearchBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsearchid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrsearchid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Scope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSearchBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarscope: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Scope(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarscope, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueryFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSearchBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarfile: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryFile(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarfile, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFileSearchBand_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFocus: SetFocus::<Identity, Impl, OFFSET>,
            SetSearchParameters: SetSearchParameters::<Identity, Impl, OFFSET>,
            SearchID: SearchID::<Identity, Impl, OFFSET>,
            Scope: Scope::<Identity, Impl, OFFSET>,
            QueryFile: QueryFile::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Graphics_Gdi\"`"]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub trait IFileSyncMergeHandler_Impl: ::windows_core::BaseImpl {
    fn Merge(this: &Self::This, localfilepath: &::windows_core::PCWSTR, serverfilepath: &::windows_core::PCWSTR) -> ::windows_core::Result<MERGE_UPDATE_STATUS>;
    fn ShowResolveConflictUIAsync(this: &Self::This, localfilepath: &::windows_core::PCWSTR, monitortodisplayon: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::windows_core::Iids for IFileSyncMergeHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSyncMergeHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileSyncMergeHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Merge<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSyncMergeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localfilepath: ::windows_core::PCWSTR, serverfilepath: ::windows_core::PCWSTR, updatestatus: *mut MERGE_UPDATE_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Merge(this, ::core::mem::transmute(&localfilepath), ::core::mem::transmute(&serverfilepath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(updatestatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShowResolveConflictUIAsync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSyncMergeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localfilepath: ::windows_core::PCWSTR, monitortodisplayon: super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowResolveConflictUIAsync(this, ::core::mem::transmute(&localfilepath), ::core::mem::transmute_copy(&monitortodisplayon)).into())
        }
        IFileSyncMergeHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Merge: Merge::<Identity, Impl, OFFSET>,
            ShowResolveConflictUIAsync: ShowResolveConflictUIAsync::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
pub trait IFileSystemBindData_Impl: ::windows_core::BaseImpl {
    fn SetFindData(this: &Self::This, pfd: *const super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::Result<()>;
    fn GetFindData(this: &Self::This, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl ::windows_core::Iids for IFileSystemBindData {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileSystemBindData {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFindData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *const super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFindData(this, ::core::mem::transmute_copy(&pfd)).into())
        }
        unsafe extern "system" fn GetFindData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFindData(this, ::core::mem::transmute_copy(&pfd)).into())
        }
        IFileSystemBindData_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFindData: SetFindData::<Identity, Impl, OFFSET>,
            GetFindData: GetFindData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
pub trait IFileSystemBindData2_Impl: ::windows_core::BaseImpl + IFileSystemBindData_Impl {
    fn SetFileID(this: &Self::This, lifileid: i64) -> ::windows_core::Result<()>;
    fn GetFileID(this: &Self::This) -> ::windows_core::Result<i64>;
    fn SetJunctionCLSID(this: &Self::This, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetJunctionCLSID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl ::windows_core::Iids for IFileSystemBindData2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IFileSystemBindData);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileSystemBindData2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFileID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lifileid: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileID(this, ::core::mem::transmute_copy(&lifileid)).into())
        }
        unsafe extern "system" fn GetFileID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plifileid: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFileID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plifileid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetJunctionCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetJunctionCLSID(this, ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn GetJunctionCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileSystemBindData2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pclsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetJunctionCLSID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFileSystemBindData2_Vtbl {
            base__: <IFileSystemBindData as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFileID: SetFileID::<Identity, Impl, OFFSET>,
            GetFileID: GetFileID::<Identity, Impl, OFFSET>,
            SetJunctionCLSID: SetJunctionCLSID::<Identity, Impl, OFFSET>,
            GetJunctionCLSID: GetJunctionCLSID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFolderBandPriv_Impl: ::windows_core::BaseImpl {
    fn SetCascade(this: &Self::This, fcascade: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetAccelerators(this: &Self::This, faccelerators: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetNoIcons(this: &Self::This, fnoicons: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetNoText(this: &Self::This, fnotext: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFolderBandPriv {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderBandPriv_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderBandPriv {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetCascade<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderBandPriv_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fcascade: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCascade(this, ::core::mem::transmute_copy(&fcascade)).into())
        }
        unsafe extern "system" fn SetAccelerators<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderBandPriv_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, faccelerators: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAccelerators(this, ::core::mem::transmute_copy(&faccelerators)).into())
        }
        unsafe extern "system" fn SetNoIcons<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderBandPriv_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fnoicons: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNoIcons(this, ::core::mem::transmute_copy(&fnoicons)).into())
        }
        unsafe extern "system" fn SetNoText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderBandPriv_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fnotext: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNoText(this, ::core::mem::transmute_copy(&fnotext)).into())
        }
        IFolderBandPriv_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetCascade: SetCascade::<Identity, Impl, OFFSET>,
            SetAccelerators: SetAccelerators::<Identity, Impl, OFFSET>,
            SetNoIcons: SetNoIcons::<Identity, Impl, OFFSET>,
            SetNoText: SetNoText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IFolderFilter_Impl: ::windows_core::BaseImpl {
    fn ShouldShow(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidlfolder: *const Common::ITEMIDLIST, pidlitem: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn GetEnumFlags(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidlfolder: *const Common::ITEMIDLIST, phwnd: *mut super::super::Foundation::HWND, pgrfflags: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IFolderFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShouldShow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, pidlitem: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShouldShow(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidlfolder), ::core::mem::transmute_copy(&pidlitem)).into())
        }
        unsafe extern "system" fn GetEnumFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, phwnd: *mut super::super::Foundation::HWND, pgrfflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEnumFlags(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidlfolder), ::core::mem::transmute_copy(&phwnd), ::core::mem::transmute_copy(&pgrfflags)).into())
        }
        IFolderFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShouldShow: ShouldShow::<Identity, Impl, OFFSET>,
            GetEnumFlags: GetEnumFlags::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IFolderFilterSite_Impl: ::windows_core::BaseImpl {
    fn SetFilter(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IFolderFilterSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderFilterSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderFilterSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderFilterSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFilter(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        IFolderFilterSite_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetFilter: SetFilter::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IFolderView_Impl: ::windows_core::BaseImpl {
    fn GetCurrentViewMode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentViewMode(this: &Self::This, viewmode: u32) -> ::windows_core::Result<()>;
    fn GetFolder(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn Item(this: &Self::This, iitemindex: i32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn ItemCount(this: &Self::This, uflags: &_SVGIO) -> ::windows_core::Result<i32>;
    fn Items(this: &Self::This, uflags: &_SVGIO, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetSelectionMarkedItem(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetFocusedItem(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetItemPosition(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<super::super::Foundation::POINT>;
    fn GetSpacing(this: &Self::This, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::Result<()>;
    fn GetDefaultSpacing(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::POINT>;
    fn GetAutoArrange(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectItem(this: &Self::This, iitem: i32, dwflags: u32) -> ::windows_core::Result<()>;
    fn SelectAndPositionItems(this: &Self::This, cidl: u32, apidl: *const *const Common::ITEMIDLIST, apt: *const super::super::Foundation::POINT, dwflags: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IFolderView {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderView {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCurrentViewMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pviewmode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentViewMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pviewmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentViewMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, viewmode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentViewMode(this, ::core::mem::transmute_copy(&viewmode)).into())
        }
        unsafe extern "system" fn GetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolder(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iitemindex: i32, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Item(this, ::core::mem::transmute_copy(&iitemindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ItemCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uflags: u32, pcitems: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ItemCount(this, ::core::mem::transmute(&uflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Items<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uflags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Items(this, ::core::mem::transmute(&uflags), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetSelectionMarkedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piitem: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectionMarkedItem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFocusedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piitem: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFocusedItem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemPosition(this, ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSpacing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpacing(this, ::core::mem::transmute_copy(&ppt)).into())
        }
        unsafe extern "system" fn GetDefaultSpacing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultSpacing(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAutoArrange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAutoArrange(this).into())
        }
        unsafe extern "system" fn SelectItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iitem: i32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectItem(this, ::core::mem::transmute_copy(&iitem), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn SelectAndPositionItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, apt: *const super::super::Foundation::POINT, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectAndPositionItems(this, ::core::mem::transmute_copy(&cidl), ::core::mem::transmute_copy(&apidl), ::core::mem::transmute_copy(&apt), ::core::mem::transmute_copy(&dwflags)).into())
        }
        IFolderView_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCurrentViewMode: GetCurrentViewMode::<Identity, Impl, OFFSET>,
            SetCurrentViewMode: SetCurrentViewMode::<Identity, Impl, OFFSET>,
            GetFolder: GetFolder::<Identity, Impl, OFFSET>,
            Item: Item::<Identity, Impl, OFFSET>,
            ItemCount: ItemCount::<Identity, Impl, OFFSET>,
            Items: Items::<Identity, Impl, OFFSET>,
            GetSelectionMarkedItem: GetSelectionMarkedItem::<Identity, Impl, OFFSET>,
            GetFocusedItem: GetFocusedItem::<Identity, Impl, OFFSET>,
            GetItemPosition: GetItemPosition::<Identity, Impl, OFFSET>,
            GetSpacing: GetSpacing::<Identity, Impl, OFFSET>,
            GetDefaultSpacing: GetDefaultSpacing::<Identity, Impl, OFFSET>,
            GetAutoArrange: GetAutoArrange::<Identity, Impl, OFFSET>,
            SelectItem: SelectItem::<Identity, Impl, OFFSET>,
            SelectAndPositionItems: SelectAndPositionItems::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IFolderView2_Impl: ::windows_core::BaseImpl + IFolderView_Impl {
    fn SetGroupBy(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY, fascending: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetGroupBy(this: &Self::This, pkey: *mut PropertiesSystem::PROPERTYKEY, pfascending: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetViewProperty(this: &Self::This, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn GetViewProperty(this: &Self::This, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn SetTileViewProperties(this: &Self::This, pidl: *const Common::ITEMIDLIST, pszproplist: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetExtendedTileViewProperties(this: &Self::This, pidl: *const Common::ITEMIDLIST, pszproplist: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetText(this: &Self::This, itype: FVTEXTTYPE, pwsztext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetCurrentFolderFlags(this: &Self::This, dwmask: u32, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetCurrentFolderFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSortColumnCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetSortColumns(this: &Self::This, rgsortcolumns: *const SORTCOLUMN, ccolumns: i32) -> ::windows_core::Result<()>;
    fn GetSortColumns(this: &Self::This, rgsortcolumns: *mut SORTCOLUMN, ccolumns: i32) -> ::windows_core::Result<()>;
    fn GetItem(this: &Self::This, iitem: i32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetVisibleItem(this: &Self::This, istart: i32, fprevious: super::super::Foundation::BOOL) -> ::windows_core::Result<i32>;
    fn GetSelectedItem(this: &Self::This, istart: i32) -> ::windows_core::Result<i32>;
    fn GetSelection(this: &Self::This, fnoneimpliesfolder: super::super::Foundation::BOOL) -> ::windows_core::Result<IShellItemArray>;
    fn GetSelectionState(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32>;
    fn InvokeVerbOnSelection(this: &Self::This, pszverb: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn SetViewModeAndIconSize(this: &Self::This, uviewmode: FOLDERVIEWMODE, iimagesize: i32) -> ::windows_core::Result<()>;
    fn GetViewModeAndIconSize(this: &Self::This, puviewmode: *mut FOLDERVIEWMODE, piimagesize: *mut i32) -> ::windows_core::Result<()>;
    fn SetGroupSubsetCount(this: &Self::This, cvisiblerows: u32) -> ::windows_core::Result<()>;
    fn GetGroupSubsetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRedraw(this: &Self::This, fredrawon: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn IsMoveInSameFolder(this: &Self::This) -> ::windows_core::Result<()>;
    fn DoRename(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IFolderView2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IFolderView);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderView2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetGroupBy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, fascending: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGroupBy(this, ::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&fascending)).into())
        }
        unsafe extern "system" fn GetGroupBy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkey: *mut PropertiesSystem::PROPERTYKEY, pfascending: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetGroupBy(this, ::core::mem::transmute_copy(&pkey), ::core::mem::transmute_copy(&pfascending)).into())
        }
        unsafe extern "system" fn SetViewProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, propvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetViewProperty(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&propkey), ::core::mem::transmute_copy(&propvar)).into())
        }
        unsafe extern "system" fn GetViewProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, propkey: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetViewProperty(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&propkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropvar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTileViewProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pszproplist: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTileViewProperties(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute(&pszproplist)).into())
        }
        unsafe extern "system" fn SetExtendedTileViewProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pszproplist: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExtendedTileViewProperties(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute(&pszproplist)).into())
        }
        unsafe extern "system" fn SetText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itype: FVTEXTTYPE, pwsztext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetText(this, ::core::mem::transmute_copy(&itype), ::core::mem::transmute(&pwsztext)).into())
        }
        unsafe extern "system" fn SetCurrentFolderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmask: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentFolderFlags(this, ::core::mem::transmute_copy(&dwmask), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetCurrentFolderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentFolderFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSortColumnCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pccolumns: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSortColumnCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pccolumns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSortColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rgsortcolumns: *const SORTCOLUMN, ccolumns: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSortColumns(this, ::core::mem::transmute_copy(&rgsortcolumns), ::core::mem::transmute_copy(&ccolumns)).into())
        }
        unsafe extern "system" fn GetSortColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rgsortcolumns: *mut SORTCOLUMN, ccolumns: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSortColumns(this, ::core::mem::transmute_copy(&rgsortcolumns), ::core::mem::transmute_copy(&ccolumns)).into())
        }
        unsafe extern "system" fn GetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iitem: i32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItem(this, ::core::mem::transmute_copy(&iitem), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetVisibleItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, istart: i32, fprevious: super::super::Foundation::BOOL, piitem: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVisibleItem(this, ::core::mem::transmute_copy(&istart), ::core::mem::transmute_copy(&fprevious)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, istart: i32, piitem: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectedItem(this, ::core::mem::transmute_copy(&istart)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fnoneimpliesfolder: super::super::Foundation::BOOL, ppsia: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelection(this, ::core::mem::transmute_copy(&fnoneimpliesfolder)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsia, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectionState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectionState(this, ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InvokeVerbOnSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszverb: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeVerbOnSelection(this, ::core::mem::transmute(&pszverb)).into())
        }
        unsafe extern "system" fn SetViewModeAndIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uviewmode: FOLDERVIEWMODE, iimagesize: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetViewModeAndIconSize(this, ::core::mem::transmute_copy(&uviewmode), ::core::mem::transmute_copy(&iimagesize)).into())
        }
        unsafe extern "system" fn GetViewModeAndIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puviewmode: *mut FOLDERVIEWMODE, piimagesize: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetViewModeAndIconSize(this, ::core::mem::transmute_copy(&puviewmode), ::core::mem::transmute_copy(&piimagesize)).into())
        }
        unsafe extern "system" fn SetGroupSubsetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cvisiblerows: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGroupSubsetCount(this, ::core::mem::transmute_copy(&cvisiblerows)).into())
        }
        unsafe extern "system" fn GetGroupSubsetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcvisiblerows: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGroupSubsetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcvisiblerows, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRedraw<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fredrawon: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRedraw(this, ::core::mem::transmute_copy(&fredrawon)).into())
        }
        unsafe extern "system" fn IsMoveInSameFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsMoveInSameFolder(this).into())
        }
        unsafe extern "system" fn DoRename<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DoRename(this).into())
        }
        IFolderView2_Vtbl {
            base__: <IFolderView as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetGroupBy: SetGroupBy::<Identity, Impl, OFFSET>,
            GetGroupBy: GetGroupBy::<Identity, Impl, OFFSET>,
            SetViewProperty: SetViewProperty::<Identity, Impl, OFFSET>,
            GetViewProperty: GetViewProperty::<Identity, Impl, OFFSET>,
            SetTileViewProperties: SetTileViewProperties::<Identity, Impl, OFFSET>,
            SetExtendedTileViewProperties: SetExtendedTileViewProperties::<Identity, Impl, OFFSET>,
            SetText: SetText::<Identity, Impl, OFFSET>,
            SetCurrentFolderFlags: SetCurrentFolderFlags::<Identity, Impl, OFFSET>,
            GetCurrentFolderFlags: GetCurrentFolderFlags::<Identity, Impl, OFFSET>,
            GetSortColumnCount: GetSortColumnCount::<Identity, Impl, OFFSET>,
            SetSortColumns: SetSortColumns::<Identity, Impl, OFFSET>,
            GetSortColumns: GetSortColumns::<Identity, Impl, OFFSET>,
            GetItem: GetItem::<Identity, Impl, OFFSET>,
            GetVisibleItem: GetVisibleItem::<Identity, Impl, OFFSET>,
            GetSelectedItem: GetSelectedItem::<Identity, Impl, OFFSET>,
            GetSelection: GetSelection::<Identity, Impl, OFFSET>,
            GetSelectionState: GetSelectionState::<Identity, Impl, OFFSET>,
            InvokeVerbOnSelection: InvokeVerbOnSelection::<Identity, Impl, OFFSET>,
            SetViewModeAndIconSize: SetViewModeAndIconSize::<Identity, Impl, OFFSET>,
            GetViewModeAndIconSize: GetViewModeAndIconSize::<Identity, Impl, OFFSET>,
            SetGroupSubsetCount: SetGroupSubsetCount::<Identity, Impl, OFFSET>,
            GetGroupSubsetCount: GetGroupSubsetCount::<Identity, Impl, OFFSET>,
            SetRedraw: SetRedraw::<Identity, Impl, OFFSET>,
            IsMoveInSameFolder: IsMoveInSameFolder::<Identity, Impl, OFFSET>,
            DoRename: DoRename::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IFolderViewHost_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, hwndparent: super::super::Foundation::HWND, pdo: ::core::option::Option<&super::super::System::Com::IDataObject>, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IFolderViewHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderViewHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, pdo: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&hwndparent), ::windows_core::from_raw_borrowed(&pdo), ::core::mem::transmute_copy(&prc)).into())
        }
        IFolderViewHost_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IFolderViewOC_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn SetFolderView(this: &Self::This, pdisp: ::core::option::Option<&super::super::System::Com::IDispatch>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IFolderViewOC {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewOC_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderViewOC {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFolderView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewOC_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdisp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderView(this, ::windows_core::from_raw_borrowed(&pdisp)).into())
        }
        IFolderViewOC_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFolderView: SetFolderView::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IFolderViewOptions_Impl: ::windows_core::BaseImpl {
    fn SetFolderViewOptions(this: &Self::This, fvomask: FOLDERVIEWOPTIONS, fvoflags: FOLDERVIEWOPTIONS) -> ::windows_core::Result<()>;
    fn GetFolderViewOptions(this: &Self::This) -> ::windows_core::Result<FOLDERVIEWOPTIONS>;
}
impl ::windows_core::Iids for IFolderViewOptions {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewOptions_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderViewOptions {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFolderViewOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewOptions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fvomask: FOLDERVIEWOPTIONS, fvoflags: FOLDERVIEWOPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderViewOptions(this, ::core::mem::transmute_copy(&fvomask), ::core::mem::transmute_copy(&fvoflags)).into())
        }
        unsafe extern "system" fn GetFolderViewOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewOptions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfvoflags: *mut FOLDERVIEWOPTIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolderViewOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfvoflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFolderViewOptions_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFolderViewOptions: SetFolderViewOptions::<Identity, Impl, OFFSET>,
            GetFolderViewOptions: GetFolderViewOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IFolderViewSettings_Impl: ::windows_core::BaseImpl {
    fn GetColumnPropertyList(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetGroupByProperty(this: &Self::This, pkey: *mut PropertiesSystem::PROPERTYKEY, pfgroupascending: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetViewMode(this: &Self::This) -> ::windows_core::Result<FOLDERLOGICALVIEWMODE>;
    fn GetIconSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFolderFlags(this: &Self::This, pfoldermask: *mut FOLDERFLAGS, pfolderflags: *mut FOLDERFLAGS) -> ::windows_core::Result<()>;
    fn GetSortColumns(this: &Self::This, rgsortcolumns: *mut SORTCOLUMN, ccolumnsin: u32, pccolumnsout: *mut u32) -> ::windows_core::Result<()>;
    fn GetGroupSubsetCount(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IFolderViewSettings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFolderViewSettings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetColumnPropertyList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetColumnPropertyList(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetGroupByProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkey: *mut PropertiesSystem::PROPERTYKEY, pfgroupascending: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetGroupByProperty(this, ::core::mem::transmute_copy(&pkey), ::core::mem::transmute_copy(&pfgroupascending)).into())
        }
        unsafe extern "system" fn GetViewMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plvm: *mut FOLDERLOGICALVIEWMODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetViewMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plvm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puiconsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIconSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puiconsize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFolderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfoldermask: *mut FOLDERFLAGS, pfolderflags: *mut FOLDERFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolderFlags(this, ::core::mem::transmute_copy(&pfoldermask), ::core::mem::transmute_copy(&pfolderflags)).into())
        }
        unsafe extern "system" fn GetSortColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rgsortcolumns: *mut SORTCOLUMN, ccolumnsin: u32, pccolumnsout: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSortColumns(this, ::core::mem::transmute_copy(&rgsortcolumns), ::core::mem::transmute_copy(&ccolumnsin), ::core::mem::transmute_copy(&pccolumnsout)).into())
        }
        unsafe extern "system" fn GetGroupSubsetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFolderViewSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcvisiblerows: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGroupSubsetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcvisiblerows, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFolderViewSettings_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetColumnPropertyList: GetColumnPropertyList::<Identity, Impl, OFFSET>,
            GetGroupByProperty: GetGroupByProperty::<Identity, Impl, OFFSET>,
            GetViewMode: GetViewMode::<Identity, Impl, OFFSET>,
            GetIconSize: GetIconSize::<Identity, Impl, OFFSET>,
            GetFolderFlags: GetFolderFlags::<Identity, Impl, OFFSET>,
            GetSortColumns: GetSortColumns::<Identity, Impl, OFFSET>,
            GetGroupSubsetCount: GetGroupSubsetCount::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFrameworkInputPane_Impl: ::windows_core::BaseImpl {
    fn Advise(this: &Self::This, pwindow: ::core::option::Option<&::windows_core::IUnknown>, phandler: ::core::option::Option<&IFrameworkInputPaneHandler>) -> ::windows_core::Result<u32>;
    fn AdviseWithHWND(this: &Self::This, hwnd: super::super::Foundation::HWND, phandler: ::core::option::Option<&IFrameworkInputPaneHandler>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn Location(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::RECT>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFrameworkInputPane {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPane_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFrameworkInputPane {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPane_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwindow: *mut ::core::ffi::c_void, phandler: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&pwindow), ::windows_core::from_raw_borrowed(&phandler)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AdviseWithHWND<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPane_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, phandler: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AdviseWithHWND(this, ::core::mem::transmute_copy(&hwnd), ::windows_core::from_raw_borrowed(&phandler)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPane_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn Location<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPane_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prcinputpanescreenlocation: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Location(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prcinputpanescreenlocation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IFrameworkInputPane_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Advise: Advise::<Identity, Impl, OFFSET>,
            AdviseWithHWND: AdviseWithHWND::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
            Location: Location::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFrameworkInputPaneHandler_Impl: ::windows_core::BaseImpl {
    fn Showing(this: &Self::This, prcinputpanescreenlocation: *const super::super::Foundation::RECT, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Hiding(this: &Self::This, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFrameworkInputPaneHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPaneHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFrameworkInputPaneHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Showing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPaneHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prcinputpanescreenlocation: *const super::super::Foundation::RECT, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Showing(this, ::core::mem::transmute_copy(&prcinputpanescreenlocation), ::core::mem::transmute_copy(&fensurefocusedelementinview)).into())
        }
        unsafe extern "system" fn Hiding<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFrameworkInputPaneHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fensurefocusedelementinview: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Hiding(this, ::core::mem::transmute_copy(&fensurefocusedelementinview)).into())
        }
        IFrameworkInputPaneHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Showing: Showing::<Identity, Impl, OFFSET>,
            Hiding: Hiding::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IGetServiceIds_Impl: ::windows_core::BaseImpl {
    fn GetServiceIds(this: &Self::This, serviceidcount: *mut u32, serviceids: *mut *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IGetServiceIds {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGetServiceIds_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGetServiceIds {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetServiceIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGetServiceIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, serviceidcount: *mut u32, serviceids: *mut *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetServiceIds(this, ::core::mem::transmute_copy(&serviceidcount), ::core::mem::transmute_copy(&serviceids)).into())
        }
        IGetServiceIds_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetServiceIds: GetServiceIds::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IHWEventHandler_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pszparams: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn HandleEvent(this: &Self::This, pszdeviceid: &::windows_core::PCWSTR, pszaltdeviceid: &::windows_core::PCWSTR, pszeventtype: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn HandleEventWithContent(this: &Self::This, pszdeviceid: &::windows_core::PCWSTR, pszaltdeviceid: &::windows_core::PCWSTR, pszeventtype: &::windows_core::PCWSTR, pszcontenttypehandler: &::windows_core::PCWSTR, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IHWEventHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHWEventHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHWEventHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHWEventHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszparams: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&pszparams)).into())
        }
        unsafe extern "system" fn HandleEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHWEventHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, pszaltdeviceid: ::windows_core::PCWSTR, pszeventtype: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HandleEvent(this, ::core::mem::transmute(&pszdeviceid), ::core::mem::transmute(&pszaltdeviceid), ::core::mem::transmute(&pszeventtype)).into())
        }
        unsafe extern "system" fn HandleEventWithContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHWEventHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, pszaltdeviceid: ::windows_core::PCWSTR, pszeventtype: ::windows_core::PCWSTR, pszcontenttypehandler: ::windows_core::PCWSTR, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HandleEventWithContent(this, ::core::mem::transmute(&pszdeviceid), ::core::mem::transmute(&pszaltdeviceid), ::core::mem::transmute(&pszeventtype), ::core::mem::transmute(&pszcontenttypehandler), ::windows_core::from_raw_borrowed(&pdataobject)).into())
        }
        IHWEventHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            HandleEvent: HandleEvent::<Identity, Impl, OFFSET>,
            HandleEventWithContent: HandleEventWithContent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IHWEventHandler2_Impl: ::windows_core::BaseImpl + IHWEventHandler_Impl {
    fn HandleEventWithHWND(this: &Self::This, pszdeviceid: &::windows_core::PCWSTR, pszaltdeviceid: &::windows_core::PCWSTR, pszeventtype: &::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IHWEventHandler2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IHWEventHandler);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHWEventHandler2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHWEventHandler2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn HandleEventWithHWND<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHWEventHandler2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdeviceid: ::windows_core::PCWSTR, pszaltdeviceid: ::windows_core::PCWSTR, pszeventtype: ::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HandleEventWithHWND(this, ::core::mem::transmute(&pszdeviceid), ::core::mem::transmute(&pszaltdeviceid), ::core::mem::transmute(&pszeventtype), ::core::mem::transmute_copy(&hwndowner)).into())
        }
        IHWEventHandler2_Vtbl {
            base__: <IHWEventHandler as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            HandleEventWithHWND: HandleEventWithHWND::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IHandlerActivationHost_Impl: ::windows_core::BaseImpl {
    fn BeforeCoCreateInstance(this: &Self::This, clsidhandler: *const ::windows_core::GUID, itemsbeingactivated: ::core::option::Option<&IShellItemArray>, handlerinfo: ::core::option::Option<&IHandlerInfo>) -> ::windows_core::Result<()>;
    fn BeforeCreateProcess(this: &Self::This, applicationpath: &::windows_core::PCWSTR, commandline: &::windows_core::PCWSTR, handlerinfo: ::core::option::Option<&IHandlerInfo>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IHandlerActivationHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerActivationHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHandlerActivationHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeforeCoCreateInstance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerActivationHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows_core::GUID, itemsbeingactivated: *mut ::core::ffi::c_void, handlerinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeforeCoCreateInstance(this, ::core::mem::transmute_copy(&clsidhandler), ::windows_core::from_raw_borrowed(&itemsbeingactivated), ::windows_core::from_raw_borrowed(&handlerinfo)).into())
        }
        unsafe extern "system" fn BeforeCreateProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerActivationHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, applicationpath: ::windows_core::PCWSTR, commandline: ::windows_core::PCWSTR, handlerinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeforeCreateProcess(this, ::core::mem::transmute(&applicationpath), ::core::mem::transmute(&commandline), ::windows_core::from_raw_borrowed(&handlerinfo)).into())
        }
        IHandlerActivationHost_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeforeCoCreateInstance: BeforeCoCreateInstance::<Identity, Impl, OFFSET>,
            BeforeCreateProcess: BeforeCreateProcess::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IHandlerInfo_Impl: ::windows_core::BaseImpl {
    fn GetApplicationDisplayName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetApplicationPublisher(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetApplicationIconReference(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IHandlerInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHandlerInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetApplicationDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetApplicationDisplayName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetApplicationPublisher<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetApplicationPublisher(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetApplicationIconReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetApplicationIconReference(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IHandlerInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetApplicationDisplayName: GetApplicationDisplayName::<Identity, Impl, OFFSET>,
            GetApplicationPublisher: GetApplicationPublisher::<Identity, Impl, OFFSET>,
            GetApplicationIconReference: GetApplicationIconReference::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IHandlerInfo2_Impl: ::windows_core::BaseImpl + IHandlerInfo_Impl {
    fn GetApplicationId(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IHandlerInfo2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IHandlerInfo);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerInfo2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHandlerInfo2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetApplicationId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHandlerInfo2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetApplicationId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IHandlerInfo2_Vtbl { base__: <IHandlerInfo as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetApplicationId: GetApplicationId::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IHlink_Impl: ::windows_core::BaseImpl {
    fn SetHlinkSite(this: &Self::This, pihlsite: ::core::option::Option<&IHlinkSite>, dwsitedata: u32) -> ::windows_core::Result<()>;
    fn GetHlinkSite(this: &Self::This, ppihlsite: *mut ::core::option::Option<IHlinkSite>, pdwsitedata: *mut u32) -> ::windows_core::Result<()>;
    fn SetMonikerReference(this: &Self::This, grfhlsetf: u32, pimktarget: ::core::option::Option<&super::super::System::Com::IMoniker>, pwzlocation: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetMonikerReference(this: &Self::This, dwwhichref: u32, ppimktarget: *mut ::core::option::Option<super::super::System::Com::IMoniker>, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetStringReference(this: &Self::This, grfhlsetf: u32, pwztarget: &::windows_core::PCWSTR, pwzlocation: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetStringReference(this: &Self::This, dwwhichref: u32, ppwztarget: *mut ::windows_core::PWSTR, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetFriendlyName(this: &Self::This, pwzfriendlyname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetFriendlyName(this: &Self::This, grfhlfnamef: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetTargetFrameName(this: &Self::This, pwztargetframename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetTargetFrameName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetMiscStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Navigate(this: &Self::This, grfhlnf: u32, pibc: ::core::option::Option<&super::super::System::Com::IBindCtx>, pibsc: ::core::option::Option<&super::super::System::Com::IBindStatusCallback>, pihlbc: ::core::option::Option<&IHlinkBrowseContext>) -> ::windows_core::Result<()>;
    fn SetAdditionalParams(this: &Self::This, pwzadditionalparams: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetAdditionalParams(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IHlink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHlink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetHlinkSite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pihlsite: *mut ::core::ffi::c_void, dwsitedata: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHlinkSite(this, ::windows_core::from_raw_borrowed(&pihlsite), ::core::mem::transmute_copy(&dwsitedata)).into())
        }
        unsafe extern "system" fn GetHlinkSite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppihlsite: *mut *mut ::core::ffi::c_void, pdwsitedata: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetHlinkSite(this, ::core::mem::transmute_copy(&ppihlsite), ::core::mem::transmute_copy(&pdwsitedata)).into())
        }
        unsafe extern "system" fn SetMonikerReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlsetf: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMonikerReference(this, ::core::mem::transmute_copy(&grfhlsetf), ::windows_core::from_raw_borrowed(&pimktarget), ::core::mem::transmute(&pwzlocation)).into())
        }
        unsafe extern "system" fn GetMonikerReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwwhichref: u32, ppimktarget: *mut *mut ::core::ffi::c_void, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMonikerReference(this, ::core::mem::transmute_copy(&dwwhichref), ::core::mem::transmute_copy(&ppimktarget), ::core::mem::transmute_copy(&ppwzlocation)).into())
        }
        unsafe extern "system" fn SetStringReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlsetf: u32, pwztarget: ::windows_core::PCWSTR, pwzlocation: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStringReference(this, ::core::mem::transmute_copy(&grfhlsetf), ::core::mem::transmute(&pwztarget), ::core::mem::transmute(&pwzlocation)).into())
        }
        unsafe extern "system" fn GetStringReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwwhichref: u32, ppwztarget: *mut ::windows_core::PWSTR, ppwzlocation: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStringReference(this, ::core::mem::transmute_copy(&dwwhichref), ::core::mem::transmute_copy(&ppwztarget), ::core::mem::transmute_copy(&ppwzlocation)).into())
        }
        unsafe extern "system" fn SetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFriendlyName(this, ::core::mem::transmute(&pwzfriendlyname)).into())
        }
        unsafe extern "system" fn GetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlfnamef: u32, ppwzfriendlyname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFriendlyName(this, ::core::mem::transmute_copy(&grfhlfnamef)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwzfriendlyname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTargetFrameName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwztargetframename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTargetFrameName(this, ::core::mem::transmute(&pwztargetframename)).into())
        }
        unsafe extern "system" fn GetTargetFrameName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwztargetframename: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTargetFrameName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwztargetframename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMiscStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstatus: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMiscStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Navigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pibc: *mut ::core::ffi::c_void, pibsc: *mut ::core::ffi::c_void, pihlbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Navigate(this, ::core::mem::transmute_copy(&grfhlnf), ::windows_core::from_raw_borrowed(&pibc), ::windows_core::from_raw_borrowed(&pibsc), ::windows_core::from_raw_borrowed(&pihlbc)).into())
        }
        unsafe extern "system" fn SetAdditionalParams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzadditionalparams: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAdditionalParams(this, ::core::mem::transmute(&pwzadditionalparams)).into())
        }
        unsafe extern "system" fn GetAdditionalParams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwzadditionalparams: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAdditionalParams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwzadditionalparams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IHlink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetHlinkSite: SetHlinkSite::<Identity, Impl, OFFSET>,
            GetHlinkSite: GetHlinkSite::<Identity, Impl, OFFSET>,
            SetMonikerReference: SetMonikerReference::<Identity, Impl, OFFSET>,
            GetMonikerReference: GetMonikerReference::<Identity, Impl, OFFSET>,
            SetStringReference: SetStringReference::<Identity, Impl, OFFSET>,
            GetStringReference: GetStringReference::<Identity, Impl, OFFSET>,
            SetFriendlyName: SetFriendlyName::<Identity, Impl, OFFSET>,
            GetFriendlyName: GetFriendlyName::<Identity, Impl, OFFSET>,
            SetTargetFrameName: SetTargetFrameName::<Identity, Impl, OFFSET>,
            GetTargetFrameName: GetTargetFrameName::<Identity, Impl, OFFSET>,
            GetMiscStatus: GetMiscStatus::<Identity, Impl, OFFSET>,
            Navigate: Navigate::<Identity, Impl, OFFSET>,
            SetAdditionalParams: SetAdditionalParams::<Identity, Impl, OFFSET>,
            GetAdditionalParams: GetAdditionalParams::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IHlinkBrowseContext_Impl: ::windows_core::BaseImpl {
    fn Register(this: &Self::This, reserved: u32, piunk: ::core::option::Option<&::windows_core::IUnknown>, pimk: ::core::option::Option<&super::super::System::Com::IMoniker>) -> ::windows_core::Result<u32>;
    fn GetObject(this: &Self::This, pimk: ::core::option::Option<&super::super::System::Com::IMoniker>, fbindifrootregistered: super::super::Foundation::BOOL) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Revoke(this: &Self::This, dwregister: u32) -> ::windows_core::Result<()>;
    fn SetBrowseWindowInfo(this: &Self::This, phlbwi: *const HLBWINFO) -> ::windows_core::Result<()>;
    fn GetBrowseWindowInfo(this: &Self::This, phlbwi: *mut HLBWINFO) -> ::windows_core::Result<()>;
    fn SetInitialHlink(this: &Self::This, pimktarget: ::core::option::Option<&super::super::System::Com::IMoniker>, pwzlocation: &::windows_core::PCWSTR, pwzfriendlyname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OnNavigateHlink(this: &Self::This, grfhlnf: u32, pimktarget: ::core::option::Option<&super::super::System::Com::IMoniker>, pwzlocation: &::windows_core::PCWSTR, pwzfriendlyname: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn UpdateHlink(this: &Self::This, uhlid: u32, pimktarget: ::core::option::Option<&super::super::System::Com::IMoniker>, pwzlocation: &::windows_core::PCWSTR, pwzfriendlyname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EnumNavigationStack(this: &Self::This, dwreserved: u32, grfhlfnamef: u32) -> ::windows_core::Result<IEnumHLITEM>;
    fn QueryHlink(this: &Self::This, grfhlqf: u32, uhlid: u32) -> ::windows_core::Result<()>;
    fn GetHlink(this: &Self::This, uhlid: u32) -> ::windows_core::Result<IHlink>;
    fn SetCurrentHlink(this: &Self::This, uhlid: u32) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This, piunkouter: ::core::option::Option<&::windows_core::IUnknown>, riid: *const ::windows_core::GUID) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Close(this: &Self::This, reserved: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IHlinkBrowseContext {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHlinkBrowseContext {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Register<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, reserved: u32, piunk: *mut ::core::ffi::c_void, pimk: *mut ::core::ffi::c_void, pdwregister: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Register(this, ::core::mem::transmute_copy(&reserved), ::windows_core::from_raw_borrowed(&piunk), ::windows_core::from_raw_borrowed(&pimk)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwregister, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimk: *mut ::core::ffi::c_void, fbindifrootregistered: super::super::Foundation::BOOL, ppiunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetObject(this, ::windows_core::from_raw_borrowed(&pimk), ::core::mem::transmute_copy(&fbindifrootregistered)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Revoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwregister: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Revoke(this, ::core::mem::transmute_copy(&dwregister)).into())
        }
        unsafe extern "system" fn SetBrowseWindowInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phlbwi: *const HLBWINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBrowseWindowInfo(this, ::core::mem::transmute_copy(&phlbwi)).into())
        }
        unsafe extern "system" fn GetBrowseWindowInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phlbwi: *mut HLBWINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBrowseWindowInfo(this, ::core::mem::transmute_copy(&phlbwi)).into())
        }
        unsafe extern "system" fn SetInitialHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInitialHlink(this, ::windows_core::from_raw_borrowed(&pimktarget), ::core::mem::transmute(&pwzlocation), ::core::mem::transmute(&pwzfriendlyname)).into())
        }
        unsafe extern "system" fn OnNavigateHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR, puhlid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnNavigateHlink(this, ::core::mem::transmute_copy(&grfhlnf), ::windows_core::from_raw_borrowed(&pimktarget), ::core::mem::transmute(&pwzlocation), ::core::mem::transmute(&pwzfriendlyname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puhlid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UpdateHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uhlid: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateHlink(this, ::core::mem::transmute_copy(&uhlid), ::windows_core::from_raw_borrowed(&pimktarget), ::core::mem::transmute(&pwzlocation), ::core::mem::transmute(&pwzfriendlyname)).into())
        }
        unsafe extern "system" fn EnumNavigationStack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreserved: u32, grfhlfnamef: u32, ppienumhlitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumNavigationStack(this, ::core::mem::transmute_copy(&dwreserved), ::core::mem::transmute_copy(&grfhlfnamef)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppienumhlitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueryHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlqf: u32, uhlid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryHlink(this, ::core::mem::transmute_copy(&grfhlqf), ::core::mem::transmute_copy(&uhlid)).into())
        }
        unsafe extern "system" fn GetHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uhlid: u32, ppihl: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHlink(this, ::core::mem::transmute_copy(&uhlid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppihl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uhlid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentHlink(this, ::core::mem::transmute_copy(&uhlid)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piunkouter: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppiunkobj: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this, ::windows_core::from_raw_borrowed(&piunkouter), ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiunkobj, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkBrowseContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, reserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this, ::core::mem::transmute_copy(&reserved)).into())
        }
        IHlinkBrowseContext_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Register: Register::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            Revoke: Revoke::<Identity, Impl, OFFSET>,
            SetBrowseWindowInfo: SetBrowseWindowInfo::<Identity, Impl, OFFSET>,
            GetBrowseWindowInfo: GetBrowseWindowInfo::<Identity, Impl, OFFSET>,
            SetInitialHlink: SetInitialHlink::<Identity, Impl, OFFSET>,
            OnNavigateHlink: OnNavigateHlink::<Identity, Impl, OFFSET>,
            UpdateHlink: UpdateHlink::<Identity, Impl, OFFSET>,
            EnumNavigationStack: EnumNavigationStack::<Identity, Impl, OFFSET>,
            QueryHlink: QueryHlink::<Identity, Impl, OFFSET>,
            GetHlink: GetHlink::<Identity, Impl, OFFSET>,
            SetCurrentHlink: SetCurrentHlink::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IHlinkFrame_Impl: ::windows_core::BaseImpl {
    fn SetBrowseContext(this: &Self::This, pihlbc: ::core::option::Option<&IHlinkBrowseContext>) -> ::windows_core::Result<()>;
    fn GetBrowseContext(this: &Self::This) -> ::windows_core::Result<IHlinkBrowseContext>;
    fn Navigate(this: &Self::This, grfhlnf: u32, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, pibsc: ::core::option::Option<&super::super::System::Com::IBindStatusCallback>, pihlnavigate: ::core::option::Option<&IHlink>) -> ::windows_core::Result<()>;
    fn OnNavigate(this: &Self::This, grfhlnf: u32, pimktarget: ::core::option::Option<&super::super::System::Com::IMoniker>, pwzlocation: &::windows_core::PCWSTR, pwzfriendlyname: &::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::Result<()>;
    fn UpdateHlink(this: &Self::This, uhlid: u32, pimktarget: ::core::option::Option<&super::super::System::Com::IMoniker>, pwzlocation: &::windows_core::PCWSTR, pwzfriendlyname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IHlinkFrame {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkFrame_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHlinkFrame {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBrowseContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pihlbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBrowseContext(this, ::windows_core::from_raw_borrowed(&pihlbc)).into())
        }
        unsafe extern "system" fn GetBrowseContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppihlbc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBrowseContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppihlbc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Navigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pbc: *mut ::core::ffi::c_void, pibsc: *mut ::core::ffi::c_void, pihlnavigate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Navigate(this, ::core::mem::transmute_copy(&grfhlnf), ::windows_core::from_raw_borrowed(&pbc), ::windows_core::from_raw_borrowed(&pibsc), ::windows_core::from_raw_borrowed(&pihlnavigate)).into())
        }
        unsafe extern "system" fn OnNavigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNavigate(this, ::core::mem::transmute_copy(&grfhlnf), ::windows_core::from_raw_borrowed(&pimktarget), ::core::mem::transmute(&pwzlocation), ::core::mem::transmute(&pwzfriendlyname), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn UpdateHlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uhlid: u32, pimktarget: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, pwzfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateHlink(this, ::core::mem::transmute_copy(&uhlid), ::windows_core::from_raw_borrowed(&pimktarget), ::core::mem::transmute(&pwzlocation), ::core::mem::transmute(&pwzfriendlyname)).into())
        }
        IHlinkFrame_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBrowseContext: SetBrowseContext::<Identity, Impl, OFFSET>,
            GetBrowseContext: GetBrowseContext::<Identity, Impl, OFFSET>,
            Navigate: Navigate::<Identity, Impl, OFFSET>,
            OnNavigate: OnNavigate::<Identity, Impl, OFFSET>,
            UpdateHlink: UpdateHlink::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IHlinkSite_Impl: ::windows_core::BaseImpl {
    fn QueryService(this: &Self::This, dwsitedata: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetMoniker(this: &Self::This, dwsitedata: u32, dwassign: u32, dwwhich: u32) -> ::windows_core::Result<super::super::System::Com::IMoniker>;
    fn ReadyToNavigate(this: &Self::This, dwsitedata: u32, dwreserved: u32) -> ::windows_core::Result<()>;
    fn OnNavigationComplete(this: &Self::This, dwsitedata: u32, dwreserved: u32, hrerror: ::windows_core::HRESULT, pwzerror: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IHlinkSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHlinkSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppiunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryService(this, ::core::mem::transmute_copy(&dwsitedata), ::core::mem::transmute_copy(&guidservice), ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMoniker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwassign: u32, dwwhich: u32, ppimk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMoniker(this, ::core::mem::transmute_copy(&dwsitedata), ::core::mem::transmute_copy(&dwassign), ::core::mem::transmute_copy(&dwwhich)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReadyToNavigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadyToNavigate(this, ::core::mem::transmute_copy(&dwsitedata), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn OnNavigationComplete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsitedata: u32, dwreserved: u32, hrerror: ::windows_core::HRESULT, pwzerror: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNavigationComplete(this, ::core::mem::transmute_copy(&dwsitedata), ::core::mem::transmute_copy(&dwreserved), ::core::mem::transmute_copy(&hrerror), ::core::mem::transmute(&pwzerror)).into())
        }
        IHlinkSite_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            QueryService: QueryService::<Identity, Impl, OFFSET>,
            GetMoniker: GetMoniker::<Identity, Impl, OFFSET>,
            ReadyToNavigate: ReadyToNavigate::<Identity, Impl, OFFSET>,
            OnNavigationComplete: OnNavigationComplete::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IHlinkTarget_Impl: ::windows_core::BaseImpl {
    fn SetBrowseContext(this: &Self::This, pihlbc: ::core::option::Option<&IHlinkBrowseContext>) -> ::windows_core::Result<()>;
    fn GetBrowseContext(this: &Self::This) -> ::windows_core::Result<IHlinkBrowseContext>;
    fn Navigate(this: &Self::This, grfhlnf: u32, pwzjumplocation: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetMoniker(this: &Self::This, pwzlocation: &::windows_core::PCWSTR, dwassign: u32) -> ::windows_core::Result<super::super::System::Com::IMoniker>;
    fn GetFriendlyName(this: &Self::This, pwzlocation: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IHlinkTarget {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkTarget_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHlinkTarget {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBrowseContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkTarget_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pihlbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBrowseContext(this, ::windows_core::from_raw_borrowed(&pihlbc)).into())
        }
        unsafe extern "system" fn GetBrowseContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkTarget_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppihlbc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBrowseContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppihlbc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Navigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkTarget_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfhlnf: u32, pwzjumplocation: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Navigate(this, ::core::mem::transmute_copy(&grfhlnf), ::core::mem::transmute(&pwzjumplocation)).into())
        }
        unsafe extern "system" fn GetMoniker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkTarget_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, dwassign: u32, ppimklocation: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMoniker(this, ::core::mem::transmute(&pwzlocation), ::core::mem::transmute_copy(&dwassign)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimklocation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHlinkTarget_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzlocation: ::windows_core::PCWSTR, ppwzfriendlyname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFriendlyName(this, ::core::mem::transmute(&pwzlocation)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwzfriendlyname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IHlinkTarget_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBrowseContext: SetBrowseContext::<Identity, Impl, OFFSET>,
            GetBrowseContext: GetBrowseContext::<Identity, Impl, OFFSET>,
            Navigate: Navigate::<Identity, Impl, OFFSET>,
            GetMoniker: GetMoniker::<Identity, Impl, OFFSET>,
            GetFriendlyName: GetFriendlyName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IHomeGroup_Impl: ::windows_core::BaseImpl {
    fn IsMember(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn ShowSharingWizard(this: &Self::This, owner: super::super::Foundation::HWND) -> ::windows_core::Result<HOMEGROUPSHARINGCHOICES>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IHomeGroup {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHomeGroup_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHomeGroup {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsMember<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHomeGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, member: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsMember(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(member, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShowSharingWizard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHomeGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, owner: super::super::Foundation::HWND, sharingchoices: *mut HOMEGROUPSHARINGCHOICES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ShowSharingWizard(this, ::core::mem::transmute_copy(&owner)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sharingchoices, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IHomeGroup_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsMember: IsMember::<Identity, Impl, OFFSET>,
            ShowSharingWizard: ShowSharingWizard::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIOCancelInformation_Impl: ::windows_core::BaseImpl {
    fn SetCancelInformation(this: &Self::This, dwthreadid: u32, umsgcancel: u32) -> ::windows_core::Result<()>;
    fn GetCancelInformation(this: &Self::This, pdwthreadid: *mut u32, pumsgcancel: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIOCancelInformation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIOCancelInformation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIOCancelInformation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetCancelInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIOCancelInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwthreadid: u32, umsgcancel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCancelInformation(this, ::core::mem::transmute_copy(&dwthreadid), ::core::mem::transmute_copy(&umsgcancel)).into())
        }
        unsafe extern "system" fn GetCancelInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIOCancelInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwthreadid: *mut u32, pumsgcancel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCancelInformation(this, ::core::mem::transmute_copy(&pdwthreadid), ::core::mem::transmute_copy(&pumsgcancel)).into())
        }
        IIOCancelInformation_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetCancelInformation: SetCancelInformation::<Identity, Impl, OFFSET>,
            GetCancelInformation: GetCancelInformation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IIdentityName_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IIdentityName {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIdentityName_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIdentityName {
    const VTABLE: Self::Vtable = { IIdentityName_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com_StructuredStorage\"`"]
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
pub trait IImageRecompress_Impl: ::windows_core::BaseImpl {
    fn RecompressImage(this: &Self::This, psi: ::core::option::Option<&IShellItem>, cx: i32, cy: i32, iquality: i32, pstg: ::core::option::Option<&super::super::System::Com::StructuredStorage::IStorage>) -> ::windows_core::Result<super::super::System::Com::IStream>;
}
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
impl ::windows_core::Iids for IImageRecompress {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IImageRecompress_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IImageRecompress {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RecompressImage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IImageRecompress_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, cx: i32, cy: i32, iquality: i32, pstg: *mut ::core::ffi::c_void, ppstrmout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecompressImage(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&cx), ::core::mem::transmute_copy(&cy), ::core::mem::transmute_copy(&iquality), ::windows_core::from_raw_borrowed(&pstg)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstrmout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IImageRecompress_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RecompressImage: RecompressImage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com_StructuredStorage\"`"]
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
pub trait IInitializeCommand_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pszcommandname: &::windows_core::PCWSTR, ppb: ::core::option::Option<&super::super::System::Com::StructuredStorage::IPropertyBag>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
impl ::windows_core::Iids for IInitializeCommand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com_StructuredStorage")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeCommand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeCommand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcommandname: ::windows_core::PCWSTR, ppb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&pszcommandname), ::windows_core::from_raw_borrowed(&ppb)).into())
        }
        IInitializeCommand_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IInitializeNetworkFolder_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pidl: *const Common::ITEMIDLIST, pidltarget: *const Common::ITEMIDLIST, udisplaytype: u32, pszresname: &::windows_core::PCWSTR, pszprovider: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IInitializeNetworkFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeNetworkFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeNetworkFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeNetworkFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pidltarget: *const Common::ITEMIDLIST, udisplaytype: u32, pszresname: ::windows_core::PCWSTR, pszprovider: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&pidltarget), ::core::mem::transmute_copy(&udisplaytype), ::core::mem::transmute(&pszresname), ::core::mem::transmute(&pszprovider)).into())
        }
        IInitializeNetworkFolder_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IInitializeObject_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IInitializeObject {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeObject_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeObject {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this).into())
        }
        IInitializeObject_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IInitializeWithBindCtx_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IInitializeWithBindCtx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithBindCtx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeWithBindCtx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithBindCtx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pbc)).into())
        }
        IInitializeWithBindCtx_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IInitializeWithItem_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psi: ::core::option::Option<&IShellItem>, grfmode: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IInitializeWithItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeWithItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, grfmode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&grfmode)).into())
        }
        IInitializeWithItem_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IInitializeWithPropertyStore_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pps: ::core::option::Option<&PropertiesSystem::IPropertyStore>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IInitializeWithPropertyStore {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithPropertyStore_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeWithPropertyStore {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithPropertyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pps: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pps)).into())
        }
        IInitializeWithPropertyStore_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IInitializeWithWindow_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IInitializeWithWindow {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithWindow_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInitializeWithWindow {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInitializeWithWindow_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        IInitializeWithWindow_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IInputObject_Impl: ::windows_core::BaseImpl {
    fn UIActivateIO(this: &Self::This, factivate: super::super::Foundation::BOOL, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
    fn HasFocusIO(this: &Self::This) -> ::windows_core::Result<()>;
    fn TranslateAcceleratorIO(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IInputObject {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObject_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInputObject {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UIActivateIO<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UIActivateIO(this, ::core::mem::transmute_copy(&factivate), ::core::mem::transmute_copy(&pmsg)).into())
        }
        unsafe extern "system" fn HasFocusIO<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HasFocusIO(this).into())
        }
        unsafe extern "system" fn TranslateAcceleratorIO<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateAcceleratorIO(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        IInputObject_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            UIActivateIO: UIActivateIO::<Identity, Impl, OFFSET>,
            HasFocusIO: HasFocusIO::<Identity, Impl, OFFSET>,
            TranslateAcceleratorIO: TranslateAcceleratorIO::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IInputObject2_Impl: ::windows_core::BaseImpl + IInputObject_Impl {
    fn TranslateAcceleratorGlobal(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IInputObject2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IInputObject);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObject2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInputObject2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TranslateAcceleratorGlobal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObject2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateAcceleratorGlobal(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        IInputObject2_Vtbl {
            base__: <IInputObject as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TranslateAcceleratorGlobal: TranslateAcceleratorGlobal::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IInputObjectSite_Impl: ::windows_core::BaseImpl {
    fn OnFocusChangeIS(this: &Self::This, punkobj: ::core::option::Option<&::windows_core::IUnknown>, fsetfocus: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IInputObjectSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObjectSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInputObjectSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnFocusChangeIS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputObjectSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkobj: *mut ::core::ffi::c_void, fsetfocus: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFocusChangeIS(this, ::windows_core::from_raw_borrowed(&punkobj), ::core::mem::transmute_copy(&fsetfocus)).into())
        }
        IInputObjectSite_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnFocusChangeIS: OnFocusChangeIS::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Graphics_DirectComposition\"`"]
#[cfg(feature = "Win32_Graphics_DirectComposition")]
pub trait IInputPaneAnimationCoordinator_Impl: ::windows_core::BaseImpl {
    fn AddAnimation(this: &Self::This, device: ::core::option::Option<&::windows_core::IUnknown>, animation: ::core::option::Option<&super::super::Graphics::DirectComposition::IDCompositionAnimation>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_DirectComposition")]
impl ::windows_core::Iids for IInputPaneAnimationCoordinator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_DirectComposition")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputPaneAnimationCoordinator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInputPaneAnimationCoordinator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddAnimation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputPaneAnimationCoordinator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, device: *mut ::core::ffi::c_void, animation: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAnimation(this, ::windows_core::from_raw_borrowed(&device), ::windows_core::from_raw_borrowed(&animation)).into())
        }
        IInputPaneAnimationCoordinator_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, AddAnimation: AddAnimation::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IInputPanelConfiguration_Impl: ::windows_core::BaseImpl {
    fn EnableFocusTracking(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IInputPanelConfiguration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputPanelConfiguration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInputPanelConfiguration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnableFocusTracking<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputPanelConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableFocusTracking(this).into())
        }
        IInputPanelConfiguration_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnableFocusTracking: EnableFocusTracking::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IInputPanelInvocationConfiguration_Impl: ::windows_core::BaseImpl {
    fn RequireTouchInEditControl(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IInputPanelInvocationConfiguration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputPanelInvocationConfiguration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInputPanelInvocationConfiguration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RequireTouchInEditControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInputPanelInvocationConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RequireTouchInEditControl(this).into())
        }
        IInputPanelInvocationConfiguration_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RequireTouchInEditControl: RequireTouchInEditControl::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IInsertItem_Impl: ::windows_core::BaseImpl {
    fn InsertItem(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IInsertItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInsertItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IInsertItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InsertItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IInsertItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertItem(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        IInsertItem_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, InsertItem: InsertItem::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IItemNameLimits_Impl: ::windows_core::BaseImpl {
    fn GetValidCharacters(this: &Self::This, ppwszvalidchars: *mut ::windows_core::PWSTR, ppwszinvalidchars: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn GetMaxLength(this: &Self::This, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<i32>;
}
impl ::windows_core::Iids for IItemNameLimits {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IItemNameLimits_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IItemNameLimits {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetValidCharacters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IItemNameLimits_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwszvalidchars: *mut ::windows_core::PWSTR, ppwszinvalidchars: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValidCharacters(this, ::core::mem::transmute_copy(&ppwszvalidchars), ::core::mem::transmute_copy(&ppwszinvalidchars)).into())
        }
        unsafe extern "system" fn GetMaxLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IItemNameLimits_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pimaxnamelen: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMaxLength(this, ::core::mem::transmute(&pszname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pimaxnamelen, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IItemNameLimits_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetValidCharacters: GetValidCharacters::<Identity, Impl, OFFSET>,
            GetMaxLength: GetMaxLength::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IKnownFolder_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetCategory(this: &Self::This) -> ::windows_core::Result<KF_CATEGORY>;
    fn GetShellItem(this: &Self::This, dwflags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPath(this: &Self::This, dwflags: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetPath(this: &Self::This, dwflags: u32, pszpath: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetIDList(this: &Self::This, dwflags: u32) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn GetFolderType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetRedirectionCapabilities(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFolderDefinition(this: &Self::This, pkfd: *mut KNOWNFOLDER_DEFINITION) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IKnownFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IKnownFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkfid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pkfid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcategory: *mut KF_CATEGORY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCategory(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcategory, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetShellItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetShellItem(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppszpath: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPath(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszpath, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pszpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPath(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute(&pszpath)).into())
        }
        unsafe extern "system" fn GetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIDList(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFolderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolderType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pftid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRedirectionCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcapabilities: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRedirectionCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcapabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFolderDefinition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkfd: *mut KNOWNFOLDER_DEFINITION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolderDefinition(this, ::core::mem::transmute_copy(&pkfd)).into())
        }
        IKnownFolder_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            GetCategory: GetCategory::<Identity, Impl, OFFSET>,
            GetShellItem: GetShellItem::<Identity, Impl, OFFSET>,
            GetPath: GetPath::<Identity, Impl, OFFSET>,
            SetPath: SetPath::<Identity, Impl, OFFSET>,
            GetIDList: GetIDList::<Identity, Impl, OFFSET>,
            GetFolderType: GetFolderType::<Identity, Impl, OFFSET>,
            GetRedirectionCapabilities: GetRedirectionCapabilities::<Identity, Impl, OFFSET>,
            GetFolderDefinition: GetFolderDefinition::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IKnownFolderManager_Impl: ::windows_core::BaseImpl {
    fn FolderIdFromCsidl(this: &Self::This, ncsidl: i32) -> ::windows_core::Result<::windows_core::GUID>;
    fn FolderIdToCsidl(this: &Self::This, rfid: *const ::windows_core::GUID) -> ::windows_core::Result<i32>;
    fn GetFolderIds(this: &Self::This, ppkfid: *mut *mut ::windows_core::GUID, pcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetFolder(this: &Self::This, rfid: *const ::windows_core::GUID) -> ::windows_core::Result<IKnownFolder>;
    fn GetFolderByName(this: &Self::This, pszcanonicalname: &::windows_core::PCWSTR) -> ::windows_core::Result<IKnownFolder>;
    fn RegisterFolder(this: &Self::This, rfid: *const ::windows_core::GUID, pkfd: *const KNOWNFOLDER_DEFINITION) -> ::windows_core::Result<()>;
    fn UnregisterFolder(this: &Self::This, rfid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn FindFolderFromPath(this: &Self::This, pszpath: &::windows_core::PCWSTR, mode: FFFP_MODE) -> ::windows_core::Result<IKnownFolder>;
    fn FindFolderFromIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<IKnownFolder>;
    fn Redirect(this: &Self::This, rfid: *const ::windows_core::GUID, hwnd: super::super::Foundation::HWND, flags: u32, psztargetpath: &::windows_core::PCWSTR, cfolders: u32, pexclusion: *const ::windows_core::GUID, ppszerror: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IKnownFolderManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IKnownFolderManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FolderIdFromCsidl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ncsidl: i32, pfid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FolderIdFromCsidl(this, ::core::mem::transmute_copy(&ncsidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FolderIdToCsidl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, pncsidl: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FolderIdToCsidl(this, ::core::mem::transmute_copy(&rfid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pncsidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFolderIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppkfid: *mut *mut ::windows_core::GUID, pcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolderIds(this, ::core::mem::transmute_copy(&ppkfid), ::core::mem::transmute_copy(&pcount)).into())
        }
        unsafe extern "system" fn GetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolder(this, ::core::mem::transmute_copy(&rfid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFolderByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcanonicalname: ::windows_core::PCWSTR, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolderByName(this, ::core::mem::transmute(&pszcanonicalname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, pkfd: *const KNOWNFOLDER_DEFINITION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterFolder(this, ::core::mem::transmute_copy(&rfid), ::core::mem::transmute_copy(&pkfd)).into())
        }
        unsafe extern "system" fn UnregisterFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterFolder(this, ::core::mem::transmute_copy(&rfid)).into())
        }
        unsafe extern "system" fn FindFolderFromPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, mode: FFFP_MODE, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindFolderFromPath(this, ::core::mem::transmute(&pszpath), ::core::mem::transmute_copy(&mode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindFolderFromIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppkf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindFolderFromIDList(this, ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Redirect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKnownFolderManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rfid: *const ::windows_core::GUID, hwnd: super::super::Foundation::HWND, flags: u32, psztargetpath: ::windows_core::PCWSTR, cfolders: u32, pexclusion: *const ::windows_core::GUID, ppszerror: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Redirect(this, ::core::mem::transmute_copy(&rfid), ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&psztargetpath), ::core::mem::transmute_copy(&cfolders), ::core::mem::transmute_copy(&pexclusion), ::core::mem::transmute_copy(&ppszerror)).into())
        }
        IKnownFolderManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FolderIdFromCsidl: FolderIdFromCsidl::<Identity, Impl, OFFSET>,
            FolderIdToCsidl: FolderIdToCsidl::<Identity, Impl, OFFSET>,
            GetFolderIds: GetFolderIds::<Identity, Impl, OFFSET>,
            GetFolder: GetFolder::<Identity, Impl, OFFSET>,
            GetFolderByName: GetFolderByName::<Identity, Impl, OFFSET>,
            RegisterFolder: RegisterFolder::<Identity, Impl, OFFSET>,
            UnregisterFolder: UnregisterFolder::<Identity, Impl, OFFSET>,
            FindFolderFromPath: FindFolderFromPath::<Identity, Impl, OFFSET>,
            FindFolderFromIDList: FindFolderFromIDList::<Identity, Impl, OFFSET>,
            Redirect: Redirect::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ILaunchSourceAppUserModelId_Impl: ::windows_core::BaseImpl {
    fn GetAppUserModelId(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for ILaunchSourceAppUserModelId {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchSourceAppUserModelId_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILaunchSourceAppUserModelId {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAppUserModelId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchSourceAppUserModelId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, launchingapp: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAppUserModelId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(launchingapp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ILaunchSourceAppUserModelId_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAppUserModelId: GetAppUserModelId::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ILaunchSourceViewSizePreference_Impl: ::windows_core::BaseImpl {
    fn GetSourceViewToPosition(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn GetSourceViewSizePreference(this: &Self::This) -> ::windows_core::Result<APPLICATION_VIEW_SIZE_PREFERENCE>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ILaunchSourceViewSizePreference {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchSourceViewSizePreference_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILaunchSourceViewSizePreference {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSourceViewToPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchSourceViewSizePreference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSourceViewToPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceViewSizePreference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchSourceViewSizePreference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sourcesizeafterlaunch: *mut APPLICATION_VIEW_SIZE_PREFERENCE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSourceViewSizePreference(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sourcesizeafterlaunch, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ILaunchSourceViewSizePreference_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSourceViewToPosition: GetSourceViewToPosition::<Identity, Impl, OFFSET>,
            GetSourceViewSizePreference: GetSourceViewSizePreference::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Graphics_Gdi\"`"]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub trait ILaunchTargetMonitor_Impl: ::windows_core::BaseImpl {
    fn GetMonitor(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HMONITOR>;
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::windows_core::Iids for ILaunchTargetMonitor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchTargetMonitor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILaunchTargetMonitor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMonitor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchTargetMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, monitor: *mut super::super::Graphics::Gdi::HMONITOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMonitor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(monitor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ILaunchTargetMonitor_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetMonitor: GetMonitor::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ILaunchTargetViewSizePreference_Impl: ::windows_core::BaseImpl {
    fn GetTargetViewSizePreference(this: &Self::This) -> ::windows_core::Result<APPLICATION_VIEW_SIZE_PREFERENCE>;
}
impl ::windows_core::Iids for ILaunchTargetViewSizePreference {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchTargetViewSizePreference_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILaunchTargetViewSizePreference {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTargetViewSizePreference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchTargetViewSizePreference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, targetsizeonlaunch: *mut APPLICATION_VIEW_SIZE_PREFERENCE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTargetViewSizePreference(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(targetsizeonlaunch, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ILaunchTargetViewSizePreference_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTargetViewSizePreference: GetTargetViewSizePreference::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ILaunchUIContext_Impl: ::windows_core::BaseImpl {
    fn SetAssociatedWindow(this: &Self::This, value: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn SetTabGroupingPreference(this: &Self::This, value: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ILaunchUIContext {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchUIContext_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILaunchUIContext {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAssociatedWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchUIContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAssociatedWindow(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn SetTabGroupingPreference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchUIContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTabGroupingPreference(this, ::core::mem::transmute_copy(&value)).into())
        }
        ILaunchUIContext_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAssociatedWindow: SetAssociatedWindow::<Identity, Impl, OFFSET>,
            SetTabGroupingPreference: SetTabGroupingPreference::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ILaunchUIContextProvider_Impl: ::windows_core::BaseImpl {
    fn UpdateContext(this: &Self::This, context: ::core::option::Option<&ILaunchUIContext>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ILaunchUIContextProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchUIContextProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILaunchUIContextProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UpdateContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILaunchUIContextProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateContext(this, ::windows_core::from_raw_borrowed(&context)).into())
        }
        ILaunchUIContextProvider_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, UpdateContext: UpdateContext::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IMenuBand_Impl: ::windows_core::BaseImpl {
    fn IsMenuMessage(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
    fn TranslateMenuMessage(this: &Self::This, pmsg: *mut super::WindowsAndMessaging::MSG, plret: *mut super::super::Foundation::LRESULT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IMenuBand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuBand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMenuBand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsMenuMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsMenuMessage(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        unsafe extern "system" fn TranslateMenuMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *mut super::WindowsAndMessaging::MSG, plret: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateMenuMessage(this, ::core::mem::transmute_copy(&pmsg), ::core::mem::transmute_copy(&plret)).into())
        }
        IMenuBand_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsMenuMessage: IsMenuMessage::<Identity, Impl, OFFSET>,
            TranslateMenuMessage: TranslateMenuMessage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
pub trait IMenuPopup_Impl: ::windows_core::BaseImpl + IDeskBar_Impl {
    fn Popup(this: &Self::This, ppt: *const super::super::Foundation::POINTL, prcexclude: *const super::super::Foundation::RECTL, dwflags: i32) -> ::windows_core::Result<()>;
    fn OnSelect(this: &Self::This, dwselecttype: u32) -> ::windows_core::Result<()>;
    fn SetSubMenu(this: &Self::This, pmp: ::core::option::Option<&IMenuPopup>, fset: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl ::windows_core::Iids for IMenuPopup {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDeskBar);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuPopup_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMenuPopup {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Popup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuPopup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINTL, prcexclude: *const super::super::Foundation::RECTL, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Popup(this, ::core::mem::transmute_copy(&ppt), ::core::mem::transmute_copy(&prcexclude), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn OnSelect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuPopup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwselecttype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSelect(this, ::core::mem::transmute_copy(&dwselecttype)).into())
        }
        unsafe extern "system" fn SetSubMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMenuPopup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmp: *mut ::core::ffi::c_void, fset: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSubMenu(this, ::windows_core::from_raw_borrowed(&pmp), ::core::mem::transmute_copy(&fset)).into())
        }
        IMenuPopup_Vtbl {
            base__: <IDeskBar as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Popup: Popup::<Identity, Impl, OFFSET>,
            OnSelect: OnSelect::<Identity, Impl, OFFSET>,
            SetSubMenu: SetSubMenu::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IModalWindow_Impl: ::windows_core::BaseImpl {
    fn Show(this: &Self::This, hwndowner: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IModalWindow {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModalWindow_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModalWindow {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Show<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModalWindow_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Show(this, ::core::mem::transmute_copy(&hwndowner)).into())
        }
        IModalWindow_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Show: Show::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait INameSpaceTreeAccessible_Impl: ::windows_core::BaseImpl {
    fn OnGetDefaultAccessibilityAction(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<::windows_core::BSTR>;
    fn OnDoDefaultAccessibilityAction(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnGetAccessibilityRole(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for INameSpaceTreeAccessible {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeAccessible_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeAccessible {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnGetDefaultAccessibilityAction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeAccessible_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pbstrdefaultaction: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnGetDefaultAccessibilityAction(this, ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrdefaultaction, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnDoDefaultAccessibilityAction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeAccessible_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDoDefaultAccessibilityAction(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnGetAccessibilityRole<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeAccessible_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pvarrole: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnGetAccessibilityRole(this, ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarrole, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        INameSpaceTreeAccessible_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnGetDefaultAccessibilityAction: OnGetDefaultAccessibilityAction::<Identity, Impl, OFFSET>,
            OnDoDefaultAccessibilityAction: OnDoDefaultAccessibilityAction::<Identity, Impl, OFFSET>,
            OnGetAccessibilityRole: OnGetAccessibilityRole::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INameSpaceTreeControl_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, nsctsflags: u32) -> ::windows_core::Result<()>;
    fn TreeAdvise(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<u32>;
    fn TreeUnadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn AppendRoot(this: &Self::This, psiroot: ::core::option::Option<&IShellItem>, grfenumflags: u32, grfrootstyle: u32, pif: ::core::option::Option<&IShellItemFilter>) -> ::windows_core::Result<()>;
    fn InsertRoot(this: &Self::This, iindex: i32, psiroot: ::core::option::Option<&IShellItem>, grfenumflags: u32, grfrootstyle: u32, pif: ::core::option::Option<&IShellItemFilter>) -> ::windows_core::Result<()>;
    fn RemoveRoot(this: &Self::This, psiroot: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn RemoveAllRoots(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRootItems(this: &Self::This) -> ::windows_core::Result<IShellItemArray>;
    fn SetItemState(this: &Self::This, psi: ::core::option::Option<&IShellItem>, nstcismask: u32, nstcisflags: u32) -> ::windows_core::Result<()>;
    fn GetItemState(this: &Self::This, psi: ::core::option::Option<&IShellItem>, nstcismask: u32) -> ::windows_core::Result<u32>;
    fn GetSelectedItems(this: &Self::This) -> ::windows_core::Result<IShellItemArray>;
    fn GetItemCustomState(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<i32>;
    fn SetItemCustomState(this: &Self::This, psi: ::core::option::Option<&IShellItem>, istatenumber: i32) -> ::windows_core::Result<()>;
    fn EnsureItemVisible(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn SetTheme(this: &Self::This, psztheme: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetNextItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>, nstcgi: NSTCGNI) -> ::windows_core::Result<IShellItem>;
    fn HitTest(this: &Self::This, ppt: *const super::super::Foundation::POINT) -> ::windows_core::Result<IShellItem>;
    fn GetItemRect(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<super::super::Foundation::RECT>;
    fn CollapseAll(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INameSpaceTreeControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT, nsctsflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&hwndparent), ::core::mem::transmute_copy(&prc), ::core::mem::transmute_copy(&nsctsflags)).into())
        }
        unsafe extern "system" fn TreeAdvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TreeAdvise(this, ::windows_core::from_raw_borrowed(&punk)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TreeUnadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TreeUnadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn AppendRoot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiroot: *mut ::core::ffi::c_void, grfenumflags: u32, grfrootstyle: u32, pif: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendRoot(this, ::windows_core::from_raw_borrowed(&psiroot), ::core::mem::transmute_copy(&grfenumflags), ::core::mem::transmute_copy(&grfrootstyle), ::windows_core::from_raw_borrowed(&pif)).into())
        }
        unsafe extern "system" fn InsertRoot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iindex: i32, psiroot: *mut ::core::ffi::c_void, grfenumflags: u32, grfrootstyle: u32, pif: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertRoot(this, ::core::mem::transmute_copy(&iindex), ::windows_core::from_raw_borrowed(&psiroot), ::core::mem::transmute_copy(&grfenumflags), ::core::mem::transmute_copy(&grfrootstyle), ::windows_core::from_raw_borrowed(&pif)).into())
        }
        unsafe extern "system" fn RemoveRoot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiroot: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveRoot(this, ::windows_core::from_raw_borrowed(&psiroot)).into())
        }
        unsafe extern "system" fn RemoveAllRoots<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllRoots(this).into())
        }
        unsafe extern "system" fn GetRootItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsiarootitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRootItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsiarootitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetItemState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, nstcisflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemState(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&nstcismask), ::core::mem::transmute_copy(&nstcisflags)).into())
        }
        unsafe extern "system" fn GetItemState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, pnstcisflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemState(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&nstcismask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnstcisflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectedItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiaitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectedItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psiaitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemCustomState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pistatenumber: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemCustomState(this, ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pistatenumber, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetItemCustomState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, istatenumber: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemCustomState(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&istatenumber)).into())
        }
        unsafe extern "system" fn EnsureItemVisible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnsureItemVisible(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn SetTheme<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztheme: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTheme(this, ::core::mem::transmute(&psztheme)).into())
        }
        unsafe extern "system" fn GetNextItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcgi: NSTCGNI, ppsinext: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextItem(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&nstcgi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsinext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HitTest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *const super::super::Foundation::POINT, ppsiout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HitTest(this, ::core::mem::transmute_copy(&ppt)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsiout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, prect: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemRect(this, ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CollapseAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CollapseAll(this).into())
        }
        INameSpaceTreeControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            TreeAdvise: TreeAdvise::<Identity, Impl, OFFSET>,
            TreeUnadvise: TreeUnadvise::<Identity, Impl, OFFSET>,
            AppendRoot: AppendRoot::<Identity, Impl, OFFSET>,
            InsertRoot: InsertRoot::<Identity, Impl, OFFSET>,
            RemoveRoot: RemoveRoot::<Identity, Impl, OFFSET>,
            RemoveAllRoots: RemoveAllRoots::<Identity, Impl, OFFSET>,
            GetRootItems: GetRootItems::<Identity, Impl, OFFSET>,
            SetItemState: SetItemState::<Identity, Impl, OFFSET>,
            GetItemState: GetItemState::<Identity, Impl, OFFSET>,
            GetSelectedItems: GetSelectedItems::<Identity, Impl, OFFSET>,
            GetItemCustomState: GetItemCustomState::<Identity, Impl, OFFSET>,
            SetItemCustomState: SetItemCustomState::<Identity, Impl, OFFSET>,
            EnsureItemVisible: EnsureItemVisible::<Identity, Impl, OFFSET>,
            SetTheme: SetTheme::<Identity, Impl, OFFSET>,
            GetNextItem: GetNextItem::<Identity, Impl, OFFSET>,
            HitTest: HitTest::<Identity, Impl, OFFSET>,
            GetItemRect: GetItemRect::<Identity, Impl, OFFSET>,
            CollapseAll: CollapseAll::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INameSpaceTreeControl2_Impl: ::windows_core::BaseImpl + INameSpaceTreeControl_Impl {
    fn SetControlStyle(this: &Self::This, nstcsmask: u32, nstcsstyle: u32) -> ::windows_core::Result<()>;
    fn GetControlStyle(this: &Self::This, nstcsmask: u32) -> ::windows_core::Result<u32>;
    fn SetControlStyle2(this: &Self::This, nstcsmask: NSTCSTYLE2, nstcsstyle: NSTCSTYLE2) -> ::windows_core::Result<()>;
    fn GetControlStyle2(this: &Self::This, nstcsmask: NSTCSTYLE2) -> ::windows_core::Result<NSTCSTYLE2>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INameSpaceTreeControl2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(INameSpaceTreeControl);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeControl2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetControlStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nstcsmask: u32, nstcsstyle: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetControlStyle(this, ::core::mem::transmute_copy(&nstcsmask), ::core::mem::transmute_copy(&nstcsstyle)).into())
        }
        unsafe extern "system" fn GetControlStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nstcsmask: u32, pnstcsstyle: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetControlStyle(this, ::core::mem::transmute_copy(&nstcsmask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnstcsstyle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetControlStyle2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nstcsmask: NSTCSTYLE2, nstcsstyle: NSTCSTYLE2) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetControlStyle2(this, ::core::mem::transmute_copy(&nstcsmask), ::core::mem::transmute_copy(&nstcsstyle)).into())
        }
        unsafe extern "system" fn GetControlStyle2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nstcsmask: NSTCSTYLE2, pnstcsstyle: *mut NSTCSTYLE2) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetControlStyle2(this, ::core::mem::transmute_copy(&nstcsmask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnstcsstyle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        INameSpaceTreeControl2_Vtbl {
            base__: <INameSpaceTreeControl as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetControlStyle: SetControlStyle::<Identity, Impl, OFFSET>,
            GetControlStyle: GetControlStyle::<Identity, Impl, OFFSET>,
            SetControlStyle2: SetControlStyle2::<Identity, Impl, OFFSET>,
            GetControlStyle2: GetControlStyle2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_UI_Controls\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
pub trait INameSpaceTreeControlCustomDraw_Impl: ::windows_core::BaseImpl {
    fn PrePaint(this: &Self::This, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::LRESULT>;
    fn PostPaint(this: &Self::This, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn ItemPrePaint(this: &Self::This, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW, pclrtext: *mut super::super::Foundation::COLORREF, pclrtextbk: *mut super::super::Foundation::COLORREF, plres: *mut super::super::Foundation::LRESULT) -> ::windows_core::Result<()>;
    fn ItemPostPaint(this: &Self::This, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
impl ::windows_core::Iids for INameSpaceTreeControlCustomDraw {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_UI_Controls"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlCustomDraw_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeControlCustomDraw {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PrePaint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlCustomDraw_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, plres: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PrePaint(this, ::core::mem::transmute_copy(&hdc), ::core::mem::transmute_copy(&prc)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plres, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PostPaint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlCustomDraw_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostPaint(this, ::core::mem::transmute_copy(&hdc), ::core::mem::transmute_copy(&prc)).into())
        }
        unsafe extern "system" fn ItemPrePaint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlCustomDraw_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW, pclrtext: *mut super::super::Foundation::COLORREF, pclrtextbk: *mut super::super::Foundation::COLORREF, plres: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ItemPrePaint(this, ::core::mem::transmute_copy(&hdc), ::core::mem::transmute_copy(&prc), ::core::mem::transmute_copy(&pnstccditem), ::core::mem::transmute_copy(&pclrtext), ::core::mem::transmute_copy(&pclrtextbk), ::core::mem::transmute_copy(&plres)).into())
        }
        unsafe extern "system" fn ItemPostPaint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlCustomDraw_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prc: *const super::super::Foundation::RECT, pnstccditem: *const NSTCCUSTOMDRAW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ItemPostPaint(this, ::core::mem::transmute_copy(&hdc), ::core::mem::transmute_copy(&prc), ::core::mem::transmute_copy(&pnstccditem)).into())
        }
        INameSpaceTreeControlCustomDraw_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PrePaint: PrePaint::<Identity, Impl, OFFSET>,
            PostPaint: PostPaint::<Identity, Impl, OFFSET>,
            ItemPrePaint: ItemPrePaint::<Identity, Impl, OFFSET>,
            ItemPostPaint: ItemPostPaint::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INameSpaceTreeControlDropHandler_Impl: ::windows_core::BaseImpl {
    fn OnDragEnter(this: &Self::This, psiover: ::core::option::Option<&IShellItem>, psiadata: ::core::option::Option<&IShellItemArray>, foutsidesource: super::super::Foundation::BOOL, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::Result<()>;
    fn OnDragOver(this: &Self::This, psiover: ::core::option::Option<&IShellItem>, psiadata: ::core::option::Option<&IShellItemArray>, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::Result<()>;
    fn OnDragPosition(this: &Self::This, psiover: ::core::option::Option<&IShellItem>, psiadata: ::core::option::Option<&IShellItemArray>, inewposition: i32, ioldposition: i32) -> ::windows_core::Result<()>;
    fn OnDrop(this: &Self::This, psiover: ::core::option::Option<&IShellItem>, psiadata: ::core::option::Option<&IShellItemArray>, iposition: i32, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::Result<()>;
    fn OnDropPosition(this: &Self::This, psiover: ::core::option::Option<&IShellItem>, psiadata: ::core::option::Option<&IShellItemArray>, inewposition: i32, ioldposition: i32) -> ::windows_core::Result<()>;
    fn OnDragLeave(this: &Self::This, psiover: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INameSpaceTreeControlDropHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeControlDropHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnDragEnter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, foutsidesource: super::super::Foundation::BOOL, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDragEnter(this, ::windows_core::from_raw_borrowed(&psiover), ::windows_core::from_raw_borrowed(&psiadata), ::core::mem::transmute_copy(&foutsidesource), ::core::mem::transmute_copy(&grfkeystate), ::core::mem::transmute_copy(&pdweffect)).into())
        }
        unsafe extern "system" fn OnDragOver<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDragOver(this, ::windows_core::from_raw_borrowed(&psiover), ::windows_core::from_raw_borrowed(&psiadata), ::core::mem::transmute_copy(&grfkeystate), ::core::mem::transmute_copy(&pdweffect)).into())
        }
        unsafe extern "system" fn OnDragPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, inewposition: i32, ioldposition: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDragPosition(this, ::windows_core::from_raw_borrowed(&psiover), ::windows_core::from_raw_borrowed(&psiadata), ::core::mem::transmute_copy(&inewposition), ::core::mem::transmute_copy(&ioldposition)).into())
        }
        unsafe extern "system" fn OnDrop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, iposition: i32, grfkeystate: u32, pdweffect: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDrop(this, ::windows_core::from_raw_borrowed(&psiover), ::windows_core::from_raw_borrowed(&psiadata), ::core::mem::transmute_copy(&iposition), ::core::mem::transmute_copy(&grfkeystate), ::core::mem::transmute_copy(&pdweffect)).into())
        }
        unsafe extern "system" fn OnDropPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void, psiadata: *mut ::core::ffi::c_void, inewposition: i32, ioldposition: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDropPosition(this, ::windows_core::from_raw_borrowed(&psiover), ::windows_core::from_raw_borrowed(&psiadata), ::core::mem::transmute_copy(&inewposition), ::core::mem::transmute_copy(&ioldposition)).into())
        }
        unsafe extern "system" fn OnDragLeave<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlDropHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiover: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDragLeave(this, ::windows_core::from_raw_borrowed(&psiover)).into())
        }
        INameSpaceTreeControlDropHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnDragEnter: OnDragEnter::<Identity, Impl, OFFSET>,
            OnDragOver: OnDragOver::<Identity, Impl, OFFSET>,
            OnDragPosition: OnDragPosition::<Identity, Impl, OFFSET>,
            OnDrop: OnDrop::<Identity, Impl, OFFSET>,
            OnDropPosition: OnDropPosition::<Identity, Impl, OFFSET>,
            OnDragLeave: OnDragLeave::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INameSpaceTreeControlEvents_Impl: ::windows_core::BaseImpl {
    fn OnItemClick(this: &Self::This, psi: ::core::option::Option<&IShellItem>, nstcehittest: u32, nstceclicktype: u32) -> ::windows_core::Result<()>;
    fn OnPropertyItemCommit(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnItemStateChanging(this: &Self::This, psi: ::core::option::Option<&IShellItem>, nstcismask: u32, nstcisstate: u32) -> ::windows_core::Result<()>;
    fn OnItemStateChanged(this: &Self::This, psi: ::core::option::Option<&IShellItem>, nstcismask: u32, nstcisstate: u32) -> ::windows_core::Result<()>;
    fn OnSelectionChanged(this: &Self::This, psiaselection: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<()>;
    fn OnKeyboardInput(this: &Self::This, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
    fn OnBeforeExpand(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnAfterExpand(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnBeginLabelEdit(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnEndLabelEdit(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnGetToolTip(this: &Self::This, psi: ::core::option::Option<&IShellItem>, psztip: ::windows_core::PWSTR, cchtip: i32) -> ::windows_core::Result<()>;
    fn OnBeforeItemDelete(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnItemAdded(this: &Self::This, psi: ::core::option::Option<&IShellItem>, fisroot: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OnItemDeleted(this: &Self::This, psi: ::core::option::Option<&IShellItem>, fisroot: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OnBeforeContextMenu(this: &Self::This, psi: ::core::option::Option<&IShellItem>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn OnAfterContextMenu(this: &Self::This, psi: ::core::option::Option<&IShellItem>, pcmin: ::core::option::Option<&IContextMenu>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn OnBeforeStateImageChange(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn OnGetDefaultIconIndex(this: &Self::This, psi: ::core::option::Option<&IShellItem>, pidefaulticon: *mut i32, piopenicon: *mut i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INameSpaceTreeControlEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeControlEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnItemClick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcehittest: u32, nstceclicktype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnItemClick(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&nstcehittest), ::core::mem::transmute_copy(&nstceclicktype)).into())
        }
        unsafe extern "system" fn OnPropertyItemCommit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnPropertyItemCommit(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnItemStateChanging<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, nstcisstate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnItemStateChanging(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&nstcismask), ::core::mem::transmute_copy(&nstcisstate)).into())
        }
        unsafe extern "system" fn OnItemStateChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, nstcismask: u32, nstcisstate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnItemStateChanged(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&nstcismask), ::core::mem::transmute_copy(&nstcisstate)).into())
        }
        unsafe extern "system" fn OnSelectionChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiaselection: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSelectionChanged(this, ::windows_core::from_raw_borrowed(&psiaselection)).into())
        }
        unsafe extern "system" fn OnKeyboardInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnKeyboardInput(this, ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)).into())
        }
        unsafe extern "system" fn OnBeforeExpand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBeforeExpand(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnAfterExpand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnAfterExpand(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnBeginLabelEdit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBeginLabelEdit(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnEndLabelEdit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnEndLabelEdit(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnGetToolTip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, psztip: ::windows_core::PWSTR, cchtip: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnGetToolTip(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&psztip), ::core::mem::transmute_copy(&cchtip)).into())
        }
        unsafe extern "system" fn OnBeforeItemDelete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBeforeItemDelete(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnItemAdded<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, fisroot: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnItemAdded(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&fisroot)).into())
        }
        unsafe extern "system" fn OnItemDeleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, fisroot: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnItemDeleted(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&fisroot)).into())
        }
        unsafe extern "system" fn OnBeforeContextMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBeforeContextMenu(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn OnAfterContextMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pcmin: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnAfterContextMenu(this, ::windows_core::from_raw_borrowed(&psi), ::windows_core::from_raw_borrowed(&pcmin), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn OnBeforeStateImageChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBeforeStateImageChange(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn OnGetDefaultIconIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pidefaulticon: *mut i32, piopenicon: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnGetDefaultIconIndex(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&pidefaulticon), ::core::mem::transmute_copy(&piopenicon)).into())
        }
        INameSpaceTreeControlEvents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnItemClick: OnItemClick::<Identity, Impl, OFFSET>,
            OnPropertyItemCommit: OnPropertyItemCommit::<Identity, Impl, OFFSET>,
            OnItemStateChanging: OnItemStateChanging::<Identity, Impl, OFFSET>,
            OnItemStateChanged: OnItemStateChanged::<Identity, Impl, OFFSET>,
            OnSelectionChanged: OnSelectionChanged::<Identity, Impl, OFFSET>,
            OnKeyboardInput: OnKeyboardInput::<Identity, Impl, OFFSET>,
            OnBeforeExpand: OnBeforeExpand::<Identity, Impl, OFFSET>,
            OnAfterExpand: OnAfterExpand::<Identity, Impl, OFFSET>,
            OnBeginLabelEdit: OnBeginLabelEdit::<Identity, Impl, OFFSET>,
            OnEndLabelEdit: OnEndLabelEdit::<Identity, Impl, OFFSET>,
            OnGetToolTip: OnGetToolTip::<Identity, Impl, OFFSET>,
            OnBeforeItemDelete: OnBeforeItemDelete::<Identity, Impl, OFFSET>,
            OnItemAdded: OnItemAdded::<Identity, Impl, OFFSET>,
            OnItemDeleted: OnItemDeleted::<Identity, Impl, OFFSET>,
            OnBeforeContextMenu: OnBeforeContextMenu::<Identity, Impl, OFFSET>,
            OnAfterContextMenu: OnAfterContextMenu::<Identity, Impl, OFFSET>,
            OnBeforeStateImageChange: OnBeforeStateImageChange::<Identity, Impl, OFFSET>,
            OnGetDefaultIconIndex: OnGetDefaultIconIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait INameSpaceTreeControlFolderCapabilities_Impl: ::windows_core::BaseImpl {
    fn GetFolderCapabilities(this: &Self::This, nfcmask: NSTCFOLDERCAPABILITIES) -> ::windows_core::Result<NSTCFOLDERCAPABILITIES>;
}
impl ::windows_core::Iids for INameSpaceTreeControlFolderCapabilities {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlFolderCapabilities_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INameSpaceTreeControlFolderCapabilities {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFolderCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INameSpaceTreeControlFolderCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nfcmask: NSTCFOLDERCAPABILITIES, pnfcvalue: *mut NSTCFOLDERCAPABILITIES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolderCapabilities(this, ::core::mem::transmute_copy(&nfcmask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnfcvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        INameSpaceTreeControlFolderCapabilities_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFolderCapabilities: GetFolderCapabilities::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait INamedPropertyBag_Impl: ::windows_core::BaseImpl {
    fn ReadPropertyNPB(this: &Self::This, pszbagname: &::windows_core::PCWSTR, pszpropname: &::windows_core::PCWSTR, pvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn WritePropertyNPB(this: &Self::This, pszbagname: &::windows_core::PCWSTR, pszpropname: &::windows_core::PCWSTR, pvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn RemovePropertyNPB(this: &Self::This, pszbagname: &::windows_core::PCWSTR, pszpropname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for INamedPropertyBag {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamedPropertyBag_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INamedPropertyBag {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadPropertyNPB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamedPropertyBag_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszbagname: ::windows_core::PCWSTR, pszpropname: ::windows_core::PCWSTR, pvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPropertyNPB(this, ::core::mem::transmute(&pszbagname), ::core::mem::transmute(&pszpropname), ::core::mem::transmute_copy(&pvar)).into())
        }
        unsafe extern "system" fn WritePropertyNPB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamedPropertyBag_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszbagname: ::windows_core::PCWSTR, pszpropname: ::windows_core::PCWSTR, pvar: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePropertyNPB(this, ::core::mem::transmute(&pszbagname), ::core::mem::transmute(&pszpropname), ::core::mem::transmute_copy(&pvar)).into())
        }
        unsafe extern "system" fn RemovePropertyNPB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamedPropertyBag_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszbagname: ::windows_core::PCWSTR, pszpropname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemovePropertyNPB(this, ::core::mem::transmute(&pszbagname), ::core::mem::transmute(&pszpropname)).into())
        }
        INamedPropertyBag_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadPropertyNPB: ReadPropertyNPB::<Identity, Impl, OFFSET>,
            WritePropertyNPB: WritePropertyNPB::<Identity, Impl, OFFSET>,
            RemovePropertyNPB: RemovePropertyNPB::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait INamespaceWalk_Impl: ::windows_core::BaseImpl {
    fn Walk(this: &Self::This, punktowalk: ::core::option::Option<&::windows_core::IUnknown>, dwflags: u32, cdepth: i32, pnswcb: ::core::option::Option<&INamespaceWalkCB>) -> ::windows_core::Result<()>;
    fn GetIDArrayResult(this: &Self::This, pcitems: *mut u32, prgpidl: *mut *mut *mut Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for INamespaceWalk {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalk_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INamespaceWalk {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Walk<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalk_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punktowalk: *mut ::core::ffi::c_void, dwflags: u32, cdepth: i32, pnswcb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Walk(this, ::windows_core::from_raw_borrowed(&punktowalk), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&cdepth), ::windows_core::from_raw_borrowed(&pnswcb)).into())
        }
        unsafe extern "system" fn GetIDArrayResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalk_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcitems: *mut u32, prgpidl: *mut *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIDArrayResult(this, ::core::mem::transmute_copy(&pcitems), ::core::mem::transmute_copy(&prgpidl)).into())
        }
        INamespaceWalk_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Walk: Walk::<Identity, Impl, OFFSET>,
            GetIDArrayResult: GetIDArrayResult::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait INamespaceWalkCB_Impl: ::windows_core::BaseImpl {
    fn FoundItem(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn EnterFolder(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn LeaveFolder(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn InitializeProgressDialog(this: &Self::This, ppsztitle: *mut ::windows_core::PWSTR, ppszcancel: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for INamespaceWalkCB {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INamespaceWalkCB {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FoundItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FoundItem(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn EnterFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnterFolder(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn LeaveFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LeaveFolder(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn InitializeProgressDialog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsztitle: *mut ::windows_core::PWSTR, ppszcancel: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeProgressDialog(this, ::core::mem::transmute_copy(&ppsztitle), ::core::mem::transmute_copy(&ppszcancel)).into())
        }
        INamespaceWalkCB_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FoundItem: FoundItem::<Identity, Impl, OFFSET>,
            EnterFolder: EnterFolder::<Identity, Impl, OFFSET>,
            LeaveFolder: LeaveFolder::<Identity, Impl, OFFSET>,
            InitializeProgressDialog: InitializeProgressDialog::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait INamespaceWalkCB2_Impl: ::windows_core::BaseImpl + INamespaceWalkCB_Impl {
    fn WalkComplete(this: &Self::This, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for INamespaceWalkCB2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(INamespaceWalkCB);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INamespaceWalkCB2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn WalkComplete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INamespaceWalkCB2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WalkComplete(this, ::core::mem::transmute_copy(&hr)).into())
        }
        INamespaceWalkCB2_Vtbl { base__: <INamespaceWalkCB as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, WalkComplete: WalkComplete::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait INetworkFolderInternal_Impl: ::windows_core::BaseImpl {
    fn GetResourceDisplayType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetIDList(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn GetProvider(this: &Self::This, itemidcount: u32, itemids: *const *const Common::ITEMIDLIST, providermaxlength: u32, provider: ::windows_core::PWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for INetworkFolderInternal {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INetworkFolderInternal_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INetworkFolderInternal {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetResourceDisplayType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INetworkFolderInternal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, displaytype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetResourceDisplayType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(displaytype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INetworkFolderInternal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idlist: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIDList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(idlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProvider<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INetworkFolderInternal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itemidcount: u32, itemids: *const *const Common::ITEMIDLIST, providermaxlength: u32, provider: ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProvider(this, ::core::mem::transmute_copy(&itemidcount), ::core::mem::transmute_copy(&itemids), ::core::mem::transmute_copy(&providermaxlength), ::core::mem::transmute_copy(&provider)).into())
        }
        INetworkFolderInternal_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetResourceDisplayType: GetResourceDisplayType::<Identity, Impl, OFFSET>,
            GetIDList: GetIDList::<Identity, Impl, OFFSET>,
            GetProvider: GetProvider::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait INewMenuClient_Impl: ::windows_core::BaseImpl {
    fn IncludeItems(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SelectAndEditItem(this: &Self::This, pidlitem: *const Common::ITEMIDLIST, flags: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for INewMenuClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewMenuClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INewMenuClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IncludeItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewMenuClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IncludeItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SelectAndEditItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewMenuClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectAndEditItem(this, ::core::mem::transmute_copy(&pidlitem), ::core::mem::transmute_copy(&flags)).into())
        }
        INewMenuClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IncludeItems: IncludeItems::<Identity, Impl, OFFSET>,
            SelectAndEditItem: SelectAndEditItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INewShortcutHookA_Impl: ::windows_core::BaseImpl {
    fn SetReferent(this: &Self::This, pcszreferent: &::windows_core::PCSTR, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn GetReferent(this: &Self::This, pszreferent: ::windows_core::PSTR, cchreferent: i32) -> ::windows_core::Result<()>;
    fn SetFolder(this: &Self::This, pcszfolder: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetFolder(this: &Self::This, pszfolder: ::windows_core::PSTR, cchfolder: i32) -> ::windows_core::Result<()>;
    fn GetName(this: &Self::This, pszname: ::windows_core::PSTR, cchname: i32) -> ::windows_core::Result<()>;
    fn GetExtension(this: &Self::This, pszextension: ::windows_core::PSTR, cchextension: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INewShortcutHookA {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INewShortcutHookA {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetReferent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcszreferent: ::windows_core::PCSTR, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReferent(this, ::core::mem::transmute(&pcszreferent), ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn GetReferent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszreferent: ::windows_core::PSTR, cchreferent: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReferent(this, ::core::mem::transmute_copy(&pszreferent), ::core::mem::transmute_copy(&cchreferent)).into())
        }
        unsafe extern "system" fn SetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcszfolder: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolder(this, ::core::mem::transmute(&pcszfolder)).into())
        }
        unsafe extern "system" fn GetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfolder: ::windows_core::PSTR, cchfolder: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolder(this, ::core::mem::transmute_copy(&pszfolder), ::core::mem::transmute_copy(&cchfolder)).into())
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PSTR, cchname: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetName(this, ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cchname)).into())
        }
        unsafe extern "system" fn GetExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszextension: ::windows_core::PSTR, cchextension: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtension(this, ::core::mem::transmute_copy(&pszextension), ::core::mem::transmute_copy(&cchextension)).into())
        }
        INewShortcutHookA_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetReferent: SetReferent::<Identity, Impl, OFFSET>,
            GetReferent: GetReferent::<Identity, Impl, OFFSET>,
            SetFolder: SetFolder::<Identity, Impl, OFFSET>,
            GetFolder: GetFolder::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetExtension: GetExtension::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INewShortcutHookW_Impl: ::windows_core::BaseImpl {
    fn SetReferent(this: &Self::This, pcszreferent: &::windows_core::PCWSTR, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn GetReferent(this: &Self::This, pszreferent: ::windows_core::PWSTR, cchreferent: i32) -> ::windows_core::Result<()>;
    fn SetFolder(this: &Self::This, pcszfolder: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetFolder(this: &Self::This, pszfolder: ::windows_core::PWSTR, cchfolder: i32) -> ::windows_core::Result<()>;
    fn GetName(this: &Self::This, pszname: ::windows_core::PWSTR, cchname: i32) -> ::windows_core::Result<()>;
    fn GetExtension(this: &Self::This, pszextension: ::windows_core::PWSTR, cchextension: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INewShortcutHookW {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INewShortcutHookW {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetReferent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcszreferent: ::windows_core::PCWSTR, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReferent(this, ::core::mem::transmute(&pcszreferent), ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn GetReferent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszreferent: ::windows_core::PWSTR, cchreferent: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReferent(this, ::core::mem::transmute_copy(&pszreferent), ::core::mem::transmute_copy(&cchreferent)).into())
        }
        unsafe extern "system" fn SetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcszfolder: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolder(this, ::core::mem::transmute(&pcszfolder)).into())
        }
        unsafe extern "system" fn GetFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfolder: ::windows_core::PWSTR, cchfolder: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolder(this, ::core::mem::transmute_copy(&pszfolder), ::core::mem::transmute_copy(&cchfolder)).into())
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PWSTR, cchname: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetName(this, ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cchname)).into())
        }
        unsafe extern "system" fn GetExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewShortcutHookW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszextension: ::windows_core::PWSTR, cchextension: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtension(this, ::core::mem::transmute_copy(&pszextension), ::core::mem::transmute_copy(&cchextension)).into())
        }
        INewShortcutHookW_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetReferent: SetReferent::<Identity, Impl, OFFSET>,
            GetReferent: GetReferent::<Identity, Impl, OFFSET>,
            SetFolder: SetFolder::<Identity, Impl, OFFSET>,
            GetFolder: GetFolder::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetExtension: GetExtension::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait INewWDEvents_Impl: ::windows_core::BaseImpl + IWebWizardHost_Impl {
    fn PassportAuthenticate(this: &Self::This, bstrsigninurl: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for INewWDEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IWebWizardHost);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewWDEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INewWDEvents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PassportAuthenticate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewWDEvents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrsigninurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvfauthenitcated: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PassportAuthenticate(this, ::core::mem::transmute(&bstrsigninurl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvfauthenitcated, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        INewWDEvents_Vtbl {
            base__: <IWebWizardHost as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PassportAuthenticate: PassportAuthenticate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INewWindowManager_Impl: ::windows_core::BaseImpl {
    fn EvaluateNewWindow(this: &Self::This, pszurl: &::windows_core::PCWSTR, pszname: &::windows_core::PCWSTR, pszurlcontext: &::windows_core::PCWSTR, pszfeatures: &::windows_core::PCWSTR, freplace: super::super::Foundation::BOOL, dwflags: u32, dwuseractiontime: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INewWindowManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewWindowManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INewWindowManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EvaluateNewWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INewWindowManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pszname: ::windows_core::PCWSTR, pszurlcontext: ::windows_core::PCWSTR, pszfeatures: ::windows_core::PCWSTR, freplace: super::super::Foundation::BOOL, dwflags: u32, dwuseractiontime: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateNewWindow(this, ::core::mem::transmute(&pszurl), ::core::mem::transmute(&pszname), ::core::mem::transmute(&pszurlcontext), ::core::mem::transmute(&pszfeatures), ::core::mem::transmute_copy(&freplace), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&dwuseractiontime)).into())
        }
        INewWindowManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EvaluateNewWindow: EvaluateNewWindow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait INotifyReplica_Impl: ::windows_core::BaseImpl {
    fn YouAreAReplica(this: &Self::This, ulcotherreplicas: u32, rgpmkotherreplicas: *mut ::core::option::Option<super::super::System::Com::IMoniker>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for INotifyReplica {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INotifyReplica_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INotifyReplica {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn YouAreAReplica<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INotifyReplica_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcotherreplicas: u32, rgpmkotherreplicas: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::YouAreAReplica(this, ::core::mem::transmute_copy(&ulcotherreplicas), ::core::mem::transmute_copy(&rgpmkotherreplicas)).into())
        }
        INotifyReplica_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, YouAreAReplica: YouAreAReplica::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjMgr_Impl: ::windows_core::BaseImpl {
    fn Append(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IObjMgr {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjMgr_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjMgr {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Append<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjMgr_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Append(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjMgr_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        IObjMgr_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Append: Append::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjectProvider_Impl: ::windows_core::BaseImpl {
    fn QueryObject(this: &Self::This, guidobject: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IObjectProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidobject: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryObject(this, ::core::mem::transmute_copy(&guidobject), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvout)).into())
        }
        IObjectProvider_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, QueryObject: QueryObject::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjectWithAppUserModelID_Impl: ::windows_core::BaseImpl {
    fn SetAppID(this: &Self::This, pszappid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetAppID(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IObjectWithAppUserModelID {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithAppUserModelID_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectWithAppUserModelID {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAppID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithAppUserModelID_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszappid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppID(this, ::core::mem::transmute(&pszappid)).into())
        }
        unsafe extern "system" fn GetAppID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithAppUserModelID_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszappid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAppID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszappid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IObjectWithAppUserModelID_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAppID: SetAppID::<Identity, Impl, OFFSET>,
            GetAppID: GetAppID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjectWithBackReferences_Impl: ::windows_core::BaseImpl {
    fn RemoveBackReferences(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IObjectWithBackReferences {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithBackReferences_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectWithBackReferences {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RemoveBackReferences<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithBackReferences_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBackReferences(this).into())
        }
        IObjectWithBackReferences_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RemoveBackReferences: RemoveBackReferences::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IObjectWithCancelEvent_Impl: ::windows_core::BaseImpl {
    fn GetCancelEvent(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HANDLE>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IObjectWithCancelEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithCancelEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectWithCancelEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCancelEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithCancelEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phevent: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCancelEvent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IObjectWithCancelEvent_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetCancelEvent: GetCancelEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjectWithFolderEnumMode_Impl: ::windows_core::BaseImpl {
    fn SetMode(this: &Self::This, femode: FOLDER_ENUM_MODE) -> ::windows_core::Result<()>;
    fn GetMode(this: &Self::This) -> ::windows_core::Result<FOLDER_ENUM_MODE>;
}
impl ::windows_core::Iids for IObjectWithFolderEnumMode {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithFolderEnumMode_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectWithFolderEnumMode {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithFolderEnumMode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, femode: FOLDER_ENUM_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMode(this, ::core::mem::transmute_copy(&femode)).into())
        }
        unsafe extern "system" fn GetMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithFolderEnumMode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfemode: *mut FOLDER_ENUM_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfemode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IObjectWithFolderEnumMode_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetMode: SetMode::<Identity, Impl, OFFSET>,
            GetMode: GetMode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjectWithProgID_Impl: ::windows_core::BaseImpl {
    fn SetProgID(this: &Self::This, pszprogid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetProgID(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IObjectWithProgID {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithProgID_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectWithProgID {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetProgID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithProgID_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszprogid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgID(this, ::core::mem::transmute(&pszprogid)).into())
        }
        unsafe extern "system" fn GetProgID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithProgID_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszprogid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProgID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszprogid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IObjectWithProgID_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetProgID: SetProgID::<Identity, Impl, OFFSET>,
            GetProgID: GetProgID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IObjectWithSelection_Impl: ::windows_core::BaseImpl {
    fn SetSelection(this: &Self::This, psia: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<()>;
    fn GetSelection(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IObjectWithSelection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithSelection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectWithSelection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithSelection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psia: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSelection(this, ::windows_core::from_raw_borrowed(&psia)).into())
        }
        unsafe extern "system" fn GetSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectWithSelection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSelection(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IObjectWithSelection_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetSelection: SetSelection::<Identity, Impl, OFFSET>,
            GetSelection: GetSelection::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IOpenControlPanel_Impl: ::windows_core::BaseImpl {
    fn Open(this: &Self::This, pszname: &::windows_core::PCWSTR, pszpage: &::windows_core::PCWSTR, punksite: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetPath(this: &Self::This, pszname: &::windows_core::PCWSTR, pszpath: ::windows_core::PWSTR, cchpath: u32) -> ::windows_core::Result<()>;
    fn GetCurrentView(this: &Self::This) -> ::windows_core::Result<CPVIEW>;
}
impl ::windows_core::Iids for IOpenControlPanel {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOpenControlPanel_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOpenControlPanel {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Open<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOpenControlPanel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pszpage: ::windows_core::PCWSTR, punksite: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Open(this, ::core::mem::transmute(&pszname), ::core::mem::transmute(&pszpage), ::windows_core::from_raw_borrowed(&punksite)).into())
        }
        unsafe extern "system" fn GetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOpenControlPanel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, pszpath: ::windows_core::PWSTR, cchpath: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPath(this, ::core::mem::transmute(&pszname), ::core::mem::transmute_copy(&pszpath), ::core::mem::transmute_copy(&cchpath)).into())
        }
        unsafe extern "system" fn GetCurrentView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOpenControlPanel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pview: *mut CPVIEW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentView(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pview, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IOpenControlPanel_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Open: Open::<Identity, Impl, OFFSET>,
            GetPath: GetPath::<Identity, Impl, OFFSET>,
            GetCurrentView: GetCurrentView::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IOpenSearchSource_Impl: ::windows_core::BaseImpl {
    fn GetResults(this: &Self::This, hwnd: super::super::Foundation::HWND, pszquery: &::windows_core::PCWSTR, dwstartindex: u32, dwcount: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IOpenSearchSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOpenSearchSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOpenSearchSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetResults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOpenSearchSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pszquery: ::windows_core::PCWSTR, dwstartindex: u32, dwcount: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetResults(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute(&pszquery), ::core::mem::transmute_copy(&dwstartindex), ::core::mem::transmute_copy(&dwcount), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IOpenSearchSource_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetResults: GetResults::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IOperationsProgressDialog_Impl: ::windows_core::BaseImpl {
    fn StartProgressDialog(this: &Self::This, hwndowner: super::super::Foundation::HWND, flags: u32) -> ::windows_core::Result<()>;
    fn StopProgressDialog(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetOperation(this: &Self::This, action: SPACTION) -> ::windows_core::Result<()>;
    fn SetMode(this: &Self::This, mode: u32) -> ::windows_core::Result<()>;
    fn UpdateProgress(this: &Self::This, ullpointscurrent: u64, ullpointstotal: u64, ullsizecurrent: u64, ullsizetotal: u64, ullitemscurrent: u64, ullitemstotal: u64) -> ::windows_core::Result<()>;
    fn UpdateLocations(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, psitarget: ::core::option::Option<&IShellItem>, psiitem: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn ResetTimer(this: &Self::This) -> ::windows_core::Result<()>;
    fn PauseTimer(this: &Self::This) -> ::windows_core::Result<()>;
    fn ResumeTimer(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetMilliseconds(this: &Self::This, pullelapsed: *mut u64, pullremaining: *mut u64) -> ::windows_core::Result<()>;
    fn GetOperationStatus(this: &Self::This) -> ::windows_core::Result<PropertiesSystem::PDOPSTATUS>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IOperationsProgressDialog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOperationsProgressDialog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartProgressDialog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProgressDialog(this, ::core::mem::transmute_copy(&hwndowner), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn StopProgressDialog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopProgressDialog(this).into())
        }
        unsafe extern "system" fn SetOperation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, action: SPACTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOperation(this, ::core::mem::transmute_copy(&action)).into())
        }
        unsafe extern "system" fn SetMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMode(this, ::core::mem::transmute_copy(&mode)).into())
        }
        unsafe extern "system" fn UpdateProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ullpointscurrent: u64, ullpointstotal: u64, ullsizecurrent: u64, ullsizetotal: u64, ullitemscurrent: u64, ullitemstotal: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateProgress(this, ::core::mem::transmute_copy(&ullpointscurrent), ::core::mem::transmute_copy(&ullpointstotal), ::core::mem::transmute_copy(&ullsizecurrent), ::core::mem::transmute_copy(&ullsizetotal), ::core::mem::transmute_copy(&ullitemscurrent), ::core::mem::transmute_copy(&ullitemstotal)).into())
        }
        unsafe extern "system" fn UpdateLocations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psitarget: *mut ::core::ffi::c_void, psiitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateLocations(this, ::windows_core::from_raw_borrowed(&psisource), ::windows_core::from_raw_borrowed(&psitarget), ::windows_core::from_raw_borrowed(&psiitem)).into())
        }
        unsafe extern "system" fn ResetTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetTimer(this).into())
        }
        unsafe extern "system" fn PauseTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PauseTimer(this).into())
        }
        unsafe extern "system" fn ResumeTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResumeTimer(this).into())
        }
        unsafe extern "system" fn GetMilliseconds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pullelapsed: *mut u64, pullremaining: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMilliseconds(this, ::core::mem::transmute_copy(&pullelapsed), ::core::mem::transmute_copy(&pullremaining)).into())
        }
        unsafe extern "system" fn GetOperationStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOperationsProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, popstatus: *mut PropertiesSystem::PDOPSTATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOperationStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(popstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IOperationsProgressDialog_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartProgressDialog: StartProgressDialog::<Identity, Impl, OFFSET>,
            StopProgressDialog: StopProgressDialog::<Identity, Impl, OFFSET>,
            SetOperation: SetOperation::<Identity, Impl, OFFSET>,
            SetMode: SetMode::<Identity, Impl, OFFSET>,
            UpdateProgress: UpdateProgress::<Identity, Impl, OFFSET>,
            UpdateLocations: UpdateLocations::<Identity, Impl, OFFSET>,
            ResetTimer: ResetTimer::<Identity, Impl, OFFSET>,
            PauseTimer: PauseTimer::<Identity, Impl, OFFSET>,
            ResumeTimer: ResumeTimer::<Identity, Impl, OFFSET>,
            GetMilliseconds: GetMilliseconds::<Identity, Impl, OFFSET>,
            GetOperationStatus: GetOperationStatus::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPackageDebugSettings_Impl: ::windows_core::BaseImpl {
    fn EnableDebugging(this: &Self::This, packagefullname: &::windows_core::PCWSTR, debuggercommandline: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn DisableDebugging(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Suspend(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Resume(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn TerminateAllProcesses(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetTargetSessionId(this: &Self::This, sessionid: u32) -> ::windows_core::Result<()>;
    fn EnumerateBackgroundTasks(this: &Self::This, packagefullname: &::windows_core::PCWSTR, taskcount: *mut u32, taskids: *mut *mut ::windows_core::GUID, tasknames: *mut *mut ::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ActivateBackgroundTask(this: &Self::This, taskid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn StartServicing(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StopServicing(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StartSessionRedirection(this: &Self::This, packagefullname: &::windows_core::PCWSTR, sessionid: u32) -> ::windows_core::Result<()>;
    fn StopSessionRedirection(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetPackageExecutionState(this: &Self::This, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<PACKAGE_EXECUTION_STATE>;
    fn RegisterForPackageStateChanges(this: &Self::This, packagefullname: &::windows_core::PCWSTR, ppackageexecutionstatechangenotification: ::core::option::Option<&IPackageExecutionStateChangeNotification>) -> ::windows_core::Result<u32>;
    fn UnregisterForPackageStateChanges(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPackageDebugSettings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPackageDebugSettings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnableDebugging<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, debuggercommandline: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableDebugging(this, ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&debuggercommandline), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn DisableDebugging<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisableDebugging(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn Suspend<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Suspend(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn Resume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resume(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn TerminateAllProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateAllProcesses(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn SetTargetSessionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sessionid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTargetSessionId(this, ::core::mem::transmute_copy(&sessionid)).into())
        }
        unsafe extern "system" fn EnumerateBackgroundTasks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, taskcount: *mut u32, taskids: *mut *mut ::windows_core::GUID, tasknames: *mut *mut ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateBackgroundTasks(this, ::core::mem::transmute(&packagefullname), ::core::mem::transmute_copy(&taskcount), ::core::mem::transmute_copy(&taskids), ::core::mem::transmute_copy(&tasknames)).into())
        }
        unsafe extern "system" fn ActivateBackgroundTask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, taskid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateBackgroundTask(this, ::core::mem::transmute_copy(&taskid)).into())
        }
        unsafe extern "system" fn StartServicing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServicing(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn StopServicing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopServicing(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn StartSessionRedirection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, sessionid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartSessionRedirection(this, ::core::mem::transmute(&packagefullname), ::core::mem::transmute_copy(&sessionid)).into())
        }
        unsafe extern "system" fn StopSessionRedirection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopSessionRedirection(this, ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn GetPackageExecutionState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, packageexecutionstate: *mut PACKAGE_EXECUTION_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPackageExecutionState(this, ::core::mem::transmute(&packagefullname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(packageexecutionstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForPackageStateChanges<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, ppackageexecutionstatechangenotification: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RegisterForPackageStateChanges(this, ::core::mem::transmute(&packagefullname), ::windows_core::from_raw_borrowed(&ppackageexecutionstatechangenotification)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UnregisterForPackageStateChanges<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterForPackageStateChanges(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        IPackageDebugSettings_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnableDebugging: EnableDebugging::<Identity, Impl, OFFSET>,
            DisableDebugging: DisableDebugging::<Identity, Impl, OFFSET>,
            Suspend: Suspend::<Identity, Impl, OFFSET>,
            Resume: Resume::<Identity, Impl, OFFSET>,
            TerminateAllProcesses: TerminateAllProcesses::<Identity, Impl, OFFSET>,
            SetTargetSessionId: SetTargetSessionId::<Identity, Impl, OFFSET>,
            EnumerateBackgroundTasks: EnumerateBackgroundTasks::<Identity, Impl, OFFSET>,
            ActivateBackgroundTask: ActivateBackgroundTask::<Identity, Impl, OFFSET>,
            StartServicing: StartServicing::<Identity, Impl, OFFSET>,
            StopServicing: StopServicing::<Identity, Impl, OFFSET>,
            StartSessionRedirection: StartSessionRedirection::<Identity, Impl, OFFSET>,
            StopSessionRedirection: StopSessionRedirection::<Identity, Impl, OFFSET>,
            GetPackageExecutionState: GetPackageExecutionState::<Identity, Impl, OFFSET>,
            RegisterForPackageStateChanges: RegisterForPackageStateChanges::<Identity, Impl, OFFSET>,
            UnregisterForPackageStateChanges: UnregisterForPackageStateChanges::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPackageDebugSettings2_Impl: ::windows_core::BaseImpl + IPackageDebugSettings_Impl {
    fn EnumerateApps(this: &Self::This, packagefullname: &::windows_core::PCWSTR, appcount: *mut u32, appusermodelids: *mut *mut ::windows_core::PWSTR, appdisplaynames: *mut *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPackageDebugSettings2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IPackageDebugSettings);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPackageDebugSettings2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnumerateApps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageDebugSettings2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packagefullname: ::windows_core::PCWSTR, appcount: *mut u32, appusermodelids: *mut *mut ::windows_core::PWSTR, appdisplaynames: *mut *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateApps(this, ::core::mem::transmute(&packagefullname), ::core::mem::transmute_copy(&appcount), ::core::mem::transmute_copy(&appusermodelids), ::core::mem::transmute_copy(&appdisplaynames)).into())
        }
        IPackageDebugSettings2_Vtbl { base__: <IPackageDebugSettings as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, EnumerateApps: EnumerateApps::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPackageExecutionStateChangeNotification_Impl: ::windows_core::BaseImpl {
    fn OnStateChanged(this: &Self::This, pszpackagefullname: &::windows_core::PCWSTR, pesnewstate: PACKAGE_EXECUTION_STATE) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPackageExecutionStateChangeNotification {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageExecutionStateChangeNotification_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPackageExecutionStateChangeNotification {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnStateChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPackageExecutionStateChangeNotification_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpackagefullname: ::windows_core::PCWSTR, pesnewstate: PACKAGE_EXECUTION_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnStateChanged(this, ::core::mem::transmute(&pszpackagefullname), ::core::mem::transmute_copy(&pesnewstate)).into())
        }
        IPackageExecutionStateChangeNotification_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnStateChanged: OnStateChanged::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IParentAndItem_Impl: ::windows_core::BaseImpl {
    fn SetParentAndItem(this: &Self::This, pidlparent: *const Common::ITEMIDLIST, psf: ::core::option::Option<&IShellFolder>, pidlchild: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn GetParentAndItem(this: &Self::This, ppidlparent: *mut *mut Common::ITEMIDLIST, ppsf: *mut ::core::option::Option<IShellFolder>, ppidlchild: *mut *mut Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IParentAndItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IParentAndItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IParentAndItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetParentAndItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IParentAndItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlparent: *const Common::ITEMIDLIST, psf: *mut ::core::ffi::c_void, pidlchild: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParentAndItem(this, ::core::mem::transmute_copy(&pidlparent), ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidlchild)).into())
        }
        unsafe extern "system" fn GetParentAndItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IParentAndItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidlparent: *mut *mut Common::ITEMIDLIST, ppsf: *mut *mut ::core::ffi::c_void, ppidlchild: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParentAndItem(this, ::core::mem::transmute_copy(&ppidlparent), ::core::mem::transmute_copy(&ppsf), ::core::mem::transmute_copy(&ppidlchild)).into())
        }
        IParentAndItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetParentAndItem: SetParentAndItem::<Identity, Impl, OFFSET>,
            GetParentAndItem: GetParentAndItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IParseAndCreateItem_Impl: ::windows_core::BaseImpl {
    fn SetItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn GetItem(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IParseAndCreateItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IParseAndCreateItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IParseAndCreateItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IParseAndCreateItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItem(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn GetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IParseAndCreateItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItem(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IParseAndCreateItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetItem: SetItem::<Identity, Impl, OFFSET>,
            GetItem: GetItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IPersistFolder_Impl: ::windows_core::BaseImpl + super::super::System::Com::IPersist_Impl {
    fn Initialize(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IPersistFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IPersist);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        IPersistFolder_Vtbl {
            base__: <super::super::System::Com::IPersist as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IPersistFolder2_Impl: ::windows_core::BaseImpl + IPersistFolder_Impl {
    fn GetCurFolder(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IPersistFolder2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IPersistFolder);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistFolder2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCurFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurFolder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPersistFolder2_Vtbl { base__: <IPersistFolder as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetCurFolder: GetCurFolder::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IPersistFolder3_Impl: ::windows_core::BaseImpl + IPersistFolder2_Impl {
    fn InitializeEx(this: &Self::This, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, pidlroot: *const Common::ITEMIDLIST, ppfti: *const PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::Result<()>;
    fn GetFolderTargetInfo(this: &Self::This, ppfti: *mut PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IPersistFolder3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IPersistFolder2);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistFolder3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, pidlroot: *const Common::ITEMIDLIST, ppfti: *const PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEx(this, ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&pidlroot), ::core::mem::transmute_copy(&ppfti)).into())
        }
        unsafe extern "system" fn GetFolderTargetInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistFolder3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppfti: *mut PERSIST_FOLDER_TARGET_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolderTargetInfo(this, ::core::mem::transmute_copy(&ppfti)).into())
        }
        IPersistFolder3_Vtbl {
            base__: <IPersistFolder2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEx: InitializeEx::<Identity, Impl, OFFSET>,
            GetFolderTargetInfo: GetFolderTargetInfo::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IPersistIDList_Impl: ::windows_core::BaseImpl + super::super::System::Com::IPersist_Impl {
    fn SetIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn GetIDList(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IPersistIDList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IPersist);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistIDList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistIDList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIDList(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn GetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIDList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPersistIDList_Vtbl {
            base__: <super::super::System::Com::IPersist as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetIDList: SetIDList::<Identity, Impl, OFFSET>,
            GetIDList: GetIDList::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IPreviewHandler_Impl: ::windows_core::BaseImpl {
    fn SetWindow(this: &Self::This, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn SetRect(this: &Self::This, prc: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn DoPreview(this: &Self::This) -> ::windows_core::Result<()>;
    fn Unload(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetFocus(this: &Self::This) -> ::windows_core::Result<()>;
    fn QueryFocus(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn TranslateAccelerator(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IPreviewHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPreviewHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWindow(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&prc)).into())
        }
        unsafe extern "system" fn SetRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prc: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRect(this, ::core::mem::transmute_copy(&prc)).into())
        }
        unsafe extern "system" fn DoPreview<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DoPreview(this).into())
        }
        unsafe extern "system" fn Unload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unload(this).into())
        }
        unsafe extern "system" fn SetFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFocus(this).into())
        }
        unsafe extern "system" fn QueryFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryFocus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TranslateAccelerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateAccelerator(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        IPreviewHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetWindow: SetWindow::<Identity, Impl, OFFSET>,
            SetRect: SetRect::<Identity, Impl, OFFSET>,
            DoPreview: DoPreview::<Identity, Impl, OFFSET>,
            Unload: Unload::<Identity, Impl, OFFSET>,
            SetFocus: SetFocus::<Identity, Impl, OFFSET>,
            QueryFocus: QueryFocus::<Identity, Impl, OFFSET>,
            TranslateAccelerator: TranslateAccelerator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IPreviewHandlerFrame_Impl: ::windows_core::BaseImpl {
    fn GetWindowContext(this: &Self::This) -> ::windows_core::Result<PREVIEWHANDLERFRAMEINFO>;
    fn TranslateAccelerator(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IPreviewHandlerFrame {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerFrame_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPreviewHandlerFrame {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetWindowContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinfo: *mut PREVIEWHANDLERFRAMEINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWindowContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pinfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TranslateAccelerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateAccelerator(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        IPreviewHandlerFrame_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetWindowContext: GetWindowContext::<Identity, Impl, OFFSET>,
            TranslateAccelerator: TranslateAccelerator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IPreviewHandlerVisuals_Impl: ::windows_core::BaseImpl {
    fn SetBackgroundColor(this: &Self::This, color: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
    fn SetFont(this: &Self::This, plf: *const super::super::Graphics::Gdi::LOGFONTW) -> ::windows_core::Result<()>;
    fn SetTextColor(this: &Self::This, color: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IPreviewHandlerVisuals {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerVisuals_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPreviewHandlerVisuals {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerVisuals_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBackgroundColor(this, ::core::mem::transmute_copy(&color)).into())
        }
        unsafe extern "system" fn SetFont<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerVisuals_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plf: *const super::super::Graphics::Gdi::LOGFONTW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFont(this, ::core::mem::transmute_copy(&plf)).into())
        }
        unsafe extern "system" fn SetTextColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewHandlerVisuals_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextColor(this, ::core::mem::transmute_copy(&color)).into())
        }
        IPreviewHandlerVisuals_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBackgroundColor: SetBackgroundColor::<Identity, Impl, OFFSET>,
            SetFont: SetFont::<Identity, Impl, OFFSET>,
            SetTextColor: SetTextColor::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IPreviewItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IPreviewItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviewItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPreviewItem {
    const VTABLE: Self::Vtable = { IPreviewItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IPreviousVersionsInfo_Impl: ::windows_core::BaseImpl {
    fn AreSnapshotsAvailable(this: &Self::This, pszpath: &::windows_core::PCWSTR, foktobeslow: super::super::Foundation::BOOL) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IPreviousVersionsInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviousVersionsInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPreviousVersionsInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AreSnapshotsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreviousVersionsInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, foktobeslow: super::super::Foundation::BOOL, pfavailable: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AreSnapshotsAvailable(this, ::core::mem::transmute(&pszpath), ::core::mem::transmute_copy(&foktobeslow)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfavailable, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPreviousVersionsInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AreSnapshotsAvailable: AreSnapshotsAvailable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IProfferService_Impl: ::windows_core::BaseImpl {
    fn ProfferService(this: &Self::This, serviceid: *const ::windows_core::GUID, serviceprovider: ::core::option::Option<&super::super::System::Com::IServiceProvider>) -> ::windows_core::Result<u32>;
    fn RevokeService(this: &Self::This, cookie: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IProfferService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProfferService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IProfferService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProfferService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProfferService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, serviceid: *const ::windows_core::GUID, serviceprovider: *mut ::core::ffi::c_void, cookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProfferService(this, ::core::mem::transmute_copy(&serviceid), ::windows_core::from_raw_borrowed(&serviceprovider)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RevokeService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProfferService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RevokeService(this, ::core::mem::transmute_copy(&cookie)).into())
        }
        IProfferService_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ProfferService: ProfferService::<Identity, Impl, OFFSET>,
            RevokeService: RevokeService::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IProgressDialog_Impl: ::windows_core::BaseImpl {
    fn StartProgressDialog(this: &Self::This, hwndparent: super::super::Foundation::HWND, punkenablemodless: ::core::option::Option<&::windows_core::IUnknown>, dwflags: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn StopProgressDialog(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetTitle(this: &Self::This, pwztitle: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetAnimation(this: &Self::This, hinstanimation: super::super::Foundation::HINSTANCE, idanimation: u32) -> ::windows_core::Result<()>;
    fn HasUserCancelled(this: &Self::This) -> super::super::Foundation::BOOL;
    fn SetProgress(this: &Self::This, dwcompleted: u32, dwtotal: u32) -> ::windows_core::Result<()>;
    fn SetProgress64(this: &Self::This, ullcompleted: u64, ulltotal: u64) -> ::windows_core::Result<()>;
    fn SetLine(this: &Self::This, dwlinenum: u32, pwzstring: &::windows_core::PCWSTR, fcompactpath: super::super::Foundation::BOOL, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetCancelMsg(this: &Self::This, pwzcancelmsg: &::windows_core::PCWSTR, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn Timer(this: &Self::This, dwtimeraction: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IProgressDialog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IProgressDialog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartProgressDialog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, punkenablemodless: *mut ::core::ffi::c_void, dwflags: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProgressDialog(this, ::core::mem::transmute_copy(&hwndparent), ::windows_core::from_raw_borrowed(&punkenablemodless), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pvresevered)).into())
        }
        unsafe extern "system" fn StopProgressDialog<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopProgressDialog(this).into())
        }
        unsafe extern "system" fn SetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTitle(this, ::core::mem::transmute(&pwztitle)).into())
        }
        unsafe extern "system" fn SetAnimation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hinstanimation: super::super::Foundation::HINSTANCE, idanimation: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAnimation(this, ::core::mem::transmute_copy(&hinstanimation), ::core::mem::transmute_copy(&idanimation)).into())
        }
        unsafe extern "system" fn HasUserCancelled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HasUserCancelled(this))
        }
        unsafe extern "system" fn SetProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcompleted: u32, dwtotal: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgress(this, ::core::mem::transmute_copy(&dwcompleted), ::core::mem::transmute_copy(&dwtotal)).into())
        }
        unsafe extern "system" fn SetProgress64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ullcompleted: u64, ulltotal: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgress64(this, ::core::mem::transmute_copy(&ullcompleted), ::core::mem::transmute_copy(&ulltotal)).into())
        }
        unsafe extern "system" fn SetLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwlinenum: u32, pwzstring: ::windows_core::PCWSTR, fcompactpath: super::super::Foundation::BOOL, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLine(this, ::core::mem::transmute_copy(&dwlinenum), ::core::mem::transmute(&pwzstring), ::core::mem::transmute_copy(&fcompactpath), ::core::mem::transmute_copy(&pvresevered)).into())
        }
        unsafe extern "system" fn SetCancelMsg<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwzcancelmsg: ::windows_core::PCWSTR, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCancelMsg(this, ::core::mem::transmute(&pwzcancelmsg), ::core::mem::transmute_copy(&pvresevered)).into())
        }
        unsafe extern "system" fn Timer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IProgressDialog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeraction: u32, pvresevered: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Timer(this, ::core::mem::transmute_copy(&dwtimeraction), ::core::mem::transmute_copy(&pvresevered)).into())
        }
        IProgressDialog_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartProgressDialog: StartProgressDialog::<Identity, Impl, OFFSET>,
            StopProgressDialog: StopProgressDialog::<Identity, Impl, OFFSET>,
            SetTitle: SetTitle::<Identity, Impl, OFFSET>,
            SetAnimation: SetAnimation::<Identity, Impl, OFFSET>,
            HasUserCancelled: HasUserCancelled::<Identity, Impl, OFFSET>,
            SetProgress: SetProgress::<Identity, Impl, OFFSET>,
            SetProgress64: SetProgress64::<Identity, Impl, OFFSET>,
            SetLine: SetLine::<Identity, Impl, OFFSET>,
            SetCancelMsg: SetCancelMsg::<Identity, Impl, OFFSET>,
            Timer: Timer::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IPropertyKeyStore_Impl: ::windows_core::BaseImpl {
    fn GetKeyCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetKeyAt(this: &Self::This, index: i32, pkey: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn AppendKey(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn DeleteKey(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn IsKeyInStore(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn RemoveKey(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IPropertyKeyStore {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPropertyKeyStore {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetKeyCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keycount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeyCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(keycount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKeyAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pkey: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyAt(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&pkey)).into())
        }
        unsafe extern "system" fn AppendKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendKey(this, ::core::mem::transmute_copy(&key)).into())
        }
        unsafe extern "system" fn DeleteKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteKey(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn IsKeyInStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKeyInStore(this, ::core::mem::transmute_copy(&key)).into())
        }
        unsafe extern "system" fn RemoveKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPropertyKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveKey(this, ::core::mem::transmute_copy(&key)).into())
        }
        IPropertyKeyStore_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetKeyCount: GetKeyCount::<Identity, Impl, OFFSET>,
            GetKeyAt: GetKeyAt::<Identity, Impl, OFFSET>,
            AppendKey: AppendKey::<Identity, Impl, OFFSET>,
            DeleteKey: DeleteKey::<Identity, Impl, OFFSET>,
            IsKeyInStore: IsKeyInStore::<Identity, Impl, OFFSET>,
            RemoveKey: RemoveKey::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IPublishedApp_Impl: ::windows_core::BaseImpl + IShellApp_Impl {
    fn Install(this: &Self::This, pstinstall: *const super::super::Foundation::SYSTEMTIME) -> ::windows_core::Result<()>;
    fn GetPublishedAppInfo(this: &Self::This, ppai: *mut PUBAPPINFO) -> ::windows_core::Result<()>;
    fn Unschedule(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IPublishedApp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellApp);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishedApp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPublishedApp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Install<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishedApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstinstall: *const super::super::Foundation::SYSTEMTIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Install(this, ::core::mem::transmute_copy(&pstinstall)).into())
        }
        unsafe extern "system" fn GetPublishedAppInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishedApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppai: *mut PUBAPPINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPublishedAppInfo(this, ::core::mem::transmute_copy(&ppai)).into())
        }
        unsafe extern "system" fn Unschedule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishedApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unschedule(this).into())
        }
        IPublishedApp_Vtbl {
            base__: <IShellApp as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Install: Install::<Identity, Impl, OFFSET>,
            GetPublishedAppInfo: GetPublishedAppInfo::<Identity, Impl, OFFSET>,
            Unschedule: Unschedule::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IPublishedApp2_Impl: ::windows_core::BaseImpl + IPublishedApp_Impl {
    fn Install2(this: &Self::This, pstinstall: *const super::super::Foundation::SYSTEMTIME, hwndparent: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IPublishedApp2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IPublishedApp);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishedApp2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPublishedApp2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Install2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishedApp2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstinstall: *const super::super::Foundation::SYSTEMTIME, hwndparent: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Install2(this, ::core::mem::transmute_copy(&pstinstall), ::core::mem::transmute_copy(&hwndparent)).into())
        }
        IPublishedApp2_Vtbl { base__: <IPublishedApp as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Install2: Install2::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Data_Xml_MsXml\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Controls\"`"]
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com", feature = "Win32_UI_Controls"))]
pub trait IPublishingWizard_Impl: ::windows_core::BaseImpl + IWizardExtension_Impl {
    fn Initialize(this: &Self::This, pdo: ::core::option::Option<&super::super::System::Com::IDataObject>, dwoptions: u32, pszservicescope: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetTransferManifest(this: &Self::This, phrfromtransfer: *mut ::windows_core::HRESULT, pdocmanifest: *mut ::core::option::Option<super::super::Data::Xml::MsXml::IXMLDOMDocument>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com", feature = "Win32_UI_Controls"))]
impl ::windows_core::Iids for IPublishingWizard {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IWizardExtension);
}
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com", feature = "Win32_UI_Controls"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishingWizard_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPublishingWizard {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishingWizard_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdo: *mut ::core::ffi::c_void, dwoptions: u32, pszservicescope: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pdo), ::core::mem::transmute_copy(&dwoptions), ::core::mem::transmute(&pszservicescope)).into())
        }
        unsafe extern "system" fn GetTransferManifest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPublishingWizard_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrfromtransfer: *mut ::windows_core::HRESULT, pdocmanifest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTransferManifest(this, ::core::mem::transmute_copy(&phrfromtransfer), ::core::mem::transmute_copy(&pdocmanifest)).into())
        }
        IPublishingWizard_Vtbl {
            base__: <IWizardExtension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetTransferManifest: GetTransferManifest::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub trait IQueryAssociations_Impl: ::windows_core::BaseImpl {
    fn Init(this: &Self::This, flags: ASSOCF, pszassoc: &::windows_core::PCWSTR, hkprogid: super::super::System::Registry::HKEY, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn GetString(this: &Self::This, flags: ASSOCF, str: ASSOCSTR, pszextra: &::windows_core::PCWSTR, pszout: ::windows_core::PWSTR, pcchout: *mut u32) -> ::windows_core::Result<()>;
    fn GetKey(this: &Self::This, flags: ASSOCF, key: ASSOCKEY, pszextra: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::System::Registry::HKEY>;
    fn GetData(this: &Self::This, flags: ASSOCF, data: ASSOCDATA, pszextra: &::windows_core::PCWSTR, pvout: *mut ::core::ffi::c_void, pcbout: *mut u32) -> ::windows_core::Result<()>;
    fn GetEnum(this: &Self::This, flags: ASSOCF, assocenum: ASSOCENUM, pszextra: &::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::windows_core::Iids for IQueryAssociations {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryAssociations_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IQueryAssociations {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryAssociations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: ASSOCF, pszassoc: ::windows_core::PCWSTR, hkprogid: super::super::System::Registry::HKEY, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Init(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pszassoc), ::core::mem::transmute_copy(&hkprogid), ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn GetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryAssociations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: ASSOCF, str: ASSOCSTR, pszextra: ::windows_core::PCWSTR, pszout: ::windows_core::PWSTR, pcchout: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetString(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&str), ::core::mem::transmute(&pszextra), ::core::mem::transmute_copy(&pszout), ::core::mem::transmute_copy(&pcchout)).into())
        }
        unsafe extern "system" fn GetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryAssociations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: ASSOCF, key: ASSOCKEY, pszextra: ::windows_core::PCWSTR, phkeyout: *mut super::super::System::Registry::HKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKey(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&key), ::core::mem::transmute(&pszextra)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phkeyout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryAssociations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: ASSOCF, data: ASSOCDATA, pszextra: ::windows_core::PCWSTR, pvout: *mut ::core::ffi::c_void, pcbout: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetData(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&data), ::core::mem::transmute(&pszextra), ::core::mem::transmute_copy(&pvout), ::core::mem::transmute_copy(&pcbout)).into())
        }
        unsafe extern "system" fn GetEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryAssociations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: ASSOCF, assocenum: ASSOCENUM, pszextra: ::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEnum(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&assocenum), ::core::mem::transmute(&pszextra), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvout)).into())
        }
        IQueryAssociations_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Init: Init::<Identity, Impl, OFFSET>,
            GetString: GetString::<Identity, Impl, OFFSET>,
            GetKey: GetKey::<Identity, Impl, OFFSET>,
            GetData: GetData::<Identity, Impl, OFFSET>,
            GetEnum: GetEnum::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IQueryCancelAutoPlay_Impl: ::windows_core::BaseImpl {
    fn AllowAutoPlay(this: &Self::This, pszpath: &::windows_core::PCWSTR, dwcontenttype: u32, pszlabel: &::windows_core::PCWSTR, dwserialnumber: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IQueryCancelAutoPlay {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryCancelAutoPlay_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IQueryCancelAutoPlay {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AllowAutoPlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryCancelAutoPlay_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, dwcontenttype: u32, pszlabel: ::windows_core::PCWSTR, dwserialnumber: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AllowAutoPlay(this, ::core::mem::transmute(&pszpath), ::core::mem::transmute_copy(&dwcontenttype), ::core::mem::transmute(&pszlabel), ::core::mem::transmute_copy(&dwserialnumber)).into())
        }
        IQueryCancelAutoPlay_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, AllowAutoPlay: AllowAutoPlay::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IQueryCodePage_Impl: ::windows_core::BaseImpl {
    fn GetCodePage(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodePage(this: &Self::This, uicodepage: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IQueryCodePage {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryCodePage_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IQueryCodePage {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCodePage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryCodePage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puicodepage: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodePage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puicodepage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodePage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryCodePage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uicodepage: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodePage(this, ::core::mem::transmute_copy(&uicodepage)).into())
        }
        IQueryCodePage_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCodePage: GetCodePage::<Identity, Impl, OFFSET>,
            SetCodePage: SetCodePage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IQueryContinue_Impl: ::windows_core::BaseImpl {
    fn QueryContinue(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IQueryContinue {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryContinue_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IQueryContinue {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryContinue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryContinue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryContinue(this).into())
        }
        IQueryContinue_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, QueryContinue: QueryContinue::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IQueryContinueWithStatus_Impl: ::windows_core::BaseImpl + IQueryContinue_Impl {
    fn SetStatusMessage(this: &Self::This, psz: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IQueryContinueWithStatus {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IQueryContinue);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryContinueWithStatus_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IQueryContinueWithStatus {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetStatusMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryContinueWithStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatusMessage(this, ::core::mem::transmute(&psz)).into())
        }
        IQueryContinueWithStatus_Vtbl { base__: <IQueryContinue as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetStatusMessage: SetStatusMessage::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IQueryInfo_Impl: ::windows_core::BaseImpl {
    fn GetInfoTip(this: &Self::This, dwflags: &QITIPF_FLAGS) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetInfoFlags(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IQueryInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IQueryInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInfoTip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppwsztip: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInfoTip(this, ::core::mem::transmute(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwsztip, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInfoFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IQueryInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInfoFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IQueryInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInfoTip: GetInfoTip::<Identity, Impl, OFFSET>,
            GetInfoFlags: GetInfoFlags::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IRegTreeItem_Impl: ::windows_core::BaseImpl {
    fn GetCheckState(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetCheckState(this: &Self::This, bcheck: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IRegTreeItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRegTreeItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IRegTreeItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCheckState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRegTreeItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbcheck: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCheckState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbcheck, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCheckState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRegTreeItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bcheck: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCheckState(this, ::core::mem::transmute_copy(&bcheck)).into())
        }
        IRegTreeItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCheckState: GetCheckState::<Identity, Impl, OFFSET>,
            SetCheckState: SetCheckState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IRelatedItem_Impl: ::windows_core::BaseImpl {
    fn GetItemIDList(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn GetItem(this: &Self::This) -> ::windows_core::Result<IShellItem>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IRelatedItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRelatedItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IRelatedItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetItemIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRelatedItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemIDList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRelatedItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IRelatedItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetItemIDList: GetItemIDList::<Identity, Impl, OFFSET>,
            GetItem: GetItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IRemoteComputer_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pszmachine: &::windows_core::PCWSTR, benumerating: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IRemoteComputer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRemoteComputer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IRemoteComputer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRemoteComputer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszmachine: ::windows_core::PCWSTR, benumerating: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&pszmachine), ::core::mem::transmute_copy(&benumerating)).into())
        }
        IRemoteComputer_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IResolveShellLink_Impl: ::windows_core::BaseImpl {
    fn ResolveShellLink(this: &Self::This, punklink: ::core::option::Option<&::windows_core::IUnknown>, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IResolveShellLink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResolveShellLink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IResolveShellLink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ResolveShellLink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResolveShellLink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punklink: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveShellLink(this, ::windows_core::from_raw_borrowed(&punklink), ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&fflags)).into())
        }
        IResolveShellLink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ResolveShellLink: ResolveShellLink::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IResultsFolder_Impl: ::windows_core::BaseImpl {
    fn AddItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn AddIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST, ppidladded: *mut *mut Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn RemoveItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn RemoveIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn RemoveAll(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IResultsFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResultsFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IResultsFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResultsFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddItem(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn AddIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResultsFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppidladded: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddIDList(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&ppidladded)).into())
        }
        unsafe extern "system" fn RemoveItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResultsFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveItem(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn RemoveIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResultsFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveIDList(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn RemoveAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IResultsFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAll(this).into())
        }
        IResultsFolder_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddItem: AddItem::<Identity, Impl, OFFSET>,
            AddIDList: AddIDList::<Identity, Impl, OFFSET>,
            RemoveItem: RemoveItem::<Identity, Impl, OFFSET>,
            RemoveIDList: RemoveIDList::<Identity, Impl, OFFSET>,
            RemoveAll: RemoveAll::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IRunnableTask_Impl: ::windows_core::BaseImpl {
    fn Run(this: &Self::This) -> ::windows_core::Result<()>;
    fn Kill(this: &Self::This, bwait: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Suspend(this: &Self::This) -> ::windows_core::Result<()>;
    fn Resume(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsRunning(this: &Self::This) -> u32;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IRunnableTask {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRunnableTask_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IRunnableTask {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Run<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRunnableTask_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Run(this).into())
        }
        unsafe extern "system" fn Kill<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRunnableTask_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bwait: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Kill(this, ::core::mem::transmute_copy(&bwait)).into())
        }
        unsafe extern "system" fn Suspend<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRunnableTask_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Suspend(this).into())
        }
        unsafe extern "system" fn Resume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRunnableTask_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resume(this).into())
        }
        unsafe extern "system" fn IsRunning<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRunnableTask_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsRunning(this))
        }
        IRunnableTask_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Run: Run::<Identity, Impl, OFFSET>,
            Kill: Kill::<Identity, Impl, OFFSET>,
            Suspend: Suspend::<Identity, Impl, OFFSET>,
            Resume: Resume::<Identity, Impl, OFFSET>,
            IsRunning: IsRunning::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IScriptErrorList_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn advanceError(this: &Self::This) -> ::windows_core::Result<()>;
    fn retreatError(this: &Self::This) -> ::windows_core::Result<()>;
    fn canAdvanceError(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn canRetreatError(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn getErrorLine(this: &Self::This) -> ::windows_core::Result<i32>;
    fn getErrorChar(this: &Self::This) -> ::windows_core::Result<i32>;
    fn getErrorCode(this: &Self::This) -> ::windows_core::Result<i32>;
    fn getErrorMsg(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn getErrorUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn getAlwaysShowLockState(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn getDetailsPaneOpen(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn setDetailsPaneOpen(this: &Self::This, fdetailspaneopen: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn getPerErrorDisplay(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn setPerErrorDisplay(this: &Self::This, fpererrordisplay: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IScriptErrorList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IScriptErrorList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn advanceError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::advanceError(this).into())
        }
        unsafe extern "system" fn retreatError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::retreatError(this).into())
        }
        unsafe extern "system" fn canAdvanceError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcanadvance: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::canAdvanceError(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcanadvance, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn canRetreatError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcanretreat: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::canRetreatError(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcanretreat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getErrorLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plline: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getErrorLine(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plline, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getErrorChar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plchar: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getErrorChar(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plchar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plcode: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getErrorCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getErrorMsg<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getErrorMsg(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getErrorUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getErrorUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getAlwaysShowLockState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfalwaysshowlocked: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getAlwaysShowLockState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfalwaysshowlocked, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getDetailsPaneOpen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfdetailspaneopen: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getDetailsPaneOpen(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfdetailspaneopen, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn setDetailsPaneOpen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fdetailspaneopen: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::setDetailsPaneOpen(this, ::core::mem::transmute_copy(&fdetailspaneopen)).into())
        }
        unsafe extern "system" fn getPerErrorDisplay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfpererrordisplay: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getPerErrorDisplay(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfpererrordisplay, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn setPerErrorDisplay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScriptErrorList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fpererrordisplay: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::setPerErrorDisplay(this, ::core::mem::transmute_copy(&fpererrordisplay)).into())
        }
        IScriptErrorList_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            advanceError: advanceError::<Identity, Impl, OFFSET>,
            retreatError: retreatError::<Identity, Impl, OFFSET>,
            canAdvanceError: canAdvanceError::<Identity, Impl, OFFSET>,
            canRetreatError: canRetreatError::<Identity, Impl, OFFSET>,
            getErrorLine: getErrorLine::<Identity, Impl, OFFSET>,
            getErrorChar: getErrorChar::<Identity, Impl, OFFSET>,
            getErrorCode: getErrorCode::<Identity, Impl, OFFSET>,
            getErrorMsg: getErrorMsg::<Identity, Impl, OFFSET>,
            getErrorUrl: getErrorUrl::<Identity, Impl, OFFSET>,
            getAlwaysShowLockState: getAlwaysShowLockState::<Identity, Impl, OFFSET>,
            getDetailsPaneOpen: getDetailsPaneOpen::<Identity, Impl, OFFSET>,
            setDetailsPaneOpen: setDetailsPaneOpen::<Identity, Impl, OFFSET>,
            getPerErrorDisplay: getPerErrorDisplay::<Identity, Impl, OFFSET>,
            setPerErrorDisplay: setPerErrorDisplay::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISearchBoxInfo_Impl: ::windows_core::BaseImpl {
    fn GetCondition(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetText(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for ISearchBoxInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchBoxInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISearchBoxInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCondition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchBoxInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCondition(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchBoxInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsz, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISearchBoxInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCondition: GetCondition::<Identity, Impl, OFFSET>,
            GetText: GetText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISearchContext_Impl: ::windows_core::BaseImpl {
    fn GetSearchUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetSearchText(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetSearchStyle(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for ISearchContext {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchContext_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISearchContext {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSearchUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsearchurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSearchUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrsearchurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSearchText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsearchtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSearchText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrsearchtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSearchStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwsearchstyle: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSearchStyle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwsearchstyle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISearchContext_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSearchUrl: GetSearchUrl::<Identity, Impl, OFFSET>,
            GetSearchText: GetSearchText::<Identity, Impl, OFFSET>,
            GetSearchStyle: GetSearchStyle::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_System_Search\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Search", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait ISearchFolderItemFactory_Impl: ::windows_core::BaseImpl {
    fn SetDisplayName(this: &Self::This, pszdisplayname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetFolderTypeID(this: &Self::This, ftid: &::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetFolderLogicalViewMode(this: &Self::This, flvm: FOLDERLOGICALVIEWMODE) -> ::windows_core::Result<()>;
    fn SetIconSize(this: &Self::This, iiconsize: i32) -> ::windows_core::Result<()>;
    fn SetVisibleColumns(this: &Self::This, cvisiblecolumns: u32, rgkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn SetSortColumns(this: &Self::This, csortcolumns: u32, rgsortcolumns: *const SORTCOLUMN) -> ::windows_core::Result<()>;
    fn SetGroupColumn(this: &Self::This, keygroup: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn SetStacks(this: &Self::This, cstackkeys: u32, rgstackkeys: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
    fn SetScope(this: &Self::This, psiascope: ::core::option::Option<&IShellItemArray>) -> ::windows_core::Result<()>;
    fn SetCondition(this: &Self::This, pcondition: ::core::option::Option<&super::super::System::Search::ICondition>) -> ::windows_core::Result<()>;
    fn GetShellItem(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetIDList(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Search", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for ISearchFolderItemFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Search", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISearchFolderItemFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdisplayname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDisplayName(this, ::core::mem::transmute(&pszdisplayname)).into())
        }
        unsafe extern "system" fn SetFolderTypeID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ftid: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderTypeID(this, ::core::mem::transmute(&ftid)).into())
        }
        unsafe extern "system" fn SetFolderLogicalViewMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flvm: FOLDERLOGICALVIEWMODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderLogicalViewMode(this, ::core::mem::transmute_copy(&flvm)).into())
        }
        unsafe extern "system" fn SetIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iiconsize: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconSize(this, ::core::mem::transmute_copy(&iiconsize)).into())
        }
        unsafe extern "system" fn SetVisibleColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cvisiblecolumns: u32, rgkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVisibleColumns(this, ::core::mem::transmute_copy(&cvisiblecolumns), ::core::mem::transmute_copy(&rgkey)).into())
        }
        unsafe extern "system" fn SetSortColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, csortcolumns: u32, rgsortcolumns: *const SORTCOLUMN) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSortColumns(this, ::core::mem::transmute_copy(&csortcolumns), ::core::mem::transmute_copy(&rgsortcolumns)).into())
        }
        unsafe extern "system" fn SetGroupColumn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keygroup: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGroupColumn(this, ::core::mem::transmute_copy(&keygroup)).into())
        }
        unsafe extern "system" fn SetStacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cstackkeys: u32, rgstackkeys: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStacks(this, ::core::mem::transmute_copy(&cstackkeys), ::core::mem::transmute_copy(&rgstackkeys)).into())
        }
        unsafe extern "system" fn SetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiascope: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScope(this, ::windows_core::from_raw_borrowed(&psiascope)).into())
        }
        unsafe extern "system" fn SetCondition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcondition: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCondition(this, ::windows_core::from_raw_borrowed(&pcondition)).into())
        }
        unsafe extern "system" fn GetShellItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetShellItem(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISearchFolderItemFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIDList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISearchFolderItemFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDisplayName: SetDisplayName::<Identity, Impl, OFFSET>,
            SetFolderTypeID: SetFolderTypeID::<Identity, Impl, OFFSET>,
            SetFolderLogicalViewMode: SetFolderLogicalViewMode::<Identity, Impl, OFFSET>,
            SetIconSize: SetIconSize::<Identity, Impl, OFFSET>,
            SetVisibleColumns: SetVisibleColumns::<Identity, Impl, OFFSET>,
            SetSortColumns: SetSortColumns::<Identity, Impl, OFFSET>,
            SetGroupColumn: SetGroupColumn::<Identity, Impl, OFFSET>,
            SetStacks: SetStacks::<Identity, Impl, OFFSET>,
            SetScope: SetScope::<Identity, Impl, OFFSET>,
            SetCondition: SetCondition::<Identity, Impl, OFFSET>,
            GetShellItem: GetShellItem::<Identity, Impl, OFFSET>,
            GetIDList: GetIDList::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait ISharedBitmap_Impl: ::windows_core::BaseImpl {
    fn GetSharedBitmap(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
    fn GetSize(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::SIZE>;
    fn GetFormat(this: &Self::This) -> ::windows_core::Result<WTS_ALPHATYPE>;
    fn InitializeBitmap(this: &Self::This, hbm: super::super::Graphics::Gdi::HBITMAP, wtsat: WTS_ALPHATYPE) -> ::windows_core::Result<()>;
    fn Detach(this: &Self::This) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for ISharedBitmap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharedBitmap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISharedBitmap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSharedBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharedBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSharedBitmap(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharedBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psize: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharedBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pat: *mut WTS_ALPHATYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFormat(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InitializeBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharedBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hbm: super::super::Graphics::Gdi::HBITMAP, wtsat: WTS_ALPHATYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeBitmap(this, ::core::mem::transmute_copy(&hbm), ::core::mem::transmute_copy(&wtsat)).into())
        }
        unsafe extern "system" fn Detach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharedBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Detach(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISharedBitmap_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSharedBitmap: GetSharedBitmap::<Identity, Impl, OFFSET>,
            GetSize: GetSize::<Identity, Impl, OFFSET>,
            GetFormat: GetFormat::<Identity, Impl, OFFSET>,
            InitializeBitmap: InitializeBitmap::<Identity, Impl, OFFSET>,
            Detach: Detach::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISharingConfigurationManager_Impl: ::windows_core::BaseImpl {
    fn CreateShare(this: &Self::This, dsid: DEF_SHARE_ID, role: SHARE_ROLE) -> ::windows_core::Result<()>;
    fn DeleteShare(this: &Self::This, dsid: DEF_SHARE_ID) -> ::windows_core::Result<()>;
    fn ShareExists(this: &Self::This, dsid: DEF_SHARE_ID) -> ::windows_core::Result<()>;
    fn GetSharePermissions(this: &Self::This, dsid: DEF_SHARE_ID) -> ::windows_core::Result<SHARE_ROLE>;
    fn SharePrinters(this: &Self::This) -> ::windows_core::Result<()>;
    fn StopSharingPrinters(this: &Self::This) -> ::windows_core::Result<()>;
    fn ArePrintersShared(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISharingConfigurationManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISharingConfigurationManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateShare<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID, role: SHARE_ROLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateShare(this, ::core::mem::transmute_copy(&dsid), ::core::mem::transmute_copy(&role)).into())
        }
        unsafe extern "system" fn DeleteShare<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteShare(this, ::core::mem::transmute_copy(&dsid)).into())
        }
        unsafe extern "system" fn ShareExists<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShareExists(this, ::core::mem::transmute_copy(&dsid)).into())
        }
        unsafe extern "system" fn GetSharePermissions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dsid: DEF_SHARE_ID, prole: *mut SHARE_ROLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSharePermissions(this, ::core::mem::transmute_copy(&dsid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prole, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SharePrinters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SharePrinters(this).into())
        }
        unsafe extern "system" fn StopSharingPrinters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopSharingPrinters(this).into())
        }
        unsafe extern "system" fn ArePrintersShared<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISharingConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ArePrintersShared(this).into())
        }
        ISharingConfigurationManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateShare: CreateShare::<Identity, Impl, OFFSET>,
            DeleteShare: DeleteShare::<Identity, Impl, OFFSET>,
            ShareExists: ShareExists::<Identity, Impl, OFFSET>,
            GetSharePermissions: GetSharePermissions::<Identity, Impl, OFFSET>,
            SharePrinters: SharePrinters::<Identity, Impl, OFFSET>,
            StopSharingPrinters: StopSharingPrinters::<Identity, Impl, OFFSET>,
            ArePrintersShared: ArePrintersShared::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IShellApp_Impl: ::windows_core::BaseImpl {
    fn GetAppInfo(this: &Self::This, pai: *mut APPINFODATA) -> ::windows_core::Result<()>;
    fn GetPossibleActions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSlowAppInfo(this: &Self::This, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()>;
    fn GetCachedSlowAppInfo(this: &Self::This, psaid: *mut SLOWAPPINFO) -> ::windows_core::Result<()>;
    fn IsInstalled(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IShellApp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellApp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellApp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAppInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pai: *mut APPINFODATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAppInfo(this, ::core::mem::transmute_copy(&pai)).into())
        }
        unsafe extern "system" fn GetPossibleActions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwactions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPossibleActions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwactions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSlowAppInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psaid: *mut SLOWAPPINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSlowAppInfo(this, ::core::mem::transmute_copy(&psaid)).into())
        }
        unsafe extern "system" fn GetCachedSlowAppInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psaid: *mut SLOWAPPINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCachedSlowAppInfo(this, ::core::mem::transmute_copy(&psaid)).into())
        }
        unsafe extern "system" fn IsInstalled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsInstalled(this).into())
        }
        IShellApp_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAppInfo: GetAppInfo::<Identity, Impl, OFFSET>,
            GetPossibleActions: GetPossibleActions::<Identity, Impl, OFFSET>,
            GetSlowAppInfo: GetSlowAppInfo::<Identity, Impl, OFFSET>,
            GetCachedSlowAppInfo: GetCachedSlowAppInfo::<Identity, Impl, OFFSET>,
            IsInstalled: IsInstalled::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellBrowser_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn InsertMenusSB(this: &Self::This, hmenushared: super::WindowsAndMessaging::HMENU, lpmenuwidths: *mut super::super::System::Ole::OLEMENUGROUPWIDTHS) -> ::windows_core::Result<()>;
    fn SetMenuSB(this: &Self::This, hmenushared: super::WindowsAndMessaging::HMENU, holemenures: isize, hwndactiveobject: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn RemoveMenusSB(this: &Self::This, hmenushared: super::WindowsAndMessaging::HMENU) -> ::windows_core::Result<()>;
    fn SetStatusTextSB(this: &Self::This, pszstatustext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EnableModelessSB(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn TranslateAcceleratorSB(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG, wid: u16) -> ::windows_core::Result<()>;
    fn BrowseObject(this: &Self::This, pidl: *const Common::ITEMIDLIST, wflags: u32) -> ::windows_core::Result<()>;
    fn GetViewStateStream(this: &Self::This, grfmode: u32) -> ::windows_core::Result<super::super::System::Com::IStream>;
    fn GetControlWindow(this: &Self::This, id: u32) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn SendControlMsg(this: &Self::This, id: u32, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, pret: *mut super::super::Foundation::LRESULT) -> ::windows_core::Result<()>;
    fn QueryActiveShellView(this: &Self::This) -> ::windows_core::Result<IShellView>;
    fn OnViewWindowActive(this: &Self::This, pshv: ::core::option::Option<&IShellView>) -> ::windows_core::Result<()>;
    fn SetToolbarItems(this: &Self::This, lpbuttons: *const super::Controls::TBBUTTON, nbuttons: u32, uflags: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellBrowser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellBrowser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InsertMenusSB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU, lpmenuwidths: *mut super::super::System::Ole::OLEMENUGROUPWIDTHS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertMenusSB(this, ::core::mem::transmute_copy(&hmenushared), ::core::mem::transmute_copy(&lpmenuwidths)).into())
        }
        unsafe extern "system" fn SetMenuSB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU, holemenures: isize, hwndactiveobject: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMenuSB(this, ::core::mem::transmute_copy(&hmenushared), ::core::mem::transmute_copy(&holemenures), ::core::mem::transmute_copy(&hwndactiveobject)).into())
        }
        unsafe extern "system" fn RemoveMenusSB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmenushared: super::WindowsAndMessaging::HMENU) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveMenusSB(this, ::core::mem::transmute_copy(&hmenushared)).into())
        }
        unsafe extern "system" fn SetStatusTextSB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszstatustext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatusTextSB(this, ::core::mem::transmute(&pszstatustext)).into())
        }
        unsafe extern "system" fn EnableModelessSB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableModelessSB(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn TranslateAcceleratorSB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG, wid: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateAcceleratorSB(this, ::core::mem::transmute_copy(&pmsg), ::core::mem::transmute_copy(&wid)).into())
        }
        unsafe extern "system" fn BrowseObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, wflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BrowseObject(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&wflags)).into())
        }
        unsafe extern "system" fn GetViewStateStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, grfmode: u32, ppstrm: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetViewStateStream(this, ::core::mem::transmute_copy(&grfmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstrm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetControlWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetControlWindow(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SendControlMsg<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM, pret: *mut super::super::Foundation::LRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SendControlMsg(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam), ::core::mem::transmute_copy(&pret)).into())
        }
        unsafe extern "system" fn QueryActiveShellView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryActiveShellView(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppshv, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnViewWindowActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pshv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnViewWindowActive(this, ::windows_core::from_raw_borrowed(&pshv)).into())
        }
        unsafe extern "system" fn SetToolbarItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpbuttons: *const super::Controls::TBBUTTON, nbuttons: u32, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetToolbarItems(this, ::core::mem::transmute_copy(&lpbuttons), ::core::mem::transmute_copy(&nbuttons), ::core::mem::transmute_copy(&uflags)).into())
        }
        IShellBrowser_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InsertMenusSB: InsertMenusSB::<Identity, Impl, OFFSET>,
            SetMenuSB: SetMenuSB::<Identity, Impl, OFFSET>,
            RemoveMenusSB: RemoveMenusSB::<Identity, Impl, OFFSET>,
            SetStatusTextSB: SetStatusTextSB::<Identity, Impl, OFFSET>,
            EnableModelessSB: EnableModelessSB::<Identity, Impl, OFFSET>,
            TranslateAcceleratorSB: TranslateAcceleratorSB::<Identity, Impl, OFFSET>,
            BrowseObject: BrowseObject::<Identity, Impl, OFFSET>,
            GetViewStateStream: GetViewStateStream::<Identity, Impl, OFFSET>,
            GetControlWindow: GetControlWindow::<Identity, Impl, OFFSET>,
            SendControlMsg: SendControlMsg::<Identity, Impl, OFFSET>,
            QueryActiveShellView: QueryActiveShellView::<Identity, Impl, OFFSET>,
            OnViewWindowActive: OnViewWindowActive::<Identity, Impl, OFFSET>,
            SetToolbarItems: SetToolbarItems::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IShellChangeNotify_Impl: ::windows_core::BaseImpl {
    fn OnChange(this: &Self::This, levent: i32, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IShellChangeNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellChangeNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellChangeNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellChangeNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, levent: i32, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnChange(this, ::core::mem::transmute_copy(&levent), ::core::mem::transmute_copy(&pidl1), ::core::mem::transmute_copy(&pidl2)).into())
        }
        IShellChangeNotify_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnChange: OnChange::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IShellDetails_Impl: ::windows_core::BaseImpl {
    fn GetDetailsOf(this: &Self::This, pidl: *const Common::ITEMIDLIST, icolumn: u32, pdetails: *mut Common::SHELLDETAILS) -> ::windows_core::Result<()>;
    fn ColumnClick(this: &Self::This, icolumn: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IShellDetails {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDetails_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDetails {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDetailsOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDetails_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, icolumn: u32, pdetails: *mut Common::SHELLDETAILS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDetailsOf(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&icolumn), ::core::mem::transmute_copy(&pdetails)).into())
        }
        unsafe extern "system" fn ColumnClick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDetails_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icolumn: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ColumnClick(this, ::core::mem::transmute_copy(&icolumn)).into())
        }
        IShellDetails_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDetailsOf: GetDetailsOf::<Identity, Impl, OFFSET>,
            ColumnClick: ColumnClick::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellDispatch_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn NameSpace(this: &Self::This, vdir: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>;
    fn BrowseForFolder(this: &Self::This, hwnd: i32, title: &::windows_core::BSTR, options: i32, rootfolder: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<Folder>;
    fn Windows(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Open(this: &Self::This, vdir: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Explore(this: &Self::This, vdir: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn MinimizeAll(this: &Self::This) -> ::windows_core::Result<()>;
    fn UndoMinimizeALL(this: &Self::This) -> ::windows_core::Result<()>;
    fn FileRun(this: &Self::This) -> ::windows_core::Result<()>;
    fn CascadeWindows(this: &Self::This) -> ::windows_core::Result<()>;
    fn TileVertically(this: &Self::This) -> ::windows_core::Result<()>;
    fn TileHorizontally(this: &Self::This) -> ::windows_core::Result<()>;
    fn ShutdownWindows(this: &Self::This) -> ::windows_core::Result<()>;
    fn Suspend(this: &Self::This) -> ::windows_core::Result<()>;
    fn EjectPC(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetTime(this: &Self::This) -> ::windows_core::Result<()>;
    fn TrayProperties(this: &Self::This) -> ::windows_core::Result<()>;
    fn Help(this: &Self::This) -> ::windows_core::Result<()>;
    fn FindFiles(this: &Self::This) -> ::windows_core::Result<()>;
    fn FindComputer(this: &Self::This) -> ::windows_core::Result<()>;
    fn RefreshMenu(this: &Self::This) -> ::windows_core::Result<()>;
    fn ControlPanelItem(this: &Self::This, bstrdir: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellDispatch {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDispatch {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NameSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vdir: super::super::System::Variant::VARIANT, ppsdf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NameSpace(this, ::core::mem::transmute(&vdir)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsdf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BrowseForFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: i32, title: ::std::mem::MaybeUninit<::windows_core::BSTR>, options: i32, rootfolder: super::super::System::Variant::VARIANT, ppsdf: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BrowseForFolder(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute(&title), ::core::mem::transmute_copy(&options), ::core::mem::transmute(&rootfolder)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsdf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Windows<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Windows(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Open<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Open(this, ::core::mem::transmute(&vdir)).into())
        }
        unsafe extern "system" fn Explore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vdir: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Explore(this, ::core::mem::transmute(&vdir)).into())
        }
        unsafe extern "system" fn MinimizeAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MinimizeAll(this).into())
        }
        unsafe extern "system" fn UndoMinimizeALL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UndoMinimizeALL(this).into())
        }
        unsafe extern "system" fn FileRun<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FileRun(this).into())
        }
        unsafe extern "system" fn CascadeWindows<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CascadeWindows(this).into())
        }
        unsafe extern "system" fn TileVertically<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TileVertically(this).into())
        }
        unsafe extern "system" fn TileHorizontally<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TileHorizontally(this).into())
        }
        unsafe extern "system" fn ShutdownWindows<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShutdownWindows(this).into())
        }
        unsafe extern "system" fn Suspend<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Suspend(this).into())
        }
        unsafe extern "system" fn EjectPC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EjectPC(this).into())
        }
        unsafe extern "system" fn SetTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTime(this).into())
        }
        unsafe extern "system" fn TrayProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TrayProperties(this).into())
        }
        unsafe extern "system" fn Help<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Help(this).into())
        }
        unsafe extern "system" fn FindFiles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindFiles(this).into())
        }
        unsafe extern "system" fn FindComputer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindComputer(this).into())
        }
        unsafe extern "system" fn RefreshMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RefreshMenu(this).into())
        }
        unsafe extern "system" fn ControlPanelItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrdir: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlPanelItem(this, ::core::mem::transmute(&bstrdir)).into())
        }
        IShellDispatch_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            NameSpace: NameSpace::<Identity, Impl, OFFSET>,
            BrowseForFolder: BrowseForFolder::<Identity, Impl, OFFSET>,
            Windows: Windows::<Identity, Impl, OFFSET>,
            Open: Open::<Identity, Impl, OFFSET>,
            Explore: Explore::<Identity, Impl, OFFSET>,
            MinimizeAll: MinimizeAll::<Identity, Impl, OFFSET>,
            UndoMinimizeALL: UndoMinimizeALL::<Identity, Impl, OFFSET>,
            FileRun: FileRun::<Identity, Impl, OFFSET>,
            CascadeWindows: CascadeWindows::<Identity, Impl, OFFSET>,
            TileVertically: TileVertically::<Identity, Impl, OFFSET>,
            TileHorizontally: TileHorizontally::<Identity, Impl, OFFSET>,
            ShutdownWindows: ShutdownWindows::<Identity, Impl, OFFSET>,
            Suspend: Suspend::<Identity, Impl, OFFSET>,
            EjectPC: EjectPC::<Identity, Impl, OFFSET>,
            SetTime: SetTime::<Identity, Impl, OFFSET>,
            TrayProperties: TrayProperties::<Identity, Impl, OFFSET>,
            Help: Help::<Identity, Impl, OFFSET>,
            FindFiles: FindFiles::<Identity, Impl, OFFSET>,
            FindComputer: FindComputer::<Identity, Impl, OFFSET>,
            RefreshMenu: RefreshMenu::<Identity, Impl, OFFSET>,
            ControlPanelItem: ControlPanelItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellDispatch2_Impl: ::windows_core::BaseImpl + IShellDispatch_Impl {
    fn IsRestricted(this: &Self::This, group: &::windows_core::BSTR, restriction: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn ShellExecute(this: &Self::This, file: &::windows_core::BSTR, vargs: &super::super::System::Variant::VARIANT, vdir: &super::super::System::Variant::VARIANT, voperation: &super::super::System::Variant::VARIANT, vshow: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn FindPrinter(this: &Self::This, name: &::windows_core::BSTR, location: &::windows_core::BSTR, model: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetSystemInformation(this: &Self::This, name: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn ServiceStart(this: &Self::This, servicename: &::windows_core::BSTR, persistent: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn ServiceStop(this: &Self::This, servicename: &::windows_core::BSTR, persistent: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn IsServiceRunning(this: &Self::This, servicename: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn CanStartStopService(this: &Self::This, servicename: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn ShowBrowserBar(this: &Self::This, bstrclsid: &::windows_core::BSTR, bshow: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellDispatch2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDispatch2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsRestricted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: ::std::mem::MaybeUninit<::windows_core::BSTR>, restriction: ::std::mem::MaybeUninit<::windows_core::BSTR>, plrestrictvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsRestricted(this, ::core::mem::transmute(&group), ::core::mem::transmute(&restriction)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plrestrictvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShellExecute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::std::mem::MaybeUninit<::windows_core::BSTR>, vargs: super::super::System::Variant::VARIANT, vdir: super::super::System::Variant::VARIANT, voperation: super::super::System::Variant::VARIANT, vshow: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShellExecute(this, ::core::mem::transmute(&file), ::core::mem::transmute(&vargs), ::core::mem::transmute(&vdir), ::core::mem::transmute(&voperation), ::core::mem::transmute(&vshow)).into())
        }
        unsafe extern "system" fn FindPrinter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>, location: ::std::mem::MaybeUninit<::windows_core::BSTR>, model: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindPrinter(this, ::core::mem::transmute(&name), ::core::mem::transmute(&location), ::core::mem::transmute(&model)).into())
        }
        unsafe extern "system" fn GetSystemInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>, pv: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSystemInformation(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pv, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ServiceStart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, persistent: super::super::System::Variant::VARIANT, psuccess: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ServiceStart(this, ::core::mem::transmute(&servicename), ::core::mem::transmute(&persistent)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psuccess, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ServiceStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, persistent: super::super::System::Variant::VARIANT, psuccess: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ServiceStop(this, ::core::mem::transmute(&servicename), ::core::mem::transmute(&persistent)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psuccess, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsServiceRunning<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, prunning: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsServiceRunning(this, ::core::mem::transmute(&servicename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prunning, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CanStartStopService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, servicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, pcanstartstop: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CanStartStopService(this, ::core::mem::transmute(&servicename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcanstartstop, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShowBrowserBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>, bshow: super::super::System::Variant::VARIANT, psuccess: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ShowBrowserBar(this, ::core::mem::transmute(&bstrclsid), ::core::mem::transmute(&bshow)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psuccess, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellDispatch2_Vtbl {
            base__: <IShellDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsRestricted: IsRestricted::<Identity, Impl, OFFSET>,
            ShellExecute: ShellExecute::<Identity, Impl, OFFSET>,
            FindPrinter: FindPrinter::<Identity, Impl, OFFSET>,
            GetSystemInformation: GetSystemInformation::<Identity, Impl, OFFSET>,
            ServiceStart: ServiceStart::<Identity, Impl, OFFSET>,
            ServiceStop: ServiceStop::<Identity, Impl, OFFSET>,
            IsServiceRunning: IsServiceRunning::<Identity, Impl, OFFSET>,
            CanStartStopService: CanStartStopService::<Identity, Impl, OFFSET>,
            ShowBrowserBar: ShowBrowserBar::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellDispatch3_Impl: ::windows_core::BaseImpl + IShellDispatch2_Impl {
    fn AddToRecent(this: &Self::This, varfile: &super::super::System::Variant::VARIANT, bstrcategory: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellDispatch3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellDispatch2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDispatch3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddToRecent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varfile: super::super::System::Variant::VARIANT, bstrcategory: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddToRecent(this, ::core::mem::transmute(&varfile), ::core::mem::transmute(&bstrcategory)).into())
        }
        IShellDispatch3_Vtbl { base__: <IShellDispatch2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, AddToRecent: AddToRecent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellDispatch4_Impl: ::windows_core::BaseImpl + IShellDispatch3_Impl {
    fn WindowsSecurity(this: &Self::This) -> ::windows_core::Result<()>;
    fn ToggleDesktop(this: &Self::This) -> ::windows_core::Result<()>;
    fn ExplorerPolicy(this: &Self::This, bstrpolicyname: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn GetSetting(this: &Self::This, lsetting: i32) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellDispatch4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellDispatch3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDispatch4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn WindowsSecurity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WindowsSecurity(this).into())
        }
        unsafe extern "system" fn ToggleDesktop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ToggleDesktop(this).into())
        }
        unsafe extern "system" fn ExplorerPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpolicyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvalue: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ExplorerPolicy(this, ::core::mem::transmute(&bstrpolicyname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSetting<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lsetting: i32, presult: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSetting(this, ::core::mem::transmute_copy(&lsetting)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(presult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellDispatch4_Vtbl {
            base__: <IShellDispatch3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            WindowsSecurity: WindowsSecurity::<Identity, Impl, OFFSET>,
            ToggleDesktop: ToggleDesktop::<Identity, Impl, OFFSET>,
            ExplorerPolicy: ExplorerPolicy::<Identity, Impl, OFFSET>,
            GetSetting: GetSetting::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellDispatch5_Impl: ::windows_core::BaseImpl + IShellDispatch4_Impl {
    fn WindowSwitcher(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellDispatch5 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellDispatch4);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch5_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDispatch5 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn WindowSwitcher<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WindowSwitcher(this).into())
        }
        IShellDispatch5_Vtbl { base__: <IShellDispatch4 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, WindowSwitcher: WindowSwitcher::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellDispatch6_Impl: ::windows_core::BaseImpl + IShellDispatch5_Impl {
    fn SearchCommand(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellDispatch6 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellDispatch5);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch6_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellDispatch6 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SearchCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellDispatch6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SearchCommand(this).into())
        }
        IShellDispatch6_Vtbl { base__: <IShellDispatch5 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SearchCommand: SearchCommand::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
pub trait IShellExtInit_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pidlfolder: *const Common::ITEMIDLIST, pdtobj: ::core::option::Option<&super::super::System::Com::IDataObject>, hkeyprogid: super::super::System::Registry::HKEY) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IShellExtInit {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellExtInit_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellExtInit {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellExtInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, pdtobj: *mut ::core::ffi::c_void, hkeyprogid: super::super::System::Registry::HKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&pidlfolder), ::windows_core::from_raw_borrowed(&pdtobj), ::core::mem::transmute_copy(&hkeyprogid)).into())
        }
        IShellExtInit_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellFavoritesNameSpace_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn MoveSelectionUp(this: &Self::This) -> ::windows_core::Result<()>;
    fn MoveSelectionDown(this: &Self::This) -> ::windows_core::Result<()>;
    fn ResetSort(this: &Self::This) -> ::windows_core::Result<()>;
    fn NewFolder(this: &Self::This) -> ::windows_core::Result<()>;
    fn Synchronize(this: &Self::This) -> ::windows_core::Result<()>;
    fn Import(this: &Self::This) -> ::windows_core::Result<()>;
    fn Export(this: &Self::This) -> ::windows_core::Result<()>;
    fn InvokeContextMenuCommand(this: &Self::This, strcommand: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn MoveSelectionTo(this: &Self::This) -> ::windows_core::Result<()>;
    fn SubscriptionsEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn CreateSubscriptionForSelection(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn DeleteSubscriptionForSelection(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetRoot(this: &Self::This, bstrfullpath: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellFavoritesNameSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFavoritesNameSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MoveSelectionUp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveSelectionUp(this).into())
        }
        unsafe extern "system" fn MoveSelectionDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveSelectionDown(this).into())
        }
        unsafe extern "system" fn ResetSort<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetSort(this).into())
        }
        unsafe extern "system" fn NewFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NewFolder(this).into())
        }
        unsafe extern "system" fn Synchronize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Synchronize(this).into())
        }
        unsafe extern "system" fn Import<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Import(this).into())
        }
        unsafe extern "system" fn Export<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Export(this).into())
        }
        unsafe extern "system" fn InvokeContextMenuCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strcommand: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeContextMenuCommand(this, ::core::mem::transmute(&strcommand)).into())
        }
        unsafe extern "system" fn MoveSelectionTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveSelectionTo(this).into())
        }
        unsafe extern "system" fn SubscriptionsEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SubscriptionsEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSubscriptionForSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSubscriptionForSelection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteSubscriptionForSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DeleteSubscriptionForSelection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRoot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFavoritesNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrfullpath: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRoot(this, ::core::mem::transmute(&bstrfullpath)).into())
        }
        IShellFavoritesNameSpace_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MoveSelectionUp: MoveSelectionUp::<Identity, Impl, OFFSET>,
            MoveSelectionDown: MoveSelectionDown::<Identity, Impl, OFFSET>,
            ResetSort: ResetSort::<Identity, Impl, OFFSET>,
            NewFolder: NewFolder::<Identity, Impl, OFFSET>,
            Synchronize: Synchronize::<Identity, Impl, OFFSET>,
            Import: Import::<Identity, Impl, OFFSET>,
            Export: Export::<Identity, Impl, OFFSET>,
            InvokeContextMenuCommand: InvokeContextMenuCommand::<Identity, Impl, OFFSET>,
            MoveSelectionTo: MoveSelectionTo::<Identity, Impl, OFFSET>,
            SubscriptionsEnabled: SubscriptionsEnabled::<Identity, Impl, OFFSET>,
            CreateSubscriptionForSelection: CreateSubscriptionForSelection::<Identity, Impl, OFFSET>,
            DeleteSubscriptionForSelection: DeleteSubscriptionForSelection::<Identity, Impl, OFFSET>,
            SetRoot: SetRoot::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IShellFolder_Impl: ::windows_core::BaseImpl {
    fn ParseDisplayName(this: &Self::This, hwnd: super::super::Foundation::HWND, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, pszdisplayname: &::windows_core::PCWSTR, pcheaten: *const u32, ppidl: *mut *mut Common::ITEMIDLIST, pdwattributes: *mut u32) -> ::windows_core::Result<()>;
    fn EnumObjects(this: &Self::This, hwnd: super::super::Foundation::HWND, grfflags: u32, ppenumidlist: *mut ::core::option::Option<IEnumIDList>) -> ::windows_core::HRESULT;
    fn BindToObject(this: &Self::This, pidl: *const Common::ITEMIDLIST, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn BindToStorage(this: &Self::This, pidl: *const Common::ITEMIDLIST, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CompareIDs(this: &Self::This, lparam: super::super::Foundation::LPARAM, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn CreateViewObject(this: &Self::This, hwndowner: super::super::Foundation::HWND, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetAttributesOf(this: &Self::This, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgfinout: *mut u32) -> ::windows_core::Result<()>;
    fn GetUIObjectOf(this: &Self::This, hwndowner: super::super::Foundation::HWND, cidl: u32, apidl: *const *const Common::ITEMIDLIST, riid: *const ::windows_core::GUID, rgfreserved: *const u32, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetDisplayNameOf(this: &Self::This, pidl: *const Common::ITEMIDLIST, uflags: SHGDNF, pname: *mut Common::STRRET) -> ::windows_core::Result<()>;
    fn SetNameOf(this: &Self::This, hwnd: super::super::Foundation::HWND, pidl: *const Common::ITEMIDLIST, pszname: &::windows_core::PCWSTR, uflags: SHGDNF, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IShellFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ParseDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pbc: *mut ::core::ffi::c_void, pszdisplayname: ::windows_core::PCWSTR, pcheaten: *const u32, ppidl: *mut *mut Common::ITEMIDLIST, pdwattributes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ParseDisplayName(this, ::core::mem::transmute_copy(&hwnd), ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute(&pszdisplayname), ::core::mem::transmute_copy(&pcheaten), ::core::mem::transmute_copy(&ppidl), ::core::mem::transmute_copy(&pdwattributes)).into())
        }
        unsafe extern "system" fn EnumObjects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, grfflags: u32, ppenumidlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumObjects(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&grfflags), ::core::mem::transmute_copy(&ppenumidlist)))
        }
        unsafe extern "system" fn BindToObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pbc: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindToObject(this, ::core::mem::transmute_copy(&pidl), ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn BindToStorage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pbc: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindToStorage(this, ::core::mem::transmute_copy(&pidl), ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn CompareIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lparam: super::super::Foundation::LPARAM, pidl1: *const Common::ITEMIDLIST, pidl2: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CompareIDs(this, ::core::mem::transmute_copy(&lparam), ::core::mem::transmute_copy(&pidl1), ::core::mem::transmute_copy(&pidl2)).into())
        }
        unsafe extern "system" fn CreateViewObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateViewObject(this, ::core::mem::transmute_copy(&hwndowner), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetAttributesOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cidl: u32, apidl: *const *const Common::ITEMIDLIST, rgfinout: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttributesOf(this, ::core::mem::transmute_copy(&cidl), ::core::mem::transmute_copy(&apidl), ::core::mem::transmute_copy(&rgfinout)).into())
        }
        unsafe extern "system" fn GetUIObjectOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND, cidl: u32, apidl: *const *const Common::ITEMIDLIST, riid: *const ::windows_core::GUID, rgfreserved: *const u32, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUIObjectOf(this, ::core::mem::transmute_copy(&hwndowner), ::core::mem::transmute_copy(&cidl), ::core::mem::transmute_copy(&apidl), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&rgfreserved), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetDisplayNameOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, uflags: SHGDNF, pname: *mut Common::STRRET) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDisplayNameOf(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&uflags), ::core::mem::transmute_copy(&pname)).into())
        }
        unsafe extern "system" fn SetNameOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, pidl: *const Common::ITEMIDLIST, pszname: ::windows_core::PCWSTR, uflags: SHGDNF, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNameOf(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&pidl), ::core::mem::transmute(&pszname), ::core::mem::transmute_copy(&uflags), ::core::mem::transmute_copy(&ppidlout)).into())
        }
        IShellFolder_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ParseDisplayName: ParseDisplayName::<Identity, Impl, OFFSET>,
            EnumObjects: EnumObjects::<Identity, Impl, OFFSET>,
            BindToObject: BindToObject::<Identity, Impl, OFFSET>,
            BindToStorage: BindToStorage::<Identity, Impl, OFFSET>,
            CompareIDs: CompareIDs::<Identity, Impl, OFFSET>,
            CreateViewObject: CreateViewObject::<Identity, Impl, OFFSET>,
            GetAttributesOf: GetAttributesOf::<Identity, Impl, OFFSET>,
            GetUIObjectOf: GetUIObjectOf::<Identity, Impl, OFFSET>,
            GetDisplayNameOf: GetDisplayNameOf::<Identity, Impl, OFFSET>,
            SetNameOf: SetNameOf::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IShellFolder2_Impl: ::windows_core::BaseImpl + IShellFolder_Impl {
    fn GetDefaultSearchGUID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn EnumSearches(this: &Self::This) -> ::windows_core::Result<IEnumExtraSearch>;
    fn GetDefaultColumn(this: &Self::This, dwres: u32, psort: *mut u32, pdisplay: *mut u32) -> ::windows_core::Result<()>;
    fn GetDefaultColumnState(this: &Self::This, icolumn: u32) -> ::windows_core::Result<u32>;
    fn GetDetailsEx(this: &Self::This, pidl: *const Common::ITEMIDLIST, pscid: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn GetDetailsOf(this: &Self::This, pidl: *const Common::ITEMIDLIST, icolumn: u32, psd: *mut Common::SHELLDETAILS) -> ::windows_core::Result<()>;
    fn MapColumnToSCID(this: &Self::This, icolumn: u32, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IShellFolder2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellFolder);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolder2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDefaultSearchGUID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultSearchGUID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumSearches<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumSearches(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDefaultColumn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwres: u32, psort: *mut u32, pdisplay: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDefaultColumn(this, ::core::mem::transmute_copy(&dwres), ::core::mem::transmute_copy(&psort), ::core::mem::transmute_copy(&pdisplay)).into())
        }
        unsafe extern "system" fn GetDefaultColumnState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icolumn: u32, pcsflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultColumnState(this, ::core::mem::transmute_copy(&icolumn)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcsflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDetailsEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pscid: *const PropertiesSystem::PROPERTYKEY, pv: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDetailsEx(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&pscid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pv, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDetailsOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, icolumn: u32, psd: *mut Common::SHELLDETAILS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDetailsOf(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&icolumn), ::core::mem::transmute_copy(&psd)).into())
        }
        unsafe extern "system" fn MapColumnToSCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolder2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icolumn: u32, pscid: *mut PropertiesSystem::PROPERTYKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MapColumnToSCID(this, ::core::mem::transmute_copy(&icolumn), ::core::mem::transmute_copy(&pscid)).into())
        }
        IShellFolder2_Vtbl {
            base__: <IShellFolder as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDefaultSearchGUID: GetDefaultSearchGUID::<Identity, Impl, OFFSET>,
            EnumSearches: EnumSearches::<Identity, Impl, OFFSET>,
            GetDefaultColumn: GetDefaultColumn::<Identity, Impl, OFFSET>,
            GetDefaultColumnState: GetDefaultColumnState::<Identity, Impl, OFFSET>,
            GetDetailsEx: GetDetailsEx::<Identity, Impl, OFFSET>,
            GetDetailsOf: GetDetailsOf::<Identity, Impl, OFFSET>,
            MapColumnToSCID: MapColumnToSCID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait IShellFolderBand_Impl: ::windows_core::BaseImpl {
    fn InitializeSFB(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn SetBandInfoSFB(this: &Self::This, pbi: *const BANDINFOSFB) -> ::windows_core::Result<()>;
    fn GetBandInfoSFB(this: &Self::This, pbi: *mut BANDINFOSFB) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IShellFolderBand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderBand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolderBand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeSFB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeSFB(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn SetBandInfoSFB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbi: *const BANDINFOSFB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBandInfoSFB(this, ::core::mem::transmute_copy(&pbi)).into())
        }
        unsafe extern "system" fn GetBandInfoSFB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbi: *mut BANDINFOSFB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBandInfoSFB(this, ::core::mem::transmute_copy(&pbi)).into())
        }
        IShellFolderBand_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeSFB: InitializeSFB::<Identity, Impl, OFFSET>,
            SetBandInfoSFB: SetBandInfoSFB::<Identity, Impl, OFFSET>,
            GetBandInfoSFB: GetBandInfoSFB::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
pub trait IShellFolderView_Impl: ::windows_core::BaseImpl {
    fn Rearrange(this: &Self::This, lparamsort: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
    fn GetArrangeParam(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::LPARAM>;
    fn ArrangeGrid(this: &Self::This) -> ::windows_core::Result<()>;
    fn AutoArrange(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetAutoArrange(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddObject(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32>;
    fn GetObject(this: &Self::This, ppidl: *mut *mut Common::ITEMIDLIST, uitem: u32) -> ::windows_core::Result<()>;
    fn RemoveObject(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32>;
    fn GetObjectCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetObjectCount(this: &Self::This, ucount: u32, dwflags: u32) -> ::windows_core::Result<()>;
    fn UpdateObject(this: &Self::This, pidlold: *const Common::ITEMIDLIST, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32>;
    fn RefreshObject(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<u32>;
    fn SetRedraw(this: &Self::This, bredraw: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetSelectedCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSelectedObjects(this: &Self::This, pppidl: *mut *mut *mut Common::ITEMIDLIST, puitems: *mut u32) -> ::windows_core::Result<()>;
    fn IsDropOnSource(this: &Self::This, pdroptarget: ::core::option::Option<&super::super::System::Ole::IDropTarget>) -> ::windows_core::Result<()>;
    fn GetDragPoint(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::POINT>;
    fn GetDropPoint(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::POINT>;
    fn MoveIcons(this: &Self::This, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
    fn SetItemPos(this: &Self::This, pidl: *const Common::ITEMIDLIST, ppt: *const super::super::Foundation::POINT) -> ::windows_core::Result<()>;
    fn IsBkDropTarget(this: &Self::This, pdroptarget: ::core::option::Option<&super::super::System::Ole::IDropTarget>) -> ::windows_core::Result<()>;
    fn SetClipboard(this: &Self::This, bmove: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetPoints(this: &Self::This, pdataobject: ::core::option::Option<&super::super::System::Com::IDataObject>) -> ::windows_core::Result<()>;
    fn GetItemSpacing(this: &Self::This) -> ::windows_core::Result<ITEMSPACING>;
    fn SetCallback(this: &Self::This, pnewcb: ::core::option::Option<&IShellFolderViewCB>) -> ::windows_core::Result<IShellFolderViewCB>;
    fn Select(this: &Self::This, dwflags: &SFVS_SELECT) -> ::windows_core::Result<()>;
    fn QuerySupport(this: &Self::This, pdwsupport: *mut u32) -> ::windows_core::Result<()>;
    fn SetAutomationObject(this: &Self::This, pdisp: ::core::option::Option<&super::super::System::Com::IDispatch>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IShellFolderView {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolderView {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Rearrange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lparamsort: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Rearrange(this, ::core::mem::transmute_copy(&lparamsort)).into())
        }
        unsafe extern "system" fn GetArrangeParam<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plparamsort: *mut super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetArrangeParam(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plparamsort, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ArrangeGrid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ArrangeGrid(this).into())
        }
        unsafe extern "system" fn AutoArrange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AutoArrange(this).into())
        }
        unsafe extern "system" fn GetAutoArrange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAutoArrange(this).into())
        }
        unsafe extern "system" fn AddObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddObject(this, ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST, uitem: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetObject(this, ::core::mem::transmute_copy(&ppidl), ::core::mem::transmute_copy(&uitem)).into())
        }
        unsafe extern "system" fn RemoveObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RemoveObject(this, ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetObjectCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pucount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetObjectCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pucount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetObjectCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ucount: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetObjectCount(this, ::core::mem::transmute_copy(&ucount), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn UpdateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlold: *const Common::ITEMIDLIST, pidlnew: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UpdateObject(this, ::core::mem::transmute_copy(&pidlold), ::core::mem::transmute_copy(&pidlnew)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RefreshObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, puitem: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RefreshObject(this, ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRedraw<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bredraw: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRedraw(this, ::core::mem::transmute_copy(&bredraw)).into())
        }
        unsafe extern "system" fn GetSelectedCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puselected: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectedCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puselected, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectedObjects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppidl: *mut *mut *mut Common::ITEMIDLIST, puitems: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSelectedObjects(this, ::core::mem::transmute_copy(&pppidl), ::core::mem::transmute_copy(&puitems)).into())
        }
        unsafe extern "system" fn IsDropOnSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdroptarget: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsDropOnSource(this, ::windows_core::from_raw_borrowed(&pdroptarget)).into())
        }
        unsafe extern "system" fn GetDragPoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDragPoint(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDropPoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppt: *mut super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDropPoint(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MoveIcons<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveIcons(this, ::windows_core::from_raw_borrowed(&pdataobject)).into())
        }
        unsafe extern "system" fn SetItemPos<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppt: *const super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemPos(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&ppt)).into())
        }
        unsafe extern "system" fn IsBkDropTarget<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdroptarget: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsBkDropTarget(this, ::windows_core::from_raw_borrowed(&pdroptarget)).into())
        }
        unsafe extern "system" fn SetClipboard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bmove: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClipboard(this, ::core::mem::transmute_copy(&bmove)).into())
        }
        unsafe extern "system" fn SetPoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdataobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPoints(this, ::windows_core::from_raw_borrowed(&pdataobject)).into())
        }
        unsafe extern "system" fn GetItemSpacing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pspacing: *mut ITEMSPACING) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemSpacing(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pspacing, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnewcb: *mut ::core::ffi::c_void, ppoldcb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetCallback(this, ::windows_core::from_raw_borrowed(&pnewcb)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppoldcb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Select<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Select(this, ::core::mem::transmute(&dwflags)).into())
        }
        unsafe extern "system" fn QuerySupport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwsupport: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QuerySupport(this, ::core::mem::transmute_copy(&pdwsupport)).into())
        }
        unsafe extern "system" fn SetAutomationObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdisp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAutomationObject(this, ::windows_core::from_raw_borrowed(&pdisp)).into())
        }
        IShellFolderView_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Rearrange: Rearrange::<Identity, Impl, OFFSET>,
            GetArrangeParam: GetArrangeParam::<Identity, Impl, OFFSET>,
            ArrangeGrid: ArrangeGrid::<Identity, Impl, OFFSET>,
            AutoArrange: AutoArrange::<Identity, Impl, OFFSET>,
            GetAutoArrange: GetAutoArrange::<Identity, Impl, OFFSET>,
            AddObject: AddObject::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            RemoveObject: RemoveObject::<Identity, Impl, OFFSET>,
            GetObjectCount: GetObjectCount::<Identity, Impl, OFFSET>,
            SetObjectCount: SetObjectCount::<Identity, Impl, OFFSET>,
            UpdateObject: UpdateObject::<Identity, Impl, OFFSET>,
            RefreshObject: RefreshObject::<Identity, Impl, OFFSET>,
            SetRedraw: SetRedraw::<Identity, Impl, OFFSET>,
            GetSelectedCount: GetSelectedCount::<Identity, Impl, OFFSET>,
            GetSelectedObjects: GetSelectedObjects::<Identity, Impl, OFFSET>,
            IsDropOnSource: IsDropOnSource::<Identity, Impl, OFFSET>,
            GetDragPoint: GetDragPoint::<Identity, Impl, OFFSET>,
            GetDropPoint: GetDropPoint::<Identity, Impl, OFFSET>,
            MoveIcons: MoveIcons::<Identity, Impl, OFFSET>,
            SetItemPos: SetItemPos::<Identity, Impl, OFFSET>,
            IsBkDropTarget: IsBkDropTarget::<Identity, Impl, OFFSET>,
            SetClipboard: SetClipboard::<Identity, Impl, OFFSET>,
            SetPoints: SetPoints::<Identity, Impl, OFFSET>,
            GetItemSpacing: GetItemSpacing::<Identity, Impl, OFFSET>,
            SetCallback: SetCallback::<Identity, Impl, OFFSET>,
            Select: Select::<Identity, Impl, OFFSET>,
            QuerySupport: QuerySupport::<Identity, Impl, OFFSET>,
            SetAutomationObject: SetAutomationObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IShellFolderViewCB_Impl: ::windows_core::BaseImpl {
    fn MessageSFVCB(this: &Self::This, umsg: &SFVM_MESSAGE_ID, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IShellFolderViewCB {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewCB_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolderViewCB {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MessageSFVCB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewCB_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MessageSFVCB(this, ::core::mem::transmute(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)).into())
        }
        IShellFolderViewCB_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, MessageSFVCB: MessageSFVCB::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellFolderViewDual_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Folder(this: &Self::This) -> ::windows_core::Result<Folder>;
    fn SelectedItems(this: &Self::This) -> ::windows_core::Result<FolderItems>;
    fn FocusedItem(this: &Self::This) -> ::windows_core::Result<FolderItem>;
    fn SelectItem(this: &Self::This, pvfi: *const super::super::System::Variant::VARIANT, dwflags: i32) -> ::windows_core::Result<()>;
    fn PopupItemMenu(this: &Self::This, pfi: ::core::option::Option<&FolderItem>, vx: &super::super::System::Variant::VARIANT, vy: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Script(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn ViewOptions(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellFolderViewDual {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolderViewDual {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Folder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Folder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SelectedItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SelectedItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FocusedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FocusedItem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SelectItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvfi: *const super::super::System::Variant::VARIANT, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectItem(this, ::core::mem::transmute_copy(&pvfi), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn PopupItemMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfi: *mut ::core::ffi::c_void, vx: super::super::System::Variant::VARIANT, vy: super::super::System::Variant::VARIANT, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PopupItemMenu(this, ::windows_core::from_raw_borrowed(&pfi), ::core::mem::transmute(&vx), ::core::mem::transmute(&vy)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Script<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Script(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdisp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ViewOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plviewoptions: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ViewOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plviewoptions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellFolderViewDual_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            Folder: Folder::<Identity, Impl, OFFSET>,
            SelectedItems: SelectedItems::<Identity, Impl, OFFSET>,
            FocusedItem: FocusedItem::<Identity, Impl, OFFSET>,
            SelectItem: SelectItem::<Identity, Impl, OFFSET>,
            PopupItemMenu: PopupItemMenu::<Identity, Impl, OFFSET>,
            Script: Script::<Identity, Impl, OFFSET>,
            ViewOptions: ViewOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellFolderViewDual2_Impl: ::windows_core::BaseImpl + IShellFolderViewDual_Impl {
    fn CurrentViewMode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentViewMode(this: &Self::This, viewmode: u32) -> ::windows_core::Result<()>;
    fn SelectItemRelative(this: &Self::This, irelative: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellFolderViewDual2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellFolderViewDual);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolderViewDual2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CurrentViewMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pviewmode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentViewMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pviewmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentViewMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, viewmode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentViewMode(this, ::core::mem::transmute_copy(&viewmode)).into())
        }
        unsafe extern "system" fn SelectItemRelative<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, irelative: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectItemRelative(this, ::core::mem::transmute_copy(&irelative)).into())
        }
        IShellFolderViewDual2_Vtbl {
            base__: <IShellFolderViewDual as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CurrentViewMode: CurrentViewMode::<Identity, Impl, OFFSET>,
            SetCurrentViewMode: SetCurrentViewMode::<Identity, Impl, OFFSET>,
            SelectItemRelative: SelectItemRelative::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellFolderViewDual3_Impl: ::windows_core::BaseImpl + IShellFolderViewDual2_Impl {
    fn GroupBy(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetGroupBy(this: &Self::This, bstrgroupby: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn FolderFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetFolderFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn SortColumns(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetSortColumns(this: &Self::This, bstrsortcolumns: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetIconSize(this: &Self::This, iiconsize: i32) -> ::windows_core::Result<()>;
    fn IconSize(this: &Self::This) -> ::windows_core::Result<i32>;
    fn FilterView(this: &Self::This, bstrfiltertext: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellFolderViewDual3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellFolderViewDual2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellFolderViewDual3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GroupBy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrgroupby: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GroupBy(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrgroupby, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetGroupBy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrgroupby: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGroupBy(this, ::core::mem::transmute(&bstrgroupby)).into())
        }
        unsafe extern "system" fn FolderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FolderFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFolderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn SortColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrsortcolumns: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SortColumns(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrsortcolumns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSortColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrsortcolumns: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSortColumns(this, ::core::mem::transmute(&bstrsortcolumns)).into())
        }
        unsafe extern "system" fn SetIconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iiconsize: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconSize(this, ::core::mem::transmute_copy(&iiconsize)).into())
        }
        unsafe extern "system" fn IconSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piiconsize: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IconSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piiconsize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FilterView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellFolderViewDual3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrfiltertext: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FilterView(this, ::core::mem::transmute(&bstrfiltertext)).into())
        }
        IShellFolderViewDual3_Vtbl {
            base__: <IShellFolderViewDual2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GroupBy: GroupBy::<Identity, Impl, OFFSET>,
            SetGroupBy: SetGroupBy::<Identity, Impl, OFFSET>,
            FolderFlags: FolderFlags::<Identity, Impl, OFFSET>,
            SetFolderFlags: SetFolderFlags::<Identity, Impl, OFFSET>,
            SortColumns: SortColumns::<Identity, Impl, OFFSET>,
            SetSortColumns: SetSortColumns::<Identity, Impl, OFFSET>,
            SetIconSize: SetIconSize::<Identity, Impl, OFFSET>,
            IconSize: IconSize::<Identity, Impl, OFFSET>,
            FilterView: FilterView::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IShellIcon_Impl: ::windows_core::BaseImpl {
    fn GetIconOf(this: &Self::This, pidl: *const Common::ITEMIDLIST, flags: u32) -> ::windows_core::Result<i32>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IShellIcon {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIcon_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellIcon {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIconOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIcon_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, flags: u32, piconindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIconOf(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piconindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellIcon_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetIconOf: GetIconOf::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IShellIconOverlay_Impl: ::windows_core::BaseImpl {
    fn GetOverlayIndex(this: &Self::This, pidl: *const Common::ITEMIDLIST, pindex: *mut i32) -> ::windows_core::Result<()>;
    fn GetOverlayIconIndex(this: &Self::This, pidl: *const Common::ITEMIDLIST, piconindex: *mut i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IShellIconOverlay {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlay_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellIconOverlay {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOverlayIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlay_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOverlayIndex(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&pindex)).into())
        }
        unsafe extern "system" fn GetOverlayIconIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlay_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, piconindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOverlayIconIndex(this, ::core::mem::transmute_copy(&pidl), ::core::mem::transmute_copy(&piconindex)).into())
        }
        IShellIconOverlay_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetOverlayIndex: GetOverlayIndex::<Identity, Impl, OFFSET>,
            GetOverlayIconIndex: GetOverlayIconIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellIconOverlayIdentifier_Impl: ::windows_core::BaseImpl {
    fn IsMemberOf(this: &Self::This, pwszpath: &::windows_core::PCWSTR, dwattrib: u32) -> ::windows_core::Result<()>;
    fn GetOverlayInfo(this: &Self::This, pwsziconfile: ::windows_core::PWSTR, cchmax: i32, pindex: *mut i32, pdwflags: *mut u32) -> ::windows_core::Result<()>;
    fn GetPriority(this: &Self::This) -> ::windows_core::Result<i32>;
}
impl ::windows_core::Iids for IShellIconOverlayIdentifier {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayIdentifier_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellIconOverlayIdentifier {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsMemberOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszpath: ::windows_core::PCWSTR, dwattrib: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsMemberOf(this, ::core::mem::transmute(&pwszpath), ::core::mem::transmute_copy(&dwattrib)).into())
        }
        unsafe extern "system" fn GetOverlayInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwsziconfile: ::windows_core::PWSTR, cchmax: i32, pindex: *mut i32, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOverlayInfo(this, ::core::mem::transmute_copy(&pwsziconfile), ::core::mem::transmute_copy(&cchmax), ::core::mem::transmute_copy(&pindex), ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn GetPriority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppriority: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPriority(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppriority, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellIconOverlayIdentifier_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsMemberOf: IsMemberOf::<Identity, Impl, OFFSET>,
            GetOverlayInfo: GetOverlayInfo::<Identity, Impl, OFFSET>,
            GetPriority: GetPriority::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IShellIconOverlayManager_Impl: ::windows_core::BaseImpl {
    fn GetFileOverlayInfo(this: &Self::This, pwszpath: &::windows_core::PCWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetReservedOverlayInfo(this: &Self::This, pwszpath: &::windows_core::PCWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32, ireservedid: i32) -> ::windows_core::Result<()>;
    fn RefreshOverlayImages(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn LoadNonloadedOverlayIdentifiers(this: &Self::This) -> ::windows_core::Result<()>;
    fn OverlayIndexFromImageIndex(this: &Self::This, iimage: i32, piindex: *mut i32, fadd: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IShellIconOverlayManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellIconOverlayManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFileOverlayInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszpath: ::windows_core::PCWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFileOverlayInfo(this, ::core::mem::transmute(&pwszpath), ::core::mem::transmute_copy(&dwattrib), ::core::mem::transmute_copy(&pindex), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetReservedOverlayInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszpath: ::windows_core::PCWSTR, dwattrib: u32, pindex: *mut i32, dwflags: u32, ireservedid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReservedOverlayInfo(this, ::core::mem::transmute(&pwszpath), ::core::mem::transmute_copy(&dwattrib), ::core::mem::transmute_copy(&pindex), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&ireservedid)).into())
        }
        unsafe extern "system" fn RefreshOverlayImages<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RefreshOverlayImages(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn LoadNonloadedOverlayIdentifiers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadNonloadedOverlayIdentifiers(this).into())
        }
        unsafe extern "system" fn OverlayIndexFromImageIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellIconOverlayManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iimage: i32, piindex: *mut i32, fadd: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OverlayIndexFromImageIndex(this, ::core::mem::transmute_copy(&iimage), ::core::mem::transmute_copy(&piindex), ::core::mem::transmute_copy(&fadd)).into())
        }
        IShellIconOverlayManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFileOverlayInfo: GetFileOverlayInfo::<Identity, Impl, OFFSET>,
            GetReservedOverlayInfo: GetReservedOverlayInfo::<Identity, Impl, OFFSET>,
            RefreshOverlayImages: RefreshOverlayImages::<Identity, Impl, OFFSET>,
            LoadNonloadedOverlayIdentifiers: LoadNonloadedOverlayIdentifiers::<Identity, Impl, OFFSET>,
            OverlayIndexFromImageIndex: OverlayIndexFromImageIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_Graphics_GdiPlus\"`, `\"Win32_System_Com_StructuredStorage\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_Graphics_GdiPlus", feature = "Win32_System_Com_StructuredStorage"))]
pub trait IShellImageData_Impl: ::windows_core::BaseImpl {
    fn Decode(this: &Self::This, dwflags: u32, cxdesired: u32, cydesired: u32) -> ::windows_core::Result<()>;
    fn Draw(this: &Self::This, hdc: super::super::Graphics::Gdi::HDC, prcdest: *mut super::super::Foundation::RECT, prcsrc: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn NextFrame(this: &Self::This) -> ::windows_core::Result<()>;
    fn NextPage(this: &Self::This) -> ::windows_core::Result<()>;
    fn PrevPage(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsTransparent(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsAnimated(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsVector(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsMultipage(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsEditable(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsPrintable(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsDecoded(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCurrentPage(this: &Self::This, pnpage: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageCount(this: &Self::This, pcpages: *mut u32) -> ::windows_core::Result<()>;
    fn SelectPage(this: &Self::This, ipage: u32) -> ::windows_core::Result<()>;
    fn GetSize(this: &Self::This, psize: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn GetRawDataFormat(this: &Self::This, pdataformat: *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetPixelFormat(this: &Self::This, pformat: *mut u32) -> ::windows_core::Result<()>;
    fn GetDelay(this: &Self::This, pdwdelay: *mut u32) -> ::windows_core::Result<()>;
    fn GetProperties(this: &Self::This, dwmode: u32) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::IPropertySetStorage>;
    fn Rotate(this: &Self::This, dwangle: u32) -> ::windows_core::Result<()>;
    fn Scale(this: &Self::This, cx: u32, cy: u32, hints: super::super::Graphics::GdiPlus::InterpolationMode) -> ::windows_core::Result<()>;
    fn DiscardEdit(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetEncoderParams(this: &Self::This, pbagenc: ::core::option::Option<&super::super::System::Com::StructuredStorage::IPropertyBag>) -> ::windows_core::Result<()>;
    fn DisplayName(this: &Self::This, wszname: &::windows_core::PCWSTR, cch: u32) -> ::windows_core::Result<()>;
    fn GetResolution(this: &Self::This, puresolutionx: *mut u32, puresolutiony: *mut u32) -> ::windows_core::Result<()>;
    fn GetEncoderParams(this: &Self::This, pguidfmt: *mut ::windows_core::GUID, ppencparams: *mut *mut u8) -> ::windows_core::Result<()>;
    fn RegisterAbort(this: &Self::This, pabort: ::core::option::Option<&IShellImageDataAbort>) -> ::windows_core::Result<IShellImageDataAbort>;
    fn CloneFrame(this: &Self::This, ppimg: *mut *mut u8) -> ::windows_core::Result<()>;
    fn ReplaceFrame(this: &Self::This, pimg: *mut u8) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_Graphics_GdiPlus", feature = "Win32_System_Com_StructuredStorage"))]
impl ::windows_core::Iids for IShellImageData {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_Graphics_GdiPlus", feature = "Win32_System_Com_StructuredStorage"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellImageData {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, cxdesired: u32, cydesired: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&cxdesired), ::core::mem::transmute_copy(&cydesired)).into())
        }
        unsafe extern "system" fn Draw<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdc: super::super::Graphics::Gdi::HDC, prcdest: *mut super::super::Foundation::RECT, prcsrc: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Draw(this, ::core::mem::transmute_copy(&hdc), ::core::mem::transmute_copy(&prcdest), ::core::mem::transmute_copy(&prcsrc)).into())
        }
        unsafe extern "system" fn NextFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NextFrame(this).into())
        }
        unsafe extern "system" fn NextPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NextPage(this).into())
        }
        unsafe extern "system" fn PrevPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PrevPage(this).into())
        }
        unsafe extern "system" fn IsTransparent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsTransparent(this).into())
        }
        unsafe extern "system" fn IsAnimated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsAnimated(this).into())
        }
        unsafe extern "system" fn IsVector<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsVector(this).into())
        }
        unsafe extern "system" fn IsMultipage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsMultipage(this).into())
        }
        unsafe extern "system" fn IsEditable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsEditable(this).into())
        }
        unsafe extern "system" fn IsPrintable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPrintable(this).into())
        }
        unsafe extern "system" fn IsDecoded<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsDecoded(this).into())
        }
        unsafe extern "system" fn GetCurrentPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnpage: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentPage(this, ::core::mem::transmute_copy(&pnpage)).into())
        }
        unsafe extern "system" fn GetPageCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpages: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPageCount(this, ::core::mem::transmute_copy(&pcpages)).into())
        }
        unsafe extern "system" fn SelectPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ipage: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectPage(this, ::core::mem::transmute_copy(&ipage)).into())
        }
        unsafe extern "system" fn GetSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psize: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSize(this, ::core::mem::transmute_copy(&psize)).into())
        }
        unsafe extern "system" fn GetRawDataFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdataformat: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRawDataFormat(this, ::core::mem::transmute_copy(&pdataformat)).into())
        }
        unsafe extern "system" fn GetPixelFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pformat: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPixelFormat(this, ::core::mem::transmute_copy(&pformat)).into())
        }
        unsafe extern "system" fn GetDelay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwdelay: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDelay(this, ::core::mem::transmute_copy(&pdwdelay)).into())
        }
        unsafe extern "system" fn GetProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmode: u32, pppropset: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperties(this, ::core::mem::transmute_copy(&dwmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppropset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Rotate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwangle: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Rotate(this, ::core::mem::transmute_copy(&dwangle)).into())
        }
        unsafe extern "system" fn Scale<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cx: u32, cy: u32, hints: super::super::Graphics::GdiPlus::InterpolationMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Scale(this, ::core::mem::transmute_copy(&cx), ::core::mem::transmute_copy(&cy), ::core::mem::transmute_copy(&hints)).into())
        }
        unsafe extern "system" fn DiscardEdit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DiscardEdit(this).into())
        }
        unsafe extern "system" fn SetEncoderParams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbagenc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEncoderParams(this, ::windows_core::from_raw_borrowed(&pbagenc)).into())
        }
        unsafe extern "system" fn DisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszname: ::windows_core::PCWSTR, cch: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisplayName(this, ::core::mem::transmute(&wszname), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn GetResolution<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puresolutionx: *mut u32, puresolutiony: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetResolution(this, ::core::mem::transmute_copy(&puresolutionx), ::core::mem::transmute_copy(&puresolutiony)).into())
        }
        unsafe extern "system" fn GetEncoderParams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidfmt: *mut ::windows_core::GUID, ppencparams: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEncoderParams(this, ::core::mem::transmute_copy(&pguidfmt), ::core::mem::transmute_copy(&ppencparams)).into())
        }
        unsafe extern "system" fn RegisterAbort<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pabort: *mut ::core::ffi::c_void, ppabortprev: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RegisterAbort(this, ::windows_core::from_raw_borrowed(&pabort)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppabortprev, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CloneFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppimg: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloneFrame(this, ::core::mem::transmute_copy(&ppimg)).into())
        }
        unsafe extern "system" fn ReplaceFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimg: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReplaceFrame(this, ::core::mem::transmute_copy(&pimg)).into())
        }
        IShellImageData_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            Draw: Draw::<Identity, Impl, OFFSET>,
            NextFrame: NextFrame::<Identity, Impl, OFFSET>,
            NextPage: NextPage::<Identity, Impl, OFFSET>,
            PrevPage: PrevPage::<Identity, Impl, OFFSET>,
            IsTransparent: IsTransparent::<Identity, Impl, OFFSET>,
            IsAnimated: IsAnimated::<Identity, Impl, OFFSET>,
            IsVector: IsVector::<Identity, Impl, OFFSET>,
            IsMultipage: IsMultipage::<Identity, Impl, OFFSET>,
            IsEditable: IsEditable::<Identity, Impl, OFFSET>,
            IsPrintable: IsPrintable::<Identity, Impl, OFFSET>,
            IsDecoded: IsDecoded::<Identity, Impl, OFFSET>,
            GetCurrentPage: GetCurrentPage::<Identity, Impl, OFFSET>,
            GetPageCount: GetPageCount::<Identity, Impl, OFFSET>,
            SelectPage: SelectPage::<Identity, Impl, OFFSET>,
            GetSize: GetSize::<Identity, Impl, OFFSET>,
            GetRawDataFormat: GetRawDataFormat::<Identity, Impl, OFFSET>,
            GetPixelFormat: GetPixelFormat::<Identity, Impl, OFFSET>,
            GetDelay: GetDelay::<Identity, Impl, OFFSET>,
            GetProperties: GetProperties::<Identity, Impl, OFFSET>,
            Rotate: Rotate::<Identity, Impl, OFFSET>,
            Scale: Scale::<Identity, Impl, OFFSET>,
            DiscardEdit: DiscardEdit::<Identity, Impl, OFFSET>,
            SetEncoderParams: SetEncoderParams::<Identity, Impl, OFFSET>,
            DisplayName: DisplayName::<Identity, Impl, OFFSET>,
            GetResolution: GetResolution::<Identity, Impl, OFFSET>,
            GetEncoderParams: GetEncoderParams::<Identity, Impl, OFFSET>,
            RegisterAbort: RegisterAbort::<Identity, Impl, OFFSET>,
            CloneFrame: CloneFrame::<Identity, Impl, OFFSET>,
            ReplaceFrame: ReplaceFrame::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellImageDataAbort_Impl: ::windows_core::BaseImpl {
    fn QueryAbort(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IShellImageDataAbort {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataAbort_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellImageDataAbort {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryAbort<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataAbort_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryAbort(this).into())
        }
        IShellImageDataAbort_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, QueryAbort: QueryAbort::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IShellImageDataFactory_Impl: ::windows_core::BaseImpl {
    fn CreateIShellImageData(this: &Self::This) -> ::windows_core::Result<IShellImageData>;
    fn CreateImageFromFile(this: &Self::This, pszpath: &::windows_core::PCWSTR) -> ::windows_core::Result<IShellImageData>;
    fn CreateImageFromStream(this: &Self::This, pstream: ::core::option::Option<&super::super::System::Com::IStream>) -> ::windows_core::Result<IShellImageData>;
    fn GetDataFormatFromPath(this: &Self::This, pszpath: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::GUID>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IShellImageDataFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellImageDataFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateIShellImageData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppshimg: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateIShellImageData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppshimg, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateImageFromFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, ppshimg: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateImageFromFile(this, ::core::mem::transmute(&pszpath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppshimg, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateImageFromStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstream: *mut ::core::ffi::c_void, ppshimg: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateImageFromStream(this, ::windows_core::from_raw_borrowed(&pstream)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppshimg, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataFormatFromPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellImageDataFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR, pdataformat: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataFormatFromPath(this, ::core::mem::transmute(&pszpath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdataformat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellImageDataFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateIShellImageData: CreateIShellImageData::<Identity, Impl, OFFSET>,
            CreateImageFromFile: CreateImageFromFile::<Identity, Impl, OFFSET>,
            CreateImageFromStream: CreateImageFromStream::<Identity, Impl, OFFSET>,
            GetDataFormatFromPath: GetDataFormatFromPath::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_System_SystemServices\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_SystemServices"))]
pub trait IShellItem_Impl: ::windows_core::BaseImpl {
    fn BindToHandler(this: &Self::This, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, bhid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetParent(this: &Self::This) -> ::windows_core::Result<IShellItem>;
    fn GetDisplayName(this: &Self::This, sigdnname: SIGDN) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetAttributes(this: &Self::This, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::Result<super::super::System::SystemServices::SFGAO_FLAGS>;
    fn Compare(this: &Self::This, psi: ::core::option::Option<&IShellItem>, hint: u32) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_SystemServices"))]
impl ::windows_core::Iids for IShellItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_SystemServices"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BindToHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, bhid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindToHandler(this, ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&bhid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetParent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetParent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sigdnname: SIGDN, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisplayName(this, ::core::mem::transmute_copy(&sigdnname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS, psfgaoattribs: *mut super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAttributes(this, ::core::mem::transmute_copy(&sfgaomask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psfgaoattribs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Compare<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, hint: u32, piorder: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Compare(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&hint)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piorder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BindToHandler: BindToHandler::<Identity, Impl, OFFSET>,
            GetParent: GetParent::<Identity, Impl, OFFSET>,
            GetDisplayName: GetDisplayName::<Identity, Impl, OFFSET>,
            GetAttributes: GetAttributes::<Identity, Impl, OFFSET>,
            Compare: Compare::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_SystemServices\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_SystemServices", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IShellItem2_Impl: ::windows_core::BaseImpl + IShellItem_Impl {
    fn GetPropertyStore(this: &Self::This, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPropertyStoreWithCreateObject(this: &Self::This, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, punkcreateobject: ::core::option::Option<&::windows_core::IUnknown>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPropertyStoreForKeys(this: &Self::This, rgkeys: *const PropertiesSystem::PROPERTYKEY, ckeys: u32, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPropertyDescriptionList(this: &Self::This, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn Update(this: &Self::This, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>) -> ::windows_core::Result<()>;
    fn GetProperty(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetCLSID(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetFileTime(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::Foundation::FILETIME>;
    fn GetInt32(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<i32>;
    fn GetString(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetUInt32(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<u32>;
    fn GetUInt64(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<u64>;
    fn GetBool(this: &Self::This, key: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_SystemServices", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IShellItem2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellItem);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_SystemServices", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellItem2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPropertyStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPropertyStore(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetPropertyStoreWithCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, punkcreateobject: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPropertyStoreWithCreateObject(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&punkcreateobject), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetPropertyStoreForKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rgkeys: *const PropertiesSystem::PROPERTYKEY, ckeys: u32, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPropertyStoreForKeys(this, ::core::mem::transmute_copy(&rgkeys), ::core::mem::transmute_copy(&ckeys), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetPropertyDescriptionList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPropertyDescriptionList(this, ::core::mem::transmute_copy(&keytype), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn Update<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Update(this, ::windows_core::from_raw_borrowed(&pbc)).into())
        }
        unsafe extern "system" fn GetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperty(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropvar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pclsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCLSID(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFileTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pft: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFileTime(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pft, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInt32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pi: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInt32(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, ppsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetString(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsz, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUInt32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pui: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUInt32(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pui, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUInt64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pull: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUInt64(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pull, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBool<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItem2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const PropertiesSystem::PROPERTYKEY, pf: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBool(this, ::core::mem::transmute_copy(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellItem2_Vtbl {
            base__: <IShellItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPropertyStore: GetPropertyStore::<Identity, Impl, OFFSET>,
            GetPropertyStoreWithCreateObject: GetPropertyStoreWithCreateObject::<Identity, Impl, OFFSET>,
            GetPropertyStoreForKeys: GetPropertyStoreForKeys::<Identity, Impl, OFFSET>,
            GetPropertyDescriptionList: GetPropertyDescriptionList::<Identity, Impl, OFFSET>,
            Update: Update::<Identity, Impl, OFFSET>,
            GetProperty: GetProperty::<Identity, Impl, OFFSET>,
            GetCLSID: GetCLSID::<Identity, Impl, OFFSET>,
            GetFileTime: GetFileTime::<Identity, Impl, OFFSET>,
            GetInt32: GetInt32::<Identity, Impl, OFFSET>,
            GetString: GetString::<Identity, Impl, OFFSET>,
            GetUInt32: GetUInt32::<Identity, Impl, OFFSET>,
            GetUInt64: GetUInt64::<Identity, Impl, OFFSET>,
            GetBool: GetBool::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_System_SystemServices\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_SystemServices", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IShellItemArray_Impl: ::windows_core::BaseImpl {
    fn BindToHandler(this: &Self::This, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, bhid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPropertyStore(this: &Self::This, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPropertyDescriptionList(this: &Self::This, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetAttributes(this: &Self::This, attribflags: SIATTRIBFLAGS, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::Result<super::super::System::SystemServices::SFGAO_FLAGS>;
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetItemAt(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IShellItem>;
    fn EnumItems(this: &Self::This) -> ::windows_core::Result<IEnumShellItems>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_SystemServices", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IShellItemArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_System_SystemServices", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellItemArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BindToHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, bhid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindToHandler(this, ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&bhid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvout)).into())
        }
        unsafe extern "system" fn GetPropertyStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: PropertiesSystem::GETPROPERTYSTOREFLAGS, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPropertyStore(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetPropertyDescriptionList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keytype: *const PropertiesSystem::PROPERTYKEY, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPropertyDescriptionList(this, ::core::mem::transmute_copy(&keytype), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, attribflags: SIATTRIBFLAGS, sfgaomask: super::super::System::SystemServices::SFGAO_FLAGS, psfgaoattribs: *mut super::super::System::SystemServices::SFGAO_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAttributes(this, ::core::mem::transmute_copy(&attribflags), ::core::mem::transmute_copy(&sfgaomask)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psfgaoattribs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwnumitems: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwnumitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppsi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemAt(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenumshellitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumshellitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellItemArray_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BindToHandler: BindToHandler::<Identity, Impl, OFFSET>,
            GetPropertyStore: GetPropertyStore::<Identity, Impl, OFFSET>,
            GetPropertyDescriptionList: GetPropertyDescriptionList::<Identity, Impl, OFFSET>,
            GetAttributes: GetAttributes::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetItemAt: GetItemAt::<Identity, Impl, OFFSET>,
            EnumItems: EnumItems::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellItemFilter_Impl: ::windows_core::BaseImpl {
    fn IncludeItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn GetEnumFlagsForItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IShellItemFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellItemFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IncludeItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IncludeItem(this, ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn GetEnumFlagsForItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pgrfflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEnumFlagsForItem(this, ::windows_core::from_raw_borrowed(&psi)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pgrfflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellItemFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IncludeItem: IncludeItem::<Identity, Impl, OFFSET>,
            GetEnumFlagsForItem: GetEnumFlagsForItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IShellItemImageFactory_Impl: ::windows_core::BaseImpl {
    fn GetImage(this: &Self::This, size: &super::super::Foundation::SIZE, flags: SIIGBF) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IShellItemImageFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemImageFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellItemImageFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetImage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemImageFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: super::super::Foundation::SIZE, flags: SIIGBF, phbm: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImage(this, ::core::mem::transmute(&size), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellItemImageFactory_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetImage: GetImage::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IShellItemResources_Impl: ::windows_core::BaseImpl {
    fn GetAttributes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSize(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetTimes(this: &Self::This, pftcreation: *mut super::super::Foundation::FILETIME, pftwrite: *mut super::super::Foundation::FILETIME, pftaccess: *mut super::super::Foundation::FILETIME) -> ::windows_core::Result<()>;
    fn SetTimes(this: &Self::This, pftcreation: *const super::super::Foundation::FILETIME, pftwrite: *const super::super::Foundation::FILETIME, pftaccess: *const super::super::Foundation::FILETIME) -> ::windows_core::Result<()>;
    fn GetResourceDescription(this: &Self::This, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn EnumResources(this: &Self::This) -> ::windows_core::Result<IEnumResources>;
    fn SupportsResource(this: &Self::This, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::Result<()>;
    fn OpenResource(this: &Self::This, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateResource(this: &Self::This, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn MarkForDelete(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IShellItemResources {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellItemResources {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwattributes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pullsize: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pullsize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTimes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftcreation: *mut super::super::Foundation::FILETIME, pftwrite: *mut super::super::Foundation::FILETIME, pftaccess: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTimes(this, ::core::mem::transmute_copy(&pftcreation), ::core::mem::transmute_copy(&pftwrite), ::core::mem::transmute_copy(&pftaccess)).into())
        }
        unsafe extern "system" fn SetTimes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftcreation: *const super::super::Foundation::FILETIME, pftwrite: *const super::super::Foundation::FILETIME, pftaccess: *const super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTimes(this, ::core::mem::transmute_copy(&pftcreation), ::core::mem::transmute_copy(&pftwrite), ::core::mem::transmute_copy(&pftaccess)).into())
        }
        unsafe extern "system" fn GetResourceDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, ppszdescription: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetResourceDescription(this, ::core::mem::transmute_copy(&pcsir)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszdescription, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumResources<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenumr: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumResources(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SupportsResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SupportsResource(this, ::core::mem::transmute_copy(&pcsir)).into())
        }
        unsafe extern "system" fn OpenResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenResource(this, ::core::mem::transmute_copy(&pcsir), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn CreateResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcsir: *const SHELL_ITEM_RESOURCE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateResource(this, ::core::mem::transmute_copy(&pcsir), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn MarkForDelete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellItemResources_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MarkForDelete(this).into())
        }
        IShellItemResources_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAttributes: GetAttributes::<Identity, Impl, OFFSET>,
            GetSize: GetSize::<Identity, Impl, OFFSET>,
            GetTimes: GetTimes::<Identity, Impl, OFFSET>,
            SetTimes: SetTimes::<Identity, Impl, OFFSET>,
            GetResourceDescription: GetResourceDescription::<Identity, Impl, OFFSET>,
            EnumResources: EnumResources::<Identity, Impl, OFFSET>,
            SupportsResource: SupportsResource::<Identity, Impl, OFFSET>,
            OpenResource: OpenResource::<Identity, Impl, OFFSET>,
            CreateResource: CreateResource::<Identity, Impl, OFFSET>,
            MarkForDelete: MarkForDelete::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellLibrary_Impl: ::windows_core::BaseImpl {
    fn LoadLibraryFromItem(this: &Self::This, psilibrary: ::core::option::Option<&IShellItem>, grfmode: u32) -> ::windows_core::Result<()>;
    fn LoadLibraryFromKnownFolder(this: &Self::This, kfidlibrary: *const ::windows_core::GUID, grfmode: u32) -> ::windows_core::Result<()>;
    fn AddFolder(this: &Self::This, psilocation: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn RemoveFolder(this: &Self::This, psilocation: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn GetFolders(this: &Self::This, lff: LIBRARYFOLDERFILTER, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ResolveFolder(this: &Self::This, psifoldertoresolve: ::core::option::Option<&IShellItem>, dwtimeout: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetDefaultSaveFolder(this: &Self::This, dsft: DEFAULTSAVEFOLDERTYPE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetDefaultSaveFolder(this: &Self::This, dsft: DEFAULTSAVEFOLDERTYPE, psi: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn GetOptions(this: &Self::This) -> ::windows_core::Result<LIBRARYOPTIONFLAGS>;
    fn SetOptions(this: &Self::This, lofmask: LIBRARYOPTIONFLAGS, lofoptions: LIBRARYOPTIONFLAGS) -> ::windows_core::Result<()>;
    fn GetFolderType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetFolderType(this: &Self::This, ftid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetIcon(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetIcon(this: &Self::This, pszicon: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Commit(this: &Self::This) -> ::windows_core::Result<()>;
    fn Save(this: &Self::This, psifoldertosavein: ::core::option::Option<&IShellItem>, pszlibraryname: &::windows_core::PCWSTR, lsf: LIBRARYSAVEFLAGS) -> ::windows_core::Result<IShellItem>;
    fn SaveInKnownFolder(this: &Self::This, kfidtosavein: *const ::windows_core::GUID, pszlibraryname: &::windows_core::PCWSTR, lsf: LIBRARYSAVEFLAGS) -> ::windows_core::Result<IShellItem>;
}
impl ::windows_core::Iids for IShellLibrary {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellLibrary {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LoadLibraryFromItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psilibrary: *mut ::core::ffi::c_void, grfmode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadLibraryFromItem(this, ::windows_core::from_raw_borrowed(&psilibrary), ::core::mem::transmute_copy(&grfmode)).into())
        }
        unsafe extern "system" fn LoadLibraryFromKnownFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kfidlibrary: *const ::windows_core::GUID, grfmode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadLibraryFromKnownFolder(this, ::core::mem::transmute_copy(&kfidlibrary), ::core::mem::transmute_copy(&grfmode)).into())
        }
        unsafe extern "system" fn AddFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psilocation: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFolder(this, ::windows_core::from_raw_borrowed(&psilocation)).into())
        }
        unsafe extern "system" fn RemoveFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psilocation: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFolder(this, ::windows_core::from_raw_borrowed(&psilocation)).into())
        }
        unsafe extern "system" fn GetFolders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lff: LIBRARYFOLDERFILTER, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFolders(this, ::core::mem::transmute_copy(&lff), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn ResolveFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psifoldertoresolve: *mut ::core::ffi::c_void, dwtimeout: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveFolder(this, ::windows_core::from_raw_borrowed(&psifoldertoresolve), ::core::mem::transmute_copy(&dwtimeout), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetDefaultSaveFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dsft: DEFAULTSAVEFOLDERTYPE, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDefaultSaveFolder(this, ::core::mem::transmute_copy(&dsft), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn SetDefaultSaveFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dsft: DEFAULTSAVEFOLDERTYPE, psi: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultSaveFolder(this, ::core::mem::transmute_copy(&dsft), ::windows_core::from_raw_borrowed(&psi)).into())
        }
        unsafe extern "system" fn GetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plofoptions: *mut LIBRARYOPTIONFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plofoptions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lofmask: LIBRARYOPTIONFLAGS, lofoptions: LIBRARYOPTIONFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOptions(this, ::core::mem::transmute_copy(&lofmask), ::core::mem::transmute_copy(&lofoptions)).into())
        }
        unsafe extern "system" fn GetFolderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFolderType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pftid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFolderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ftid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFolderType(this, ::core::mem::transmute_copy(&ftid)).into())
        }
        unsafe extern "system" fn GetIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszicon: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIcon(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszicon, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszicon: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIcon(this, ::core::mem::transmute(&pszicon)).into())
        }
        unsafe extern "system" fn Commit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Commit(this).into())
        }
        unsafe extern "system" fn Save<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psifoldertosavein: *mut ::core::ffi::c_void, pszlibraryname: ::windows_core::PCWSTR, lsf: LIBRARYSAVEFLAGS, ppsisavedto: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Save(this, ::windows_core::from_raw_borrowed(&psifoldertosavein), ::core::mem::transmute(&pszlibraryname), ::core::mem::transmute_copy(&lsf)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsisavedto, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SaveInKnownFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kfidtosavein: *const ::windows_core::GUID, pszlibraryname: ::windows_core::PCWSTR, lsf: LIBRARYSAVEFLAGS, ppsisavedto: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SaveInKnownFolder(this, ::core::mem::transmute_copy(&kfidtosavein), ::core::mem::transmute(&pszlibraryname), ::core::mem::transmute_copy(&lsf)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsisavedto, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellLibrary_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LoadLibraryFromItem: LoadLibraryFromItem::<Identity, Impl, OFFSET>,
            LoadLibraryFromKnownFolder: LoadLibraryFromKnownFolder::<Identity, Impl, OFFSET>,
            AddFolder: AddFolder::<Identity, Impl, OFFSET>,
            RemoveFolder: RemoveFolder::<Identity, Impl, OFFSET>,
            GetFolders: GetFolders::<Identity, Impl, OFFSET>,
            ResolveFolder: ResolveFolder::<Identity, Impl, OFFSET>,
            GetDefaultSaveFolder: GetDefaultSaveFolder::<Identity, Impl, OFFSET>,
            SetDefaultSaveFolder: SetDefaultSaveFolder::<Identity, Impl, OFFSET>,
            GetOptions: GetOptions::<Identity, Impl, OFFSET>,
            SetOptions: SetOptions::<Identity, Impl, OFFSET>,
            GetFolderType: GetFolderType::<Identity, Impl, OFFSET>,
            SetFolderType: SetFolderType::<Identity, Impl, OFFSET>,
            GetIcon: GetIcon::<Identity, Impl, OFFSET>,
            SetIcon: SetIcon::<Identity, Impl, OFFSET>,
            Commit: Commit::<Identity, Impl, OFFSET>,
            Save: Save::<Identity, Impl, OFFSET>,
            SaveInKnownFolder: SaveInKnownFolder::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellLinkA_Impl: ::windows_core::BaseImpl {
    fn GetPath(this: &Self::This, pszfile: ::windows_core::PSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAA, fflags: u32) -> ::windows_core::Result<()>;
    fn GetIDList(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn SetIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn GetDescription(this: &Self::This, pszname: ::windows_core::PSTR, cch: i32) -> ::windows_core::Result<()>;
    fn SetDescription(this: &Self::This, pszname: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetWorkingDirectory(this: &Self::This, pszdir: ::windows_core::PSTR, cch: i32) -> ::windows_core::Result<()>;
    fn SetWorkingDirectory(this: &Self::This, pszdir: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetArguments(this: &Self::This, pszargs: ::windows_core::PSTR, cch: i32) -> ::windows_core::Result<()>;
    fn SetArguments(this: &Self::This, pszargs: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetHotkey(this: &Self::This) -> ::windows_core::Result<u16>;
    fn SetHotkey(this: &Self::This, whotkey: u16) -> ::windows_core::Result<()>;
    fn GetShowCmd(this: &Self::This) -> ::windows_core::Result<super::WindowsAndMessaging::SHOW_WINDOW_CMD>;
    fn SetShowCmd(this: &Self::This, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::Result<()>;
    fn GetIconLocation(this: &Self::This, psziconpath: ::windows_core::PSTR, cch: i32, piicon: *mut i32) -> ::windows_core::Result<()>;
    fn SetIconLocation(this: &Self::This, psziconpath: &::windows_core::PCSTR, iicon: i32) -> ::windows_core::Result<()>;
    fn SetRelativePath(this: &Self::This, pszpathrel: &::windows_core::PCSTR, dwreserved: u32) -> ::windows_core::Result<()>;
    fn Resolve(this: &Self::This, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::Result<()>;
    fn SetPath(this: &Self::This, pszfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellLinkA {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellLinkA {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAA, fflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPath(this, ::core::mem::transmute_copy(&pszfile), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&pfd), ::core::mem::transmute_copy(&fflags)).into())
        }
        unsafe extern "system" fn GetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIDList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIDList(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PSTR, cch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn SetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescription(this, ::core::mem::transmute(&pszname)).into())
        }
        unsafe extern "system" fn GetWorkingDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PSTR, cch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWorkingDirectory(this, ::core::mem::transmute_copy(&pszdir), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn SetWorkingDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWorkingDirectory(this, ::core::mem::transmute(&pszdir)).into())
        }
        unsafe extern "system" fn GetArguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PSTR, cch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetArguments(this, ::core::mem::transmute_copy(&pszargs), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn SetArguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetArguments(this, ::core::mem::transmute(&pszargs)).into())
        }
        unsafe extern "system" fn GetHotkey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwhotkey: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHotkey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwhotkey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHotkey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHotkey(this, ::core::mem::transmute_copy(&whotkey)).into())
        }
        unsafe extern "system" fn GetShowCmd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pishowcmd: *mut super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetShowCmd(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pishowcmd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetShowCmd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShowCmd(this, ::core::mem::transmute_copy(&ishowcmd)).into())
        }
        unsafe extern "system" fn GetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PSTR, cch: i32, piicon: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIconLocation(this, ::core::mem::transmute_copy(&psziconpath), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&piicon)).into())
        }
        unsafe extern "system" fn SetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PCSTR, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconLocation(this, ::core::mem::transmute(&psziconpath), ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn SetRelativePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpathrel: ::windows_core::PCSTR, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRelativePath(this, ::core::mem::transmute(&pszpathrel), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn Resolve<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resolve(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&fflags)).into())
        }
        unsafe extern "system" fn SetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPath(this, ::core::mem::transmute(&pszfile)).into())
        }
        IShellLinkA_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPath: GetPath::<Identity, Impl, OFFSET>,
            GetIDList: GetIDList::<Identity, Impl, OFFSET>,
            SetIDList: SetIDList::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            SetDescription: SetDescription::<Identity, Impl, OFFSET>,
            GetWorkingDirectory: GetWorkingDirectory::<Identity, Impl, OFFSET>,
            SetWorkingDirectory: SetWorkingDirectory::<Identity, Impl, OFFSET>,
            GetArguments: GetArguments::<Identity, Impl, OFFSET>,
            SetArguments: SetArguments::<Identity, Impl, OFFSET>,
            GetHotkey: GetHotkey::<Identity, Impl, OFFSET>,
            SetHotkey: SetHotkey::<Identity, Impl, OFFSET>,
            GetShowCmd: GetShowCmd::<Identity, Impl, OFFSET>,
            SetShowCmd: SetShowCmd::<Identity, Impl, OFFSET>,
            GetIconLocation: GetIconLocation::<Identity, Impl, OFFSET>,
            SetIconLocation: SetIconLocation::<Identity, Impl, OFFSET>,
            SetRelativePath: SetRelativePath::<Identity, Impl, OFFSET>,
            Resolve: Resolve::<Identity, Impl, OFFSET>,
            SetPath: SetPath::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellLinkDataList_Impl: ::windows_core::BaseImpl {
    fn AddDataBlock(this: &Self::This, pdatablock: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CopyDataBlock(this: &Self::This, dwsig: u32, ppdatablock: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn RemoveDataBlock(this: &Self::This, dwsig: u32) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IShellLinkDataList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDataList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellLinkDataList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddDataBlock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDataList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdatablock: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDataBlock(this, ::core::mem::transmute_copy(&pdatablock)).into())
        }
        unsafe extern "system" fn CopyDataBlock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDataList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsig: u32, ppdatablock: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyDataBlock(this, ::core::mem::transmute_copy(&dwsig), ::core::mem::transmute_copy(&ppdatablock)).into())
        }
        unsafe extern "system" fn RemoveDataBlock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDataList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsig: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveDataBlock(this, ::core::mem::transmute_copy(&dwsig)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDataList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDataList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        IShellLinkDataList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddDataBlock: AddDataBlock::<Identity, Impl, OFFSET>,
            CopyDataBlock: CopyDataBlock::<Identity, Impl, OFFSET>,
            RemoveDataBlock: RemoveDataBlock::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellLinkDual_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Path(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetPath(this: &Self::This, bs: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Description(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetDescription(this: &Self::This, bs: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn WorkingDirectory(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetWorkingDirectory(this: &Self::This, bs: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Arguments(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetArguments(this: &Self::This, bs: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Hotkey(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetHotkey(this: &Self::This, ihk: i32) -> ::windows_core::Result<()>;
    fn ShowCommand(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetShowCommand(this: &Self::This, ishowcommand: i32) -> ::windows_core::Result<()>;
    fn Resolve(this: &Self::This, fflags: i32) -> ::windows_core::Result<()>;
    fn GetIconLocation(this: &Self::This, pbs: *mut ::windows_core::BSTR, piicon: *mut i32) -> ::windows_core::Result<()>;
    fn SetIconLocation(this: &Self::This, bs: &::windows_core::BSTR, iicon: i32) -> ::windows_core::Result<()>;
    fn Save(this: &Self::This, vwhere: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellLinkDual {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellLinkDual {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Path<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Path(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPath(this, ::core::mem::transmute(&bs)).into())
        }
        unsafe extern "system" fn Description<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Description(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescription(this, ::core::mem::transmute(&bs)).into())
        }
        unsafe extern "system" fn WorkingDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::WorkingDirectory(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWorkingDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWorkingDirectory(this, ::core::mem::transmute(&bs)).into())
        }
        unsafe extern "system" fn Arguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Arguments(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetArguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetArguments(this, ::core::mem::transmute(&bs)).into())
        }
        unsafe extern "system" fn Hotkey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pihk: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Hotkey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pihk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHotkey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ihk: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHotkey(this, ::core::mem::transmute_copy(&ihk)).into())
        }
        unsafe extern "system" fn ShowCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pishowcommand: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ShowCommand(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pishowcommand, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetShowCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ishowcommand: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShowCommand(this, ::core::mem::transmute_copy(&ishowcommand)).into())
        }
        unsafe extern "system" fn Resolve<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resolve(this, ::core::mem::transmute_copy(&fflags)).into())
        }
        unsafe extern "system" fn GetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbs: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, piicon: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIconLocation(this, ::core::mem::transmute_copy(&pbs), ::core::mem::transmute_copy(&piicon)).into())
        }
        unsafe extern "system" fn SetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bs: ::std::mem::MaybeUninit<::windows_core::BSTR>, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconLocation(this, ::core::mem::transmute(&bs), ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn Save<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vwhere: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Save(this, ::core::mem::transmute(&vwhere)).into())
        }
        IShellLinkDual_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Path: Path::<Identity, Impl, OFFSET>,
            SetPath: SetPath::<Identity, Impl, OFFSET>,
            Description: Description::<Identity, Impl, OFFSET>,
            SetDescription: SetDescription::<Identity, Impl, OFFSET>,
            WorkingDirectory: WorkingDirectory::<Identity, Impl, OFFSET>,
            SetWorkingDirectory: SetWorkingDirectory::<Identity, Impl, OFFSET>,
            Arguments: Arguments::<Identity, Impl, OFFSET>,
            SetArguments: SetArguments::<Identity, Impl, OFFSET>,
            Hotkey: Hotkey::<Identity, Impl, OFFSET>,
            SetHotkey: SetHotkey::<Identity, Impl, OFFSET>,
            ShowCommand: ShowCommand::<Identity, Impl, OFFSET>,
            SetShowCommand: SetShowCommand::<Identity, Impl, OFFSET>,
            Resolve: Resolve::<Identity, Impl, OFFSET>,
            GetIconLocation: GetIconLocation::<Identity, Impl, OFFSET>,
            SetIconLocation: SetIconLocation::<Identity, Impl, OFFSET>,
            Save: Save::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellLinkDual2_Impl: ::windows_core::BaseImpl + IShellLinkDual_Impl {
    fn Target(this: &Self::This) -> ::windows_core::Result<FolderItem>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellLinkDual2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellLinkDual);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellLinkDual2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Target<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkDual2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppfi: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Target(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppfi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellLinkDual2_Vtbl { base__: <IShellLinkDual as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Target: Target::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Storage_FileSystem\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellLinkW_Impl: ::windows_core::BaseImpl {
    fn GetPath(this: &Self::This, pszfile: ::windows_core::PWSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW, fflags: u32) -> ::windows_core::Result<()>;
    fn GetIDList(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
    fn SetIDList(this: &Self::This, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn GetDescription(this: &Self::This, pszname: ::windows_core::PWSTR, cch: i32) -> ::windows_core::Result<()>;
    fn SetDescription(this: &Self::This, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetWorkingDirectory(this: &Self::This, pszdir: ::windows_core::PWSTR, cch: i32) -> ::windows_core::Result<()>;
    fn SetWorkingDirectory(this: &Self::This, pszdir: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetArguments(this: &Self::This, pszargs: ::windows_core::PWSTR, cch: i32) -> ::windows_core::Result<()>;
    fn SetArguments(this: &Self::This, pszargs: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetHotkey(this: &Self::This) -> ::windows_core::Result<u16>;
    fn SetHotkey(this: &Self::This, whotkey: u16) -> ::windows_core::Result<()>;
    fn GetShowCmd(this: &Self::This) -> ::windows_core::Result<super::WindowsAndMessaging::SHOW_WINDOW_CMD>;
    fn SetShowCmd(this: &Self::This, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::Result<()>;
    fn GetIconLocation(this: &Self::This, psziconpath: ::windows_core::PWSTR, cch: i32, piicon: *mut i32) -> ::windows_core::Result<()>;
    fn SetIconLocation(this: &Self::This, psziconpath: &::windows_core::PCWSTR, iicon: i32) -> ::windows_core::Result<()>;
    fn SetRelativePath(this: &Self::This, pszpathrel: &::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::Result<()>;
    fn Resolve(this: &Self::This, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::Result<()>;
    fn SetPath(this: &Self::This, pszfile: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellLinkW {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Storage_FileSystem", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellLinkW {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PWSTR, cch: i32, pfd: *mut super::super::Storage::FileSystem::WIN32_FIND_DATAW, fflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPath(this, ::core::mem::transmute_copy(&pszfile), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&pfd), ::core::mem::transmute_copy(&fflags)).into())
        }
        unsafe extern "system" fn GetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIDList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIDList(this, ::core::mem::transmute_copy(&pidl)).into())
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PWSTR, cch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&pszname), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn SetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescription(this, ::core::mem::transmute(&pszname)).into())
        }
        unsafe extern "system" fn GetWorkingDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PWSTR, cch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWorkingDirectory(this, ::core::mem::transmute_copy(&pszdir), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn SetWorkingDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdir: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWorkingDirectory(this, ::core::mem::transmute(&pszdir)).into())
        }
        unsafe extern "system" fn GetArguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PWSTR, cch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetArguments(this, ::core::mem::transmute_copy(&pszargs), ::core::mem::transmute_copy(&cch)).into())
        }
        unsafe extern "system" fn SetArguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetArguments(this, ::core::mem::transmute(&pszargs)).into())
        }
        unsafe extern "system" fn GetHotkey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwhotkey: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHotkey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwhotkey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHotkey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, whotkey: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHotkey(this, ::core::mem::transmute_copy(&whotkey)).into())
        }
        unsafe extern "system" fn GetShowCmd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pishowcmd: *mut super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetShowCmd(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pishowcmd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetShowCmd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ishowcmd: super::WindowsAndMessaging::SHOW_WINDOW_CMD) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShowCmd(this, ::core::mem::transmute_copy(&ishowcmd)).into())
        }
        unsafe extern "system" fn GetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PWSTR, cch: i32, piicon: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIconLocation(this, ::core::mem::transmute_copy(&psziconpath), ::core::mem::transmute_copy(&cch), ::core::mem::transmute_copy(&piicon)).into())
        }
        unsafe extern "system" fn SetIconLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psziconpath: ::windows_core::PCWSTR, iicon: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconLocation(this, ::core::mem::transmute(&psziconpath), ::core::mem::transmute_copy(&iicon)).into())
        }
        unsafe extern "system" fn SetRelativePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpathrel: ::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRelativePath(this, ::core::mem::transmute(&pszpathrel), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn Resolve<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, fflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resolve(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&fflags)).into())
        }
        unsafe extern "system" fn SetPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellLinkW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfile: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPath(this, ::core::mem::transmute(&pszfile)).into())
        }
        IShellLinkW_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPath: GetPath::<Identity, Impl, OFFSET>,
            GetIDList: GetIDList::<Identity, Impl, OFFSET>,
            SetIDList: SetIDList::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            SetDescription: SetDescription::<Identity, Impl, OFFSET>,
            GetWorkingDirectory: GetWorkingDirectory::<Identity, Impl, OFFSET>,
            SetWorkingDirectory: SetWorkingDirectory::<Identity, Impl, OFFSET>,
            GetArguments: GetArguments::<Identity, Impl, OFFSET>,
            SetArguments: SetArguments::<Identity, Impl, OFFSET>,
            GetHotkey: GetHotkey::<Identity, Impl, OFFSET>,
            SetHotkey: SetHotkey::<Identity, Impl, OFFSET>,
            GetShowCmd: GetShowCmd::<Identity, Impl, OFFSET>,
            SetShowCmd: SetShowCmd::<Identity, Impl, OFFSET>,
            GetIconLocation: GetIconLocation::<Identity, Impl, OFFSET>,
            SetIconLocation: SetIconLocation::<Identity, Impl, OFFSET>,
            SetRelativePath: SetRelativePath::<Identity, Impl, OFFSET>,
            Resolve: Resolve::<Identity, Impl, OFFSET>,
            SetPath: SetPath::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellMenu_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psmc: ::core::option::Option<&IShellMenuCallback>, uid: u32, uidancestor: u32, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetMenuInfo(this: &Self::This, ppsmc: *mut ::core::option::Option<IShellMenuCallback>, puid: *mut u32, puidancestor: *mut u32, pdwflags: *mut u32) -> ::windows_core::Result<()>;
    fn SetShellFolder(this: &Self::This, psf: ::core::option::Option<&IShellFolder>, pidlfolder: *const Common::ITEMIDLIST, hkey: super::super::System::Registry::HKEY, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetShellFolder(this: &Self::This, pdwflags: *mut u32, ppidl: *mut *mut Common::ITEMIDLIST, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetMenu(this: &Self::This, hmenu: super::WindowsAndMessaging::HMENU, hwnd: super::super::Foundation::HWND, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetMenu(this: &Self::This, phmenu: *mut super::WindowsAndMessaging::HMENU, phwnd: *mut super::super::Foundation::HWND, pdwflags: *mut u32) -> ::windows_core::Result<()>;
    fn InvalidateItem(this: &Self::This, psmd: *const SMDATA, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetState(this: &Self::This, psmd: *mut SMDATA) -> ::windows_core::Result<()>;
    fn SetMenuToolbar(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, dwflags: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellMenu {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellMenu {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psmc: *mut ::core::ffi::c_void, uid: u32, uidancestor: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psmc), ::core::mem::transmute_copy(&uid), ::core::mem::transmute_copy(&uidancestor), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetMenuInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsmc: *mut *mut ::core::ffi::c_void, puid: *mut u32, puidancestor: *mut u32, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMenuInfo(this, ::core::mem::transmute_copy(&ppsmc), ::core::mem::transmute_copy(&puid), ::core::mem::transmute_copy(&puidancestor), ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetShellFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psf: *mut ::core::ffi::c_void, pidlfolder: *const Common::ITEMIDLIST, hkey: super::super::System::Registry::HKEY, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetShellFolder(this, ::windows_core::from_raw_borrowed(&psf), ::core::mem::transmute_copy(&pidlfolder), ::core::mem::transmute_copy(&hkey), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetShellFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, ppidl: *mut *mut Common::ITEMIDLIST, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetShellFolder(this, ::core::mem::transmute_copy(&pdwflags), ::core::mem::transmute_copy(&ppidl), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn SetMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, hwnd: super::super::Foundation::HWND, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMenu(this, ::core::mem::transmute_copy(&hmenu), ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phmenu: *mut super::WindowsAndMessaging::HMENU, phwnd: *mut super::super::Foundation::HWND, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMenu(this, ::core::mem::transmute_copy(&phmenu), ::core::mem::transmute_copy(&phwnd), ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn InvalidateItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psmd: *const SMDATA, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvalidateItem(this, ::core::mem::transmute_copy(&psmd), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psmd: *mut SMDATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetState(this, ::core::mem::transmute_copy(&psmd)).into())
        }
        unsafe extern "system" fn SetMenuToolbar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMenuToolbar(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&dwflags)).into())
        }
        IShellMenu_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetMenuInfo: GetMenuInfo::<Identity, Impl, OFFSET>,
            SetShellFolder: SetShellFolder::<Identity, Impl, OFFSET>,
            GetShellFolder: GetShellFolder::<Identity, Impl, OFFSET>,
            SetMenu: SetMenu::<Identity, Impl, OFFSET>,
            GetMenu: GetMenu::<Identity, Impl, OFFSET>,
            InvalidateItem: InvalidateItem::<Identity, Impl, OFFSET>,
            GetState: GetState::<Identity, Impl, OFFSET>,
            SetMenuToolbar: SetMenuToolbar::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellMenuCallback_Impl: ::windows_core::BaseImpl {
    fn CallbackSM(this: &Self::This, psmd: *mut SMDATA, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellMenuCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenuCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellMenuCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CallbackSM<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellMenuCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psmd: *mut SMDATA, umsg: u32, wparam: super::super::Foundation::WPARAM, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallbackSM(this, ::core::mem::transmute_copy(&psmd), ::core::mem::transmute_copy(&umsg), ::core::mem::transmute_copy(&wparam), ::core::mem::transmute_copy(&lparam)).into())
        }
        IShellMenuCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CallbackSM: CallbackSM::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellNameSpace_Impl: ::windows_core::BaseImpl + IShellFavoritesNameSpace_Impl {
    fn EnumOptions(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetEnumOptions(this: &Self::This, lval: i32) -> ::windows_core::Result<()>;
    fn SelectedItem(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn SetSelectedItem(this: &Self::This, pitem: ::core::option::Option<&super::super::System::Com::IDispatch>) -> ::windows_core::Result<()>;
    fn Root(this: &Self::This) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn SetRoot2(this: &Self::This, var: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Depth(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetDepth(this: &Self::This, idepth: i32) -> ::windows_core::Result<()>;
    fn Mode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetMode(this: &Self::This, umode: u32) -> ::windows_core::Result<()>;
    fn Flags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn SetTVFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn TVFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Columns(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetColumns(this: &Self::This, bstrcolumns: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CountViewTypes(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetViewType(this: &Self::This, itype: i32) -> ::windows_core::Result<()>;
    fn SelectedItems(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Expand(this: &Self::This, var: &super::super::System::Variant::VARIANT, idepth: i32) -> ::windows_core::Result<()>;
    fn UnselectAll(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellNameSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellFavoritesNameSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellNameSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnumOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pgrfenumflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pgrfenumflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEnumOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnumOptions(this, ::core::mem::transmute_copy(&lval)).into())
        }
        unsafe extern "system" fn SelectedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SelectedItem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSelectedItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSelectedItem(this, ::windows_core::from_raw_borrowed(&pitem)).into())
        }
        unsafe extern "system" fn Root<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvar: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Root(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRoot2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, var: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRoot2(this, ::core::mem::transmute(&var)).into())
        }
        unsafe extern "system" fn Depth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidepth: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Depth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pidepth, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDepth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idepth: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDepth(this, ::core::mem::transmute_copy(&idepth)).into())
        }
        unsafe extern "system" fn Mode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pumode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Mode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pumode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, umode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMode(this, ::core::mem::transmute_copy(&umode)).into())
        }
        unsafe extern "system" fn Flags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Flags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn SetTVFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTVFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn TVFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TVFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Columns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrcolumns: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Columns(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bstrcolumns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetColumns<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrcolumns: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColumns(this, ::core::mem::transmute(&bstrcolumns)).into())
        }
        unsafe extern "system" fn CountViewTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pitypes: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CountViewTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pitypes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetViewType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itype: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetViewType(this, ::core::mem::transmute_copy(&itype)).into())
        }
        unsafe extern "system" fn SelectedItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SelectedItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Expand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, var: super::super::System::Variant::VARIANT, idepth: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Expand(this, ::core::mem::transmute(&var), ::core::mem::transmute_copy(&idepth)).into())
        }
        unsafe extern "system" fn UnselectAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellNameSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnselectAll(this).into())
        }
        IShellNameSpace_Vtbl {
            base__: <IShellFavoritesNameSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnumOptions: EnumOptions::<Identity, Impl, OFFSET>,
            SetEnumOptions: SetEnumOptions::<Identity, Impl, OFFSET>,
            SelectedItem: SelectedItem::<Identity, Impl, OFFSET>,
            SetSelectedItem: SetSelectedItem::<Identity, Impl, OFFSET>,
            Root: Root::<Identity, Impl, OFFSET>,
            SetRoot2: SetRoot2::<Identity, Impl, OFFSET>,
            Depth: Depth::<Identity, Impl, OFFSET>,
            SetDepth: SetDepth::<Identity, Impl, OFFSET>,
            Mode: Mode::<Identity, Impl, OFFSET>,
            SetMode: SetMode::<Identity, Impl, OFFSET>,
            Flags: Flags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            SetTVFlags: SetTVFlags::<Identity, Impl, OFFSET>,
            TVFlags: TVFlags::<Identity, Impl, OFFSET>,
            Columns: Columns::<Identity, Impl, OFFSET>,
            SetColumns: SetColumns::<Identity, Impl, OFFSET>,
            CountViewTypes: CountViewTypes::<Identity, Impl, OFFSET>,
            SetViewType: SetViewType::<Identity, Impl, OFFSET>,
            SelectedItems: SelectedItems::<Identity, Impl, OFFSET>,
            Expand: Expand::<Identity, Impl, OFFSET>,
            UnselectAll: UnselectAll::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
pub trait IShellPropSheetExt_Impl: ::windows_core::BaseImpl {
    fn AddPages(this: &Self::This, pfnaddpage: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
    fn ReplacePage(this: &Self::This, upageid: u32, pfnreplacewith: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
impl ::windows_core::Iids for IShellPropSheetExt {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellPropSheetExt_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellPropSheetExt {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddPages<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellPropSheetExt_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfnaddpage: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPages(this, ::core::mem::transmute_copy(&pfnaddpage), ::core::mem::transmute_copy(&lparam)).into())
        }
        unsafe extern "system" fn ReplacePage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellPropSheetExt_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, upageid: u32, pfnreplacewith: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReplacePage(this, ::core::mem::transmute_copy(&upageid), ::core::mem::transmute_copy(&pfnreplacewith), ::core::mem::transmute_copy(&lparam)).into())
        }
        IShellPropSheetExt_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddPages: AddPages::<Identity, Impl, OFFSET>,
            ReplacePage: ReplacePage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellRunDll_Impl: ::windows_core::BaseImpl {
    fn Run(this: &Self::This, pszargs: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IShellRunDll {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellRunDll_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellRunDll {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Run<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellRunDll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszargs: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Run(this, ::core::mem::transmute(&pszargs)).into())
        }
        IShellRunDll_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Run: Run::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IShellService_Impl: ::windows_core::BaseImpl {
    fn SetOwner(this: &Self::This, punkowner: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IShellService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOwner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkowner: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOwner(this, ::windows_core::from_raw_borrowed(&punkowner)).into())
        }
        IShellService_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetOwner: SetOwner::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IShellTaskScheduler_Impl: ::windows_core::BaseImpl {
    fn AddTask(this: &Self::This, prt: ::core::option::Option<&IRunnableTask>, rtoid: *const ::windows_core::GUID, lparam: usize, dwpriority: u32) -> ::windows_core::Result<()>;
    fn RemoveTasks(this: &Self::This, rtoid: *const ::windows_core::GUID, lparam: usize, bwaitifrunning: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CountTasks(this: &Self::This, rtoid: *const ::windows_core::GUID) -> u32;
    fn Status(this: &Self::This, dwreleasestatus: u32, dwthreadtimeout: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IShellTaskScheduler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellTaskScheduler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellTaskScheduler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddTask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellTaskScheduler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prt: *mut ::core::ffi::c_void, rtoid: *const ::windows_core::GUID, lparam: usize, dwpriority: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTask(this, ::windows_core::from_raw_borrowed(&prt), ::core::mem::transmute_copy(&rtoid), ::core::mem::transmute_copy(&lparam), ::core::mem::transmute_copy(&dwpriority)).into())
        }
        unsafe extern "system" fn RemoveTasks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellTaskScheduler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtoid: *const ::windows_core::GUID, lparam: usize, bwaitifrunning: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTasks(this, ::core::mem::transmute_copy(&rtoid), ::core::mem::transmute_copy(&lparam), ::core::mem::transmute_copy(&bwaitifrunning)).into())
        }
        unsafe extern "system" fn CountTasks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellTaskScheduler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtoid: *const ::windows_core::GUID) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CountTasks(this, ::core::mem::transmute_copy(&rtoid)))
        }
        unsafe extern "system" fn Status<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellTaskScheduler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreleasestatus: u32, dwthreadtimeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Status(this, ::core::mem::transmute_copy(&dwreleasestatus), ::core::mem::transmute_copy(&dwthreadtimeout)).into())
        }
        IShellTaskScheduler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddTask: AddTask::<Identity, Impl, OFFSET>,
            RemoveTasks: RemoveTasks::<Identity, Impl, OFFSET>,
            CountTasks: CountTasks::<Identity, Impl, OFFSET>,
            Status: Status::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn ResetFirstBootMode(this: &Self::This) -> ::windows_core::Result<()>;
    fn ResetSafeMode(this: &Self::This) -> ::windows_core::Result<()>;
    fn RefreshOfflineDesktop(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddFavorite(this: &Self::This, url: &::windows_core::BSTR, title: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn AddChannel(this: &Self::This, url: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AddDesktopComponent(this: &Self::This, url: &::windows_core::BSTR, r#type: &::windows_core::BSTR, left: *const super::super::System::Variant::VARIANT, top: *const super::super::System::Variant::VARIANT, width: *const super::super::System::Variant::VARIANT, height: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn IsSubscribed(this: &Self::This, url: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn NavigateAndFind(this: &Self::This, url: &::windows_core::BSTR, strquery: &::windows_core::BSTR, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ImportExportFavorites(this: &Self::This, fimport: super::super::Foundation::VARIANT_BOOL, strimpexppath: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AutoCompleteSaveForm(this: &Self::This, form: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn AutoScan(this: &Self::This, strsearch: &::windows_core::BSTR, strfailureurl: &::windows_core::BSTR, pvartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn AutoCompleteAttach(this: &Self::This, reserved: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ShowBrowserUI(this: &Self::This, bstrname: &::windows_core::BSTR, pvarin: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ResetFirstBootMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetFirstBootMode(this).into())
        }
        unsafe extern "system" fn ResetSafeMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetSafeMode(this).into())
        }
        unsafe extern "system" fn RefreshOfflineDesktop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RefreshOfflineDesktop(this).into())
        }
        unsafe extern "system" fn AddFavorite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, title: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFavorite(this, ::core::mem::transmute(&url), ::core::mem::transmute_copy(&title)).into())
        }
        unsafe extern "system" fn AddChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddChannel(this, ::core::mem::transmute(&url)).into())
        }
        unsafe extern "system" fn AddDesktopComponent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>, left: *const super::super::System::Variant::VARIANT, top: *const super::super::System::Variant::VARIANT, width: *const super::super::System::Variant::VARIANT, height: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDesktopComponent(this, ::core::mem::transmute(&url), ::core::mem::transmute(&r#type), ::core::mem::transmute_copy(&left), ::core::mem::transmute_copy(&top), ::core::mem::transmute_copy(&width), ::core::mem::transmute_copy(&height)).into())
        }
        unsafe extern "system" fn IsSubscribed<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSubscribed(this, ::core::mem::transmute(&url)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NavigateAndFind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, strquery: ::std::mem::MaybeUninit<::windows_core::BSTR>, vartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NavigateAndFind(this, ::core::mem::transmute(&url), ::core::mem::transmute(&strquery), ::core::mem::transmute_copy(&vartargetframe)).into())
        }
        unsafe extern "system" fn ImportExportFavorites<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fimport: super::super::Foundation::VARIANT_BOOL, strimpexppath: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ImportExportFavorites(this, ::core::mem::transmute_copy(&fimport), ::core::mem::transmute(&strimpexppath)).into())
        }
        unsafe extern "system" fn AutoCompleteSaveForm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, form: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AutoCompleteSaveForm(this, ::core::mem::transmute_copy(&form)).into())
        }
        unsafe extern "system" fn AutoScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strsearch: ::std::mem::MaybeUninit<::windows_core::BSTR>, strfailureurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvartargetframe: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AutoScan(this, ::core::mem::transmute(&strsearch), ::core::mem::transmute(&strfailureurl), ::core::mem::transmute_copy(&pvartargetframe)).into())
        }
        unsafe extern "system" fn AutoCompleteAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, reserved: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AutoCompleteAttach(this, ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ShowBrowserUI<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarin: *const super::super::System::Variant::VARIANT, pvarout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ShowBrowserUI(this, ::core::mem::transmute(&bstrname), ::core::mem::transmute_copy(&pvarin)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellUIHelper_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ResetFirstBootMode: ResetFirstBootMode::<Identity, Impl, OFFSET>,
            ResetSafeMode: ResetSafeMode::<Identity, Impl, OFFSET>,
            RefreshOfflineDesktop: RefreshOfflineDesktop::<Identity, Impl, OFFSET>,
            AddFavorite: AddFavorite::<Identity, Impl, OFFSET>,
            AddChannel: AddChannel::<Identity, Impl, OFFSET>,
            AddDesktopComponent: AddDesktopComponent::<Identity, Impl, OFFSET>,
            IsSubscribed: IsSubscribed::<Identity, Impl, OFFSET>,
            NavigateAndFind: NavigateAndFind::<Identity, Impl, OFFSET>,
            ImportExportFavorites: ImportExportFavorites::<Identity, Impl, OFFSET>,
            AutoCompleteSaveForm: AutoCompleteSaveForm::<Identity, Impl, OFFSET>,
            AutoScan: AutoScan::<Identity, Impl, OFFSET>,
            AutoCompleteAttach: AutoCompleteAttach::<Identity, Impl, OFFSET>,
            ShowBrowserUI: ShowBrowserUI::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper2_Impl: ::windows_core::BaseImpl + IShellUIHelper_Impl {
    fn AddSearchProvider(this: &Self::This, url: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RunOnceShown(this: &Self::This) -> ::windows_core::Result<()>;
    fn SkipRunOnce(this: &Self::This) -> ::windows_core::Result<()>;
    fn CustomizeSettings(this: &Self::This, fsqm: super::super::Foundation::VARIANT_BOOL, fphishing: super::super::Foundation::VARIANT_BOOL, bstrlocale: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SqmEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn PhishingEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn BrandImageUri(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SkipTabsWelcome(this: &Self::This) -> ::windows_core::Result<()>;
    fn DiagnoseConnection(this: &Self::This) -> ::windows_core::Result<()>;
    fn CustomizeClearType(this: &Self::This, fset: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn IsSearchProviderInstalled(this: &Self::This, url: &::windows_core::BSTR) -> ::windows_core::Result<u32>;
    fn IsSearchMigrated(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn DefaultSearchProvider(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn RunOnceRequiredSettingsComplete(this: &Self::This, fcomplete: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn RunOnceHasShown(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SearchGuideUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddSearchProvider<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSearchProvider(this, ::core::mem::transmute(&url)).into())
        }
        unsafe extern "system" fn RunOnceShown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RunOnceShown(this).into())
        }
        unsafe extern "system" fn SkipRunOnce<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SkipRunOnce(this).into())
        }
        unsafe extern "system" fn CustomizeSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fsqm: super::super::Foundation::VARIANT_BOOL, fphishing: super::super::Foundation::VARIANT_BOOL, bstrlocale: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CustomizeSettings(this, ::core::mem::transmute_copy(&fsqm), ::core::mem::transmute_copy(&fphishing), ::core::mem::transmute(&bstrlocale)).into())
        }
        unsafe extern "system" fn SqmEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SqmEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PhishingEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PhishingEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BrandImageUri<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstruri: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BrandImageUri(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstruri, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SkipTabsWelcome<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SkipTabsWelcome(this).into())
        }
        unsafe extern "system" fn DiagnoseConnection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DiagnoseConnection(this).into())
        }
        unsafe extern "system" fn CustomizeClearType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fset: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CustomizeClearType(this, ::core::mem::transmute_copy(&fset)).into())
        }
        unsafe extern "system" fn IsSearchProviderInstalled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdwresult: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSearchProviderInstalled(this, ::core::mem::transmute(&url)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsSearchMigrated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfmigrated: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSearchMigrated(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfmigrated, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultSearchProvider<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultSearchProvider(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RunOnceRequiredSettingsComplete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fcomplete: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RunOnceRequiredSettingsComplete(this, ::core::mem::transmute_copy(&fcomplete)).into())
        }
        unsafe extern "system" fn RunOnceHasShown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfshown: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RunOnceHasShown(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfshown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SearchGuideUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchGuideUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellUIHelper2_Vtbl {
            base__: <IShellUIHelper as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddSearchProvider: AddSearchProvider::<Identity, Impl, OFFSET>,
            RunOnceShown: RunOnceShown::<Identity, Impl, OFFSET>,
            SkipRunOnce: SkipRunOnce::<Identity, Impl, OFFSET>,
            CustomizeSettings: CustomizeSettings::<Identity, Impl, OFFSET>,
            SqmEnabled: SqmEnabled::<Identity, Impl, OFFSET>,
            PhishingEnabled: PhishingEnabled::<Identity, Impl, OFFSET>,
            BrandImageUri: BrandImageUri::<Identity, Impl, OFFSET>,
            SkipTabsWelcome: SkipTabsWelcome::<Identity, Impl, OFFSET>,
            DiagnoseConnection: DiagnoseConnection::<Identity, Impl, OFFSET>,
            CustomizeClearType: CustomizeClearType::<Identity, Impl, OFFSET>,
            IsSearchProviderInstalled: IsSearchProviderInstalled::<Identity, Impl, OFFSET>,
            IsSearchMigrated: IsSearchMigrated::<Identity, Impl, OFFSET>,
            DefaultSearchProvider: DefaultSearchProvider::<Identity, Impl, OFFSET>,
            RunOnceRequiredSettingsComplete: RunOnceRequiredSettingsComplete::<Identity, Impl, OFFSET>,
            RunOnceHasShown: RunOnceHasShown::<Identity, Impl, OFFSET>,
            SearchGuideUrl: SearchGuideUrl::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper3_Impl: ::windows_core::BaseImpl + IShellUIHelper2_Impl {
    fn AddService(this: &Self::This, url: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn IsServiceInstalled(this: &Self::This, url: &::windows_core::BSTR, verb: &::windows_core::BSTR) -> ::windows_core::Result<u32>;
    fn InPrivateFilteringEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn AddToFavoritesBar(this: &Self::This, url: &::windows_core::BSTR, title: &::windows_core::BSTR, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn BuildNewTabPage(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetRecentlyClosedVisible(this: &Self::This, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SetActivitiesVisible(this: &Self::This, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ContentDiscoveryReset(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsSuggestedSitesEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn EnableSuggestedSites(this: &Self::This, fenable: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn NavigateToSuggestedSites(this: &Self::This, bstrrelativeurl: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ShowTabsHelp(this: &Self::This) -> ::windows_core::Result<()>;
    fn ShowInPrivateHelp(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddService(this, ::core::mem::transmute(&url)).into())
        }
        unsafe extern "system" fn IsServiceInstalled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, verb: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdwresult: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsServiceInstalled(this, ::core::mem::transmute(&url), ::core::mem::transmute(&verb)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InPrivateFilteringEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InPrivateFilteringEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddToFavoritesBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, title: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddToFavoritesBar(this, ::core::mem::transmute(&url), ::core::mem::transmute(&title), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn BuildNewTabPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BuildNewTabPage(this).into())
        }
        unsafe extern "system" fn SetRecentlyClosedVisible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRecentlyClosedVisible(this, ::core::mem::transmute_copy(&fvisible)).into())
        }
        unsafe extern "system" fn SetActivitiesVisible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetActivitiesVisible(this, ::core::mem::transmute_copy(&fvisible)).into())
        }
        unsafe extern "system" fn ContentDiscoveryReset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContentDiscoveryReset(this).into())
        }
        unsafe extern "system" fn IsSuggestedSitesEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSuggestedSitesEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnableSuggestedSites<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableSuggestedSites(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn NavigateToSuggestedSites<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrrelativeurl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NavigateToSuggestedSites(this, ::core::mem::transmute(&bstrrelativeurl)).into())
        }
        unsafe extern "system" fn ShowTabsHelp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowTabsHelp(this).into())
        }
        unsafe extern "system" fn ShowInPrivateHelp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowInPrivateHelp(this).into())
        }
        IShellUIHelper3_Vtbl {
            base__: <IShellUIHelper2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddService: AddService::<Identity, Impl, OFFSET>,
            IsServiceInstalled: IsServiceInstalled::<Identity, Impl, OFFSET>,
            InPrivateFilteringEnabled: InPrivateFilteringEnabled::<Identity, Impl, OFFSET>,
            AddToFavoritesBar: AddToFavoritesBar::<Identity, Impl, OFFSET>,
            BuildNewTabPage: BuildNewTabPage::<Identity, Impl, OFFSET>,
            SetRecentlyClosedVisible: SetRecentlyClosedVisible::<Identity, Impl, OFFSET>,
            SetActivitiesVisible: SetActivitiesVisible::<Identity, Impl, OFFSET>,
            ContentDiscoveryReset: ContentDiscoveryReset::<Identity, Impl, OFFSET>,
            IsSuggestedSitesEnabled: IsSuggestedSitesEnabled::<Identity, Impl, OFFSET>,
            EnableSuggestedSites: EnableSuggestedSites::<Identity, Impl, OFFSET>,
            NavigateToSuggestedSites: NavigateToSuggestedSites::<Identity, Impl, OFFSET>,
            ShowTabsHelp: ShowTabsHelp::<Identity, Impl, OFFSET>,
            ShowInPrivateHelp: ShowInPrivateHelp::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper4_Impl: ::windows_core::BaseImpl + IShellUIHelper3_Impl {
    fn msIsSiteMode(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn msSiteModeShowThumbBar(this: &Self::This) -> ::windows_core::Result<()>;
    fn msSiteModeAddThumbBarButton(this: &Self::This, bstriconurl: &::windows_core::BSTR, bstrtooltip: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn msSiteModeUpdateThumbBarButton(this: &Self::This, buttonid: &super::super::System::Variant::VARIANT, fenabled: super::super::Foundation::VARIANT_BOOL, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn msSiteModeSetIconOverlay(this: &Self::This, iconurl: &::windows_core::BSTR, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msSiteModeClearIconOverlay(this: &Self::This) -> ::windows_core::Result<()>;
    fn msAddSiteMode(this: &Self::This) -> ::windows_core::Result<()>;
    fn msSiteModeCreateJumpList(this: &Self::This, bstrheader: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn msSiteModeAddJumpListItem(this: &Self::This, bstrname: &::windows_core::BSTR, bstractionuri: &::windows_core::BSTR, bstriconuri: &::windows_core::BSTR, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msSiteModeClearJumpList(this: &Self::This) -> ::windows_core::Result<()>;
    fn msSiteModeShowJumpList(this: &Self::This) -> ::windows_core::Result<()>;
    fn msSiteModeAddButtonStyle(this: &Self::This, uibuttonid: &super::super::System::Variant::VARIANT, bstriconurl: &::windows_core::BSTR, bstrtooltip: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn msSiteModeShowButtonStyle(this: &Self::This, uibuttonid: &super::super::System::Variant::VARIANT, uistyleid: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msSiteModeActivate(this: &Self::This) -> ::windows_core::Result<()>;
    fn msIsSiteModeFirstRun(this: &Self::This, fpreservestate: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn msAddTrackingProtectionList(this: &Self::This, url: &::windows_core::BSTR, bstrfiltername: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn msTrackingProtectionEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn msActiveXFilteringEnabled(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn msIsSiteMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfsitemode: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msIsSiteMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfsitemode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msSiteModeShowThumbBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeShowThumbBar(this).into())
        }
        unsafe extern "system" fn msSiteModeAddThumbBarButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstriconurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrtooltip: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarbuttonid: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msSiteModeAddThumbBarButton(this, ::core::mem::transmute(&bstriconurl), ::core::mem::transmute(&bstrtooltip)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarbuttonid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msSiteModeUpdateThumbBarButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buttonid: super::super::System::Variant::VARIANT, fenabled: super::super::Foundation::VARIANT_BOOL, fvisible: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeUpdateThumbBarButton(this, ::core::mem::transmute(&buttonid), ::core::mem::transmute_copy(&fenabled), ::core::mem::transmute_copy(&fvisible)).into())
        }
        unsafe extern "system" fn msSiteModeSetIconOverlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iconurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvardescription: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeSetIconOverlay(this, ::core::mem::transmute(&iconurl), ::core::mem::transmute_copy(&pvardescription)).into())
        }
        unsafe extern "system" fn msSiteModeClearIconOverlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeClearIconOverlay(this).into())
        }
        unsafe extern "system" fn msAddSiteMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msAddSiteMode(this).into())
        }
        unsafe extern "system" fn msSiteModeCreateJumpList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrheader: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeCreateJumpList(this, ::core::mem::transmute(&bstrheader)).into())
        }
        unsafe extern "system" fn msSiteModeAddJumpListItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstractionuri: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstriconuri: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarwindowtype: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeAddJumpListItem(this, ::core::mem::transmute(&bstrname), ::core::mem::transmute(&bstractionuri), ::core::mem::transmute(&bstriconuri), ::core::mem::transmute_copy(&pvarwindowtype)).into())
        }
        unsafe extern "system" fn msSiteModeClearJumpList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeClearJumpList(this).into())
        }
        unsafe extern "system" fn msSiteModeShowJumpList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeShowJumpList(this).into())
        }
        unsafe extern "system" fn msSiteModeAddButtonStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uibuttonid: super::super::System::Variant::VARIANT, bstriconurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrtooltip: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarstyleid: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msSiteModeAddButtonStyle(this, ::core::mem::transmute(&uibuttonid), ::core::mem::transmute(&bstriconurl), ::core::mem::transmute(&bstrtooltip)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarstyleid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msSiteModeShowButtonStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uibuttonid: super::super::System::Variant::VARIANT, uistyleid: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeShowButtonStyle(this, ::core::mem::transmute(&uibuttonid), ::core::mem::transmute(&uistyleid)).into())
        }
        unsafe extern "system" fn msSiteModeActivate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeActivate(this).into())
        }
        unsafe extern "system" fn msIsSiteModeFirstRun<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fpreservestate: super::super::Foundation::VARIANT_BOOL, puifirstrun: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msIsSiteModeFirstRun(this, ::core::mem::transmute_copy(&fpreservestate)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puifirstrun, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msAddTrackingProtectionList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrfiltername: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msAddTrackingProtectionList(this, ::core::mem::transmute(&url), ::core::mem::transmute(&bstrfiltername)).into())
        }
        unsafe extern "system" fn msTrackingProtectionEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msTrackingProtectionEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msActiveXFilteringEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msActiveXFilteringEnabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellUIHelper4_Vtbl {
            base__: <IShellUIHelper3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            msIsSiteMode: msIsSiteMode::<Identity, Impl, OFFSET>,
            msSiteModeShowThumbBar: msSiteModeShowThumbBar::<Identity, Impl, OFFSET>,
            msSiteModeAddThumbBarButton: msSiteModeAddThumbBarButton::<Identity, Impl, OFFSET>,
            msSiteModeUpdateThumbBarButton: msSiteModeUpdateThumbBarButton::<Identity, Impl, OFFSET>,
            msSiteModeSetIconOverlay: msSiteModeSetIconOverlay::<Identity, Impl, OFFSET>,
            msSiteModeClearIconOverlay: msSiteModeClearIconOverlay::<Identity, Impl, OFFSET>,
            msAddSiteMode: msAddSiteMode::<Identity, Impl, OFFSET>,
            msSiteModeCreateJumpList: msSiteModeCreateJumpList::<Identity, Impl, OFFSET>,
            msSiteModeAddJumpListItem: msSiteModeAddJumpListItem::<Identity, Impl, OFFSET>,
            msSiteModeClearJumpList: msSiteModeClearJumpList::<Identity, Impl, OFFSET>,
            msSiteModeShowJumpList: msSiteModeShowJumpList::<Identity, Impl, OFFSET>,
            msSiteModeAddButtonStyle: msSiteModeAddButtonStyle::<Identity, Impl, OFFSET>,
            msSiteModeShowButtonStyle: msSiteModeShowButtonStyle::<Identity, Impl, OFFSET>,
            msSiteModeActivate: msSiteModeActivate::<Identity, Impl, OFFSET>,
            msIsSiteModeFirstRun: msIsSiteModeFirstRun::<Identity, Impl, OFFSET>,
            msAddTrackingProtectionList: msAddTrackingProtectionList::<Identity, Impl, OFFSET>,
            msTrackingProtectionEnabled: msTrackingProtectionEnabled::<Identity, Impl, OFFSET>,
            msActiveXFilteringEnabled: msActiveXFilteringEnabled::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper5_Impl: ::windows_core::BaseImpl + IShellUIHelper4_Impl {
    fn msProvisionNetworks(this: &Self::This, bstrprovisioningxml: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn msReportSafeUrl(this: &Self::This) -> ::windows_core::Result<()>;
    fn msSiteModeRefreshBadge(this: &Self::This) -> ::windows_core::Result<()>;
    fn msSiteModeClearBadge(this: &Self::This) -> ::windows_core::Result<()>;
    fn msDiagnoseConnectionUILess(this: &Self::This) -> ::windows_core::Result<()>;
    fn msLaunchNetworkClientHelp(this: &Self::This) -> ::windows_core::Result<()>;
    fn msChangeDefaultBrowser(this: &Self::This, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper5 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper4);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper5 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn msProvisionNetworks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrprovisioningxml: ::std::mem::MaybeUninit<::windows_core::BSTR>, puiresult: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msProvisionNetworks(this, ::core::mem::transmute(&bstrprovisioningxml)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puiresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msReportSafeUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msReportSafeUrl(this).into())
        }
        unsafe extern "system" fn msSiteModeRefreshBadge<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeRefreshBadge(this).into())
        }
        unsafe extern "system" fn msSiteModeClearBadge<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msSiteModeClearBadge(this).into())
        }
        unsafe extern "system" fn msDiagnoseConnectionUILess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msDiagnoseConnectionUILess(this).into())
        }
        unsafe extern "system" fn msLaunchNetworkClientHelp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msLaunchNetworkClientHelp(this).into())
        }
        unsafe extern "system" fn msChangeDefaultBrowser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msChangeDefaultBrowser(this, ::core::mem::transmute_copy(&fchange)).into())
        }
        IShellUIHelper5_Vtbl {
            base__: <IShellUIHelper4 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            msProvisionNetworks: msProvisionNetworks::<Identity, Impl, OFFSET>,
            msReportSafeUrl: msReportSafeUrl::<Identity, Impl, OFFSET>,
            msSiteModeRefreshBadge: msSiteModeRefreshBadge::<Identity, Impl, OFFSET>,
            msSiteModeClearBadge: msSiteModeClearBadge::<Identity, Impl, OFFSET>,
            msDiagnoseConnectionUILess: msDiagnoseConnectionUILess::<Identity, Impl, OFFSET>,
            msLaunchNetworkClientHelp: msLaunchNetworkClientHelp::<Identity, Impl, OFFSET>,
            msChangeDefaultBrowser: msChangeDefaultBrowser::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper6_Impl: ::windows_core::BaseImpl + IShellUIHelper5_Impl {
    fn msStopPeriodicTileUpdate(this: &Self::This) -> ::windows_core::Result<()>;
    fn msStartPeriodicTileUpdate(this: &Self::This, pollinguris: &super::super::System::Variant::VARIANT, starttime: &super::super::System::Variant::VARIANT, uiupdaterecurrence: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msStartPeriodicTileUpdateBatch(this: &Self::This, pollinguris: &super::super::System::Variant::VARIANT, starttime: &super::super::System::Variant::VARIANT, uiupdaterecurrence: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msClearTile(this: &Self::This) -> ::windows_core::Result<()>;
    fn msEnableTileNotificationQueue(this: &Self::This, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn msPinnedSiteState(this: &Self::This) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn msEnableTileNotificationQueueForSquare150x150(this: &Self::This, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn msEnableTileNotificationQueueForWide310x150(this: &Self::This, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn msEnableTileNotificationQueueForSquare310x310(this: &Self::This, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn msScheduledTileNotification(this: &Self::This, bstrnotificationxml: &::windows_core::BSTR, bstrnotificationid: &::windows_core::BSTR, bstrnotificationtag: &::windows_core::BSTR, starttime: &super::super::System::Variant::VARIANT, expirationtime: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msRemoveScheduledTileNotification(this: &Self::This, bstrnotificationid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn msStartPeriodicBadgeUpdate(this: &Self::This, pollinguri: &::windows_core::BSTR, starttime: &super::super::System::Variant::VARIANT, uiupdaterecurrence: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn msStopPeriodicBadgeUpdate(this: &Self::This) -> ::windows_core::Result<()>;
    fn msLaunchInternetOptions(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper6 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper5);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper6 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn msStopPeriodicTileUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msStopPeriodicTileUpdate(this).into())
        }
        unsafe extern "system" fn msStartPeriodicTileUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msStartPeriodicTileUpdate(this, ::core::mem::transmute(&pollinguris), ::core::mem::transmute(&starttime), ::core::mem::transmute(&uiupdaterecurrence)).into())
        }
        unsafe extern "system" fn msStartPeriodicTileUpdateBatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pollinguris: super::super::System::Variant::VARIANT, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msStartPeriodicTileUpdateBatch(this, ::core::mem::transmute(&pollinguris), ::core::mem::transmute(&starttime), ::core::mem::transmute(&uiupdaterecurrence)).into())
        }
        unsafe extern "system" fn msClearTile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msClearTile(this).into())
        }
        unsafe extern "system" fn msEnableTileNotificationQueue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msEnableTileNotificationQueue(this, ::core::mem::transmute_copy(&fchange)).into())
        }
        unsafe extern "system" fn msPinnedSiteState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarsitestate: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::msPinnedSiteState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarsitestate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn msEnableTileNotificationQueueForSquare150x150<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msEnableTileNotificationQueueForSquare150x150(this, ::core::mem::transmute_copy(&fchange)).into())
        }
        unsafe extern "system" fn msEnableTileNotificationQueueForWide310x150<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msEnableTileNotificationQueueForWide310x150(this, ::core::mem::transmute_copy(&fchange)).into())
        }
        unsafe extern "system" fn msEnableTileNotificationQueueForSquare310x310<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchange: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msEnableTileNotificationQueueForSquare310x310(this, ::core::mem::transmute_copy(&fchange)).into())
        }
        unsafe extern "system" fn msScheduledTileNotification<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrnotificationxml: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrnotificationid: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrnotificationtag: ::std::mem::MaybeUninit<::windows_core::BSTR>, starttime: super::super::System::Variant::VARIANT, expirationtime: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msScheduledTileNotification(this, ::core::mem::transmute(&bstrnotificationxml), ::core::mem::transmute(&bstrnotificationid), ::core::mem::transmute(&bstrnotificationtag), ::core::mem::transmute(&starttime), ::core::mem::transmute(&expirationtime)).into())
        }
        unsafe extern "system" fn msRemoveScheduledTileNotification<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrnotificationid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msRemoveScheduledTileNotification(this, ::core::mem::transmute(&bstrnotificationid)).into())
        }
        unsafe extern "system" fn msStartPeriodicBadgeUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pollinguri: ::std::mem::MaybeUninit<::windows_core::BSTR>, starttime: super::super::System::Variant::VARIANT, uiupdaterecurrence: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msStartPeriodicBadgeUpdate(this, ::core::mem::transmute(&pollinguri), ::core::mem::transmute(&starttime), ::core::mem::transmute(&uiupdaterecurrence)).into())
        }
        unsafe extern "system" fn msStopPeriodicBadgeUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msStopPeriodicBadgeUpdate(this).into())
        }
        unsafe extern "system" fn msLaunchInternetOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::msLaunchInternetOptions(this).into())
        }
        IShellUIHelper6_Vtbl {
            base__: <IShellUIHelper5 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            msStopPeriodicTileUpdate: msStopPeriodicTileUpdate::<Identity, Impl, OFFSET>,
            msStartPeriodicTileUpdate: msStartPeriodicTileUpdate::<Identity, Impl, OFFSET>,
            msStartPeriodicTileUpdateBatch: msStartPeriodicTileUpdateBatch::<Identity, Impl, OFFSET>,
            msClearTile: msClearTile::<Identity, Impl, OFFSET>,
            msEnableTileNotificationQueue: msEnableTileNotificationQueue::<Identity, Impl, OFFSET>,
            msPinnedSiteState: msPinnedSiteState::<Identity, Impl, OFFSET>,
            msEnableTileNotificationQueueForSquare150x150: msEnableTileNotificationQueueForSquare150x150::<Identity, Impl, OFFSET>,
            msEnableTileNotificationQueueForWide310x150: msEnableTileNotificationQueueForWide310x150::<Identity, Impl, OFFSET>,
            msEnableTileNotificationQueueForSquare310x310: msEnableTileNotificationQueueForSquare310x310::<Identity, Impl, OFFSET>,
            msScheduledTileNotification: msScheduledTileNotification::<Identity, Impl, OFFSET>,
            msRemoveScheduledTileNotification: msRemoveScheduledTileNotification::<Identity, Impl, OFFSET>,
            msStartPeriodicBadgeUpdate: msStartPeriodicBadgeUpdate::<Identity, Impl, OFFSET>,
            msStopPeriodicBadgeUpdate: msStopPeriodicBadgeUpdate::<Identity, Impl, OFFSET>,
            msLaunchInternetOptions: msLaunchInternetOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper7_Impl: ::windows_core::BaseImpl + IShellUIHelper6_Impl {
    fn SetExperimentalFlag(this: &Self::This, bstrflagstring: &::windows_core::BSTR, vfflag: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn GetExperimentalFlag(this: &Self::This, bstrflagstring: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetExperimentalValue(this: &Self::This, bstrvaluestring: &::windows_core::BSTR, dwvalue: u32) -> ::windows_core::Result<()>;
    fn GetExperimentalValue(this: &Self::This, bstrvaluestring: &::windows_core::BSTR) -> ::windows_core::Result<u32>;
    fn ResetAllExperimentalFlagsAndValues(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNeedIEAutoLaunchFlag(this: &Self::This, bstrurl: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetNeedIEAutoLaunchFlag(this: &Self::This, bstrurl: &::windows_core::BSTR, flag: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn HasNeedIEAutoLaunchFlag(this: &Self::This, bstrurl: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn LaunchIE(this: &Self::This, bstrurl: &::windows_core::BSTR, automated: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper7 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper6);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper7 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetExperimentalFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrflagstring: ::std::mem::MaybeUninit<::windows_core::BSTR>, vfflag: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExperimentalFlag(this, ::core::mem::transmute(&bstrflagstring), ::core::mem::transmute_copy(&vfflag)).into())
        }
        unsafe extern "system" fn GetExperimentalFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrflagstring: ::std::mem::MaybeUninit<::windows_core::BSTR>, vfflag: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExperimentalFlag(this, ::core::mem::transmute(&bstrflagstring)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(vfflag, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExperimentalValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrvaluestring: ::std::mem::MaybeUninit<::windows_core::BSTR>, dwvalue: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExperimentalValue(this, ::core::mem::transmute(&bstrvaluestring), ::core::mem::transmute_copy(&dwvalue)).into())
        }
        unsafe extern "system" fn GetExperimentalValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrvaluestring: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdwvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExperimentalValue(this, ::core::mem::transmute(&bstrvaluestring)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResetAllExperimentalFlagsAndValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetAllExperimentalFlagsAndValues(this).into())
        }
        unsafe extern "system" fn GetNeedIEAutoLaunchFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, flag: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNeedIEAutoLaunchFlag(this, ::core::mem::transmute(&bstrurl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flag, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNeedIEAutoLaunchFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, flag: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNeedIEAutoLaunchFlag(this, ::core::mem::transmute(&bstrurl), ::core::mem::transmute_copy(&flag)).into())
        }
        unsafe extern "system" fn HasNeedIEAutoLaunchFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, exists: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HasNeedIEAutoLaunchFlag(this, ::core::mem::transmute(&bstrurl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(exists, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LaunchIE<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, automated: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchIE(this, ::core::mem::transmute(&bstrurl), ::core::mem::transmute_copy(&automated)).into())
        }
        IShellUIHelper7_Vtbl {
            base__: <IShellUIHelper6 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetExperimentalFlag: SetExperimentalFlag::<Identity, Impl, OFFSET>,
            GetExperimentalFlag: GetExperimentalFlag::<Identity, Impl, OFFSET>,
            SetExperimentalValue: SetExperimentalValue::<Identity, Impl, OFFSET>,
            GetExperimentalValue: GetExperimentalValue::<Identity, Impl, OFFSET>,
            ResetAllExperimentalFlagsAndValues: ResetAllExperimentalFlagsAndValues::<Identity, Impl, OFFSET>,
            GetNeedIEAutoLaunchFlag: GetNeedIEAutoLaunchFlag::<Identity, Impl, OFFSET>,
            SetNeedIEAutoLaunchFlag: SetNeedIEAutoLaunchFlag::<Identity, Impl, OFFSET>,
            HasNeedIEAutoLaunchFlag: HasNeedIEAutoLaunchFlag::<Identity, Impl, OFFSET>,
            LaunchIE: LaunchIE::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper8_Impl: ::windows_core::BaseImpl + IShellUIHelper7_Impl {
    fn GetCVListData(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCVListLocalData(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetEMIEListData(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetEMIEListLocalData(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn OpenFavoritesPane(this: &Self::This) -> ::windows_core::Result<()>;
    fn OpenFavoritesSettings(this: &Self::This) -> ::windows_core::Result<()>;
    fn LaunchInHVSI(this: &Self::This, bstrurl: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper8 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper7);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper8 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCVListData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCVListData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCVListLocalData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCVListLocalData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEMIEListData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEMIEListData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEMIEListLocalData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrresult: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEMIEListLocalData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OpenFavoritesPane<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenFavoritesPane(this).into())
        }
        unsafe extern "system" fn OpenFavoritesSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenFavoritesSettings(this).into())
        }
        unsafe extern "system" fn LaunchInHVSI<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchInHVSI(this, ::core::mem::transmute(&bstrurl)).into())
        }
        IShellUIHelper8_Vtbl {
            base__: <IShellUIHelper7 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCVListData: GetCVListData::<Identity, Impl, OFFSET>,
            GetCVListLocalData: GetCVListLocalData::<Identity, Impl, OFFSET>,
            GetEMIEListData: GetEMIEListData::<Identity, Impl, OFFSET>,
            GetEMIEListLocalData: GetEMIEListLocalData::<Identity, Impl, OFFSET>,
            OpenFavoritesPane: OpenFavoritesPane::<Identity, Impl, OFFSET>,
            OpenFavoritesSettings: OpenFavoritesSettings::<Identity, Impl, OFFSET>,
            LaunchInHVSI: LaunchInHVSI::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellUIHelper9_Impl: ::windows_core::BaseImpl + IShellUIHelper8_Impl {
    fn GetOSSku(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellUIHelper9 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellUIHelper8);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper9_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellUIHelper9 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOSSku<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellUIHelper9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwresult: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOSSku(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellUIHelper9_Vtbl { base__: <IShellUIHelper8 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetOSSku: GetOSSku::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellView_Impl: ::windows_core::BaseImpl + super::super::System::Ole::IOleWindow_Impl {
    fn TranslateAccelerator(this: &Self::This, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::Result<()>;
    fn EnableModeless(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn UIActivate(this: &Self::This, ustate: u32) -> ::windows_core::Result<()>;
    fn Refresh(this: &Self::This) -> ::windows_core::Result<()>;
    fn CreateViewWindow(this: &Self::This, psvprevious: ::core::option::Option<&IShellView>, pfs: *const FOLDERSETTINGS, psb: ::core::option::Option<&IShellBrowser>, prcview: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn DestroyViewWindow(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCurrentInfo(this: &Self::This) -> ::windows_core::Result<FOLDERSETTINGS>;
    fn AddPropertySheetPages(this: &Self::This, dwreserved: u32, pfn: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::Result<()>;
    fn SaveViewState(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectItem(this: &Self::This, pidlitem: *const Common::ITEMIDLIST, uflags: u32) -> ::windows_core::Result<()>;
    fn GetItemObject(this: &Self::This, uitem: &_SVGIO, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellView {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Ole::IOleWindow);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellView {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TranslateAccelerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsg: *const super::WindowsAndMessaging::MSG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateAccelerator(this, ::core::mem::transmute_copy(&pmsg)).into())
        }
        unsafe extern "system" fn EnableModeless<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableModeless(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn UIActivate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ustate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UIActivate(this, ::core::mem::transmute_copy(&ustate)).into())
        }
        unsafe extern "system" fn Refresh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Refresh(this).into())
        }
        unsafe extern "system" fn CreateViewWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psvprevious: *mut ::core::ffi::c_void, pfs: *const FOLDERSETTINGS, psb: *mut ::core::ffi::c_void, prcview: *const super::super::Foundation::RECT, phwnd: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateViewWindow(this, ::windows_core::from_raw_borrowed(&psvprevious), ::core::mem::transmute_copy(&pfs), ::windows_core::from_raw_borrowed(&psb), ::core::mem::transmute_copy(&prcview)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DestroyViewWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DestroyViewWindow(this).into())
        }
        unsafe extern "system" fn GetCurrentInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfs: *mut FOLDERSETTINGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddPropertySheetPages<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreserved: u32, pfn: super::Controls::LPFNSVADDPROPSHEETPAGE, lparam: super::super::Foundation::LPARAM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPropertySheetPages(this, ::core::mem::transmute_copy(&dwreserved), ::core::mem::transmute_copy(&pfn), ::core::mem::transmute_copy(&lparam)).into())
        }
        unsafe extern "system" fn SaveViewState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveViewState(this).into())
        }
        unsafe extern "system" fn SelectItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, uflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectItem(this, ::core::mem::transmute_copy(&pidlitem), ::core::mem::transmute_copy(&uflags)).into())
        }
        unsafe extern "system" fn GetItemObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uitem: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItemObject(this, ::core::mem::transmute(&uitem), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IShellView_Vtbl {
            base__: <super::super::System::Ole::IOleWindow as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TranslateAccelerator: TranslateAccelerator::<Identity, Impl, OFFSET>,
            EnableModeless: EnableModeless::<Identity, Impl, OFFSET>,
            UIActivate: UIActivate::<Identity, Impl, OFFSET>,
            Refresh: Refresh::<Identity, Impl, OFFSET>,
            CreateViewWindow: CreateViewWindow::<Identity, Impl, OFFSET>,
            DestroyViewWindow: DestroyViewWindow::<Identity, Impl, OFFSET>,
            GetCurrentInfo: GetCurrentInfo::<Identity, Impl, OFFSET>,
            AddPropertySheetPages: AddPropertySheetPages::<Identity, Impl, OFFSET>,
            SaveViewState: SaveViewState::<Identity, Impl, OFFSET>,
            SelectItem: SelectItem::<Identity, Impl, OFFSET>,
            GetItemObject: GetItemObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellView2_Impl: ::windows_core::BaseImpl + IShellView_Impl {
    fn GetView(this: &Self::This, pvid: *mut ::windows_core::GUID, uview: u32) -> ::windows_core::Result<()>;
    fn CreateViewWindow2(this: &Self::This, lpparams: *const SV2CVW2_PARAMS) -> ::windows_core::Result<()>;
    fn HandleRename(this: &Self::This, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::Result<()>;
    fn SelectAndPositionItem(this: &Self::This, pidlitem: *const Common::ITEMIDLIST, uflags: u32, ppt: *const super::super::Foundation::POINT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellView2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellView);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellView2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvid: *mut ::windows_core::GUID, uview: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetView(this, ::core::mem::transmute_copy(&pvid), ::core::mem::transmute_copy(&uview)).into())
        }
        unsafe extern "system" fn CreateViewWindow2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpparams: *const SV2CVW2_PARAMS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateViewWindow2(this, ::core::mem::transmute_copy(&lpparams)).into())
        }
        unsafe extern "system" fn HandleRename<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlnew: *const Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HandleRename(this, ::core::mem::transmute_copy(&pidlnew)).into())
        }
        unsafe extern "system" fn SelectAndPositionItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlitem: *const Common::ITEMIDLIST, uflags: u32, ppt: *const super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectAndPositionItem(this, ::core::mem::transmute_copy(&pidlitem), ::core::mem::transmute_copy(&uflags), ::core::mem::transmute_copy(&ppt)).into())
        }
        IShellView2_Vtbl {
            base__: <IShellView as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetView: GetView::<Identity, Impl, OFFSET>,
            CreateViewWindow2: CreateViewWindow2::<Identity, Impl, OFFSET>,
            HandleRename: HandleRename::<Identity, Impl, OFFSET>,
            SelectAndPositionItem: SelectAndPositionItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Ole\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait IShellView3_Impl: ::windows_core::BaseImpl + IShellView2_Impl {
    fn CreateViewWindow3(this: &Self::This, psbowner: ::core::option::Option<&IShellBrowser>, psvprev: ::core::option::Option<&IShellView>, dwviewflags: u32, dwmask: FOLDERFLAGS, dwflags: FOLDERFLAGS, fvmode: FOLDERVIEWMODE, pvid: *const ::windows_core::GUID, prcview: *const super::super::Foundation::RECT) -> ::windows_core::Result<super::super::Foundation::HWND>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for IShellView3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellView2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Ole", feature = "Win32_UI_Controls", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellView3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateViewWindow3<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellView3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psbowner: *mut ::core::ffi::c_void, psvprev: *mut ::core::ffi::c_void, dwviewflags: u32, dwmask: FOLDERFLAGS, dwflags: FOLDERFLAGS, fvmode: FOLDERVIEWMODE, pvid: *const ::windows_core::GUID, prcview: *const super::super::Foundation::RECT, phwndview: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateViewWindow3(this, ::windows_core::from_raw_borrowed(&psbowner), ::windows_core::from_raw_borrowed(&psvprev), ::core::mem::transmute_copy(&dwviewflags), ::core::mem::transmute_copy(&dwmask), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&fvmode), ::core::mem::transmute_copy(&pvid), ::core::mem::transmute_copy(&prcview)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwndview, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IShellView3_Vtbl { base__: <IShellView2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateViewWindow3: CreateViewWindow3::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IShellWindows_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Item(this: &Self::This, index: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Register(this: &Self::This, pid: ::core::option::Option<&super::super::System::Com::IDispatch>, hwnd: i32, swclass: ShellWindowTypeConstants) -> ::windows_core::Result<i32>;
    fn RegisterPending(this: &Self::This, lthreadid: i32, pvarloc: *const super::super::System::Variant::VARIANT, pvarlocroot: *const super::super::System::Variant::VARIANT, swclass: ShellWindowTypeConstants) -> ::windows_core::Result<i32>;
    fn Revoke(this: &Self::This, lcookie: i32) -> ::windows_core::Result<()>;
    fn OnNavigate(this: &Self::This, lcookie: i32, pvarloc: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn OnActivated(this: &Self::This, lcookie: i32, factive: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn FindWindowSW(this: &Self::This, pvarloc: *const super::super::System::Variant::VARIANT, pvarlocroot: *const super::super::System::Variant::VARIANT, swclass: ShellWindowTypeConstants, phwnd: *mut i32, swfwoptions: ShellWindowFindWindowOptions, ppdispout: *mut ::core::option::Option<super::super::System::Com::IDispatch>) -> ::windows_core::Result<()>;
    fn OnCreated(this: &Self::This, lcookie: i32, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn ProcessAttachDetach(this: &Self::This, fattach: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IShellWindows {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IShellWindows {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::System::Variant::VARIANT, folder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Item(this, ::core::mem::transmute(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(folder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Register<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: *mut ::core::ffi::c_void, hwnd: i32, swclass: ShellWindowTypeConstants, plcookie: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Register(this, ::windows_core::from_raw_borrowed(&pid), ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&swclass)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterPending<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lthreadid: i32, pvarloc: *const super::super::System::Variant::VARIANT, pvarlocroot: *const super::super::System::Variant::VARIANT, swclass: ShellWindowTypeConstants, plcookie: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RegisterPending(this, ::core::mem::transmute_copy(&lthreadid), ::core::mem::transmute_copy(&pvarloc), ::core::mem::transmute_copy(&pvarlocroot), ::core::mem::transmute_copy(&swclass)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Revoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcookie: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Revoke(this, ::core::mem::transmute_copy(&lcookie)).into())
        }
        unsafe extern "system" fn OnNavigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcookie: i32, pvarloc: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnNavigate(this, ::core::mem::transmute_copy(&lcookie), ::core::mem::transmute_copy(&pvarloc)).into())
        }
        unsafe extern "system" fn OnActivated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcookie: i32, factive: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnActivated(this, ::core::mem::transmute_copy(&lcookie), ::core::mem::transmute_copy(&factive)).into())
        }
        unsafe extern "system" fn FindWindowSW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarloc: *const super::super::System::Variant::VARIANT, pvarlocroot: *const super::super::System::Variant::VARIANT, swclass: ShellWindowTypeConstants, phwnd: *mut i32, swfwoptions: ShellWindowFindWindowOptions, ppdispout: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindWindowSW(this, ::core::mem::transmute_copy(&pvarloc), ::core::mem::transmute_copy(&pvarlocroot), ::core::mem::transmute_copy(&swclass), ::core::mem::transmute_copy(&phwnd), ::core::mem::transmute_copy(&swfwoptions), ::core::mem::transmute_copy(&ppdispout)).into())
        }
        unsafe extern "system" fn OnCreated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcookie: i32, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnCreated(this, ::core::mem::transmute_copy(&lcookie), ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn ProcessAttachDetach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IShellWindows_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fattach: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessAttachDetach(this, ::core::mem::transmute_copy(&fattach)).into())
        }
        IShellWindows_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            Item: Item::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Register: Register::<Identity, Impl, OFFSET>,
            RegisterPending: RegisterPending::<Identity, Impl, OFFSET>,
            Revoke: Revoke::<Identity, Impl, OFFSET>,
            OnNavigate: OnNavigate::<Identity, Impl, OFFSET>,
            OnActivated: OnActivated::<Identity, Impl, OFFSET>,
            FindWindowSW: FindWindowSW::<Identity, Impl, OFFSET>,
            OnCreated: OnCreated::<Identity, Impl, OFFSET>,
            ProcessAttachDetach: ProcessAttachDetach::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait ISortColumnArray_Impl: ::windows_core::BaseImpl {
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetAt(this: &Self::This, index: u32, sortcolumn: *mut SORTCOLUMN) -> ::windows_core::Result<()>;
    fn GetSortType(this: &Self::This) -> ::windows_core::Result<SORT_ORDER_TYPE>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for ISortColumnArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISortColumnArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISortColumnArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISortColumnArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columncount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columncount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISortColumnArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, sortcolumn: *mut SORTCOLUMN) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAt(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&sortcolumn)).into())
        }
        unsafe extern "system" fn GetSortType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISortColumnArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut SORT_ORDER_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSortType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISortColumnArray_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetAt: GetAt::<Identity, Impl, OFFSET>,
            GetSortType: GetSortType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStartMenuPinnedList_Impl: ::windows_core::BaseImpl {
    fn RemoveFromList(this: &Self::This, pitem: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStartMenuPinnedList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStartMenuPinnedList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStartMenuPinnedList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RemoveFromList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStartMenuPinnedList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFromList(this, ::windows_core::from_raw_borrowed(&pitem)).into())
        }
        IStartMenuPinnedList_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, RemoveFromList: RemoveFromList::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStorageProviderBanners_Impl: ::windows_core::BaseImpl {
    fn SetBanner(this: &Self::This, provideridentity: &::windows_core::PCWSTR, subscriptionid: &::windows_core::PCWSTR, contentid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ClearBanner(this: &Self::This, provideridentity: &::windows_core::PCWSTR, subscriptionid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ClearAllBanners(this: &Self::This, provideridentity: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetBanner(this: &Self::This, provideridentity: &::windows_core::PCWSTR, subscriptionid: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IStorageProviderBanners {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderBanners_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStorageProviderBanners {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBanner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderBanners_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provideridentity: ::windows_core::PCWSTR, subscriptionid: ::windows_core::PCWSTR, contentid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBanner(this, ::core::mem::transmute(&provideridentity), ::core::mem::transmute(&subscriptionid), ::core::mem::transmute(&contentid)).into())
        }
        unsafe extern "system" fn ClearBanner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderBanners_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provideridentity: ::windows_core::PCWSTR, subscriptionid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearBanner(this, ::core::mem::transmute(&provideridentity), ::core::mem::transmute(&subscriptionid)).into())
        }
        unsafe extern "system" fn ClearAllBanners<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderBanners_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provideridentity: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearAllBanners(this, ::core::mem::transmute(&provideridentity)).into())
        }
        unsafe extern "system" fn GetBanner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderBanners_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provideridentity: ::windows_core::PCWSTR, subscriptionid: ::windows_core::PCWSTR, contentid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBanner(this, ::core::mem::transmute(&provideridentity), ::core::mem::transmute(&subscriptionid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(contentid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStorageProviderBanners_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBanner: SetBanner::<Identity, Impl, OFFSET>,
            ClearBanner: ClearBanner::<Identity, Impl, OFFSET>,
            ClearAllBanners: ClearAllBanners::<Identity, Impl, OFFSET>,
            GetBanner: GetBanner::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IStorageProviderCopyHook_Impl: ::windows_core::BaseImpl {
    fn CopyCallback(this: &Self::This, hwnd: super::super::Foundation::HWND, operation: u32, flags: u32, srcfile: &::windows_core::PCWSTR, srcattribs: u32, destfile: &::windows_core::PCWSTR, destattribs: u32) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IStorageProviderCopyHook {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderCopyHook_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStorageProviderCopyHook {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CopyCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderCopyHook_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, operation: u32, flags: u32, srcfile: ::windows_core::PCWSTR, srcattribs: u32, destfile: ::windows_core::PCWSTR, destattribs: u32, result: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CopyCallback(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&operation), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&srcfile), ::core::mem::transmute_copy(&srcattribs), ::core::mem::transmute(&destfile), ::core::mem::transmute_copy(&destattribs)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStorageProviderCopyHook_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CopyCallback: CopyCallback::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStorageProviderHandler_Impl: ::windows_core::BaseImpl {
    fn GetPropertyHandlerFromPath(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<IStorageProviderPropertyHandler>;
    fn GetPropertyHandlerFromUri(this: &Self::This, uri: &::windows_core::PCWSTR) -> ::windows_core::Result<IStorageProviderPropertyHandler>;
    fn GetPropertyHandlerFromFileId(this: &Self::This, fileid: &::windows_core::PCWSTR) -> ::windows_core::Result<IStorageProviderPropertyHandler>;
}
impl ::windows_core::Iids for IStorageProviderHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStorageProviderHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPropertyHandlerFromPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, propertyhandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPropertyHandlerFromPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(propertyhandler, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPropertyHandlerFromUri<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uri: ::windows_core::PCWSTR, propertyhandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPropertyHandlerFromUri(this, ::core::mem::transmute(&uri)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(propertyhandler, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPropertyHandlerFromFileId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fileid: ::windows_core::PCWSTR, propertyhandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPropertyHandlerFromFileId(this, ::core::mem::transmute(&fileid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(propertyhandler, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStorageProviderHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPropertyHandlerFromPath: GetPropertyHandlerFromPath::<Identity, Impl, OFFSET>,
            GetPropertyHandlerFromUri: GetPropertyHandlerFromUri::<Identity, Impl, OFFSET>,
            GetPropertyHandlerFromFileId: GetPropertyHandlerFromFileId::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IStorageProviderPropertyHandler_Impl: ::windows_core::BaseImpl {
    fn RetrieveProperties(this: &Self::This, propertiestoretrieve: *const PropertiesSystem::PROPERTYKEY, propertiestoretrievecount: u32) -> ::windows_core::Result<PropertiesSystem::IPropertyStore>;
    fn SaveProperties(this: &Self::This, propertiestosave: ::core::option::Option<&PropertiesSystem::IPropertyStore>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IStorageProviderPropertyHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderPropertyHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStorageProviderPropertyHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RetrieveProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderPropertyHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propertiestoretrieve: *const PropertiesSystem::PROPERTYKEY, propertiestoretrievecount: u32, retrievedproperties: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RetrieveProperties(this, ::core::mem::transmute_copy(&propertiestoretrieve), ::core::mem::transmute_copy(&propertiestoretrievecount)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(retrievedproperties, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SaveProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStorageProviderPropertyHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propertiestosave: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveProperties(this, ::windows_core::from_raw_borrowed(&propertiestosave)).into())
        }
        IStorageProviderPropertyHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RetrieveProperties: RetrieveProperties::<Identity, Impl, OFFSET>,
            SaveProperties: SaveProperties::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_IO\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_IO"))]
pub trait IStreamAsync_Impl: ::windows_core::BaseImpl + super::super::System::Com::IStream_Impl {
    fn ReadAsync(this: &Self::This, pv: *mut ::core::ffi::c_void, cb: u32, pcbread: *mut u32, lpoverlapped: *const super::super::System::IO::OVERLAPPED) -> ::windows_core::Result<()>;
    fn WriteAsync(this: &Self::This, lpbuffer: *const ::core::ffi::c_void, cb: u32, pcbwritten: *mut u32, lpoverlapped: *const super::super::System::IO::OVERLAPPED) -> ::windows_core::Result<()>;
    fn OverlappedResult(this: &Self::This, lpoverlapped: *const super::super::System::IO::OVERLAPPED, lpnumberofbytestransferred: *mut u32, bwait: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CancelIo(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_IO"))]
impl ::windows_core::Iids for IStreamAsync {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IStream);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_IO"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamAsync_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamAsync {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadAsync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamAsync_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pv: *mut ::core::ffi::c_void, cb: u32, pcbread: *mut u32, lpoverlapped: *const super::super::System::IO::OVERLAPPED) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadAsync(this, ::core::mem::transmute_copy(&pv), ::core::mem::transmute_copy(&cb), ::core::mem::transmute_copy(&pcbread), ::core::mem::transmute_copy(&lpoverlapped)).into())
        }
        unsafe extern "system" fn WriteAsync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamAsync_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpbuffer: *const ::core::ffi::c_void, cb: u32, pcbwritten: *mut u32, lpoverlapped: *const super::super::System::IO::OVERLAPPED) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteAsync(this, ::core::mem::transmute_copy(&lpbuffer), ::core::mem::transmute_copy(&cb), ::core::mem::transmute_copy(&pcbwritten), ::core::mem::transmute_copy(&lpoverlapped)).into())
        }
        unsafe extern "system" fn OverlappedResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamAsync_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpoverlapped: *const super::super::System::IO::OVERLAPPED, lpnumberofbytestransferred: *mut u32, bwait: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OverlappedResult(this, ::core::mem::transmute_copy(&lpoverlapped), ::core::mem::transmute_copy(&lpnumberofbytestransferred), ::core::mem::transmute_copy(&bwait)).into())
        }
        unsafe extern "system" fn CancelIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamAsync_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelIo(this).into())
        }
        IStreamAsync_Vtbl {
            base__: <super::super::System::Com::IStream as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadAsync: ReadAsync::<Identity, Impl, OFFSET>,
            WriteAsync: WriteAsync::<Identity, Impl, OFFSET>,
            OverlappedResult: OverlappedResult::<Identity, Impl, OFFSET>,
            CancelIo: CancelIo::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamUnbufferedInfo_Impl: ::windows_core::BaseImpl {
    fn GetSectorSize(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IStreamUnbufferedInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamUnbufferedInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamUnbufferedInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSectorSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamUnbufferedInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbsectorsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSectorSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbsectorsize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStreamUnbufferedInfo_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetSectorSize: GetSectorSize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISuspensionDependencyManager_Impl: ::windows_core::BaseImpl {
    fn RegisterAsChild(this: &Self::This, processhandle: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GroupChildWithParent(this: &Self::This, childprocesshandle: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn UngroupChildFromParent(this: &Self::This, childprocesshandle: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISuspensionDependencyManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISuspensionDependencyManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISuspensionDependencyManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterAsChild<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISuspensionDependencyManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processhandle: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterAsChild(this, ::core::mem::transmute_copy(&processhandle)).into())
        }
        unsafe extern "system" fn GroupChildWithParent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISuspensionDependencyManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, childprocesshandle: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GroupChildWithParent(this, ::core::mem::transmute_copy(&childprocesshandle)).into())
        }
        unsafe extern "system" fn UngroupChildFromParent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISuspensionDependencyManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, childprocesshandle: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UngroupChildFromParent(this, ::core::mem::transmute_copy(&childprocesshandle)).into())
        }
        ISuspensionDependencyManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterAsChild: RegisterAsChild::<Identity, Impl, OFFSET>,
            GroupChildWithParent: GroupChildWithParent::<Identity, Impl, OFFSET>,
            UngroupChildFromParent: UngroupChildFromParent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait ISyncMgrConflict_Impl: ::windows_core::BaseImpl {
    fn GetProperty(this: &Self::This, propkey: *const PropertiesSystem::PROPERTYKEY) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetConflictIdInfo(this: &Self::This) -> ::windows_core::Result<SYNCMGR_CONFLICT_ID_INFO>;
    fn GetItemsArray(this: &Self::This) -> ::windows_core::Result<ISyncMgrConflictItems>;
    fn Resolve(this: &Self::This, presolveinfo: ::core::option::Option<&ISyncMgrConflictResolveInfo>) -> ::windows_core::Result<()>;
    fn GetResolutionHandler(this: &Self::This, riid: *const ::windows_core::GUID, ppvresolutionhandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for ISyncMgrConflict {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflict_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflict {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propkey: *const PropertiesSystem::PROPERTYKEY, ppropvar: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperty(this, ::core::mem::transmute_copy(&propkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropvar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConflictIdInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconflictidinfo: *mut SYNCMGR_CONFLICT_ID_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConflictIdInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pconflictidinfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemsArray<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparray: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemsArray(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pparray, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Resolve<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presolveinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resolve(this, ::windows_core::from_raw_borrowed(&presolveinfo)).into())
        }
        unsafe extern "system" fn GetResolutionHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflict_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvresolutionhandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetResolutionHandler(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvresolutionhandler)).into())
        }
        ISyncMgrConflict_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProperty: GetProperty::<Identity, Impl, OFFSET>,
            GetConflictIdInfo: GetConflictIdInfo::<Identity, Impl, OFFSET>,
            GetItemsArray: GetItemsArray::<Identity, Impl, OFFSET>,
            Resolve: Resolve::<Identity, Impl, OFFSET>,
            GetResolutionHandler: GetResolutionHandler::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait ISyncMgrConflictFolder_Impl: ::windows_core::BaseImpl {
    fn GetConflictIDList(this: &Self::This, pconflict: ::core::option::Option<&ISyncMgrConflict>) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for ISyncMgrConflictFolder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictFolder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflictFolder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetConflictIDList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictFolder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconflict: *mut ::core::ffi::c_void, ppidlconflict: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConflictIDList(this, ::windows_core::from_raw_borrowed(&pconflict)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidlconflict, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrConflictFolder_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetConflictIDList: GetConflictIDList::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrConflictItems_Impl: ::windows_core::BaseImpl {
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetItem(this: &Self::This, iindex: u32, piteminfo: *mut CONFIRM_CONFLICT_ITEM) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISyncMgrConflictItems {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictItems_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflictItems {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iindex: u32, piteminfo: *mut CONFIRM_CONFLICT_ITEM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItem(this, ::core::mem::transmute_copy(&iindex), ::core::mem::transmute_copy(&piteminfo)).into())
        }
        ISyncMgrConflictItems_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetItem: GetItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrConflictPresenter_Impl: ::windows_core::BaseImpl {
    fn PresentConflict(this: &Self::This, pconflict: ::core::option::Option<&ISyncMgrConflict>, presolveinfo: ::core::option::Option<&ISyncMgrConflictResolveInfo>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISyncMgrConflictPresenter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictPresenter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflictPresenter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PresentConflict<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictPresenter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconflict: *mut ::core::ffi::c_void, presolveinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PresentConflict(this, ::windows_core::from_raw_borrowed(&pconflict), ::windows_core::from_raw_borrowed(&presolveinfo)).into())
        }
        ISyncMgrConflictPresenter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PresentConflict: PresentConflict::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrConflictResolutionItems_Impl: ::windows_core::BaseImpl {
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetItem(this: &Self::This, iindex: u32) -> ::windows_core::Result<CONFIRM_CONFLICT_RESULT_INFO>;
}
impl ::windows_core::Iids for ISyncMgrConflictResolutionItems {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolutionItems_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflictResolutionItems {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolutionItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolutionItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iindex: u32, piteminfo: *mut CONFIRM_CONFLICT_RESULT_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItem(this, ::core::mem::transmute_copy(&iindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(piteminfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrConflictResolutionItems_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetItem: GetItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrConflictResolveInfo_Impl: ::windows_core::BaseImpl {
    fn GetIterationInfo(this: &Self::This, pncurrentconflict: *mut u32, pcconflicts: *mut u32, pcremainingforapplytoall: *mut u32) -> ::windows_core::Result<()>;
    fn GetPresenterNextStep(this: &Self::This) -> ::windows_core::Result<SYNCMGR_PRESENTER_NEXT_STEP>;
    fn GetPresenterChoice(this: &Self::This, pnpresenterchoice: *mut SYNCMGR_PRESENTER_CHOICE, pfapplytoall: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetItemChoiceCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetItemChoice(this: &Self::This, ichoice: u32) -> ::windows_core::Result<u32>;
    fn SetPresenterNextStep(this: &Self::This, npresenternextstep: SYNCMGR_PRESENTER_NEXT_STEP) -> ::windows_core::Result<()>;
    fn SetPresenterChoice(this: &Self::This, npresenterchoice: SYNCMGR_PRESENTER_CHOICE, fapplytoall: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetItemChoices(this: &Self::This, prgiconflictitemindexes: *mut u32, cchoices: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrConflictResolveInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflictResolveInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIterationInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pncurrentconflict: *mut u32, pcconflicts: *mut u32, pcremainingforapplytoall: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIterationInfo(this, ::core::mem::transmute_copy(&pncurrentconflict), ::core::mem::transmute_copy(&pcconflicts), ::core::mem::transmute_copy(&pcremainingforapplytoall)).into())
        }
        unsafe extern "system" fn GetPresenterNextStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnpresenternextstep: *mut SYNCMGR_PRESENTER_NEXT_STEP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPresenterNextStep(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnpresenternextstep, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPresenterChoice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnpresenterchoice: *mut SYNCMGR_PRESENTER_CHOICE, pfapplytoall: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPresenterChoice(this, ::core::mem::transmute_copy(&pnpresenterchoice), ::core::mem::transmute_copy(&pfapplytoall)).into())
        }
        unsafe extern "system" fn GetItemChoiceCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcchoices: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemChoiceCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcchoices, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemChoice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ichoice: u32, pichoiceindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemChoice(this, ::core::mem::transmute_copy(&ichoice)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pichoiceindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPresenterNextStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, npresenternextstep: SYNCMGR_PRESENTER_NEXT_STEP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPresenterNextStep(this, ::core::mem::transmute_copy(&npresenternextstep)).into())
        }
        unsafe extern "system" fn SetPresenterChoice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, npresenterchoice: SYNCMGR_PRESENTER_CHOICE, fapplytoall: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPresenterChoice(this, ::core::mem::transmute_copy(&npresenterchoice), ::core::mem::transmute_copy(&fapplytoall)).into())
        }
        unsafe extern "system" fn SetItemChoices<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictResolveInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prgiconflictitemindexes: *mut u32, cchoices: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemChoices(this, ::core::mem::transmute_copy(&prgiconflictitemindexes), ::core::mem::transmute_copy(&cchoices)).into())
        }
        ISyncMgrConflictResolveInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetIterationInfo: GetIterationInfo::<Identity, Impl, OFFSET>,
            GetPresenterNextStep: GetPresenterNextStep::<Identity, Impl, OFFSET>,
            GetPresenterChoice: GetPresenterChoice::<Identity, Impl, OFFSET>,
            GetItemChoiceCount: GetItemChoiceCount::<Identity, Impl, OFFSET>,
            GetItemChoice: GetItemChoice::<Identity, Impl, OFFSET>,
            SetPresenterNextStep: SetPresenterNextStep::<Identity, Impl, OFFSET>,
            SetPresenterChoice: SetPresenterChoice::<Identity, Impl, OFFSET>,
            SetItemChoices: SetItemChoices::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ISyncMgrConflictStore_Impl: ::windows_core::BaseImpl {
    fn EnumConflicts(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR) -> ::windows_core::Result<IEnumSyncMgrConflict>;
    fn BindToConflict(this: &Self::This, pconflictidinfo: *const SYNCMGR_CONFLICT_ID_INFO, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn RemoveConflicts(this: &Self::This, rgconflictidinfo: *const SYNCMGR_CONFLICT_ID_INFO, cconflicts: u32) -> ::windows_core::Result<()>;
    fn GetCount(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ISyncMgrConflictStore {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictStore_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrConflictStore {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnumConflicts<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumConflicts(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BindToConflict<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconflictidinfo: *const SYNCMGR_CONFLICT_ID_INFO, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindToConflict(this, ::core::mem::transmute_copy(&pconflictidinfo), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn RemoveConflicts<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rgconflictidinfo: *const SYNCMGR_CONFLICT_ID_INFO, cconflicts: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveConflicts(this, ::core::mem::transmute_copy(&rgconflictidinfo), ::core::mem::transmute_copy(&cconflicts)).into())
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrConflictStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, pnconflicts: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnconflicts, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrConflictStore_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnumConflicts: EnumConflicts::<Identity, Impl, OFFSET>,
            BindToConflict: BindToConflict::<Identity, Impl, OFFSET>,
            RemoveConflicts: RemoveConflicts::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrControl_Impl: ::windows_core::BaseImpl {
    fn StartHandlerSync(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, punk: ::core::option::Option<&::windows_core::IUnknown>, nsynccontrolflags: SYNCMGR_SYNC_CONTROL_FLAGS, presult: ::core::option::Option<&ISyncMgrSyncResult>) -> ::windows_core::Result<()>;
    fn StartItemSync(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, ppszitemids: *const ::windows_core::PCWSTR, citems: u32, hwndowner: super::super::Foundation::HWND, punk: ::core::option::Option<&::windows_core::IUnknown>, nsynccontrolflags: SYNCMGR_SYNC_CONTROL_FLAGS, presult: ::core::option::Option<&ISyncMgrSyncResult>) -> ::windows_core::Result<()>;
    fn StartSyncAll(this: &Self::This, hwndowner: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn StopHandlerSync(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StopItemSync(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, ppszitemids: *const ::windows_core::PCWSTR, citems: u32) -> ::windows_core::Result<()>;
    fn StopSyncAll(this: &Self::This) -> ::windows_core::Result<()>;
    fn UpdateHandlerCollection(this: &Self::This, rclsidcollectionid: *const ::windows_core::GUID, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn UpdateHandler(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn UpdateItem(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn UpdateEvents(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn UpdateConflict(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR, pconflict: ::core::option::Option<&ISyncMgrConflict>, nreason: SYNCMGR_UPDATE_REASON) -> ::windows_core::Result<()>;
    fn UpdateConflicts(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn ActivateHandler(this: &Self::This, factivate: super::super::Foundation::BOOL, pszhandlerid: &::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn EnableHandler(this: &Self::This, fenable: super::super::Foundation::BOOL, pszhandlerid: &::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
    fn EnableItem(this: &Self::This, fenable: super::super::Foundation::BOOL, pszhandlerid: &::windows_core::PCWSTR, pszitemid: &::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartHandlerSync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, punk: *mut ::core::ffi::c_void, nsynccontrolflags: SYNCMGR_SYNC_CONTROL_FLAGS, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartHandlerSync(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&hwndowner), ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&nsynccontrolflags), ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn StartItemSync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, ppszitemids: *const ::windows_core::PCWSTR, citems: u32, hwndowner: super::super::Foundation::HWND, punk: *mut ::core::ffi::c_void, nsynccontrolflags: SYNCMGR_SYNC_CONTROL_FLAGS, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartItemSync(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&ppszitemids), ::core::mem::transmute_copy(&citems), ::core::mem::transmute_copy(&hwndowner), ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&nsynccontrolflags), ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn StartSyncAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartSyncAll(this, ::core::mem::transmute_copy(&hwndowner)).into())
        }
        unsafe extern "system" fn StopHandlerSync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopHandlerSync(this, ::core::mem::transmute(&pszhandlerid)).into())
        }
        unsafe extern "system" fn StopItemSync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, ppszitemids: *const ::windows_core::PCWSTR, citems: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopItemSync(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&ppszitemids), ::core::mem::transmute_copy(&citems)).into())
        }
        unsafe extern "system" fn StopSyncAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopSyncAll(this).into())
        }
        unsafe extern "system" fn UpdateHandlerCollection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rclsidcollectionid: *const ::windows_core::GUID, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateHandlerCollection(this, ::core::mem::transmute_copy(&rclsidcollectionid), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn UpdateHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateHandler(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn UpdateItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateItem(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn UpdateEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateEvents(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn UpdateConflict<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, pconflict: *mut ::core::ffi::c_void, nreason: SYNCMGR_UPDATE_REASON) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateConflict(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid), ::windows_core::from_raw_borrowed(&pconflict), ::core::mem::transmute_copy(&nreason)).into())
        }
        unsafe extern "system" fn UpdateConflicts<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateConflicts(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn ActivateHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL, pszhandlerid: ::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateHandler(this, ::core::mem::transmute_copy(&factivate), ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&hwndowner), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn EnableHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL, pszhandlerid: ::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableHandler(this, ::core::mem::transmute_copy(&fenable), ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&hwndowner), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        unsafe extern "system" fn EnableItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL, pszhandlerid: ::windows_core::PCWSTR, pszitemid: ::windows_core::PCWSTR, hwndowner: super::super::Foundation::HWND, ncontrolflags: SYNCMGR_CONTROL_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableItem(this, ::core::mem::transmute_copy(&fenable), ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute(&pszitemid), ::core::mem::transmute_copy(&hwndowner), ::core::mem::transmute_copy(&ncontrolflags)).into())
        }
        ISyncMgrControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartHandlerSync: StartHandlerSync::<Identity, Impl, OFFSET>,
            StartItemSync: StartItemSync::<Identity, Impl, OFFSET>,
            StartSyncAll: StartSyncAll::<Identity, Impl, OFFSET>,
            StopHandlerSync: StopHandlerSync::<Identity, Impl, OFFSET>,
            StopItemSync: StopItemSync::<Identity, Impl, OFFSET>,
            StopSyncAll: StopSyncAll::<Identity, Impl, OFFSET>,
            UpdateHandlerCollection: UpdateHandlerCollection::<Identity, Impl, OFFSET>,
            UpdateHandler: UpdateHandler::<Identity, Impl, OFFSET>,
            UpdateItem: UpdateItem::<Identity, Impl, OFFSET>,
            UpdateEvents: UpdateEvents::<Identity, Impl, OFFSET>,
            UpdateConflict: UpdateConflict::<Identity, Impl, OFFSET>,
            UpdateConflicts: UpdateConflicts::<Identity, Impl, OFFSET>,
            ActivateHandler: ActivateHandler::<Identity, Impl, OFFSET>,
            EnableHandler: EnableHandler::<Identity, Impl, OFFSET>,
            EnableItem: EnableItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait ISyncMgrEnumItems_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut SYNCMGRITEM, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<ISyncMgrEnumItems>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for ISyncMgrEnumItems {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEnumItems_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrEnumItems {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEnumItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut SYNCMGRITEM, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEnumItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEnumItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEnumItems_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrEnumItems_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrEvent_Impl: ::windows_core::BaseImpl {
    fn GetEventID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetHandlerID(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetItemID(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetLevel(this: &Self::This) -> ::windows_core::Result<SYNCMGR_EVENT_LEVEL>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<SYNCMGR_EVENT_FLAGS>;
    fn GetTime(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::FILETIME>;
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetDescription(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetLinkText(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetLinkReference(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetContext(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguideventid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguideventid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHandlerID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszhandlerid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHandlerID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszhandlerid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszitemid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszitemid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnlevel: *mut SYNCMGR_EVENT_LEVEL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnlevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnflags: *mut SYNCMGR_EVENT_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcreationtime: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcreationtime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszdescription: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDescription(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszdescription, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLinkText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszlinktext: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLinkText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszlinktext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLinkReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszlinkreference: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLinkReference(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszlinkreference, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszcontext: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszcontext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrEvent_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEventID: GetEventID::<Identity, Impl, OFFSET>,
            GetHandlerID: GetHandlerID::<Identity, Impl, OFFSET>,
            GetItemID: GetItemID::<Identity, Impl, OFFSET>,
            GetLevel: GetLevel::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            GetTime: GetTime::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            GetLinkText: GetLinkText::<Identity, Impl, OFFSET>,
            GetLinkReference: GetLinkReference::<Identity, Impl, OFFSET>,
            GetContext: GetContext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrEventLinkUIOperation_Impl: ::windows_core::BaseImpl + ISyncMgrUIOperation_Impl {
    fn Init(this: &Self::This, rguideventid: *const ::windows_core::GUID, pevent: ::core::option::Option<&ISyncMgrEvent>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrEventLinkUIOperation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ISyncMgrUIOperation);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventLinkUIOperation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrEventLinkUIOperation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventLinkUIOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguideventid: *const ::windows_core::GUID, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Init(this, ::core::mem::transmute_copy(&rguideventid), ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        ISyncMgrEventLinkUIOperation_Vtbl { base__: <ISyncMgrUIOperation as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Init: Init::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrEventStore_Impl: ::windows_core::BaseImpl {
    fn GetEventEnumerator(this: &Self::This) -> ::windows_core::Result<IEnumSyncMgrEvents>;
    fn GetEventCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEvent(this: &Self::This, rguideventid: *const ::windows_core::GUID) -> ::windows_core::Result<ISyncMgrEvent>;
    fn RemoveEvent(this: &Self::This, pguideventids: *const ::windows_core::GUID, cevents: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISyncMgrEventStore {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventStore_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrEventStore {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventEnumerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventEnumerator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcevents: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcevents, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguideventid: *const ::windows_core::GUID, ppevent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEvent(this, ::core::mem::transmute_copy(&rguideventid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrEventStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguideventids: *const ::windows_core::GUID, cevents: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEvent(this, ::core::mem::transmute_copy(&pguideventids), ::core::mem::transmute_copy(&cevents)).into())
        }
        ISyncMgrEventStore_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEventEnumerator: GetEventEnumerator::<Identity, Impl, OFFSET>,
            GetEventCount: GetEventCount::<Identity, Impl, OFFSET>,
            GetEvent: GetEvent::<Identity, Impl, OFFSET>,
            RemoveEvent: RemoveEvent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrHandler_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetHandlerInfo(this: &Self::This) -> ::windows_core::Result<ISyncMgrHandlerInfo>;
    fn GetObject(this: &Self::This, rguidobjectid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetCapabilities(this: &Self::This) -> ::windows_core::Result<SYNCMGR_HANDLER_CAPABILITIES>;
    fn GetPolicies(this: &Self::This) -> ::windows_core::Result<SYNCMGR_HANDLER_POLICIES>;
    fn Activate(this: &Self::This, factivate: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Enable(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Synchronize(this: &Self::This, ppszitemids: *const ::windows_core::PCWSTR, citems: u32, hwndowner: super::super::Foundation::HWND, psessioncreator: ::core::option::Option<&ISyncMgrSessionCreator>, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHandlerInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pphandlerinfo: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHandlerInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pphandlerinfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidobjectid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetObject(this, ::core::mem::transmute_copy(&rguidobjectid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmcapabilities: *mut SYNCMGR_HANDLER_CAPABILITIES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmcapabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolicies<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmpolicies: *mut SYNCMGR_HANDLER_POLICIES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicies(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmpolicies, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Activate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, factivate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Activate(this, ::core::mem::transmute_copy(&factivate)).into())
        }
        unsafe extern "system" fn Enable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Enable(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn Synchronize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszitemids: *const ::windows_core::PCWSTR, citems: u32, hwndowner: super::super::Foundation::HWND, psessioncreator: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Synchronize(this, ::core::mem::transmute_copy(&ppszitemids), ::core::mem::transmute_copy(&citems), ::core::mem::transmute_copy(&hwndowner), ::windows_core::from_raw_borrowed(&psessioncreator), ::windows_core::from_raw_borrowed(&punk)).into())
        }
        ISyncMgrHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetHandlerInfo: GetHandlerInfo::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            GetCapabilities: GetCapabilities::<Identity, Impl, OFFSET>,
            GetPolicies: GetPolicies::<Identity, Impl, OFFSET>,
            Activate: Activate::<Identity, Impl, OFFSET>,
            Enable: Enable::<Identity, Impl, OFFSET>,
            Synchronize: Synchronize::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ISyncMgrHandlerCollection_Impl: ::windows_core::BaseImpl {
    fn GetHandlerEnumerator(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IEnumString>;
    fn BindToHandler(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ISyncMgrHandlerCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrHandlerCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetHandlerEnumerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHandlerEnumerator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BindToHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindToHandler(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        ISyncMgrHandlerCollection_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetHandlerEnumerator: GetHandlerEnumerator::<Identity, Impl, OFFSET>,
            BindToHandler: BindToHandler::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrHandlerInfo_Impl: ::windows_core::BaseImpl {
    fn GetType(this: &Self::This) -> ::windows_core::Result<SYNCMGR_HANDLER_TYPE>;
    fn GetTypeLabel(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetComment(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetLastSyncTime(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::FILETIME>;
    fn IsActive(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsConnected(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrHandlerInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrHandlerInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pntype: *mut SYNCMGR_HANDLER_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pntype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsztypelabel: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeLabel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsztypelabel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszcomment: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComment(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszcomment, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastSyncTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftlastsync: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastSyncTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pftlastsync, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsActive(this).into())
        }
        unsafe extern "system" fn IsEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsEnabled(this).into())
        }
        unsafe extern "system" fn IsConnected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrHandlerInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsConnected(this).into())
        }
        ISyncMgrHandlerInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetTypeLabel: GetTypeLabel::<Identity, Impl, OFFSET>,
            GetComment: GetComment::<Identity, Impl, OFFSET>,
            GetLastSyncTime: GetLastSyncTime::<Identity, Impl, OFFSET>,
            IsActive: IsActive::<Identity, Impl, OFFSET>,
            IsEnabled: IsEnabled::<Identity, Impl, OFFSET>,
            IsConnected: IsConnected::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrRegister_Impl: ::windows_core::BaseImpl {
    fn RegisterSyncMgrHandler(this: &Self::This, clsidhandler: *const ::windows_core::GUID, pwszdescription: &::windows_core::PCWSTR, dwsyncmgrregisterflags: u32) -> ::windows_core::Result<()>;
    fn UnregisterSyncMgrHandler(this: &Self::This, clsidhandler: *const ::windows_core::GUID, dwreserved: u32) -> ::windows_core::Result<()>;
    fn GetHandlerRegistrationInfo(this: &Self::This, clsidhandler: *const ::windows_core::GUID, pdwsyncmgrregisterflags: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISyncMgrRegister {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrRegister_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrRegister {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterSyncMgrHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrRegister_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows_core::GUID, pwszdescription: ::windows_core::PCWSTR, dwsyncmgrregisterflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterSyncMgrHandler(this, ::core::mem::transmute_copy(&clsidhandler), ::core::mem::transmute(&pwszdescription), ::core::mem::transmute_copy(&dwsyncmgrregisterflags)).into())
        }
        unsafe extern "system" fn UnregisterSyncMgrHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrRegister_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows_core::GUID, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterSyncMgrHandler(this, ::core::mem::transmute_copy(&clsidhandler), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn GetHandlerRegistrationInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrRegister_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsidhandler: *const ::windows_core::GUID, pdwsyncmgrregisterflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetHandlerRegistrationInfo(this, ::core::mem::transmute_copy(&clsidhandler), ::core::mem::transmute_copy(&pdwsyncmgrregisterflags)).into())
        }
        ISyncMgrRegister_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterSyncMgrHandler: RegisterSyncMgrHandler::<Identity, Impl, OFFSET>,
            UnregisterSyncMgrHandler: UnregisterSyncMgrHandler::<Identity, Impl, OFFSET>,
            GetHandlerRegistrationInfo: GetHandlerRegistrationInfo::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrResolutionHandler_Impl: ::windows_core::BaseImpl {
    fn QueryAbilities(this: &Self::This) -> ::windows_core::Result<u32>;
    fn KeepOther(this: &Self::This, psiother: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<SYNCMGR_RESOLUTION_FEEDBACK>;
    fn KeepRecent(this: &Self::This) -> ::windows_core::Result<SYNCMGR_RESOLUTION_FEEDBACK>;
    fn RemoveFromSyncSet(this: &Self::This) -> ::windows_core::Result<SYNCMGR_RESOLUTION_FEEDBACK>;
    fn KeepItems(this: &Self::This, parray: ::core::option::Option<&ISyncMgrConflictResolutionItems>) -> ::windows_core::Result<SYNCMGR_RESOLUTION_FEEDBACK>;
}
impl ::windows_core::Iids for ISyncMgrResolutionHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrResolutionHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrResolutionHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn QueryAbilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrResolutionHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwabilities: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryAbilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeepOther<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrResolutionHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psiother: *mut ::core::ffi::c_void, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeepOther(this, ::windows_core::from_raw_borrowed(&psiother)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfeedback, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeepRecent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrResolutionHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeepRecent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfeedback, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveFromSyncSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrResolutionHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RemoveFromSyncSet(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfeedback, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeepItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrResolutionHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parray: *mut ::core::ffi::c_void, pfeedback: *mut SYNCMGR_RESOLUTION_FEEDBACK) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeepItems(this, ::windows_core::from_raw_borrowed(&parray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfeedback, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrResolutionHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            QueryAbilities: QueryAbilities::<Identity, Impl, OFFSET>,
            KeepOther: KeepOther::<Identity, Impl, OFFSET>,
            KeepRecent: KeepRecent::<Identity, Impl, OFFSET>,
            RemoveFromSyncSet: RemoveFromSyncSet::<Identity, Impl, OFFSET>,
            KeepItems: KeepItems::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrScheduleWizardUIOperation_Impl: ::windows_core::BaseImpl + ISyncMgrUIOperation_Impl {
    fn InitWizard(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrScheduleWizardUIOperation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ISyncMgrUIOperation);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrScheduleWizardUIOperation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrScheduleWizardUIOperation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitWizard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrScheduleWizardUIOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitWizard(this, ::core::mem::transmute(&pszhandlerid)).into())
        }
        ISyncMgrScheduleWizardUIOperation_Vtbl { base__: <ISyncMgrUIOperation as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, InitWizard: InitWizard::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrSessionCreator_Impl: ::windows_core::BaseImpl {
    fn CreateSession(this: &Self::This, pszhandlerid: &::windows_core::PCWSTR, ppszitemids: *const ::windows_core::PCWSTR, citems: u32) -> ::windows_core::Result<ISyncMgrSyncCallback>;
}
impl ::windows_core::Iids for ISyncMgrSessionCreator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSessionCreator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSessionCreator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSessionCreator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhandlerid: ::windows_core::PCWSTR, ppszitemids: *const ::windows_core::PCWSTR, citems: u32, ppcallback: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSession(this, ::core::mem::transmute(&pszhandlerid), ::core::mem::transmute_copy(&ppszitemids), ::core::mem::transmute_copy(&citems)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcallback, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrSessionCreator_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateSession: CreateSession::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ISyncMgrSyncCallback_Impl: ::windows_core::BaseImpl {
    fn ReportProgress(this: &Self::This, pszitemid: &::windows_core::PCWSTR, pszprogresstext: &::windows_core::PCWSTR, nstatus: SYNCMGR_PROGRESS_STATUS, ucurrentstep: u32, umaxstep: u32, pncancelrequest: *mut SYNCMGR_CANCEL_REQUEST) -> ::windows_core::Result<()>;
    fn SetHandlerProgressText(this: &Self::This, pszprogresstext: &::windows_core::PCWSTR, pncancelrequest: *mut SYNCMGR_CANCEL_REQUEST) -> ::windows_core::Result<()>;
    fn ReportEvent(this: &Self::This, pszitemid: &::windows_core::PCWSTR, nlevel: SYNCMGR_EVENT_LEVEL, nflags: SYNCMGR_EVENT_FLAGS, pszname: &::windows_core::PCWSTR, pszdescription: &::windows_core::PCWSTR, pszlinktext: &::windows_core::PCWSTR, pszlinkreference: &::windows_core::PCWSTR, pszcontext: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::GUID>;
    fn CanContinue(this: &Self::This, pszitemid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn QueryForAdditionalItems(this: &Self::This, ppenumitemids: *mut ::core::option::Option<super::super::System::Com::IEnumString>, ppenumpunks: *mut ::core::option::Option<super::super::System::Com::IEnumUnknown>) -> ::windows_core::Result<()>;
    fn AddItemToSession(this: &Self::This, pszitemid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddIUnknownToSession(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn ProposeItem(this: &Self::This, pnewitem: ::core::option::Option<&ISyncMgrSyncItem>) -> ::windows_core::Result<()>;
    fn CommitItem(this: &Self::This, pszitemid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ReportManualSync(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ISyncMgrSyncCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSyncCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReportProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszitemid: ::windows_core::PCWSTR, pszprogresstext: ::windows_core::PCWSTR, nstatus: SYNCMGR_PROGRESS_STATUS, ucurrentstep: u32, umaxstep: u32, pncancelrequest: *mut SYNCMGR_CANCEL_REQUEST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReportProgress(this, ::core::mem::transmute(&pszitemid), ::core::mem::transmute(&pszprogresstext), ::core::mem::transmute_copy(&nstatus), ::core::mem::transmute_copy(&ucurrentstep), ::core::mem::transmute_copy(&umaxstep), ::core::mem::transmute_copy(&pncancelrequest)).into())
        }
        unsafe extern "system" fn SetHandlerProgressText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszprogresstext: ::windows_core::PCWSTR, pncancelrequest: *mut SYNCMGR_CANCEL_REQUEST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHandlerProgressText(this, ::core::mem::transmute(&pszprogresstext), ::core::mem::transmute_copy(&pncancelrequest)).into())
        }
        unsafe extern "system" fn ReportEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszitemid: ::windows_core::PCWSTR, nlevel: SYNCMGR_EVENT_LEVEL, nflags: SYNCMGR_EVENT_FLAGS, pszname: ::windows_core::PCWSTR, pszdescription: ::windows_core::PCWSTR, pszlinktext: ::windows_core::PCWSTR, pszlinkreference: ::windows_core::PCWSTR, pszcontext: ::windows_core::PCWSTR, pguideventid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReportEvent(this, ::core::mem::transmute(&pszitemid), ::core::mem::transmute_copy(&nlevel), ::core::mem::transmute_copy(&nflags), ::core::mem::transmute(&pszname), ::core::mem::transmute(&pszdescription), ::core::mem::transmute(&pszlinktext), ::core::mem::transmute(&pszlinkreference), ::core::mem::transmute(&pszcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguideventid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CanContinue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszitemid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CanContinue(this, ::core::mem::transmute(&pszitemid)).into())
        }
        unsafe extern "system" fn QueryForAdditionalItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenumitemids: *mut *mut ::core::ffi::c_void, ppenumpunks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryForAdditionalItems(this, ::core::mem::transmute_copy(&ppenumitemids), ::core::mem::transmute_copy(&ppenumpunks)).into())
        }
        unsafe extern "system" fn AddItemToSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszitemid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddItemToSession(this, ::core::mem::transmute(&pszitemid)).into())
        }
        unsafe extern "system" fn AddIUnknownToSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddIUnknownToSession(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn ProposeItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnewitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProposeItem(this, ::windows_core::from_raw_borrowed(&pnewitem)).into())
        }
        unsafe extern "system" fn CommitItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszitemid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CommitItem(this, ::core::mem::transmute(&pszitemid)).into())
        }
        unsafe extern "system" fn ReportManualSync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReportManualSync(this).into())
        }
        ISyncMgrSyncCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReportProgress: ReportProgress::<Identity, Impl, OFFSET>,
            SetHandlerProgressText: SetHandlerProgressText::<Identity, Impl, OFFSET>,
            ReportEvent: ReportEvent::<Identity, Impl, OFFSET>,
            CanContinue: CanContinue::<Identity, Impl, OFFSET>,
            QueryForAdditionalItems: QueryForAdditionalItems::<Identity, Impl, OFFSET>,
            AddItemToSession: AddItemToSession::<Identity, Impl, OFFSET>,
            AddIUnknownToSession: AddIUnknownToSession::<Identity, Impl, OFFSET>,
            ProposeItem: ProposeItem::<Identity, Impl, OFFSET>,
            CommitItem: CommitItem::<Identity, Impl, OFFSET>,
            ReportManualSync: ReportManualSync::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrSyncItem_Impl: ::windows_core::BaseImpl {
    fn GetItemID(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetItemInfo(this: &Self::This) -> ::windows_core::Result<ISyncMgrSyncItemInfo>;
    fn GetObject(this: &Self::This, rguidobjectid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetCapabilities(this: &Self::This) -> ::windows_core::Result<SYNCMGR_ITEM_CAPABILITIES>;
    fn GetPolicies(this: &Self::This) -> ::windows_core::Result<SYNCMGR_ITEM_POLICIES>;
    fn Enable(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Delete(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrSyncItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSyncItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetItemID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszitemid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszitemid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppiteminfo: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiteminfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidobjectid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetObject(this, ::core::mem::transmute_copy(&rguidobjectid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmcapabilities: *mut SYNCMGR_ITEM_CAPABILITIES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmcapabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolicies<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmpolicies: *mut SYNCMGR_ITEM_POLICIES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicies(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmpolicies, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Enable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Enable(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn Delete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Delete(this).into())
        }
        ISyncMgrSyncItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetItemID: GetItemID::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetItemInfo: GetItemInfo::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            GetCapabilities: GetCapabilities::<Identity, Impl, OFFSET>,
            GetPolicies: GetPolicies::<Identity, Impl, OFFSET>,
            Enable: Enable::<Identity, Impl, OFFSET>,
            Delete: Delete::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrSyncItemContainer_Impl: ::windows_core::BaseImpl {
    fn GetSyncItem(this: &Self::This, pszitemid: &::windows_core::PCWSTR) -> ::windows_core::Result<ISyncMgrSyncItem>;
    fn GetSyncItemEnumerator(this: &Self::This) -> ::windows_core::Result<IEnumSyncMgrSyncItems>;
    fn GetSyncItemCount(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for ISyncMgrSyncItemContainer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemContainer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSyncItemContainer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSyncItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszitemid: ::windows_core::PCWSTR, ppitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSyncItem(this, ::core::mem::transmute(&pszitemid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSyncItemEnumerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSyncItemEnumerator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSyncItemCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcitems: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSyncItemCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISyncMgrSyncItemContainer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSyncItem: GetSyncItem::<Identity, Impl, OFFSET>,
            GetSyncItemEnumerator: GetSyncItemEnumerator::<Identity, Impl, OFFSET>,
            GetSyncItemCount: GetSyncItemCount::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrSyncItemInfo_Impl: ::windows_core::BaseImpl {
    fn GetTypeLabel(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetComment(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetLastSyncTime(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::FILETIME>;
    fn IsEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsConnected(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrSyncItemInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSyncItemInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTypeLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsztypelabel: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeLabel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsztypelabel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszcomment: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComment(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszcomment, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastSyncTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftlastsync: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastSyncTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pftlastsync, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsEnabled(this).into())
        }
        unsafe extern "system" fn IsConnected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncItemInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsConnected(this).into())
        }
        ISyncMgrSyncItemInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTypeLabel: GetTypeLabel::<Identity, Impl, OFFSET>,
            GetComment: GetComment::<Identity, Impl, OFFSET>,
            GetLastSyncTime: GetLastSyncTime::<Identity, Impl, OFFSET>,
            IsEnabled: IsEnabled::<Identity, Impl, OFFSET>,
            IsConnected: IsConnected::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrSyncResult_Impl: ::windows_core::BaseImpl {
    fn Result(this: &Self::This, nstatus: SYNCMGR_PROGRESS_STATUS, cerror: u32, cconflicts: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISyncMgrSyncResult {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncResult_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSyncResult {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Result<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSyncResult_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nstatus: SYNCMGR_PROGRESS_STATUS, cerror: u32, cconflicts: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Result(this, ::core::mem::transmute_copy(&nstatus), ::core::mem::transmute_copy(&cerror), ::core::mem::transmute_copy(&cconflicts)).into())
        }
        ISyncMgrSyncResult_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Result: Result::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait ISyncMgrSynchronize_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, dwreserved: u32, dwsyncmgrflags: u32, cbcookie: u32, lpcookie: *const u8) -> ::windows_core::Result<()>;
    fn GetHandlerInfo(this: &Self::This) -> ::windows_core::Result<*mut SYNCMGRHANDLERINFO>;
    fn EnumSyncMgrItems(this: &Self::This) -> ::windows_core::Result<ISyncMgrEnumItems>;
    fn GetItemObject(this: &Self::This, itemid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ShowProperties(this: &Self::This, hwndparent: super::super::Foundation::HWND, itemid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetProgressCallback(this: &Self::This, lpcallback: ::core::option::Option<&ISyncMgrSynchronizeCallback>) -> ::windows_core::Result<()>;
    fn PrepareForSync(this: &Self::This, cbnumitems: u32, pitemids: *const ::windows_core::GUID, hwndparent: super::super::Foundation::HWND, dwreserved: u32) -> ::windows_core::Result<()>;
    fn Synchronize(this: &Self::This, hwndparent: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn SetItemStatus(this: &Self::This, pitemid: *const ::windows_core::GUID, dwsyncmgrstatus: u32) -> ::windows_core::Result<()>;
    fn ShowError(this: &Self::This, hwndparent: super::super::Foundation::HWND, errorid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for ISyncMgrSynchronize {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSynchronize {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreserved: u32, dwsyncmgrflags: u32, cbcookie: u32, lpcookie: *const u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&dwreserved), ::core::mem::transmute_copy(&dwsyncmgrflags), ::core::mem::transmute_copy(&cbcookie), ::core::mem::transmute_copy(&lpcookie)).into())
        }
        unsafe extern "system" fn GetHandlerInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsyncmgrhandlerinfo: *mut *mut SYNCMGRHANDLERINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHandlerInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsyncmgrhandlerinfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumSyncMgrItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsyncmgrenumitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumSyncMgrItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsyncmgrenumitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itemid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItemObject(this, ::core::mem::transmute_copy(&itemid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn ShowProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, itemid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowProperties(this, ::core::mem::transmute_copy(&hwndparent), ::core::mem::transmute_copy(&itemid)).into())
        }
        unsafe extern "system" fn SetProgressCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgressCallback(this, ::windows_core::from_raw_borrowed(&lpcallback)).into())
        }
        unsafe extern "system" fn PrepareForSync<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cbnumitems: u32, pitemids: *const ::windows_core::GUID, hwndparent: super::super::Foundation::HWND, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PrepareForSync(this, ::core::mem::transmute_copy(&cbnumitems), ::core::mem::transmute_copy(&pitemids), ::core::mem::transmute_copy(&hwndparent), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn Synchronize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Synchronize(this, ::core::mem::transmute_copy(&hwndparent)).into())
        }
        unsafe extern "system" fn SetItemStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pitemid: *const ::windows_core::GUID, dwsyncmgrstatus: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemStatus(this, ::core::mem::transmute_copy(&pitemid), ::core::mem::transmute_copy(&dwsyncmgrstatus)).into())
        }
        unsafe extern "system" fn ShowError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: super::super::Foundation::HWND, errorid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowError(this, ::core::mem::transmute_copy(&hwndparent), ::core::mem::transmute_copy(&errorid)).into())
        }
        ISyncMgrSynchronize_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetHandlerInfo: GetHandlerInfo::<Identity, Impl, OFFSET>,
            EnumSyncMgrItems: EnumSyncMgrItems::<Identity, Impl, OFFSET>,
            GetItemObject: GetItemObject::<Identity, Impl, OFFSET>,
            ShowProperties: ShowProperties::<Identity, Impl, OFFSET>,
            SetProgressCallback: SetProgressCallback::<Identity, Impl, OFFSET>,
            PrepareForSync: PrepareForSync::<Identity, Impl, OFFSET>,
            Synchronize: Synchronize::<Identity, Impl, OFFSET>,
            SetItemStatus: SetItemStatus::<Identity, Impl, OFFSET>,
            ShowError: ShowError::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrSynchronizeCallback_Impl: ::windows_core::BaseImpl {
    fn ShowPropertiesCompleted(this: &Self::This, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn PrepareForSyncCompleted(this: &Self::This, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn SynchronizeCompleted(this: &Self::This, hr: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn ShowErrorCompleted(this: &Self::This, hr: ::windows_core::HRESULT, citems: u32, pitemids: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn EnableModeless(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Progress(this: &Self::This, itemid: *const ::windows_core::GUID, psyncprogressitem: *const SYNCMGRPROGRESSITEM) -> ::windows_core::Result<()>;
    fn LogError(this: &Self::This, dwerrorlevel: u32, pszerrortext: &::windows_core::PCWSTR, psynclogerror: *const SYNCMGRLOGERRORINFO) -> ::windows_core::Result<()>;
    fn DeleteLogError(this: &Self::This, errorid: *const ::windows_core::GUID, dwreserved: u32) -> ::windows_core::Result<()>;
    fn EstablishConnection(this: &Self::This, pwszconnection: &::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrSynchronizeCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSynchronizeCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShowPropertiesCompleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowPropertiesCompleted(this, ::core::mem::transmute_copy(&hr)).into())
        }
        unsafe extern "system" fn PrepareForSyncCompleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PrepareForSyncCompleted(this, ::core::mem::transmute_copy(&hr)).into())
        }
        unsafe extern "system" fn SynchronizeCompleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SynchronizeCompleted(this, ::core::mem::transmute_copy(&hr)).into())
        }
        unsafe extern "system" fn ShowErrorCompleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT, citems: u32, pitemids: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowErrorCompleted(this, ::core::mem::transmute_copy(&hr), ::core::mem::transmute_copy(&citems), ::core::mem::transmute_copy(&pitemids)).into())
        }
        unsafe extern "system" fn EnableModeless<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableModeless(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn Progress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, itemid: *const ::windows_core::GUID, psyncprogressitem: *const SYNCMGRPROGRESSITEM) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Progress(this, ::core::mem::transmute_copy(&itemid), ::core::mem::transmute_copy(&psyncprogressitem)).into())
        }
        unsafe extern "system" fn LogError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwerrorlevel: u32, pszerrortext: ::windows_core::PCWSTR, psynclogerror: *const SYNCMGRLOGERRORINFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LogError(this, ::core::mem::transmute_copy(&dwerrorlevel), ::core::mem::transmute(&pszerrortext), ::core::mem::transmute_copy(&psynclogerror)).into())
        }
        unsafe extern "system" fn DeleteLogError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errorid: *const ::windows_core::GUID, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteLogError(this, ::core::mem::transmute_copy(&errorid), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn EstablishConnection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszconnection: ::windows_core::PCWSTR, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EstablishConnection(this, ::core::mem::transmute(&pwszconnection), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        ISyncMgrSynchronizeCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShowPropertiesCompleted: ShowPropertiesCompleted::<Identity, Impl, OFFSET>,
            PrepareForSyncCompleted: PrepareForSyncCompleted::<Identity, Impl, OFFSET>,
            SynchronizeCompleted: SynchronizeCompleted::<Identity, Impl, OFFSET>,
            ShowErrorCompleted: ShowErrorCompleted::<Identity, Impl, OFFSET>,
            EnableModeless: EnableModeless::<Identity, Impl, OFFSET>,
            Progress: Progress::<Identity, Impl, OFFSET>,
            LogError: LogError::<Identity, Impl, OFFSET>,
            DeleteLogError: DeleteLogError::<Identity, Impl, OFFSET>,
            EstablishConnection: EstablishConnection::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISyncMgrSynchronizeInvoke_Impl: ::windows_core::BaseImpl {
    fn UpdateItems(this: &Self::This, dwinvokeflags: u32, clsid: *const ::windows_core::GUID, cbcookie: u32, pcookie: *const u8) -> ::windows_core::Result<()>;
    fn UpdateAll(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISyncMgrSynchronizeInvoke {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeInvoke_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrSynchronizeInvoke {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UpdateItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeInvoke_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinvokeflags: u32, clsid: *const ::windows_core::GUID, cbcookie: u32, pcookie: *const u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateItems(this, ::core::mem::transmute_copy(&dwinvokeflags), ::core::mem::transmute_copy(&clsid), ::core::mem::transmute_copy(&cbcookie), ::core::mem::transmute_copy(&pcookie)).into())
        }
        unsafe extern "system" fn UpdateAll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrSynchronizeInvoke_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateAll(this).into())
        }
        ISyncMgrSynchronizeInvoke_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            UpdateItems: UpdateItems::<Identity, Impl, OFFSET>,
            UpdateAll: UpdateAll::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISyncMgrUIOperation_Impl: ::windows_core::BaseImpl {
    fn Run(this: &Self::This, hwndowner: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISyncMgrUIOperation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrUIOperation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISyncMgrUIOperation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Run<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISyncMgrUIOperation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndowner: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Run(this, ::core::mem::transmute_copy(&hwndowner)).into())
        }
        ISyncMgrUIOperation_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Run: Run::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ITaskbarList_Impl: ::windows_core::BaseImpl {
    fn HrInit(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddTab(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn DeleteTab(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn ActivateTab(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn SetActiveAlt(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ITaskbarList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITaskbarList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn HrInit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HrInit(this).into())
        }
        unsafe extern "system" fn AddTab<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTab(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn DeleteTab<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteTab(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn ActivateTab<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateTab(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn SetActiveAlt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetActiveAlt(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        ITaskbarList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            HrInit: HrInit::<Identity, Impl, OFFSET>,
            AddTab: AddTab::<Identity, Impl, OFFSET>,
            DeleteTab: DeleteTab::<Identity, Impl, OFFSET>,
            ActivateTab: ActivateTab::<Identity, Impl, OFFSET>,
            SetActiveAlt: SetActiveAlt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ITaskbarList2_Impl: ::windows_core::BaseImpl + ITaskbarList_Impl {
    fn MarkFullscreenWindow(this: &Self::This, hwnd: super::super::Foundation::HWND, ffullscreen: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ITaskbarList2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITaskbarList);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITaskbarList2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MarkFullscreenWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ffullscreen: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MarkFullscreenWindow(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&ffullscreen)).into())
        }
        ITaskbarList2_Vtbl { base__: <ITaskbarList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, MarkFullscreenWindow: MarkFullscreenWindow::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait ITaskbarList3_Impl: ::windows_core::BaseImpl + ITaskbarList2_Impl {
    fn SetProgressValue(this: &Self::This, hwnd: super::super::Foundation::HWND, ullcompleted: u64, ulltotal: u64) -> ::windows_core::Result<()>;
    fn SetProgressState(this: &Self::This, hwnd: super::super::Foundation::HWND, tbpflags: TBPFLAG) -> ::windows_core::Result<()>;
    fn RegisterTab(this: &Self::This, hwndtab: super::super::Foundation::HWND, hwndmdi: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn UnregisterTab(this: &Self::This, hwndtab: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn SetTabOrder(this: &Self::This, hwndtab: super::super::Foundation::HWND, hwndinsertbefore: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn SetTabActive(this: &Self::This, hwndtab: super::super::Foundation::HWND, hwndmdi: super::super::Foundation::HWND, dwreserved: u32) -> ::windows_core::Result<()>;
    fn ThumbBarAddButtons(this: &Self::This, hwnd: super::super::Foundation::HWND, cbuttons: u32, pbutton: *const THUMBBUTTON) -> ::windows_core::Result<()>;
    fn ThumbBarUpdateButtons(this: &Self::This, hwnd: super::super::Foundation::HWND, cbuttons: u32, pbutton: *const THUMBBUTTON) -> ::windows_core::Result<()>;
    fn ThumbBarSetImageList(this: &Self::This, hwnd: super::super::Foundation::HWND, himl: super::Controls::HIMAGELIST) -> ::windows_core::Result<()>;
    fn SetOverlayIcon(this: &Self::This, hwnd: super::super::Foundation::HWND, hicon: super::WindowsAndMessaging::HICON, pszdescription: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetThumbnailTooltip(this: &Self::This, hwnd: super::super::Foundation::HWND, psztip: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetThumbnailClip(this: &Self::This, hwnd: super::super::Foundation::HWND, prcclip: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for ITaskbarList3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITaskbarList2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITaskbarList3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetProgressValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ullcompleted: u64, ulltotal: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgressValue(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&ullcompleted), ::core::mem::transmute_copy(&ulltotal)).into())
        }
        unsafe extern "system" fn SetProgressState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, tbpflags: TBPFLAG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgressState(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&tbpflags)).into())
        }
        unsafe extern "system" fn RegisterTab<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, hwndmdi: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterTab(this, ::core::mem::transmute_copy(&hwndtab), ::core::mem::transmute_copy(&hwndmdi)).into())
        }
        unsafe extern "system" fn UnregisterTab<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterTab(this, ::core::mem::transmute_copy(&hwndtab)).into())
        }
        unsafe extern "system" fn SetTabOrder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, hwndinsertbefore: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTabOrder(this, ::core::mem::transmute_copy(&hwndtab), ::core::mem::transmute_copy(&hwndinsertbefore)).into())
        }
        unsafe extern "system" fn SetTabActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, hwndmdi: super::super::Foundation::HWND, dwreserved: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTabActive(this, ::core::mem::transmute_copy(&hwndtab), ::core::mem::transmute_copy(&hwndmdi), ::core::mem::transmute_copy(&dwreserved)).into())
        }
        unsafe extern "system" fn ThumbBarAddButtons<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, cbuttons: u32, pbutton: *const THUMBBUTTON) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ThumbBarAddButtons(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&cbuttons), ::core::mem::transmute_copy(&pbutton)).into())
        }
        unsafe extern "system" fn ThumbBarUpdateButtons<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, cbuttons: u32, pbutton: *const THUMBBUTTON) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ThumbBarUpdateButtons(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&cbuttons), ::core::mem::transmute_copy(&pbutton)).into())
        }
        unsafe extern "system" fn ThumbBarSetImageList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, himl: super::Controls::HIMAGELIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ThumbBarSetImageList(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&himl)).into())
        }
        unsafe extern "system" fn SetOverlayIcon<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, hicon: super::WindowsAndMessaging::HICON, pszdescription: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOverlayIcon(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&hicon), ::core::mem::transmute(&pszdescription)).into())
        }
        unsafe extern "system" fn SetThumbnailTooltip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, psztip: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThumbnailTooltip(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute(&psztip)).into())
        }
        unsafe extern "system" fn SetThumbnailClip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, prcclip: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThumbnailClip(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&prcclip)).into())
        }
        ITaskbarList3_Vtbl {
            base__: <ITaskbarList2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetProgressValue: SetProgressValue::<Identity, Impl, OFFSET>,
            SetProgressState: SetProgressState::<Identity, Impl, OFFSET>,
            RegisterTab: RegisterTab::<Identity, Impl, OFFSET>,
            UnregisterTab: UnregisterTab::<Identity, Impl, OFFSET>,
            SetTabOrder: SetTabOrder::<Identity, Impl, OFFSET>,
            SetTabActive: SetTabActive::<Identity, Impl, OFFSET>,
            ThumbBarAddButtons: ThumbBarAddButtons::<Identity, Impl, OFFSET>,
            ThumbBarUpdateButtons: ThumbBarUpdateButtons::<Identity, Impl, OFFSET>,
            ThumbBarSetImageList: ThumbBarSetImageList::<Identity, Impl, OFFSET>,
            SetOverlayIcon: SetOverlayIcon::<Identity, Impl, OFFSET>,
            SetThumbnailTooltip: SetThumbnailTooltip::<Identity, Impl, OFFSET>,
            SetThumbnailClip: SetThumbnailClip::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Controls\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait ITaskbarList4_Impl: ::windows_core::BaseImpl + ITaskbarList3_Impl {
    fn SetTabProperties(this: &Self::This, hwndtab: super::super::Foundation::HWND, stpflags: STPFLAG) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for ITaskbarList4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITaskbarList3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Controls", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITaskbarList4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTabProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITaskbarList4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtab: super::super::Foundation::HWND, stpflags: STPFLAG) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTabProperties(this, ::core::mem::transmute_copy(&hwndtab), ::core::mem::transmute_copy(&stpflags)).into())
        }
        ITaskbarList4_Vtbl { base__: <ITaskbarList3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetTabProperties: SetTabProperties::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IThumbnailCache_Impl: ::windows_core::BaseImpl {
    fn GetThumbnail(this: &Self::This, pshellitem: ::core::option::Option<&IShellItem>, cxyrequestedthumbsize: u32, flags: WTS_FLAGS, ppvthumb: *mut ::core::option::Option<ISharedBitmap>, poutflags: *mut WTS_CACHEFLAGS, pthumbnailid: *mut WTS_THUMBNAILID) -> ::windows_core::Result<()>;
    fn GetThumbnailByID(this: &Self::This, thumbnailid: &WTS_THUMBNAILID, cxyrequestedthumbsize: u32, ppvthumb: *mut ::core::option::Option<ISharedBitmap>, poutflags: *mut WTS_CACHEFLAGS) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IThumbnailCache {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCache_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailCache {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThumbnail<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pshellitem: *mut ::core::ffi::c_void, cxyrequestedthumbsize: u32, flags: WTS_FLAGS, ppvthumb: *mut *mut ::core::ffi::c_void, poutflags: *mut WTS_CACHEFLAGS, pthumbnailid: *mut WTS_THUMBNAILID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThumbnail(this, ::windows_core::from_raw_borrowed(&pshellitem), ::core::mem::transmute_copy(&cxyrequestedthumbsize), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ppvthumb), ::core::mem::transmute_copy(&poutflags), ::core::mem::transmute_copy(&pthumbnailid)).into())
        }
        unsafe extern "system" fn GetThumbnailByID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thumbnailid: WTS_THUMBNAILID, cxyrequestedthumbsize: u32, ppvthumb: *mut *mut ::core::ffi::c_void, poutflags: *mut WTS_CACHEFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThumbnailByID(this, ::core::mem::transmute(&thumbnailid), ::core::mem::transmute_copy(&cxyrequestedthumbsize), ::core::mem::transmute_copy(&ppvthumb), ::core::mem::transmute_copy(&poutflags)).into())
        }
        IThumbnailCache_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThumbnail: GetThumbnail::<Identity, Impl, OFFSET>,
            GetThumbnailByID: GetThumbnailByID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IThumbnailCachePrimer_Impl: ::windows_core::BaseImpl {
    fn PageInThumbnail(this: &Self::This, psi: ::core::option::Option<&IShellItem>, wtsflags: WTS_FLAGS, cxyrequestedthumbsize: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IThumbnailCachePrimer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCachePrimer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailCachePrimer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PageInThumbnail<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCachePrimer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, wtsflags: WTS_FLAGS, cxyrequestedthumbsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PageInThumbnail(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&wtsflags), ::core::mem::transmute_copy(&cxyrequestedthumbsize)).into())
        }
        IThumbnailCachePrimer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PageInThumbnail: PageInThumbnail::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IThumbnailCapture_Impl: ::windows_core::BaseImpl {
    fn CaptureThumbnail(this: &Self::This, pmaxsize: *const super::super::Foundation::SIZE, phtmldoc2: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<super::super::Graphics::Gdi::HBITMAP>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IThumbnailCapture {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCapture_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailCapture {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CaptureThumbnail<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailCapture_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmaxsize: *const super::super::Foundation::SIZE, phtmldoc2: *mut ::core::ffi::c_void, phbmthumbnail: *mut super::super::Graphics::Gdi::HBITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CaptureThumbnail(this, ::core::mem::transmute_copy(&pmaxsize), ::windows_core::from_raw_borrowed(&phtmldoc2)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phbmthumbnail, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IThumbnailCapture_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CaptureThumbnail: CaptureThumbnail::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IThumbnailHandlerFactory_Impl: ::windows_core::BaseImpl {
    fn GetThumbnailHandler(this: &Self::This, pidlchild: *const Common::ITEMIDLIST, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IThumbnailHandlerFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailHandlerFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailHandlerFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThumbnailHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailHandlerFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidlchild: *const Common::ITEMIDLIST, pbc: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThumbnailHandler(this, ::core::mem::transmute_copy(&pidlchild), ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IThumbnailHandlerFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThumbnailHandler: GetThumbnailHandler::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Graphics_Gdi\"`"]
#[cfg(feature = "Win32_Graphics_Gdi")]
pub trait IThumbnailProvider_Impl: ::windows_core::BaseImpl {
    fn GetThumbnail(this: &Self::This, cx: u32, phbmp: *mut super::super::Graphics::Gdi::HBITMAP, pdwalpha: *mut WTS_ALPHATYPE) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl ::windows_core::Iids for IThumbnailProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_Gdi")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThumbnail<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cx: u32, phbmp: *mut super::super::Graphics::Gdi::HBITMAP, pdwalpha: *mut WTS_ALPHATYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThumbnail(this, ::core::mem::transmute_copy(&cx), ::core::mem::transmute_copy(&phbmp), ::core::mem::transmute_copy(&pdwalpha)).into())
        }
        IThumbnailProvider_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetThumbnail: GetThumbnail::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IThumbnailSettings_Impl: ::windows_core::BaseImpl {
    fn SetContext(this: &Self::This, dwcontext: WTS_CONTEXTFLAGS) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IThumbnailSettings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailSettings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailSettings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcontext: WTS_CONTEXTFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContext(this, ::core::mem::transmute_copy(&dwcontext)).into())
        }
        IThumbnailSettings_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetContext: SetContext::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IThumbnailStreamCache_Impl: ::windows_core::BaseImpl {
    fn GetThumbnailStream(this: &Self::This, path: &::windows_core::PCWSTR, cacheid: u64, options: ThumbnailStreamCacheOptions, requestedthumbnailsize: u32, thumbnailsize: *mut super::super::Foundation::SIZE, thumbnailstream: *mut ::core::option::Option<super::super::System::Com::IStream>) -> ::windows_core::Result<()>;
    fn SetThumbnailStream(this: &Self::This, path: &::windows_core::PCWSTR, cacheid: u64, thumbnailsize: &super::super::Foundation::SIZE, thumbnailstream: ::core::option::Option<&super::super::System::Com::IStream>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IThumbnailStreamCache {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailStreamCache_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IThumbnailStreamCache {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThumbnailStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailStreamCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, cacheid: u64, options: ThumbnailStreamCacheOptions, requestedthumbnailsize: u32, thumbnailsize: *mut super::super::Foundation::SIZE, thumbnailstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThumbnailStream(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&cacheid), ::core::mem::transmute_copy(&options), ::core::mem::transmute_copy(&requestedthumbnailsize), ::core::mem::transmute_copy(&thumbnailsize), ::core::mem::transmute_copy(&thumbnailstream)).into())
        }
        unsafe extern "system" fn SetThumbnailStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IThumbnailStreamCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, cacheid: u64, thumbnailsize: super::super::Foundation::SIZE, thumbnailstream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThumbnailStream(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&cacheid), ::core::mem::transmute(&thumbnailsize), ::windows_core::from_raw_borrowed(&thumbnailstream)).into())
        }
        IThumbnailStreamCache_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThumbnailStream: GetThumbnailStream::<Identity, Impl, OFFSET>,
            SetThumbnailStream: SetThumbnailStream::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait ITrackShellMenu_Impl: ::windows_core::BaseImpl + IShellMenu_Impl {
    fn SetObscured(this: &Self::This, hwndtb: super::super::Foundation::HWND, punkband: ::core::option::Option<&::windows_core::IUnknown>, dwsmsetflags: u32) -> ::windows_core::Result<()>;
    fn Popup(this: &Self::This, hwnd: super::super::Foundation::HWND, ppt: *mut super::super::Foundation::POINTL, prcexclude: *mut super::super::Foundation::RECTL, dwflags: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for ITrackShellMenu {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IShellMenu);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrackShellMenu_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITrackShellMenu {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetObscured<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrackShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndtb: super::super::Foundation::HWND, punkband: *mut ::core::ffi::c_void, dwsmsetflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetObscured(this, ::core::mem::transmute_copy(&hwndtb), ::windows_core::from_raw_borrowed(&punkband), ::core::mem::transmute_copy(&dwsmsetflags)).into())
        }
        unsafe extern "system" fn Popup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrackShellMenu_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND, ppt: *mut super::super::Foundation::POINTL, prcexclude: *mut super::super::Foundation::RECTL, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Popup(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&ppt), ::core::mem::transmute_copy(&prcexclude), ::core::mem::transmute_copy(&dwflags)).into())
        }
        ITrackShellMenu_Vtbl {
            base__: <IShellMenu as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetObscured: SetObscured::<Identity, Impl, OFFSET>,
            Popup: Popup::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ITranscodeImage_Impl: ::windows_core::BaseImpl {
    fn TranscodeImage(this: &Self::This, pshellitem: ::core::option::Option<&IShellItem>, uimaxwidth: u32, uimaxheight: u32, flags: u32, pvimage: ::core::option::Option<&super::super::System::Com::IStream>, puiwidth: *mut u32, puiheight: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ITranscodeImage {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITranscodeImage_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITranscodeImage {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TranscodeImage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITranscodeImage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pshellitem: *mut ::core::ffi::c_void, uimaxwidth: u32, uimaxheight: u32, flags: u32, pvimage: *mut ::core::ffi::c_void, puiwidth: *mut u32, puiheight: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranscodeImage(this, ::windows_core::from_raw_borrowed(&pshellitem), ::core::mem::transmute_copy(&uimaxwidth), ::core::mem::transmute_copy(&uimaxheight), ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&pvimage), ::core::mem::transmute_copy(&puiwidth), ::core::mem::transmute_copy(&puiheight)).into())
        }
        ITranscodeImage_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, TranscodeImage: TranscodeImage::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait ITransferAdviseSink_Impl: ::windows_core::BaseImpl {
    fn UpdateProgress(this: &Self::This, ullsizecurrent: u64, ullsizetotal: u64, nfilescurrent: i32, nfilestotal: i32, nfolderscurrent: i32, nfolderstotal: i32) -> ::windows_core::Result<()>;
    fn UpdateTransferState(this: &Self::This, ts: u32) -> ::windows_core::Result<()>;
    fn ConfirmOverwrite(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, psidestparent: ::core::option::Option<&IShellItem>, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ConfirmEncryptionLoss(this: &Self::This, psisource: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn FileFailure(this: &Self::This, psi: ::core::option::Option<&IShellItem>, pszitem: &::windows_core::PCWSTR, hrerror: ::windows_core::HRESULT, pszrename: &::windows_core::PWSTR, cchrename: u32) -> ::windows_core::Result<()>;
    fn SubStreamFailure(this: &Self::This, psi: ::core::option::Option<&IShellItem>, pszstreamname: &::windows_core::PCWSTR, hrerror: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn PropertyFailure(this: &Self::This, psi: ::core::option::Option<&IShellItem>, pkey: *const PropertiesSystem::PROPERTYKEY, hrerror: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for ITransferAdviseSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITransferAdviseSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UpdateProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ullsizecurrent: u64, ullsizetotal: u64, nfilescurrent: i32, nfilestotal: i32, nfolderscurrent: i32, nfolderstotal: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateProgress(this, ::core::mem::transmute_copy(&ullsizecurrent), ::core::mem::transmute_copy(&ullsizetotal), ::core::mem::transmute_copy(&nfilescurrent), ::core::mem::transmute_copy(&nfilestotal), ::core::mem::transmute_copy(&nfolderscurrent), ::core::mem::transmute_copy(&nfolderstotal)).into())
        }
        unsafe extern "system" fn UpdateTransferState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ts: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateTransferState(this, ::core::mem::transmute_copy(&ts)).into())
        }
        unsafe extern "system" fn ConfirmOverwrite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psidestparent: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConfirmOverwrite(this, ::windows_core::from_raw_borrowed(&psisource), ::windows_core::from_raw_borrowed(&psidestparent), ::core::mem::transmute(&pszname)).into())
        }
        unsafe extern "system" fn ConfirmEncryptionLoss<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConfirmEncryptionLoss(this, ::windows_core::from_raw_borrowed(&psisource)).into())
        }
        unsafe extern "system" fn FileFailure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pszitem: ::windows_core::PCWSTR, hrerror: ::windows_core::HRESULT, pszrename: ::windows_core::PWSTR, cchrename: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FileFailure(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute(&pszitem), ::core::mem::transmute_copy(&hrerror), ::core::mem::transmute(&pszrename), ::core::mem::transmute_copy(&cchrename)).into())
        }
        unsafe extern "system" fn SubStreamFailure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pszstreamname: ::windows_core::PCWSTR, hrerror: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SubStreamFailure(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute(&pszstreamname), ::core::mem::transmute_copy(&hrerror)).into())
        }
        unsafe extern "system" fn PropertyFailure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferAdviseSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, pkey: *const PropertiesSystem::PROPERTYKEY, hrerror: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PropertyFailure(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&pkey), ::core::mem::transmute_copy(&hrerror)).into())
        }
        ITransferAdviseSink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            UpdateProgress: UpdateProgress::<Identity, Impl, OFFSET>,
            UpdateTransferState: UpdateTransferState::<Identity, Impl, OFFSET>,
            ConfirmOverwrite: ConfirmOverwrite::<Identity, Impl, OFFSET>,
            ConfirmEncryptionLoss: ConfirmEncryptionLoss::<Identity, Impl, OFFSET>,
            FileFailure: FileFailure::<Identity, Impl, OFFSET>,
            SubStreamFailure: SubStreamFailure::<Identity, Impl, OFFSET>,
            PropertyFailure: PropertyFailure::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ITransferDestination_Impl: ::windows_core::BaseImpl {
    fn Advise(this: &Self::This, psink: ::core::option::Option<&ITransferAdviseSink>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn CreateItem(this: &Self::This, pszname: &::windows_core::PCWSTR, dwattributes: u32, ullsize: u64, flags: u32, riiditem: *const ::windows_core::GUID, ppvitem: *mut *mut ::core::ffi::c_void, riidresources: *const ::windows_core::GUID, ppvresources: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITransferDestination {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferDestination_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITransferDestination {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferDestination_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psink: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&psink)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferDestination_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn CreateItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferDestination_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR, dwattributes: u32, ullsize: u64, flags: u32, riiditem: *const ::windows_core::GUID, ppvitem: *mut *mut ::core::ffi::c_void, riidresources: *const ::windows_core::GUID, ppvresources: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateItem(this, ::core::mem::transmute(&pszname), ::core::mem::transmute_copy(&dwattributes), ::core::mem::transmute_copy(&ullsize), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&riiditem), ::core::mem::transmute_copy(&ppvitem), ::core::mem::transmute_copy(&riidresources), ::core::mem::transmute_copy(&ppvresources)).into())
        }
        ITransferDestination_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Advise: Advise::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
            CreateItem: CreateItem::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait ITransferMediumItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for ITransferMediumItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferMediumItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITransferMediumItem {
    const VTABLE: Self::Vtable = { ITransferMediumItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait ITransferSource_Impl: ::windows_core::BaseImpl {
    fn Advise(this: &Self::This, psink: ::core::option::Option<&ITransferAdviseSink>) -> ::windows_core::Result<u32>;
    fn Unadvise(this: &Self::This, dwcookie: u32) -> ::windows_core::Result<()>;
    fn SetProperties(this: &Self::This, pproparray: ::core::option::Option<&PropertiesSystem::IPropertyChangeArray>) -> ::windows_core::Result<()>;
    fn OpenItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>, flags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn MoveItem(this: &Self::This, psi: ::core::option::Option<&IShellItem>, psiparentdst: ::core::option::Option<&IShellItem>, psznamedst: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<IShellItem>;
    fn RecycleItem(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, psiparentdest: ::core::option::Option<&IShellItem>, flags: u32) -> ::windows_core::Result<IShellItem>;
    fn RemoveItem(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, flags: u32) -> ::windows_core::Result<()>;
    fn RenameItem(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<IShellItem>;
    fn LinkItem(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, psiparentdest: ::core::option::Option<&IShellItem>, psznewname: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<IShellItem>;
    fn ApplyPropertiesToItem(this: &Self::This, psisource: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<IShellItem>;
    fn GetDefaultDestinationName(this: &Self::This, psisource: ::core::option::Option<&IShellItem>, psiparentdest: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn EnterFolder(this: &Self::This, psichildfolderdest: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
    fn LeaveFolder(this: &Self::This, psichildfolderdest: ::core::option::Option<&IShellItem>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for ITransferSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITransferSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Advise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psink: *mut ::core::ffi::c_void, pdwcookie: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Advise(this, ::windows_core::from_raw_borrowed(&psink)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcookie, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unadvise<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unadvise(this, ::core::mem::transmute_copy(&dwcookie)).into())
        }
        unsafe extern "system" fn SetProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pproparray: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProperties(this, ::windows_core::from_raw_borrowed(&pproparray)).into())
        }
        unsafe extern "system" fn OpenItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, flags: u32, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenItem(this, ::windows_core::from_raw_borrowed(&psi), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn MoveItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psi: *mut ::core::ffi::c_void, psiparentdst: *mut ::core::ffi::c_void, psznamedst: ::windows_core::PCWSTR, flags: u32, ppsinew: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MoveItem(this, ::windows_core::from_raw_borrowed(&psi), ::windows_core::from_raw_borrowed(&psiparentdst), ::core::mem::transmute(&psznamedst), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsinew, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RecycleItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psiparentdest: *mut ::core::ffi::c_void, flags: u32, ppsinewdest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecycleItem(this, ::windows_core::from_raw_borrowed(&psisource), ::windows_core::from_raw_borrowed(&psiparentdest), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsinewdest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveItem(this, ::windows_core::from_raw_borrowed(&psisource), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RenameItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, flags: u32, ppsinewdest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RenameItem(this, ::windows_core::from_raw_borrowed(&psisource), ::core::mem::transmute(&psznewname), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsinewdest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LinkItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psiparentdest: *mut ::core::ffi::c_void, psznewname: ::windows_core::PCWSTR, flags: u32, ppsinewdest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LinkItem(this, ::windows_core::from_raw_borrowed(&psisource), ::windows_core::from_raw_borrowed(&psiparentdest), ::core::mem::transmute(&psznewname), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsinewdest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ApplyPropertiesToItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, ppsinew: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ApplyPropertiesToItem(this, ::windows_core::from_raw_borrowed(&psisource)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsinew, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDefaultDestinationName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psisource: *mut ::core::ffi::c_void, psiparentdest: *mut ::core::ffi::c_void, ppszdestinationname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultDestinationName(this, ::windows_core::from_raw_borrowed(&psisource), ::windows_core::from_raw_borrowed(&psiparentdest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszdestinationname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnterFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psichildfolderdest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnterFolder(this, ::windows_core::from_raw_borrowed(&psichildfolderdest)).into())
        }
        unsafe extern "system" fn LeaveFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psichildfolderdest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LeaveFolder(this, ::windows_core::from_raw_borrowed(&psichildfolderdest)).into())
        }
        ITransferSource_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Advise: Advise::<Identity, Impl, OFFSET>,
            Unadvise: Unadvise::<Identity, Impl, OFFSET>,
            SetProperties: SetProperties::<Identity, Impl, OFFSET>,
            OpenItem: OpenItem::<Identity, Impl, OFFSET>,
            MoveItem: MoveItem::<Identity, Impl, OFFSET>,
            RecycleItem: RecycleItem::<Identity, Impl, OFFSET>,
            RemoveItem: RemoveItem::<Identity, Impl, OFFSET>,
            RenameItem: RenameItem::<Identity, Impl, OFFSET>,
            LinkItem: LinkItem::<Identity, Impl, OFFSET>,
            ApplyPropertiesToItem: ApplyPropertiesToItem::<Identity, Impl, OFFSET>,
            GetDefaultDestinationName: GetDefaultDestinationName::<Identity, Impl, OFFSET>,
            EnterFolder: EnterFolder::<Identity, Impl, OFFSET>,
            LeaveFolder: LeaveFolder::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
pub trait ITravelEntry_Impl: ::windows_core::BaseImpl {
    fn Invoke(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn Update(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetPidl(this: &Self::This) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for ITravelEntry {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelEntry_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITravelEntry {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Invoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Invoke(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn Update<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Update(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&fislocalanchor)).into())
        }
        unsafe extern "system" fn GetPidl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidl: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPidl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITravelEntry_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Invoke: Invoke::<Identity, Impl, OFFSET>,
            Update: Update::<Identity, Impl, OFFSET>,
            GetPidl: GetPidl::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_Common\"`, `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
pub trait ITravelLog_Impl: ::windows_core::BaseImpl {
    fn AddEntry(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn UpdateEntry(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn UpdateExternal(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, punkhlbrowsecontext: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn Travel(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, ioffset: i32) -> ::windows_core::Result<()>;
    fn GetTravelEntry(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, ioffset: i32, ppte: *mut ::core::option::Option<ITravelEntry>) -> ::windows_core::Result<()>;
    fn FindTravelEntry(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, pidl: *const Common::ITEMIDLIST) -> ::windows_core::Result<ITravelEntry>;
    fn GetToolTipText(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, ioffset: i32, idstemplate: i32, pwztext: ::windows_core::PWSTR, cchtext: u32) -> ::windows_core::Result<()>;
    fn InsertMenuEntries(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>, hmenu: super::WindowsAndMessaging::HMENU, npos: i32, idfirst: i32, idlast: i32, dwflags: u32) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<ITravelLog>;
    fn CountEntries(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> u32;
    fn Revert(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl ::windows_core::Iids for ITravelLog {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_Common", feature = "Win32_UI_WindowsAndMessaging"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITravelLog {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntry(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&fislocalanchor)).into())
        }
        unsafe extern "system" fn UpdateEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, fislocalanchor: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateEntry(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&fislocalanchor)).into())
        }
        unsafe extern "system" fn UpdateExternal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, punkhlbrowsecontext: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateExternal(this, ::windows_core::from_raw_borrowed(&punk), ::windows_core::from_raw_borrowed(&punkhlbrowsecontext)).into())
        }
        unsafe extern "system" fn Travel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, ioffset: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Travel(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&ioffset)).into())
        }
        unsafe extern "system" fn GetTravelEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, ioffset: i32, ppte: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTravelEntry(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&ioffset), ::core::mem::transmute_copy(&ppte)).into())
        }
        unsafe extern "system" fn FindTravelEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, pidl: *const Common::ITEMIDLIST, ppte: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindTravelEntry(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&pidl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppte, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetToolTipText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, ioffset: i32, idstemplate: i32, pwztext: ::windows_core::PWSTR, cchtext: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetToolTipText(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&ioffset), ::core::mem::transmute_copy(&idstemplate), ::core::mem::transmute_copy(&pwztext), ::core::mem::transmute_copy(&cchtext)).into())
        }
        unsafe extern "system" fn InsertMenuEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void, hmenu: super::WindowsAndMessaging::HMENU, npos: i32, idfirst: i32, idlast: i32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertMenuEntries(this, ::windows_core::from_raw_borrowed(&punk), ::core::mem::transmute_copy(&hmenu), ::core::mem::transmute_copy(&npos), ::core::mem::transmute_copy(&idfirst), ::core::mem::transmute_copy(&idlast), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptl: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CountEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CountEntries(this, ::windows_core::from_raw_borrowed(&punk)))
        }
        unsafe extern "system" fn Revert<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLog_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Revert(this).into())
        }
        ITravelLog_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddEntry: AddEntry::<Identity, Impl, OFFSET>,
            UpdateEntry: UpdateEntry::<Identity, Impl, OFFSET>,
            UpdateExternal: UpdateExternal::<Identity, Impl, OFFSET>,
            Travel: Travel::<Identity, Impl, OFFSET>,
            GetTravelEntry: GetTravelEntry::<Identity, Impl, OFFSET>,
            FindTravelEntry: FindTravelEntry::<Identity, Impl, OFFSET>,
            GetToolTipText: GetToolTipText::<Identity, Impl, OFFSET>,
            InsertMenuEntries: InsertMenuEntries::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
            CountEntries: CountEntries::<Identity, Impl, OFFSET>,
            Revert: Revert::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait ITravelLogClient_Impl: ::windows_core::BaseImpl {
    fn FindWindowByIndex(this: &Self::This, dwid: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetWindowData(this: &Self::This, pstream: ::core::option::Option<&super::super::System::Com::IStream>, pwindata: *mut WINDOWDATA) -> ::windows_core::Result<()>;
    fn LoadHistoryPosition(this: &Self::This, pszurllocation: &::windows_core::PCWSTR, dwposition: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for ITravelLogClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITravelLogClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FindWindowByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwid: u32, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindWindowByIndex(this, ::core::mem::transmute_copy(&dwid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetWindowData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstream: *mut ::core::ffi::c_void, pwindata: *mut WINDOWDATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindowData(this, ::windows_core::from_raw_borrowed(&pstream), ::core::mem::transmute_copy(&pwindata)).into())
        }
        unsafe extern "system" fn LoadHistoryPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurllocation: ::windows_core::PCWSTR, dwposition: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadHistoryPosition(this, ::core::mem::transmute(&pszurllocation), ::core::mem::transmute_copy(&dwposition)).into())
        }
        ITravelLogClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FindWindowByIndex: FindWindowByIndex::<Identity, Impl, OFFSET>,
            GetWindowData: GetWindowData::<Identity, Impl, OFFSET>,
            LoadHistoryPosition: LoadHistoryPosition::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ITravelLogEntry_Impl: ::windows_core::BaseImpl {
    fn GetTitle(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetURL(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for ITravelLogEntry {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogEntry_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITravelLogEntry {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsztitle: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTitle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsztitle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszurl: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetURL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITravelLogEntry_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTitle: GetTitle::<Identity, Impl, OFFSET>,
            GetURL: GetURL::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ITravelLogStg_Impl: ::windows_core::BaseImpl {
    fn CreateEntry(this: &Self::This, pszurl: &::windows_core::PCWSTR, psztitle: &::windows_core::PCWSTR, ptlerelativeto: ::core::option::Option<&ITravelLogEntry>, fprepend: super::super::Foundation::BOOL) -> ::windows_core::Result<ITravelLogEntry>;
    fn TravelTo(this: &Self::This, ptle: ::core::option::Option<&ITravelLogEntry>) -> ::windows_core::Result<()>;
    fn EnumEntries(this: &Self::This, flags: TLENUMF) -> ::windows_core::Result<IEnumTravelLogEntry>;
    fn FindEntries(this: &Self::This, flags: TLENUMF, pszurl: &::windows_core::PCWSTR) -> ::windows_core::Result<IEnumTravelLogEntry>;
    fn GetCount(this: &Self::This, flags: TLENUMF) -> ::windows_core::Result<u32>;
    fn RemoveEntry(this: &Self::This, ptle: ::core::option::Option<&ITravelLogEntry>) -> ::windows_core::Result<()>;
    fn GetRelativeEntry(this: &Self::This, ioffset: i32) -> ::windows_core::Result<ITravelLogEntry>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ITravelLogStg {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITravelLogStg {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, psztitle: ::windows_core::PCWSTR, ptlerelativeto: *mut ::core::ffi::c_void, fprepend: super::super::Foundation::BOOL, pptle: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateEntry(this, ::core::mem::transmute(&pszurl), ::core::mem::transmute(&psztitle), ::windows_core::from_raw_borrowed(&ptlerelativeto), ::core::mem::transmute_copy(&fprepend)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TravelTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptle: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TravelTo(this, ::windows_core::from_raw_borrowed(&ptle)).into())
        }
        unsafe extern "system" fn EnumEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: TLENUMF, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumEntries(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: TLENUMF, pszurl: ::windows_core::PCWSTR, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindEntries(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pszurl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: TLENUMF, pcentries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcentries, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptle: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEntry(this, ::windows_core::from_raw_borrowed(&ptle)).into())
        }
        unsafe extern "system" fn GetRelativeEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITravelLogStg_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ioffset: i32, ptle: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRelativeEntry(this, ::core::mem::transmute_copy(&ioffset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITravelLogStg_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateEntry: CreateEntry::<Identity, Impl, OFFSET>,
            TravelTo: TravelTo::<Identity, Impl, OFFSET>,
            EnumEntries: EnumEntries::<Identity, Impl, OFFSET>,
            FindEntries: FindEntries::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            RemoveEntry: RemoveEntry::<Identity, Impl, OFFSET>,
            GetRelativeEntry: GetRelativeEntry::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ITrayDeskBand_Impl: ::windows_core::BaseImpl {
    fn ShowDeskBand(this: &Self::This, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn HideDeskBand(this: &Self::This, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn IsDeskBandShown(this: &Self::This, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn DeskBandRegistrationChanged(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITrayDeskBand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrayDeskBand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITrayDeskBand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShowDeskBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrayDeskBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowDeskBand(this, ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn HideDeskBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrayDeskBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HideDeskBand(this, ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn IsDeskBandShown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrayDeskBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsDeskBandShown(this, ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn DeskBandRegistrationChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITrayDeskBand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeskBandRegistrationChanged(this).into())
        }
        ITrayDeskBand_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShowDeskBand: ShowDeskBand::<Identity, Impl, OFFSET>,
            HideDeskBand: HideDeskBand::<Identity, Impl, OFFSET>,
            IsDeskBandShown: IsDeskBandShown::<Identity, Impl, OFFSET>,
            DeskBandRegistrationChanged: DeskBandRegistrationChanged::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IURLSearchHook_Impl: ::windows_core::BaseImpl {
    fn Translate(this: &Self::This, pwszsearchurl: ::windows_core::PWSTR, cchbuffersize: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IURLSearchHook {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IURLSearchHook_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IURLSearchHook {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Translate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IURLSearchHook_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszsearchurl: ::windows_core::PWSTR, cchbuffersize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Translate(this, ::core::mem::transmute_copy(&pwszsearchurl), ::core::mem::transmute_copy(&cchbuffersize)).into())
        }
        IURLSearchHook_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Translate: Translate::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IURLSearchHook2_Impl: ::windows_core::BaseImpl + IURLSearchHook_Impl {
    fn TranslateWithSearchContext(this: &Self::This, pwszsearchurl: ::windows_core::PWSTR, cchbuffersize: u32, psearchcontext: ::core::option::Option<&ISearchContext>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IURLSearchHook2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IURLSearchHook);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IURLSearchHook2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IURLSearchHook2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TranslateWithSearchContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IURLSearchHook2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszsearchurl: ::windows_core::PWSTR, cchbuffersize: u32, psearchcontext: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TranslateWithSearchContext(this, ::core::mem::transmute_copy(&pwszsearchurl), ::core::mem::transmute_copy(&cchbuffersize), ::windows_core::from_raw_borrowed(&psearchcontext)).into())
        }
        IURLSearchHook2_Vtbl {
            base__: <IURLSearchHook as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TranslateWithSearchContext: TranslateWithSearchContext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IUniformResourceLocatorA_Impl: ::windows_core::BaseImpl {
    fn SetURL(this: &Self::This, pcszurl: &::windows_core::PCSTR, dwinflags: u32) -> ::windows_core::Result<()>;
    fn GetURL(this: &Self::This) -> ::windows_core::Result<::windows_core::PSTR>;
    fn InvokeCommand(this: &Self::This, purlici: *mut URLINVOKECOMMANDINFOA) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IUniformResourceLocatorA {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorA_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUniformResourceLocatorA {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcszurl: ::windows_core::PCSTR, dwinflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetURL(this, ::core::mem::transmute(&pcszurl), ::core::mem::transmute_copy(&dwinflags)).into())
        }
        unsafe extern "system" fn GetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszurl: *mut ::windows_core::PSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetURL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InvokeCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorA_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, purlici: *mut URLINVOKECOMMANDINFOA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeCommand(this, ::core::mem::transmute_copy(&purlici)).into())
        }
        IUniformResourceLocatorA_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetURL: SetURL::<Identity, Impl, OFFSET>,
            GetURL: GetURL::<Identity, Impl, OFFSET>,
            InvokeCommand: InvokeCommand::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IUniformResourceLocatorW_Impl: ::windows_core::BaseImpl {
    fn SetURL(this: &Self::This, pcszurl: &::windows_core::PCWSTR, dwinflags: u32) -> ::windows_core::Result<()>;
    fn GetURL(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn InvokeCommand(this: &Self::This, purlici: *mut URLINVOKECOMMANDINFOW) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IUniformResourceLocatorW {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorW_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUniformResourceLocatorW {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcszurl: ::windows_core::PCWSTR, dwinflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetURL(this, ::core::mem::transmute(&pcszurl), ::core::mem::transmute_copy(&dwinflags)).into())
        }
        unsafe extern "system" fn GetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszurl: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetURL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InvokeCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUniformResourceLocatorW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, purlici: *mut URLINVOKECOMMANDINFOW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeCommand(this, ::core::mem::transmute_copy(&purlici)).into())
        }
        IUniformResourceLocatorW_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetURL: SetURL::<Identity, Impl, OFFSET>,
            GetURL: GetURL::<Identity, Impl, OFFSET>,
            InvokeCommand: InvokeCommand::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`, `\"Win32_UI_Shell_Common\"`"]
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
pub trait IUpdateIDList_Impl: ::windows_core::BaseImpl {
    fn Update(this: &Self::This, pbc: ::core::option::Option<&super::super::System::Com::IBindCtx>, pidlin: *const Common::ITEMIDLIST) -> ::windows_core::Result<*mut Common::ITEMIDLIST>;
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl ::windows_core::Iids for IUpdateIDList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Com", feature = "Win32_UI_Shell_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUpdateIDList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUpdateIDList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Update<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUpdateIDList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbc: *mut ::core::ffi::c_void, pidlin: *const Common::ITEMIDLIST, ppidlout: *mut *mut Common::ITEMIDLIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Update(this, ::windows_core::from_raw_borrowed(&pbc), ::core::mem::transmute_copy(&pidlin)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidlout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IUpdateIDList_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Update: Update::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IUseToBrowseItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IUseToBrowseItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUseToBrowseItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUseToBrowseItem {
    const VTABLE: Self::Vtable = { IUseToBrowseItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IUserAccountChangeCallback_Impl: ::windows_core::BaseImpl {
    fn OnPictureChange(this: &Self::This, pszusername: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IUserAccountChangeCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserAccountChangeCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUserAccountChangeCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnPictureChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserAccountChangeCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszusername: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnPictureChange(this, ::core::mem::transmute(&pszusername)).into())
        }
        IUserAccountChangeCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnPictureChange: OnPictureChange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub trait IUserNotification_Impl: ::windows_core::BaseImpl {
    fn SetBalloonInfo(this: &Self::This, psztitle: &::windows_core::PCWSTR, psztext: &::windows_core::PCWSTR, dwinfoflags: u32) -> ::windows_core::Result<()>;
    fn SetBalloonRetry(this: &Self::This, dwshowtime: u32, dwinterval: u32, cretrycount: u32) -> ::windows_core::Result<()>;
    fn SetIconInfo(this: &Self::This, hicon: super::WindowsAndMessaging::HICON, psztooltip: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Show(this: &Self::This, pqc: ::core::option::Option<&IQueryContinue>, dwcontinuepollinterval: u32) -> ::windows_core::Result<()>;
    fn PlaySound(this: &Self::This, pszsoundname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::windows_core::Iids for IUserNotification {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUserNotification {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBalloonInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR, psztext: ::windows_core::PCWSTR, dwinfoflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalloonInfo(this, ::core::mem::transmute(&psztitle), ::core::mem::transmute(&psztext), ::core::mem::transmute_copy(&dwinfoflags)).into())
        }
        unsafe extern "system" fn SetBalloonRetry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwshowtime: u32, dwinterval: u32, cretrycount: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalloonRetry(this, ::core::mem::transmute_copy(&dwshowtime), ::core::mem::transmute_copy(&dwinterval), ::core::mem::transmute_copy(&cretrycount)).into())
        }
        unsafe extern "system" fn SetIconInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hicon: super::WindowsAndMessaging::HICON, psztooltip: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconInfo(this, ::core::mem::transmute_copy(&hicon), ::core::mem::transmute(&psztooltip)).into())
        }
        unsafe extern "system" fn Show<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqc: *mut ::core::ffi::c_void, dwcontinuepollinterval: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Show(this, ::windows_core::from_raw_borrowed(&pqc), ::core::mem::transmute_copy(&dwcontinuepollinterval)).into())
        }
        unsafe extern "system" fn PlaySound<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszsoundname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlaySound(this, ::core::mem::transmute(&pszsoundname)).into())
        }
        IUserNotification_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBalloonInfo: SetBalloonInfo::<Identity, Impl, OFFSET>,
            SetBalloonRetry: SetBalloonRetry::<Identity, Impl, OFFSET>,
            SetIconInfo: SetIconInfo::<Identity, Impl, OFFSET>,
            Show: Show::<Identity, Impl, OFFSET>,
            PlaySound: PlaySound::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_WindowsAndMessaging\"`"]
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
pub trait IUserNotification2_Impl: ::windows_core::BaseImpl {
    fn SetBalloonInfo(this: &Self::This, psztitle: &::windows_core::PCWSTR, psztext: &::windows_core::PCWSTR, dwinfoflags: u32) -> ::windows_core::Result<()>;
    fn SetBalloonRetry(this: &Self::This, dwshowtime: u32, dwinterval: u32, cretrycount: u32) -> ::windows_core::Result<()>;
    fn SetIconInfo(this: &Self::This, hicon: super::WindowsAndMessaging::HICON, psztooltip: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Show(this: &Self::This, pqc: ::core::option::Option<&IQueryContinue>, dwcontinuepollinterval: u32, psink: ::core::option::Option<&IUserNotificationCallback>) -> ::windows_core::Result<()>;
    fn PlaySound(this: &Self::This, pszsoundname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl ::windows_core::Iids for IUserNotification2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_WindowsAndMessaging")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUserNotification2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBalloonInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztitle: ::windows_core::PCWSTR, psztext: ::windows_core::PCWSTR, dwinfoflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalloonInfo(this, ::core::mem::transmute(&psztitle), ::core::mem::transmute(&psztext), ::core::mem::transmute_copy(&dwinfoflags)).into())
        }
        unsafe extern "system" fn SetBalloonRetry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwshowtime: u32, dwinterval: u32, cretrycount: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalloonRetry(this, ::core::mem::transmute_copy(&dwshowtime), ::core::mem::transmute_copy(&dwinterval), ::core::mem::transmute_copy(&cretrycount)).into())
        }
        unsafe extern "system" fn SetIconInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hicon: super::WindowsAndMessaging::HICON, psztooltip: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconInfo(this, ::core::mem::transmute_copy(&hicon), ::core::mem::transmute(&psztooltip)).into())
        }
        unsafe extern "system" fn Show<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqc: *mut ::core::ffi::c_void, dwcontinuepollinterval: u32, psink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Show(this, ::windows_core::from_raw_borrowed(&pqc), ::core::mem::transmute_copy(&dwcontinuepollinterval), ::windows_core::from_raw_borrowed(&psink)).into())
        }
        unsafe extern "system" fn PlaySound<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotification2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszsoundname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlaySound(this, ::core::mem::transmute(&pszsoundname)).into())
        }
        IUserNotification2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBalloonInfo: SetBalloonInfo::<Identity, Impl, OFFSET>,
            SetBalloonRetry: SetBalloonRetry::<Identity, Impl, OFFSET>,
            SetIconInfo: SetIconInfo::<Identity, Impl, OFFSET>,
            Show: Show::<Identity, Impl, OFFSET>,
            PlaySound: PlaySound::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IUserNotificationCallback_Impl: ::windows_core::BaseImpl {
    fn OnBalloonUserClick(this: &Self::This, pt: *const super::super::Foundation::POINT) -> ::windows_core::Result<()>;
    fn OnLeftClick(this: &Self::This, pt: *const super::super::Foundation::POINT) -> ::windows_core::Result<()>;
    fn OnContextMenu(this: &Self::This, pt: *const super::super::Foundation::POINT) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IUserNotificationCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotificationCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IUserNotificationCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnBalloonUserClick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotificationCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pt: *const super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBalloonUserClick(this, ::core::mem::transmute_copy(&pt)).into())
        }
        unsafe extern "system" fn OnLeftClick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotificationCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pt: *const super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnLeftClick(this, ::core::mem::transmute_copy(&pt)).into())
        }
        unsafe extern "system" fn OnContextMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IUserNotificationCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pt: *const super::super::Foundation::POINT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnContextMenu(this, ::core::mem::transmute_copy(&pt)).into())
        }
        IUserNotificationCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnBalloonUserClick: OnBalloonUserClick::<Identity, Impl, OFFSET>,
            OnLeftClick: OnLeftClick::<Identity, Impl, OFFSET>,
            OnContextMenu: OnContextMenu::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Shell_Common\"`"]
#[cfg(feature = "Win32_UI_Shell_Common")]
pub trait IViewStateIdentityItem_Impl: ::windows_core::BaseImpl + IRelatedItem_Impl {}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl ::windows_core::Iids for IViewStateIdentityItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IRelatedItem);
}
#[cfg(feature = "Win32_UI_Shell_Common")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IViewStateIdentityItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IViewStateIdentityItem {
    const VTABLE: Self::Vtable = { IViewStateIdentityItem_Vtbl { base__: <IRelatedItem as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IVirtualDesktopManager_Impl: ::windows_core::BaseImpl {
    fn IsWindowOnCurrentVirtualDesktop(this: &Self::This, toplevelwindow: super::super::Foundation::HWND) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetWindowDesktopId(this: &Self::This, toplevelwindow: super::super::Foundation::HWND) -> ::windows_core::Result<::windows_core::GUID>;
    fn MoveWindowToDesktop(this: &Self::This, toplevelwindow: super::super::Foundation::HWND, desktopid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IVirtualDesktopManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVirtualDesktopManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IVirtualDesktopManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsWindowOnCurrentVirtualDesktop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVirtualDesktopManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, toplevelwindow: super::super::Foundation::HWND, oncurrentdesktop: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsWindowOnCurrentVirtualDesktop(this, ::core::mem::transmute_copy(&toplevelwindow)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(oncurrentdesktop, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetWindowDesktopId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVirtualDesktopManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, toplevelwindow: super::super::Foundation::HWND, desktopid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWindowDesktopId(this, ::core::mem::transmute_copy(&toplevelwindow)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(desktopid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MoveWindowToDesktop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVirtualDesktopManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, toplevelwindow: super::super::Foundation::HWND, desktopid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MoveWindowToDesktop(this, ::core::mem::transmute_copy(&toplevelwindow), ::core::mem::transmute_copy(&desktopid)).into())
        }
        IVirtualDesktopManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsWindowOnCurrentVirtualDesktop: IsWindowOnCurrentVirtualDesktop::<Identity, Impl, OFFSET>,
            GetWindowDesktopId: GetWindowDesktopId::<Identity, Impl, OFFSET>,
            MoveWindowToDesktop: MoveWindowToDesktop::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IVisualProperties_Impl: ::windows_core::BaseImpl {
    fn SetWatermark(this: &Self::This, hbmp: super::super::Graphics::Gdi::HBITMAP, vpwf: VPWATERMARKFLAGS) -> ::windows_core::Result<()>;
    fn SetColor(this: &Self::This, vpcf: VPCOLORFLAGS, cr: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
    fn GetColor(this: &Self::This, vpcf: VPCOLORFLAGS) -> ::windows_core::Result<super::super::Foundation::COLORREF>;
    fn SetItemHeight(this: &Self::This, cyiteminpixels: i32) -> ::windows_core::Result<()>;
    fn GetItemHeight(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetFont(this: &Self::This, plf: *const super::super::Graphics::Gdi::LOGFONTW, bredraw: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetFont(this: &Self::This, plf: *mut super::super::Graphics::Gdi::LOGFONTW) -> ::windows_core::Result<()>;
    fn SetTheme(this: &Self::This, pszsubappname: &::windows_core::PCWSTR, pszsubidlist: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IVisualProperties {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IVisualProperties {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetWatermark<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hbmp: super::super::Graphics::Gdi::HBITMAP, vpwf: VPWATERMARKFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWatermark(this, ::core::mem::transmute_copy(&hbmp), ::core::mem::transmute_copy(&vpwf)).into())
        }
        unsafe extern "system" fn SetColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vpcf: VPCOLORFLAGS, cr: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColor(this, ::core::mem::transmute_copy(&vpcf), ::core::mem::transmute_copy(&cr)).into())
        }
        unsafe extern "system" fn GetColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vpcf: VPCOLORFLAGS, pcr: *mut super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetColor(this, ::core::mem::transmute_copy(&vpcf)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetItemHeight<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cyiteminpixels: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItemHeight(this, ::core::mem::transmute_copy(&cyiteminpixels)).into())
        }
        unsafe extern "system" fn GetItemHeight<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cyiteminpixels: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemHeight(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cyiteminpixels, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFont<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plf: *const super::super::Graphics::Gdi::LOGFONTW, bredraw: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFont(this, ::core::mem::transmute_copy(&plf), ::core::mem::transmute_copy(&bredraw)).into())
        }
        unsafe extern "system" fn GetFont<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plf: *mut super::super::Graphics::Gdi::LOGFONTW) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFont(this, ::core::mem::transmute_copy(&plf)).into())
        }
        unsafe extern "system" fn SetTheme<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IVisualProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszsubappname: ::windows_core::PCWSTR, pszsubidlist: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTheme(this, ::core::mem::transmute(&pszsubappname), ::core::mem::transmute(&pszsubidlist)).into())
        }
        IVisualProperties_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetWatermark: SetWatermark::<Identity, Impl, OFFSET>,
            SetColor: SetColor::<Identity, Impl, OFFSET>,
            GetColor: GetColor::<Identity, Impl, OFFSET>,
            SetItemHeight: SetItemHeight::<Identity, Impl, OFFSET>,
            GetItemHeight: GetItemHeight::<Identity, Impl, OFFSET>,
            SetFont: SetFont::<Identity, Impl, OFFSET>,
            GetFont: GetFont::<Identity, Impl, OFFSET>,
            SetTheme: SetTheme::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IWebBrowser_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn GoBack(this: &Self::This) -> ::windows_core::Result<()>;
    fn GoForward(this: &Self::This) -> ::windows_core::Result<()>;
    fn GoHome(this: &Self::This) -> ::windows_core::Result<()>;
    fn GoSearch(this: &Self::This) -> ::windows_core::Result<()>;
    fn Navigate(this: &Self::This, url: &::windows_core::BSTR, flags: *const super::super::System::Variant::VARIANT, targetframename: *const super::super::System::Variant::VARIANT, postdata: *const super::super::System::Variant::VARIANT, headers: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Refresh(this: &Self::This) -> ::windows_core::Result<()>;
    fn Refresh2(this: &Self::This, level: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn Application(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Parent(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Container(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn Document(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::IDispatch>;
    fn TopLevelContainer(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn Type(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Left(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLeft(this: &Self::This, left: i32) -> ::windows_core::Result<()>;
    fn Top(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetTop(this: &Self::This, top: i32) -> ::windows_core::Result<()>;
    fn Width(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetWidth(this: &Self::This, width: i32) -> ::windows_core::Result<()>;
    fn Height(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetHeight(this: &Self::This, height: i32) -> ::windows_core::Result<()>;
    fn LocationName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn LocationURL(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Busy(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IWebBrowser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWebBrowser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GoBack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GoBack(this).into())
        }
        unsafe extern "system" fn GoForward<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GoForward(this).into())
        }
        unsafe extern "system" fn GoHome<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GoHome(this).into())
        }
        unsafe extern "system" fn GoSearch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GoSearch(this).into())
        }
        unsafe extern "system" fn Navigate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: *const super::super::System::Variant::VARIANT, targetframename: *const super::super::System::Variant::VARIANT, postdata: *const super::super::System::Variant::VARIANT, headers: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Navigate(this, ::core::mem::transmute(&url), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&targetframename), ::core::mem::transmute_copy(&postdata), ::core::mem::transmute_copy(&headers)).into())
        }
        unsafe extern "system" fn Refresh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Refresh(this).into())
        }
        unsafe extern "system" fn Refresh2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Refresh2(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn Application<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Application(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdisp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Parent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Parent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdisp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Container<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Container(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdisp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Document<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Document(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdisp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TopLevelContainer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TopLevelContainer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Left<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Left(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLeft<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, left: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLeft(this, ::core::mem::transmute_copy(&left)).into())
        }
        unsafe extern "system" fn Top<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Top(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, top: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTop(this, ::core::mem::transmute_copy(&top)).into())
        }
        unsafe extern "system" fn Width<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Width(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, width: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWidth(this, ::core::mem::transmute_copy(&width)).into())
        }
        unsafe extern "system" fn Height<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pl: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Height(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHeight<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, height: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHeight(this, ::core::mem::transmute_copy(&height)).into())
        }
        unsafe extern "system" fn LocationName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocationName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locationname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LocationURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocationURL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locationurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Busy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Busy(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IWebBrowser_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GoBack: GoBack::<Identity, Impl, OFFSET>,
            GoForward: GoForward::<Identity, Impl, OFFSET>,
            GoHome: GoHome::<Identity, Impl, OFFSET>,
            GoSearch: GoSearch::<Identity, Impl, OFFSET>,
            Navigate: Navigate::<Identity, Impl, OFFSET>,
            Refresh: Refresh::<Identity, Impl, OFFSET>,
            Refresh2: Refresh2::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            Application: Application::<Identity, Impl, OFFSET>,
            Parent: Parent::<Identity, Impl, OFFSET>,
            Container: Container::<Identity, Impl, OFFSET>,
            Document: Document::<Identity, Impl, OFFSET>,
            TopLevelContainer: TopLevelContainer::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            Left: Left::<Identity, Impl, OFFSET>,
            SetLeft: SetLeft::<Identity, Impl, OFFSET>,
            Top: Top::<Identity, Impl, OFFSET>,
            SetTop: SetTop::<Identity, Impl, OFFSET>,
            Width: Width::<Identity, Impl, OFFSET>,
            SetWidth: SetWidth::<Identity, Impl, OFFSET>,
            Height: Height::<Identity, Impl, OFFSET>,
            SetHeight: SetHeight::<Identity, Impl, OFFSET>,
            LocationName: LocationName::<Identity, Impl, OFFSET>,
            LocationURL: LocationURL::<Identity, Impl, OFFSET>,
            Busy: Busy::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IWebBrowser2_Impl: ::windows_core::BaseImpl + IWebBrowserApp_Impl {
    fn Navigate2(this: &Self::This, url: *const super::super::System::Variant::VARIANT, flags: *const super::super::System::Variant::VARIANT, targetframename: *const super::super::System::Variant::VARIANT, postdata: *const super::super::System::Variant::VARIANT, headers: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn QueryStatusWB(this: &Self::This, cmdid: super::super::System::Ole::OLECMDID) -> ::windows_core::Result<super::super::System::Ole::OLECMDF>;
    fn ExecWB(this: &Self::This, cmdid: super::super::System::Ole::OLECMDID, cmdexecopt: super::super::System::Ole::OLECMDEXECOPT, pvain: *const super::super::System::Variant::VARIANT, pvaout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ShowBrowserBar(this: &Self::This, pvaclsid: *const super::super::System::Variant::VARIANT, pvarshow: *const super::super::System::Variant::VARIANT, pvarsize: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ReadyState(this: &Self::This) -> ::windows_core::Result<super::super::System::Ole::READYSTATE>;
    fn Offline(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetOffline(this: &Self::This, boffline: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Silent(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetSilent(this: &Self::This, bsilent: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn RegisterAsBrowser(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetRegisterAsBrowser(this: &Self::This, bregister: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn RegisterAsDropTarget(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetRegisterAsDropTarget(this: &Self::This, bregister: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn TheaterMode(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetTheaterMode(this: &Self::This, bregister: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn AddressBar(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetAddressBar(this: &Self::This, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Resizable(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetResizable(this: &Self::This, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IWebBrowser2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IWebBrowserApp);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWebBrowser2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Navigate2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: *const super::super::System::Variant::VARIANT, flags: *const super::super::System::Variant::VARIANT, targetframename: *const super::super::System::Variant::VARIANT, postdata: *const super::super::System::Variant::VARIANT, headers: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Navigate2(this, ::core::mem::transmute_copy(&url), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&targetframename), ::core::mem::transmute_copy(&postdata), ::core::mem::transmute_copy(&headers)).into())
        }
        unsafe extern "system" fn QueryStatusWB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cmdid: super::super::System::Ole::OLECMDID, pcmdf: *mut super::super::System::Ole::OLECMDF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryStatusWB(this, ::core::mem::transmute_copy(&cmdid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcmdf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ExecWB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cmdid: super::super::System::Ole::OLECMDID, cmdexecopt: super::super::System::Ole::OLECMDEXECOPT, pvain: *const super::super::System::Variant::VARIANT, pvaout: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecWB(this, ::core::mem::transmute_copy(&cmdid), ::core::mem::transmute_copy(&cmdexecopt), ::core::mem::transmute_copy(&pvain), ::core::mem::transmute_copy(&pvaout)).into())
        }
        unsafe extern "system" fn ShowBrowserBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvaclsid: *const super::super::System::Variant::VARIANT, pvarshow: *const super::super::System::Variant::VARIANT, pvarsize: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowBrowserBar(this, ::core::mem::transmute_copy(&pvaclsid), ::core::mem::transmute_copy(&pvarshow), ::core::mem::transmute_copy(&pvarsize)).into())
        }
        unsafe extern "system" fn ReadyState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plreadystate: *mut super::super::System::Ole::READYSTATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReadyState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plreadystate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Offline<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pboffline: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Offline(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pboffline, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOffline<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, boffline: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffline(this, ::core::mem::transmute_copy(&boffline)).into())
        }
        unsafe extern "system" fn Silent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbsilent: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Silent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbsilent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSilent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsilent: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSilent(this, ::core::mem::transmute_copy(&bsilent)).into())
        }
        unsafe extern "system" fn RegisterAsBrowser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbregister: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RegisterAsBrowser(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbregister, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRegisterAsBrowser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bregister: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRegisterAsBrowser(this, ::core::mem::transmute_copy(&bregister)).into())
        }
        unsafe extern "system" fn RegisterAsDropTarget<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbregister: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RegisterAsDropTarget(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbregister, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRegisterAsDropTarget<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bregister: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRegisterAsDropTarget(this, ::core::mem::transmute_copy(&bregister)).into())
        }
        unsafe extern "system" fn TheaterMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbregister: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TheaterMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbregister, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTheaterMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bregister: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTheaterMode(this, ::core::mem::transmute_copy(&bregister)).into())
        }
        unsafe extern "system" fn AddressBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddressBar(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAddressBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAddressBar(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Resizable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Resizable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetResizable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetResizable(this, ::core::mem::transmute_copy(&value)).into())
        }
        IWebBrowser2_Vtbl {
            base__: <IWebBrowserApp as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Navigate2: Navigate2::<Identity, Impl, OFFSET>,
            QueryStatusWB: QueryStatusWB::<Identity, Impl, OFFSET>,
            ExecWB: ExecWB::<Identity, Impl, OFFSET>,
            ShowBrowserBar: ShowBrowserBar::<Identity, Impl, OFFSET>,
            ReadyState: ReadyState::<Identity, Impl, OFFSET>,
            Offline: Offline::<Identity, Impl, OFFSET>,
            SetOffline: SetOffline::<Identity, Impl, OFFSET>,
            Silent: Silent::<Identity, Impl, OFFSET>,
            SetSilent: SetSilent::<Identity, Impl, OFFSET>,
            RegisterAsBrowser: RegisterAsBrowser::<Identity, Impl, OFFSET>,
            SetRegisterAsBrowser: SetRegisterAsBrowser::<Identity, Impl, OFFSET>,
            RegisterAsDropTarget: RegisterAsDropTarget::<Identity, Impl, OFFSET>,
            SetRegisterAsDropTarget: SetRegisterAsDropTarget::<Identity, Impl, OFFSET>,
            TheaterMode: TheaterMode::<Identity, Impl, OFFSET>,
            SetTheaterMode: SetTheaterMode::<Identity, Impl, OFFSET>,
            AddressBar: AddressBar::<Identity, Impl, OFFSET>,
            SetAddressBar: SetAddressBar::<Identity, Impl, OFFSET>,
            Resizable: Resizable::<Identity, Impl, OFFSET>,
            SetResizable: SetResizable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IWebBrowserApp_Impl: ::windows_core::BaseImpl + IWebBrowser_Impl {
    fn Quit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ClientToWindow(this: &Self::This, pcx: *mut i32, pcy: *mut i32) -> ::windows_core::Result<()>;
    fn PutProperty(this: &Self::This, property: &::windows_core::BSTR, vtvalue: &super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn GetProperty(this: &Self::This, property: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn HWND(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::SHANDLE_PTR>;
    fn FullName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Path(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Visible(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetVisible(this: &Self::This, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn StatusBar(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetStatusBar(this: &Self::This, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn StatusText(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetStatusText(this: &Self::This, statustext: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ToolBar(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetToolBar(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn MenuBar(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetMenuBar(this: &Self::This, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn FullScreen(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn SetFullScreen(this: &Self::This, bfullscreen: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IWebBrowserApp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IWebBrowser);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWebBrowserApp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Quit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Quit(this).into())
        }
        unsafe extern "system" fn ClientToWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcx: *mut i32, pcy: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClientToWindow(this, ::core::mem::transmute_copy(&pcx), ::core::mem::transmute_copy(&pcy)).into())
        }
        unsafe extern "system" fn PutProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, property: ::std::mem::MaybeUninit<::windows_core::BSTR>, vtvalue: super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PutProperty(this, ::core::mem::transmute(&property), ::core::mem::transmute(&vtvalue)).into())
        }
        unsafe extern "system" fn GetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, property: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvtvalue: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperty(this, ::core::mem::transmute(&property)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvtvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HWND<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::Foundation::SHANDLE_PTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HWND(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FullName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fullname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FullName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fullname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Path<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Path(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(path, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Visible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Visible(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVisible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVisible(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn StatusBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StatusBar(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStatusBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatusBar(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn StatusText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, statustext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StatusText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(statustext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStatusText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, statustext: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatusText(this, ::core::mem::transmute(&statustext)).into())
        }
        unsafe extern "system" fn ToolBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ToolBar(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetToolBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetToolBar(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn MenuBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MenuBar(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMenuBar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMenuBar(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn FullScreen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbfullscreen: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FullScreen(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbfullscreen, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFullScreen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebBrowserApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bfullscreen: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFullScreen(this, ::core::mem::transmute_copy(&bfullscreen)).into())
        }
        IWebBrowserApp_Vtbl {
            base__: <IWebBrowser as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Quit: Quit::<Identity, Impl, OFFSET>,
            ClientToWindow: ClientToWindow::<Identity, Impl, OFFSET>,
            PutProperty: PutProperty::<Identity, Impl, OFFSET>,
            GetProperty: GetProperty::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            HWND: HWND::<Identity, Impl, OFFSET>,
            FullName: FullName::<Identity, Impl, OFFSET>,
            Path: Path::<Identity, Impl, OFFSET>,
            Visible: Visible::<Identity, Impl, OFFSET>,
            SetVisible: SetVisible::<Identity, Impl, OFFSET>,
            StatusBar: StatusBar::<Identity, Impl, OFFSET>,
            SetStatusBar: SetStatusBar::<Identity, Impl, OFFSET>,
            StatusText: StatusText::<Identity, Impl, OFFSET>,
            SetStatusText: SetStatusText::<Identity, Impl, OFFSET>,
            ToolBar: ToolBar::<Identity, Impl, OFFSET>,
            SetToolBar: SetToolBar::<Identity, Impl, OFFSET>,
            MenuBar: MenuBar::<Identity, Impl, OFFSET>,
            SetMenuBar: SetMenuBar::<Identity, Impl, OFFSET>,
            FullScreen: FullScreen::<Identity, Impl, OFFSET>,
            SetFullScreen: SetFullScreen::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Controls\"`"]
#[cfg(feature = "Win32_UI_Controls")]
pub trait IWebWizardExtension_Impl: ::windows_core::BaseImpl + IWizardExtension_Impl {
    fn SetInitialURL(this: &Self::This, pszurl: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetErrorURL(this: &Self::This, pszerrorurl: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Controls")]
impl ::windows_core::Iids for IWebWizardExtension {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IWizardExtension);
}
#[cfg(feature = "Win32_UI_Controls")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardExtension_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWebWizardExtension {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetInitialURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInitialURL(this, ::core::mem::transmute(&pszurl)).into())
        }
        unsafe extern "system" fn SetErrorURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszerrorurl: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetErrorURL(this, ::core::mem::transmute(&pszerrorurl)).into())
        }
        IWebWizardExtension_Vtbl {
            base__: <IWizardExtension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetInitialURL: SetInitialURL::<Identity, Impl, OFFSET>,
            SetErrorURL: SetErrorURL::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IWebWizardHost_Impl: ::windows_core::BaseImpl + super::super::System::Com::IDispatch_Impl {
    fn FinalBack(this: &Self::This) -> ::windows_core::Result<()>;
    fn FinalNext(this: &Self::This) -> ::windows_core::Result<()>;
    fn Cancel(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetCaption(this: &Self::This, bstrcaption: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Caption(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_Property(this: &Self::This, bstrpropertyname: &::windows_core::BSTR, pvproperty: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn get_Property(this: &Self::This, bstrpropertyname: &::windows_core::BSTR) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn SetWizardButtons(this: &Self::This, vfenableback: super::super::Foundation::VARIANT_BOOL, vfenablenext: super::super::Foundation::VARIANT_BOOL, vflastpage: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SetHeaderText(this: &Self::This, bstrheadertitle: &::windows_core::BSTR, bstrheadersubtitle: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IWebWizardHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWebWizardHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FinalBack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FinalBack(this).into())
        }
        unsafe extern "system" fn FinalNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FinalNext(this).into())
        }
        unsafe extern "system" fn Cancel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Cancel(this).into())
        }
        unsafe extern "system" fn SetCaption<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrcaption: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCaption(this, ::core::mem::transmute(&bstrcaption)).into())
        }
        unsafe extern "system" fn Caption<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrcaption: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Caption(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrcaption, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Property<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvproperty: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Property(this, ::core::mem::transmute(&bstrpropertyname), ::core::mem::transmute_copy(&pvproperty)).into())
        }
        unsafe extern "system" fn get_Property<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvproperty: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Property(this, ::core::mem::transmute(&bstrpropertyname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvproperty, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWizardButtons<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vfenableback: super::super::Foundation::VARIANT_BOOL, vfenablenext: super::super::Foundation::VARIANT_BOOL, vflastpage: super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWizardButtons(this, ::core::mem::transmute_copy(&vfenableback), ::core::mem::transmute_copy(&vfenablenext), ::core::mem::transmute_copy(&vflastpage)).into())
        }
        unsafe extern "system" fn SetHeaderText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrheadertitle: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrheadersubtitle: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHeaderText(this, ::core::mem::transmute(&bstrheadertitle), ::core::mem::transmute(&bstrheadersubtitle)).into())
        }
        IWebWizardHost_Vtbl {
            base__: <super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FinalBack: FinalBack::<Identity, Impl, OFFSET>,
            FinalNext: FinalNext::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
            SetCaption: SetCaption::<Identity, Impl, OFFSET>,
            Caption: Caption::<Identity, Impl, OFFSET>,
            put_Property: put_Property::<Identity, Impl, OFFSET>,
            get_Property: get_Property::<Identity, Impl, OFFSET>,
            SetWizardButtons: SetWizardButtons::<Identity, Impl, OFFSET>,
            SetHeaderText: SetHeaderText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IWebWizardHost2_Impl: ::windows_core::BaseImpl + IWebWizardHost_Impl {
    fn SignString(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IWebWizardHost2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IWebWizardHost);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWebWizardHost2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SignString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWebWizardHost2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>, signedvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignString(this, ::core::mem::transmute(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(signedvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IWebWizardHost2_Vtbl { base__: <IWebWizardHost as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SignString: SignString::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Controls\"`"]
#[cfg(feature = "Win32_UI_Controls")]
pub trait IWizardExtension_Impl: ::windows_core::BaseImpl {
    fn AddPages(this: &Self::This, apages: *mut super::Controls::HPROPSHEETPAGE, cpages: u32, pnpagesadded: *mut u32) -> ::windows_core::Result<()>;
    fn GetFirstPage(this: &Self::This) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE>;
    fn GetLastPage(this: &Self::This) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE>;
}
#[cfg(feature = "Win32_UI_Controls")]
impl ::windows_core::Iids for IWizardExtension {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Controls")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardExtension_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWizardExtension {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddPages<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, apages: *mut super::Controls::HPROPSHEETPAGE, cpages: u32, pnpagesadded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPages(this, ::core::mem::transmute_copy(&apages), ::core::mem::transmute_copy(&cpages), ::core::mem::transmute_copy(&pnpagesadded)).into())
        }
        unsafe extern "system" fn GetFirstPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFirstPage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phpage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastPage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phpage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IWizardExtension_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddPages: AddPages::<Identity, Impl, OFFSET>,
            GetFirstPage: GetFirstPage::<Identity, Impl, OFFSET>,
            GetLastPage: GetLastPage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_UI_Controls\"`"]
#[cfg(feature = "Win32_UI_Controls")]
pub trait IWizardSite_Impl: ::windows_core::BaseImpl {
    fn GetPreviousPage(this: &Self::This) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE>;
    fn GetNextPage(this: &Self::This) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE>;
    fn GetCancelledPage(this: &Self::This) -> ::windows_core::Result<super::Controls::HPROPSHEETPAGE>;
}
#[cfg(feature = "Win32_UI_Controls")]
impl ::windows_core::Iids for IWizardSite {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Controls")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardSite_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWizardSite {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPreviousPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPreviousPage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phpage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextPage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phpage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCancelledPage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWizardSite_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phpage: *mut super::Controls::HPROPSHEETPAGE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCancelledPage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phpage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IWizardSite_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPreviousPage: GetPreviousPage::<Identity, Impl, OFFSET>,
            GetNextPage: GetNextPage::<Identity, Impl, OFFSET>,
            GetCancelledPage: GetCancelledPage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
