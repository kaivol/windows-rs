#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait DebugBaseEventCallbacks_Impl: ::windows_core::BaseImpl + IDebugEventCallbacks_Impl {}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for DebugBaseEventCallbacks {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugEventCallbacks);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DebugBaseEventCallbacks_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DebugBaseEventCallbacks {
    const VTABLE: Self::Vtable = { DebugBaseEventCallbacks_Vtbl { base__: <IDebugEventCallbacks as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait DebugBaseEventCallbacksWide_Impl: ::windows_core::BaseImpl + IDebugEventCallbacksWide_Impl {}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for DebugBaseEventCallbacksWide {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugEventCallbacksWide);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: DebugBaseEventCallbacksWide_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for DebugBaseEventCallbacksWide {
    const VTABLE: Self::Vtable = { DebugBaseEventCallbacksWide_Vtbl { base__: <IDebugEventCallbacksWide as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICodeAddressConcept_Impl: ::windows_core::BaseImpl {
    fn GetContainingSymbol(this: &Self::This, pcontextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IDebugHostSymbol>;
}
impl ::windows_core::Iids for ICodeAddressConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodeAddressConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICodeAddressConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetContainingSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodeAddressConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontextobject: *mut ::core::ffi::c_void, ppsymbol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContainingSymbol(this, ::windows_core::from_raw_borrowed(&pcontextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsymbol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICodeAddressConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetContainingSymbol: GetContainingSymbol::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IComparableConcept_Impl: ::windows_core::BaseImpl {
    fn CompareObjects(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, otherobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<i32>;
}
impl ::windows_core::Iids for IComparableConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComparableConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComparableConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CompareObjects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComparableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, otherobject: *mut ::core::ffi::c_void, comparisonresult: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CompareObjects(this, ::windows_core::from_raw_borrowed(&contextobject), ::windows_core::from_raw_borrowed(&otherobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(comparisonresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IComparableConcept_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CompareObjects: CompareObjects::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelConcept_Impl: ::windows_core::BaseImpl {
    fn InitializeObject(this: &Self::This, modelobject: ::core::option::Option<&IModelObject>, matchingtypesignature: ::core::option::Option<&IDebugHostTypeSignature>, wildcardmatches: ::core::option::Option<&IDebugHostSymbolEnumerator>) -> ::windows_core::Result<()>;
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDataModelConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelobject: *mut ::core::ffi::c_void, matchingtypesignature: *mut ::core::ffi::c_void, wildcardmatches: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeObject(this, ::windows_core::from_raw_borrowed(&modelobject), ::windows_core::from_raw_borrowed(&matchingtypesignature), ::windows_core::from_raw_borrowed(&wildcardmatches)).into())
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(modelname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeObject: InitializeObject::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDataModelManager_Impl: ::windows_core::BaseImpl {
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn CreateNoValue(this: &Self::This) -> ::windows_core::Result<IModelObject>;
    fn CreateErrorObject(this: &Self::This, hrerror: ::windows_core::HRESULT, pwszmessage: &::windows_core::PCWSTR) -> ::windows_core::Result<IModelObject>;
    fn CreateTypedObject(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, objectlocation: &Location, objecttype: ::core::option::Option<&IDebugHostType>) -> ::windows_core::Result<IModelObject>;
    fn CreateTypedObjectReference(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, objectlocation: &Location, objecttype: ::core::option::Option<&IDebugHostType>) -> ::windows_core::Result<IModelObject>;
    fn CreateSyntheticObject(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>) -> ::windows_core::Result<IModelObject>;
    fn CreateDataModelObject(this: &Self::This, datamodel: ::core::option::Option<&IDataModelConcept>) -> ::windows_core::Result<IModelObject>;
    fn CreateIntrinsicObject(this: &Self::This, objectkind: ModelObjectKind, intrinsicdata: *const super::super::super::Variant::VARIANT) -> ::windows_core::Result<IModelObject>;
    fn CreateTypedIntrinsicObject(this: &Self::This, intrinsicdata: *const super::super::super::Variant::VARIANT, r#type: ::core::option::Option<&IDebugHostType>) -> ::windows_core::Result<IModelObject>;
    fn GetModelForTypeSignature(this: &Self::This, typesignature: ::core::option::Option<&IDebugHostTypeSignature>) -> ::windows_core::Result<IModelObject>;
    fn GetModelForType(this: &Self::This, r#type: ::core::option::Option<&IDebugHostType>, datamodel: *mut ::core::option::Option<IModelObject>, typesignature: *mut ::core::option::Option<IDebugHostTypeSignature>, wildcardmatches: *mut ::core::option::Option<IDebugHostSymbolEnumerator>) -> ::windows_core::Result<()>;
    fn RegisterModelForTypeSignature(this: &Self::This, typesignature: ::core::option::Option<&IDebugHostTypeSignature>, datamodel: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn UnregisterModelForTypeSignature(this: &Self::This, datamodel: ::core::option::Option<&IModelObject>, typesignature: ::core::option::Option<&IDebugHostTypeSignature>) -> ::windows_core::Result<()>;
    fn RegisterExtensionForTypeSignature(this: &Self::This, typesignature: ::core::option::Option<&IDebugHostTypeSignature>, datamodel: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn UnregisterExtensionForTypeSignature(this: &Self::This, datamodel: ::core::option::Option<&IModelObject>, typesignature: ::core::option::Option<&IDebugHostTypeSignature>) -> ::windows_core::Result<()>;
    fn CreateMetadataStore(this: &Self::This, parentstore: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<IKeyStore>;
    fn GetRootNamespace(this: &Self::This) -> ::windows_core::Result<IModelObject>;
    fn RegisterNamedModel(this: &Self::This, modelname: &::windows_core::PCWSTR, modeobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn UnregisterNamedModel(this: &Self::This, modelname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AcquireNamedModel(this: &Self::This, modelname: &::windows_core::PCWSTR) -> ::windows_core::Result<IModelObject>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDataModelManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn CreateNoValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateNoValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateErrorObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrerror: ::windows_core::HRESULT, pwszmessage: ::windows_core::PCWSTR, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateErrorObject(this, ::core::mem::transmute_copy(&hrerror), ::core::mem::transmute(&pwszmessage)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTypedObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, objectlocation: Location, objecttype: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTypedObject(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&objectlocation), ::windows_core::from_raw_borrowed(&objecttype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTypedObjectReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, objectlocation: Location, objecttype: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTypedObjectReference(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&objectlocation), ::windows_core::from_raw_borrowed(&objecttype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSyntheticObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSyntheticObject(this, ::windows_core::from_raw_borrowed(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateDataModelObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodel: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateDataModelObject(this, ::windows_core::from_raw_borrowed(&datamodel)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateIntrinsicObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, objectkind: ModelObjectKind, intrinsicdata: *const super::super::super::Variant::VARIANT, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateIntrinsicObject(this, ::core::mem::transmute_copy(&objectkind), ::core::mem::transmute_copy(&intrinsicdata)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTypedIntrinsicObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, intrinsicdata: *const super::super::super::Variant::VARIANT, r#type: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTypedIntrinsicObject(this, ::core::mem::transmute_copy(&intrinsicdata), ::windows_core::from_raw_borrowed(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModelForTypeSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: *mut ::core::ffi::c_void, datamodel: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModelForTypeSignature(this, ::windows_core::from_raw_borrowed(&typesignature)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(datamodel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModelForType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut ::core::ffi::c_void, datamodel: *mut *mut ::core::ffi::c_void, typesignature: *mut *mut ::core::ffi::c_void, wildcardmatches: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModelForType(this, ::windows_core::from_raw_borrowed(&r#type), ::core::mem::transmute_copy(&datamodel), ::core::mem::transmute_copy(&typesignature), ::core::mem::transmute_copy(&wildcardmatches)).into())
        }
        unsafe extern "system" fn RegisterModelForTypeSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: *mut ::core::ffi::c_void, datamodel: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterModelForTypeSignature(this, ::windows_core::from_raw_borrowed(&typesignature), ::windows_core::from_raw_borrowed(&datamodel)).into())
        }
        unsafe extern "system" fn UnregisterModelForTypeSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodel: *mut ::core::ffi::c_void, typesignature: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterModelForTypeSignature(this, ::windows_core::from_raw_borrowed(&datamodel), ::windows_core::from_raw_borrowed(&typesignature)).into())
        }
        unsafe extern "system" fn RegisterExtensionForTypeSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: *mut ::core::ffi::c_void, datamodel: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterExtensionForTypeSignature(this, ::windows_core::from_raw_borrowed(&typesignature), ::windows_core::from_raw_borrowed(&datamodel)).into())
        }
        unsafe extern "system" fn UnregisterExtensionForTypeSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodel: *mut ::core::ffi::c_void, typesignature: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterExtensionForTypeSignature(this, ::windows_core::from_raw_borrowed(&datamodel), ::windows_core::from_raw_borrowed(&typesignature)).into())
        }
        unsafe extern "system" fn CreateMetadataStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parentstore: *mut ::core::ffi::c_void, metadatastore: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMetadataStore(this, ::windows_core::from_raw_borrowed(&parentstore)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(metadatastore, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRootNamespace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rootnamespace: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRootNamespace(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rootnamespace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterNamedModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: ::windows_core::PCWSTR, modeobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterNamedModel(this, ::core::mem::transmute(&modelname), ::windows_core::from_raw_borrowed(&modeobject)).into())
        }
        unsafe extern "system" fn UnregisterNamedModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterNamedModel(this, ::core::mem::transmute(&modelname)).into())
        }
        unsafe extern "system" fn AcquireNamedModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: ::windows_core::PCWSTR, modelobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AcquireNamedModel(this, ::core::mem::transmute(&modelname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(modelobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Close: Close::<Identity, Impl, OFFSET>,
            CreateNoValue: CreateNoValue::<Identity, Impl, OFFSET>,
            CreateErrorObject: CreateErrorObject::<Identity, Impl, OFFSET>,
            CreateTypedObject: CreateTypedObject::<Identity, Impl, OFFSET>,
            CreateTypedObjectReference: CreateTypedObjectReference::<Identity, Impl, OFFSET>,
            CreateSyntheticObject: CreateSyntheticObject::<Identity, Impl, OFFSET>,
            CreateDataModelObject: CreateDataModelObject::<Identity, Impl, OFFSET>,
            CreateIntrinsicObject: CreateIntrinsicObject::<Identity, Impl, OFFSET>,
            CreateTypedIntrinsicObject: CreateTypedIntrinsicObject::<Identity, Impl, OFFSET>,
            GetModelForTypeSignature: GetModelForTypeSignature::<Identity, Impl, OFFSET>,
            GetModelForType: GetModelForType::<Identity, Impl, OFFSET>,
            RegisterModelForTypeSignature: RegisterModelForTypeSignature::<Identity, Impl, OFFSET>,
            UnregisterModelForTypeSignature: UnregisterModelForTypeSignature::<Identity, Impl, OFFSET>,
            RegisterExtensionForTypeSignature: RegisterExtensionForTypeSignature::<Identity, Impl, OFFSET>,
            UnregisterExtensionForTypeSignature: UnregisterExtensionForTypeSignature::<Identity, Impl, OFFSET>,
            CreateMetadataStore: CreateMetadataStore::<Identity, Impl, OFFSET>,
            GetRootNamespace: GetRootNamespace::<Identity, Impl, OFFSET>,
            RegisterNamedModel: RegisterNamedModel::<Identity, Impl, OFFSET>,
            UnregisterNamedModel: UnregisterNamedModel::<Identity, Impl, OFFSET>,
            AcquireNamedModel: AcquireNamedModel::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDataModelManager2_Impl: ::windows_core::BaseImpl + IDataModelManager_Impl {
    fn AcquireSubNamespace(this: &Self::This, modelname: &::windows_core::PCWSTR, subnamespacemodelname: &::windows_core::PCWSTR, accessname: &::windows_core::PCWSTR, metadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<IModelObject>;
    fn CreateTypedIntrinsicObjectEx(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, intrinsicdata: *const super::super::super::Variant::VARIANT, r#type: ::core::option::Option<&IDebugHostType>) -> ::windows_core::Result<IModelObject>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDataModelManager2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDataModelManager);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelManager2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AcquireSubNamespace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modelname: ::windows_core::PCWSTR, subnamespacemodelname: ::windows_core::PCWSTR, accessname: ::windows_core::PCWSTR, metadata: *mut ::core::ffi::c_void, namespacemodelobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AcquireSubNamespace(this, ::core::mem::transmute(&modelname), ::core::mem::transmute(&subnamespacemodelname), ::core::mem::transmute(&accessname), ::windows_core::from_raw_borrowed(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(namespacemodelobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTypedIntrinsicObjectEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelManager2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, intrinsicdata: *const super::super::super::Variant::VARIANT, r#type: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTypedIntrinsicObjectEx(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute_copy(&intrinsicdata), ::windows_core::from_raw_borrowed(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelManager2_Vtbl {
            base__: <IDataModelManager as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AcquireSubNamespace: AcquireSubNamespace::<Identity, Impl, OFFSET>,
            CreateTypedIntrinsicObjectEx: CreateTypedIntrinsicObjectEx::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelNameBinder_Impl: ::windows_core::BaseImpl {
    fn BindValue(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, name: &::windows_core::PCWSTR, value: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn BindReference(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, name: &::windows_core::PCWSTR, reference: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn EnumerateValues(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IKeyEnumerator>;
    fn EnumerateReferences(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IKeyEnumerator>;
}
impl ::windows_core::Iids for IDataModelNameBinder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelNameBinder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelNameBinder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BindValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelNameBinder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, value: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindValue(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn BindReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelNameBinder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, reference: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindReference(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&reference), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn EnumerateValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelNameBinder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateValues(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateReferences<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelNameBinder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateReferences(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelNameBinder_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BindValue: BindValue::<Identity, Impl, OFFSET>,
            BindReference: BindReference::<Identity, Impl, OFFSET>,
            EnumerateValues: EnumerateValues::<Identity, Impl, OFFSET>,
            EnumerateReferences: EnumerateReferences::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IDataModelScript_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Rename(this: &Self::This, scriptname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Populate(this: &Self::This, contentstream: ::core::option::Option<&super::super::super::Com::IStream>) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, client: ::core::option::Option<&IDataModelScriptClient>) -> ::windows_core::Result<()>;
    fn Unlink(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsInvocable(this: &Self::This) -> ::windows_core::Result<bool>;
    fn InvokeMain(this: &Self::This, client: ::core::option::Option<&IDataModelScriptClient>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IDataModelScript {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScript {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(scriptname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Rename<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Rename(this, ::core::mem::transmute(&scriptname)).into())
        }
        unsafe extern "system" fn Populate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentstream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Populate(this, ::windows_core::from_raw_borrowed(&contentstream)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn Unlink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unlink(this).into())
        }
        unsafe extern "system" fn IsInvocable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isinvocable: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsInvocable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(isinvocable, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InvokeMain<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScript_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeMain(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        IDataModelScript_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            Rename: Rename::<Identity, Impl, OFFSET>,
            Populate: Populate::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            Unlink: Unlink::<Identity, Impl, OFFSET>,
            IsInvocable: IsInvocable::<Identity, Impl, OFFSET>,
            InvokeMain: InvokeMain::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptClient_Impl: ::windows_core::BaseImpl {
    fn ReportError(this: &Self::This, errclass: ErrorClass, hrfail: ::windows_core::HRESULT, message: &::windows_core::PCWSTR, line: u32, position: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDataModelScriptClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReportError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrfail: ::windows_core::HRESULT, message: ::windows_core::PCWSTR, line: u32, position: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReportError(this, ::core::mem::transmute_copy(&errclass), ::core::mem::transmute_copy(&hrfail), ::core::mem::transmute(&message), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&position)).into())
        }
        IDataModelScriptClient_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, ReportError: ReportError::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebug_Impl: ::windows_core::BaseImpl {
    fn GetDebugState(this: &Self::This) -> ScriptDebugState;
    fn GetCurrentPosition(this: &Self::This, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetStack(this: &Self::This) -> ::windows_core::Result<IDataModelScriptDebugStack>;
    fn SetBreakpoint(this: &Self::This, lineposition: u32, columnposition: u32) -> ::windows_core::Result<IDataModelScriptDebugBreakpoint>;
    fn FindBreakpointById(this: &Self::This, breakpointid: u64) -> ::windows_core::Result<IDataModelScriptDebugBreakpoint>;
    fn EnumerateBreakpoints(this: &Self::This) -> ::windows_core::Result<IDataModelScriptDebugBreakpointEnumerator>;
    fn GetEventFilter(this: &Self::This, eventfilter: ScriptDebugEventFilter) -> ::windows_core::Result<bool>;
    fn SetEventFilter(this: &Self::This, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows_core::Result<()>;
    fn StartDebugging(this: &Self::This, debugclient: ::core::option::Option<&IDataModelScriptDebugClient>) -> ::windows_core::Result<()>;
    fn StopDebugging(this: &Self::This, debugclient: ::core::option::Option<&IDataModelScriptDebugClient>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDataModelScriptDebug {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebug {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDebugState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ScriptDebugState {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebugState(this))
        }
        unsafe extern "system" fn GetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentposition: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentPosition(this, ::core::mem::transmute_copy(&currentposition), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)).into())
        }
        unsafe extern "system" fn GetStack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stack: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStack(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(stack, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lineposition: u32, columnposition: u32, breakpoint: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetBreakpoint(this, ::core::mem::transmute_copy(&lineposition), ::core::mem::transmute_copy(&columnposition)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(breakpoint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breakpointid: u64, breakpoint: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindBreakpointById(this, ::core::mem::transmute_copy(&breakpointid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(breakpoint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breakpointenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(breakpointenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventFilter(this, ::core::mem::transmute_copy(&eventfilter)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(isbreakenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventfilter: ScriptDebugEventFilter, isbreakenabled: u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilter(this, ::core::mem::transmute_copy(&eventfilter), ::core::mem::transmute_copy(&isbreakenabled)).into())
        }
        unsafe extern "system" fn StartDebugging<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, debugclient: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartDebugging(this, ::windows_core::from_raw_borrowed(&debugclient)).into())
        }
        unsafe extern "system" fn StopDebugging<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, debugclient: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopDebugging(this, ::windows_core::from_raw_borrowed(&debugclient)).into())
        }
        IDataModelScriptDebug_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDebugState: GetDebugState::<Identity, Impl, OFFSET>,
            GetCurrentPosition: GetCurrentPosition::<Identity, Impl, OFFSET>,
            GetStack: GetStack::<Identity, Impl, OFFSET>,
            SetBreakpoint: SetBreakpoint::<Identity, Impl, OFFSET>,
            FindBreakpointById: FindBreakpointById::<Identity, Impl, OFFSET>,
            EnumerateBreakpoints: EnumerateBreakpoints::<Identity, Impl, OFFSET>,
            GetEventFilter: GetEventFilter::<Identity, Impl, OFFSET>,
            SetEventFilter: SetEventFilter::<Identity, Impl, OFFSET>,
            StartDebugging: StartDebugging::<Identity, Impl, OFFSET>,
            StopDebugging: StopDebugging::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebug2_Impl: ::windows_core::BaseImpl + IDataModelScriptDebug_Impl {
    fn SetBreakpointAtFunction(this: &Self::This, functionname: &::windows_core::PCWSTR) -> ::windows_core::Result<IDataModelScriptDebugBreakpoint>;
}
impl ::windows_core::Iids for IDataModelScriptDebug2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDataModelScriptDebug);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebug2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBreakpointAtFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebug2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, functionname: ::windows_core::PCWSTR, breakpoint: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetBreakpointAtFunction(this, ::core::mem::transmute(&functionname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(breakpoint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptDebug2_Vtbl {
            base__: <IDataModelScriptDebug as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBreakpointAtFunction: SetBreakpointAtFunction::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebugBreakpoint_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> u64;
    fn IsEnabled(this: &Self::This) -> bool;
    fn Enable(this: &Self::This);
    fn Disable(this: &Self::This);
    fn Remove(this: &Self::This);
    fn GetPosition(this: &Self::This, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDataModelScriptDebugBreakpoint {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebugBreakpoint {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetId(this))
        }
        unsafe extern "system" fn IsEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> bool {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsEnabled(this))
        }
        unsafe extern "system" fn Enable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Enable(this))
        }
        unsafe extern "system" fn Disable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disable(this))
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this))
        }
        unsafe extern "system" fn GetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPosition(this, ::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)).into())
        }
        IDataModelScriptDebugBreakpoint_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            IsEnabled: IsEnabled::<Identity, Impl, OFFSET>,
            Enable: Enable::<Identity, Impl, OFFSET>,
            Disable: Disable::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            GetPosition: GetPosition::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebugBreakpointEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This) -> ::windows_core::Result<IDataModelScriptDebugBreakpoint>;
}
impl ::windows_core::Iids for IDataModelScriptDebugBreakpointEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpointEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebugBreakpointEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpointEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugBreakpointEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breakpoint: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(breakpoint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptDebugBreakpointEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebugClient_Impl: ::windows_core::BaseImpl {
    fn NotifyDebugEvent(this: &Self::This, peventinfo: *const ScriptDebugEventInformation, pscript: ::core::option::Option<&IDataModelScript>, peventdataobject: ::core::option::Option<&IModelObject>, resumeeventkind: *mut ScriptExecutionKind) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDataModelScriptDebugClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebugClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyDebugEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peventinfo: *const ScriptDebugEventInformation, pscript: *mut ::core::ffi::c_void, peventdataobject: *mut ::core::ffi::c_void, resumeeventkind: *mut ScriptExecutionKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyDebugEvent(this, ::core::mem::transmute_copy(&peventinfo), ::windows_core::from_raw_borrowed(&pscript), ::windows_core::from_raw_borrowed(&peventdataobject), ::core::mem::transmute_copy(&resumeeventkind)).into())
        }
        IDataModelScriptDebugClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            NotifyDebugEvent: NotifyDebugEvent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebugStack_Impl: ::windows_core::BaseImpl {
    fn GetFrameCount(this: &Self::This) -> u64;
    fn GetStackFrame(this: &Self::This, framenumber: u64) -> ::windows_core::Result<IDataModelScriptDebugStackFrame>;
}
impl ::windows_core::Iids for IDataModelScriptDebugStack {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStack_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebugStack {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFrameCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFrameCount(this))
        }
        unsafe extern "system" fn GetStackFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, framenumber: u64, stackframe: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStackFrame(this, ::core::mem::transmute_copy(&framenumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(stackframe, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptDebugStack_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFrameCount: GetFrameCount::<Identity, Impl, OFFSET>,
            GetStackFrame: GetStackFrame::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebugStackFrame_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetPosition(this: &Self::This, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn IsTransitionPoint(this: &Self::This) -> ::windows_core::Result<bool>;
    fn GetTransition(this: &Self::This, transitionscript: *mut ::core::option::Option<IDataModelScript>, istransitioncontiguous: *mut bool) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, pwszexpression: &::windows_core::PCWSTR) -> ::windows_core::Result<IModelObject>;
    fn EnumerateLocals(this: &Self::This) -> ::windows_core::Result<IDataModelScriptDebugVariableSetEnumerator>;
    fn EnumerateArguments(this: &Self::This) -> ::windows_core::Result<IDataModelScriptDebugVariableSetEnumerator>;
}
impl ::windows_core::Iids for IDataModelScriptDebugStackFrame {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebugStackFrame {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: *mut ScriptDebugPosition, positionspanend: *mut ScriptDebugPosition, linetext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPosition(this, ::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&positionspanend), ::core::mem::transmute_copy(&linetext)).into())
        }
        unsafe extern "system" fn IsTransitionPoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, istransitionpoint: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsTransitionPoint(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(istransitionpoint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, transitionscript: *mut *mut ::core::ffi::c_void, istransitioncontiguous: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTransition(this, ::core::mem::transmute_copy(&transitionscript), ::core::mem::transmute_copy(&istransitioncontiguous)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszexpression: ::windows_core::PCWSTR, ppresult: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Evaluate(this, ::core::mem::transmute(&pwszexpression)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateLocals<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, variablesenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateLocals(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(variablesenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateArguments<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugStackFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, variablesenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateArguments(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(variablesenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptDebugStackFrame_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetPosition: GetPosition::<Identity, Impl, OFFSET>,
            IsTransitionPoint: IsTransitionPoint::<Identity, Impl, OFFSET>,
            GetTransition: GetTransition::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            EnumerateLocals: EnumerateLocals::<Identity, Impl, OFFSET>,
            EnumerateArguments: EnumerateArguments::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptDebugVariableSetEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This, variablename: *mut ::windows_core::BSTR, variablevalue: *mut ::core::option::Option<IModelObject>, variablemetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDataModelScriptDebugVariableSetEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugVariableSetEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptDebugVariableSetEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugVariableSetEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptDebugVariableSetEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, variablename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, variablevalue: *mut *mut ::core::ffi::c_void, variablemetadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&variablename), ::core::mem::transmute_copy(&variablevalue), ::core::mem::transmute_copy(&variablemetadata)).into())
        }
        IDataModelScriptDebugVariableSetEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptHostContext_Impl: ::windows_core::BaseImpl {
    fn NotifyScriptChange(this: &Self::This, script: ::core::option::Option<&IDataModelScript>, changekind: ScriptChangeKind) -> ::windows_core::Result<()>;
    fn GetNamespaceObject(this: &Self::This) -> ::windows_core::Result<IModelObject>;
}
impl ::windows_core::Iids for IDataModelScriptHostContext {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptHostContext_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptHostContext {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyScriptChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptHostContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, script: *mut ::core::ffi::c_void, changekind: ScriptChangeKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyScriptChange(this, ::windows_core::from_raw_borrowed(&script), ::core::mem::transmute_copy(&changekind)).into())
        }
        unsafe extern "system" fn GetNamespaceObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptHostContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, namespaceobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNamespaceObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(namespaceobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptHostContext_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            NotifyScriptChange: NotifyScriptChange::<Identity, Impl, OFFSET>,
            GetNamespaceObject: GetNamespaceObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptManager_Impl: ::windows_core::BaseImpl {
    fn GetDefaultNameBinder(this: &Self::This) -> ::windows_core::Result<IDataModelNameBinder>;
    fn RegisterScriptProvider(this: &Self::This, provider: ::core::option::Option<&IDataModelScriptProvider>) -> ::windows_core::Result<()>;
    fn UnregisterScriptProvider(this: &Self::This, provider: ::core::option::Option<&IDataModelScriptProvider>) -> ::windows_core::Result<()>;
    fn FindProviderForScriptType(this: &Self::This, scripttype: &::windows_core::PCWSTR) -> ::windows_core::Result<IDataModelScriptProvider>;
    fn FindProviderForScriptExtension(this: &Self::This, scriptextension: &::windows_core::PCWSTR) -> ::windows_core::Result<IDataModelScriptProvider>;
    fn EnumerateScriptProviders(this: &Self::This) -> ::windows_core::Result<IDataModelScriptProviderEnumerator>;
}
impl ::windows_core::Iids for IDataModelScriptManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDefaultNameBinder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnamebinder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultNameBinder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnamebinder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterScriptProvider<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provider: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterScriptProvider(this, ::windows_core::from_raw_borrowed(&provider)).into())
        }
        unsafe extern "system" fn UnregisterScriptProvider<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provider: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterScriptProvider(this, ::windows_core::from_raw_borrowed(&provider)).into())
        }
        unsafe extern "system" fn FindProviderForScriptType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scripttype: ::windows_core::PCWSTR, provider: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindProviderForScriptType(this, ::core::mem::transmute(&scripttype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(provider, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindProviderForScriptExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scriptextension: ::windows_core::PCWSTR, provider: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindProviderForScriptExtension(this, ::core::mem::transmute(&scriptextension)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(provider, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateScriptProviders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateScriptProviders(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDefaultNameBinder: GetDefaultNameBinder::<Identity, Impl, OFFSET>,
            RegisterScriptProvider: RegisterScriptProvider::<Identity, Impl, OFFSET>,
            UnregisterScriptProvider: UnregisterScriptProvider::<Identity, Impl, OFFSET>,
            FindProviderForScriptType: FindProviderForScriptType::<Identity, Impl, OFFSET>,
            FindProviderForScriptExtension: FindProviderForScriptExtension::<Identity, Impl, OFFSET>,
            EnumerateScriptProviders: EnumerateScriptProviders::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptProvider_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetExtension(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CreateScript(this: &Self::This) -> ::windows_core::Result<IDataModelScript>;
    fn GetDefaultTemplateContent(this: &Self::This) -> ::windows_core::Result<IDataModelScriptTemplate>;
    fn EnumerateTemplates(this: &Self::This) -> ::windows_core::Result<IDataModelScriptTemplateEnumerator>;
}
impl ::windows_core::Iids for IDataModelScriptProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, extension: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtension(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(extension, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateScript<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, script: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateScript(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(script, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDefaultTemplateContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatecontent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultTemplateContent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(templatecontent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateTemplates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateTemplates(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetExtension: GetExtension::<Identity, Impl, OFFSET>,
            CreateScript: CreateScript::<Identity, Impl, OFFSET>,
            GetDefaultTemplateContent: GetDefaultTemplateContent::<Identity, Impl, OFFSET>,
            EnumerateTemplates: EnumerateTemplates::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptProviderEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This) -> ::windows_core::Result<IDataModelScriptProvider>;
}
impl ::windows_core::Iids for IDataModelScriptProviderEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProviderEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptProviderEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProviderEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptProviderEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, provider: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(provider, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptProviderEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IDataModelScriptTemplate_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetDescription(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetContent(this: &Self::This) -> ::windows_core::Result<super::super::super::Com::IStream>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IDataModelScriptTemplate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptTemplate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(templatename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatedescription: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDescription(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(templatedescription, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(contentstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptTemplate_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            GetContent: GetContent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDataModelScriptTemplateEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This) -> ::windows_core::Result<IDataModelScriptTemplate>;
}
impl ::windows_core::Iids for IDataModelScriptTemplateEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplateEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDataModelScriptTemplateEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplateEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDataModelScriptTemplateEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, templatecontent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(templatecontent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDataModelScriptTemplateEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugAdvanced_Impl: ::windows_core::BaseImpl {
    fn GetThreadContext(this: &Self::This, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn SetThreadContext(this: &Self::This, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugAdvanced {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugAdvanced {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn SetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        IDebugAdvanced_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThreadContext: GetThreadContext::<Identity, Impl, OFFSET>,
            SetThreadContext: SetThreadContext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugAdvanced2_Impl: ::windows_core::BaseImpl {
    fn GetThreadContext(this: &Self::This, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn SetThreadContext(this: &Self::This, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn Request(this: &Self::This, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileInformation(this: &Self::This, which: u32, sourcefile: &::windows_core::PCSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn FindSourceFileAndToken(this: &Self::This, startelement: u32, modaddr: u64, file: &::windows_core::PCSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolInformation(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemObjectInformation(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugAdvanced2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugAdvanced2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn SetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Request(this, ::core::mem::transmute_copy(&request), ::core::mem::transmute_copy(&inbuffer), ::core::mem::transmute_copy(&inbuffersize), ::core::mem::transmute_copy(&outbuffer), ::core::mem::transmute_copy(&outbuffersize), ::core::mem::transmute_copy(&outsize)).into())
        }
        unsafe extern "system" fn GetSourceFileInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: ::windows_core::PCSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn FindSourceFileAndToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: ::windows_core::PCSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileAndToken(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSymbolInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemObjectInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemObjectInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        IDebugAdvanced2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThreadContext: GetThreadContext::<Identity, Impl, OFFSET>,
            SetThreadContext: SetThreadContext::<Identity, Impl, OFFSET>,
            Request: Request::<Identity, Impl, OFFSET>,
            GetSourceFileInformation: GetSourceFileInformation::<Identity, Impl, OFFSET>,
            FindSourceFileAndToken: FindSourceFileAndToken::<Identity, Impl, OFFSET>,
            GetSymbolInformation: GetSymbolInformation::<Identity, Impl, OFFSET>,
            GetSystemObjectInformation: GetSystemObjectInformation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugAdvanced3_Impl: ::windows_core::BaseImpl {
    fn GetThreadContext(this: &Self::This, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn SetThreadContext(this: &Self::This, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn Request(this: &Self::This, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileInformation(this: &Self::This, which: u32, sourcefile: &::windows_core::PCSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn FindSourceFileAndToken(this: &Self::This, startelement: u32, modaddr: u64, file: &::windows_core::PCSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolInformation(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemObjectInformation(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileInformationWide(this: &Self::This, which: u32, sourcefile: &::windows_core::PCWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn FindSourceFileAndTokenWide(this: &Self::This, startelement: u32, modaddr: u64, file: &::windows_core::PCWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolInformationWide(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugAdvanced3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugAdvanced3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn SetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Request(this, ::core::mem::transmute_copy(&request), ::core::mem::transmute_copy(&inbuffer), ::core::mem::transmute_copy(&inbuffersize), ::core::mem::transmute_copy(&outbuffer), ::core::mem::transmute_copy(&outbuffersize), ::core::mem::transmute_copy(&outsize)).into())
        }
        unsafe extern "system" fn GetSourceFileInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: ::windows_core::PCSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn FindSourceFileAndToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: ::windows_core::PCSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileAndToken(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSymbolInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemObjectInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemObjectInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: ::windows_core::PCWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileInformationWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: ::windows_core::PCWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileAndTokenWide(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSymbolInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolInformationWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        IDebugAdvanced3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThreadContext: GetThreadContext::<Identity, Impl, OFFSET>,
            SetThreadContext: SetThreadContext::<Identity, Impl, OFFSET>,
            Request: Request::<Identity, Impl, OFFSET>,
            GetSourceFileInformation: GetSourceFileInformation::<Identity, Impl, OFFSET>,
            FindSourceFileAndToken: FindSourceFileAndToken::<Identity, Impl, OFFSET>,
            GetSymbolInformation: GetSymbolInformation::<Identity, Impl, OFFSET>,
            GetSystemObjectInformation: GetSystemObjectInformation::<Identity, Impl, OFFSET>,
            GetSourceFileInformationWide: GetSourceFileInformationWide::<Identity, Impl, OFFSET>,
            FindSourceFileAndTokenWide: FindSourceFileAndTokenWide::<Identity, Impl, OFFSET>,
            GetSymbolInformationWide: GetSymbolInformationWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugAdvanced4_Impl: ::windows_core::BaseImpl {
    fn GetThreadContext(this: &Self::This, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn SetThreadContext(this: &Self::This, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn Request(this: &Self::This, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileInformation(this: &Self::This, which: u32, sourcefile: &::windows_core::PCSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn FindSourceFileAndToken(this: &Self::This, startelement: u32, modaddr: u64, file: &::windows_core::PCSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolInformation(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemObjectInformation(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileInformationWide(this: &Self::This, which: u32, sourcefile: &::windows_core::PCWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn FindSourceFileAndTokenWide(this: &Self::This, startelement: u32, modaddr: u64, file: &::windows_core::PCWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolInformationWide(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolInformationWideEx(this: &Self::This, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugAdvanced4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugAdvanced4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn SetThreadContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThreadContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: u32, inbuffer: *const ::core::ffi::c_void, inbuffersize: u32, outbuffer: *mut ::core::ffi::c_void, outbuffersize: u32, outsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Request(this, ::core::mem::transmute_copy(&request), ::core::mem::transmute_copy(&inbuffer), ::core::mem::transmute_copy(&inbuffersize), ::core::mem::transmute_copy(&outbuffer), ::core::mem::transmute_copy(&outbuffersize), ::core::mem::transmute_copy(&outsize)).into())
        }
        unsafe extern "system" fn GetSourceFileInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: ::windows_core::PCSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn FindSourceFileAndToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: ::windows_core::PCSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileAndToken(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSymbolInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemObjectInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemObjectInformation(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn GetSourceFileInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, sourcefile: ::windows_core::PCWSTR, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileInformationWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute(&sourcefile), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn FindSourceFileAndTokenWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, modaddr: u64, file: ::windows_core::PCWSTR, flags: u32, filetoken: *const ::core::ffi::c_void, filetokensize: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileAndTokenWide(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute_copy(&modaddr), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&filetoken), ::core::mem::transmute_copy(&filetokensize), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSymbolInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PWSTR, stringbuffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolInformationWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolInformationWideEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugAdvanced4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, arg64: u64, arg32: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32, stringbuffer: ::windows_core::PWSTR, stringbuffersize: u32, stringsize: *mut u32, pinfoex: *mut SYMBOL_INFO_EX) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolInformationWideEx(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&arg64), ::core::mem::transmute_copy(&arg32), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize), ::core::mem::transmute_copy(&stringbuffer), ::core::mem::transmute_copy(&stringbuffersize), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&pinfoex)).into())
        }
        IDebugAdvanced4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetThreadContext: GetThreadContext::<Identity, Impl, OFFSET>,
            SetThreadContext: SetThreadContext::<Identity, Impl, OFFSET>,
            Request: Request::<Identity, Impl, OFFSET>,
            GetSourceFileInformation: GetSourceFileInformation::<Identity, Impl, OFFSET>,
            FindSourceFileAndToken: FindSourceFileAndToken::<Identity, Impl, OFFSET>,
            GetSymbolInformation: GetSymbolInformation::<Identity, Impl, OFFSET>,
            GetSystemObjectInformation: GetSystemObjectInformation::<Identity, Impl, OFFSET>,
            GetSourceFileInformationWide: GetSourceFileInformationWide::<Identity, Impl, OFFSET>,
            FindSourceFileAndTokenWide: FindSourceFileAndTokenWide::<Identity, Impl, OFFSET>,
            GetSymbolInformationWide: GetSymbolInformationWide::<Identity, Impl, OFFSET>,
            GetSymbolInformationWideEx: GetSymbolInformationWideEx::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugBreakpoint_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetType(this: &Self::This, breaktype: *mut u32, proctype: *mut u32) -> ::windows_core::Result<()>;
    fn GetAdder(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn RemoveFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetDataParameters(this: &Self::This, size: *mut u32, accesstype: *mut u32) -> ::windows_core::Result<()>;
    fn SetDataParameters(this: &Self::This, size: u32, accesstype: u32) -> ::windows_core::Result<()>;
    fn GetPassCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetPassCount(this: &Self::This, count: u32) -> ::windows_core::Result<()>;
    fn GetCurrentPassCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMatchThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetMatchThreadId(this: &Self::This, thread: u32) -> ::windows_core::Result<()>;
    fn GetCommand(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetCommand(this: &Self::This, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetOffsetExpression(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOffsetExpression(this: &Self::This, expression: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetParameters(this: &Self::This, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugBreakpoint {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugBreakpoint {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetType(this, ::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)).into())
        }
        unsafe extern "system" fn GetAdder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAdder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(adder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RemoveFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetDataParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDataParameters(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into())
        }
        unsafe extern "system" fn SetDataParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDataParameters(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into())
        }
        unsafe extern "system" fn GetPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPassCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPassCount(this, ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn GetCurrentPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentPassCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMatchThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMatchThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMatchThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMatchThreadId(this, ::core::mem::transmute_copy(&thread)).into())
        }
        unsafe extern "system" fn GetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommand(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCommand(this, ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetOffsetExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetExpression(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into())
        }
        unsafe extern "system" fn SetOffsetExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffsetExpression(this, ::core::mem::transmute(&expression)).into())
        }
        unsafe extern "system" fn GetParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParameters(this, ::core::mem::transmute_copy(&params)).into())
        }
        IDebugBreakpoint_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetAdder: GetAdder::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            AddFlags: AddFlags::<Identity, Impl, OFFSET>,
            RemoveFlags: RemoveFlags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetOffset: GetOffset::<Identity, Impl, OFFSET>,
            SetOffset: SetOffset::<Identity, Impl, OFFSET>,
            GetDataParameters: GetDataParameters::<Identity, Impl, OFFSET>,
            SetDataParameters: SetDataParameters::<Identity, Impl, OFFSET>,
            GetPassCount: GetPassCount::<Identity, Impl, OFFSET>,
            SetPassCount: SetPassCount::<Identity, Impl, OFFSET>,
            GetCurrentPassCount: GetCurrentPassCount::<Identity, Impl, OFFSET>,
            GetMatchThreadId: GetMatchThreadId::<Identity, Impl, OFFSET>,
            SetMatchThreadId: SetMatchThreadId::<Identity, Impl, OFFSET>,
            GetCommand: GetCommand::<Identity, Impl, OFFSET>,
            SetCommand: SetCommand::<Identity, Impl, OFFSET>,
            GetOffsetExpression: GetOffsetExpression::<Identity, Impl, OFFSET>,
            SetOffsetExpression: SetOffsetExpression::<Identity, Impl, OFFSET>,
            GetParameters: GetParameters::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugBreakpoint2_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetType(this: &Self::This, breaktype: *mut u32, proctype: *mut u32) -> ::windows_core::Result<()>;
    fn GetAdder(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn RemoveFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetDataParameters(this: &Self::This, size: *mut u32, accesstype: *mut u32) -> ::windows_core::Result<()>;
    fn SetDataParameters(this: &Self::This, size: u32, accesstype: u32) -> ::windows_core::Result<()>;
    fn GetPassCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetPassCount(this: &Self::This, count: u32) -> ::windows_core::Result<()>;
    fn GetCurrentPassCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMatchThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetMatchThreadId(this: &Self::This, thread: u32) -> ::windows_core::Result<()>;
    fn GetCommand(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetCommand(this: &Self::This, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetOffsetExpression(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOffsetExpression(this: &Self::This, expression: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetParameters(this: &Self::This, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetCommandWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetCommandWide(this: &Self::This, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetOffsetExpressionWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOffsetExpressionWide(this: &Self::This, expression: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugBreakpoint2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugBreakpoint2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetType(this, ::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)).into())
        }
        unsafe extern "system" fn GetAdder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAdder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(adder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RemoveFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetDataParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDataParameters(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into())
        }
        unsafe extern "system" fn SetDataParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDataParameters(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into())
        }
        unsafe extern "system" fn GetPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPassCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPassCount(this, ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn GetCurrentPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentPassCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMatchThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMatchThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMatchThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMatchThreadId(this, ::core::mem::transmute_copy(&thread)).into())
        }
        unsafe extern "system" fn GetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommand(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCommand(this, ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetOffsetExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetExpression(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into())
        }
        unsafe extern "system" fn SetOffsetExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffsetExpression(this, ::core::mem::transmute(&expression)).into())
        }
        unsafe extern "system" fn GetParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParameters(this, ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommandWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCommandWide(this, ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetExpressionWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into())
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffsetExpressionWide(this, ::core::mem::transmute(&expression)).into())
        }
        IDebugBreakpoint2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetAdder: GetAdder::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            AddFlags: AddFlags::<Identity, Impl, OFFSET>,
            RemoveFlags: RemoveFlags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetOffset: GetOffset::<Identity, Impl, OFFSET>,
            SetOffset: SetOffset::<Identity, Impl, OFFSET>,
            GetDataParameters: GetDataParameters::<Identity, Impl, OFFSET>,
            SetDataParameters: SetDataParameters::<Identity, Impl, OFFSET>,
            GetPassCount: GetPassCount::<Identity, Impl, OFFSET>,
            SetPassCount: SetPassCount::<Identity, Impl, OFFSET>,
            GetCurrentPassCount: GetCurrentPassCount::<Identity, Impl, OFFSET>,
            GetMatchThreadId: GetMatchThreadId::<Identity, Impl, OFFSET>,
            SetMatchThreadId: SetMatchThreadId::<Identity, Impl, OFFSET>,
            GetCommand: GetCommand::<Identity, Impl, OFFSET>,
            SetCommand: SetCommand::<Identity, Impl, OFFSET>,
            GetOffsetExpression: GetOffsetExpression::<Identity, Impl, OFFSET>,
            SetOffsetExpression: SetOffsetExpression::<Identity, Impl, OFFSET>,
            GetParameters: GetParameters::<Identity, Impl, OFFSET>,
            GetCommandWide: GetCommandWide::<Identity, Impl, OFFSET>,
            SetCommandWide: SetCommandWide::<Identity, Impl, OFFSET>,
            GetOffsetExpressionWide: GetOffsetExpressionWide::<Identity, Impl, OFFSET>,
            SetOffsetExpressionWide: SetOffsetExpressionWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugBreakpoint3_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetType(this: &Self::This, breaktype: *mut u32, proctype: *mut u32) -> ::windows_core::Result<()>;
    fn GetAdder(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn RemoveFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetFlags(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetDataParameters(this: &Self::This, size: *mut u32, accesstype: *mut u32) -> ::windows_core::Result<()>;
    fn SetDataParameters(this: &Self::This, size: u32, accesstype: u32) -> ::windows_core::Result<()>;
    fn GetPassCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetPassCount(this: &Self::This, count: u32) -> ::windows_core::Result<()>;
    fn GetCurrentPassCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMatchThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetMatchThreadId(this: &Self::This, thread: u32) -> ::windows_core::Result<()>;
    fn GetCommand(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetCommand(this: &Self::This, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetOffsetExpression(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOffsetExpression(this: &Self::This, expression: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetParameters(this: &Self::This, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetCommandWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetCommandWide(this: &Self::This, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetOffsetExpressionWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOffsetExpressionWide(this: &Self::This, expression: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetGuid(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
impl ::windows_core::Iids for IDebugBreakpoint3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugBreakpoint3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, breaktype: *mut u32, proctype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetType(this, ::core::mem::transmute_copy(&breaktype), ::core::mem::transmute_copy(&proctype)).into())
        }
        unsafe extern "system" fn GetAdder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAdder(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(adder, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RemoveFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetDataParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, accesstype: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDataParameters(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into())
        }
        unsafe extern "system" fn SetDataParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, accesstype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDataParameters(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&accesstype)).into())
        }
        unsafe extern "system" fn GetPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPassCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPassCount(this, ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn GetCurrentPassCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentPassCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMatchThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMatchThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMatchThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thread: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMatchThreadId(this, ::core::mem::transmute_copy(&thread)).into())
        }
        unsafe extern "system" fn GetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommand(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCommand(this, ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetOffsetExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetExpression(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into())
        }
        unsafe extern "system" fn SetOffsetExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffsetExpression(this, ::core::mem::transmute(&expression)).into())
        }
        unsafe extern "system" fn GetParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParameters(this, ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCommandWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCommandWide(this, ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetOffsetExpressionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, expressionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetExpressionWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&expressionsize)).into())
        }
        unsafe extern "system" fn SetOffsetExpressionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOffsetExpressionWide(this, ::core::mem::transmute(&expression)).into())
        }
        unsafe extern "system" fn GetGuid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugBreakpoint3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGuid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(guid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugBreakpoint3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetAdder: GetAdder::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            AddFlags: AddFlags::<Identity, Impl, OFFSET>,
            RemoveFlags: RemoveFlags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetOffset: GetOffset::<Identity, Impl, OFFSET>,
            SetOffset: SetOffset::<Identity, Impl, OFFSET>,
            GetDataParameters: GetDataParameters::<Identity, Impl, OFFSET>,
            SetDataParameters: SetDataParameters::<Identity, Impl, OFFSET>,
            GetPassCount: GetPassCount::<Identity, Impl, OFFSET>,
            SetPassCount: SetPassCount::<Identity, Impl, OFFSET>,
            GetCurrentPassCount: GetCurrentPassCount::<Identity, Impl, OFFSET>,
            GetMatchThreadId: GetMatchThreadId::<Identity, Impl, OFFSET>,
            SetMatchThreadId: SetMatchThreadId::<Identity, Impl, OFFSET>,
            GetCommand: GetCommand::<Identity, Impl, OFFSET>,
            SetCommand: SetCommand::<Identity, Impl, OFFSET>,
            GetOffsetExpression: GetOffsetExpression::<Identity, Impl, OFFSET>,
            SetOffsetExpression: SetOffsetExpression::<Identity, Impl, OFFSET>,
            GetParameters: GetParameters::<Identity, Impl, OFFSET>,
            GetCommandWide: GetCommandWide::<Identity, Impl, OFFSET>,
            SetCommandWide: SetCommandWide::<Identity, Impl, OFFSET>,
            GetOffsetExpressionWide: GetOffsetExpressionWide::<Identity, Impl, OFFSET>,
            SetOffsetExpressionWide: SetOffsetExpressionWide::<Identity, Impl, OFFSET>,
            GetGuid: GetGuid::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        IDebugClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient2_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        IDebugClient2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient3_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(this: &Self::This, server: u64, exename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescriptionWide(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn CreateProcessWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttachWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCWSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableNameWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescriptionWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn CreateProcessWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttachWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        IDebugClient3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Identity, Impl, OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Identity, Impl, OFFSET>,
            CreateProcessWide: CreateProcessWide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient4_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(this: &Self::This, server: u64, exename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescriptionWide(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn CreateProcessWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttachWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::Result<()>;
    fn WriteDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::Result<()>;
    fn GetNumberDumpFiles(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFile(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn GetDumpFileWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCWSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableNameWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescriptionWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn CreateProcessWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttachWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn OpenDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle)).into())
        }
        unsafe extern "system" fn WriteDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetNumberDumpFiles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberDumpFiles(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFile(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFileWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        IDebugClient4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Identity, Impl, OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Identity, Impl, OFFSET>,
            CreateProcessWide: CreateProcessWide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Identity, Impl, OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Identity, Impl, OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Identity, Impl, OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Identity, Impl, OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Identity, Impl, OFFSET>,
            GetDumpFile: GetDumpFile::<Identity, Impl, OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient5_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(this: &Self::This, server: u64, exename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescriptionWide(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn CreateProcessWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttachWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::Result<()>;
    fn WriteDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::Result<()>;
    fn GetNumberDumpFiles(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFile(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn GetDumpFileWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn AttachKernelWide(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptionsWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptionsWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StartProcessServerWide(this: &Self::This, flags: u32, options: &::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServerWide(this: &Self::This, remoteoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn StartServerWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputServersWide(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetOutputCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacksWide>) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefixWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefixWide(this: &Self::This, prefix: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetIdentityWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentityWide(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacksWide>) -> ::windows_core::Result<()>;
    fn CreateProcess2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn CreateProcess2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn PushOutputLinePrefix(this: &Self::This, newprefix: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn PushOutputLinePrefixWide(this: &Self::This, newprefix: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn PopOutputLinePrefix(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetNumberInputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberOutputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberEventCallbacks(this: &Self::This, eventflags: u32) -> ::windows_core::Result<u32>;
    fn GetQuitLockString(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockString(this: &Self::This, string: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetQuitLockStringWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockStringWide(this: &Self::This, string: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient5 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient5 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCWSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableNameWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescriptionWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn CreateProcessWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttachWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn OpenDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle)).into())
        }
        unsafe extern "system" fn WriteDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetNumberDumpFiles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberDumpFiles(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFile(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFileWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn AttachKernelWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernelWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptionsWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptionsWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServerWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCWSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServerWide(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServerWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServersWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServersWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefixWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefixWide(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentityWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentityWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn CreateProcess2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcess2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn PushOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefix(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefixWide(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PopOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PopOutputLinePrefix(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEventCallbacks(this, ::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockString(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockString(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn GetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockStringWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockStringWide(this, ::core::mem::transmute(&string)).into())
        }
        IDebugClient5_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Identity, Impl, OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Identity, Impl, OFFSET>,
            CreateProcessWide: CreateProcessWide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Identity, Impl, OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Identity, Impl, OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Identity, Impl, OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Identity, Impl, OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Identity, Impl, OFFSET>,
            GetDumpFile: GetDumpFile::<Identity, Impl, OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Identity, Impl, OFFSET>,
            AttachKernelWide: AttachKernelWide::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Identity, Impl, OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Identity, Impl, OFFSET>,
            StartServerWide: StartServerWide::<Identity, Impl, OFFSET>,
            OutputServersWide: OutputServersWide::<Identity, Impl, OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            GetIdentityWide: GetIdentityWide::<Identity, Impl, OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Identity, Impl, OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Identity, Impl, OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Identity, Impl, OFFSET>,
            CreateProcess2: CreateProcess2::<Identity, Impl, OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Identity, Impl, OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Identity, Impl, OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Identity, Impl, OFFSET>,
            GetQuitLockString: GetQuitLockString::<Identity, Impl, OFFSET>,
            SetQuitLockString: SetQuitLockString::<Identity, Impl, OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient6_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(this: &Self::This, server: u64, exename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescriptionWide(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn CreateProcessWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttachWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::Result<()>;
    fn WriteDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::Result<()>;
    fn GetNumberDumpFiles(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFile(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn GetDumpFileWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn AttachKernelWide(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptionsWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptionsWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StartProcessServerWide(this: &Self::This, flags: u32, options: &::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServerWide(this: &Self::This, remoteoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn StartServerWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputServersWide(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetOutputCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacksWide>) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefixWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefixWide(this: &Self::This, prefix: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetIdentityWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentityWide(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacksWide>) -> ::windows_core::Result<()>;
    fn CreateProcess2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn CreateProcess2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn PushOutputLinePrefix(this: &Self::This, newprefix: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn PushOutputLinePrefixWide(this: &Self::This, newprefix: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn PopOutputLinePrefix(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetNumberInputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberOutputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberEventCallbacks(this: &Self::This, eventflags: u32) -> ::windows_core::Result<u32>;
    fn GetQuitLockString(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockString(this: &Self::This, string: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetQuitLockStringWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockStringWide(this: &Self::This, string: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetEventContextCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventContextCallbacks>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient6 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient6 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCWSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableNameWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescriptionWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn CreateProcessWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttachWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn OpenDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle)).into())
        }
        unsafe extern "system" fn WriteDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetNumberDumpFiles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberDumpFiles(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFile(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFileWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn AttachKernelWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernelWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptionsWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptionsWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServerWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCWSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServerWide(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServerWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServersWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServersWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefixWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefixWide(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentityWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentityWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn CreateProcess2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcess2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn PushOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefix(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefixWide(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PopOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PopOutputLinePrefix(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEventCallbacks(this, ::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockString(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockString(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn GetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockStringWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockStringWide(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn SetEventContextCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventContextCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        IDebugClient6_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Identity, Impl, OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Identity, Impl, OFFSET>,
            CreateProcessWide: CreateProcessWide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Identity, Impl, OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Identity, Impl, OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Identity, Impl, OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Identity, Impl, OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Identity, Impl, OFFSET>,
            GetDumpFile: GetDumpFile::<Identity, Impl, OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Identity, Impl, OFFSET>,
            AttachKernelWide: AttachKernelWide::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Identity, Impl, OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Identity, Impl, OFFSET>,
            StartServerWide: StartServerWide::<Identity, Impl, OFFSET>,
            OutputServersWide: OutputServersWide::<Identity, Impl, OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            GetIdentityWide: GetIdentityWide::<Identity, Impl, OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Identity, Impl, OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Identity, Impl, OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Identity, Impl, OFFSET>,
            CreateProcess2: CreateProcess2::<Identity, Impl, OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Identity, Impl, OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Identity, Impl, OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Identity, Impl, OFFSET>,
            GetQuitLockString: GetQuitLockString::<Identity, Impl, OFFSET>,
            SetQuitLockString: SetQuitLockString::<Identity, Impl, OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetEventContextCallbacks: SetEventContextCallbacks::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient7_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(this: &Self::This, server: u64, exename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescriptionWide(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn CreateProcessWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttachWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::Result<()>;
    fn WriteDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::Result<()>;
    fn GetNumberDumpFiles(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFile(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn GetDumpFileWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn AttachKernelWide(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptionsWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptionsWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StartProcessServerWide(this: &Self::This, flags: u32, options: &::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServerWide(this: &Self::This, remoteoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn StartServerWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputServersWide(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetOutputCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacksWide>) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefixWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefixWide(this: &Self::This, prefix: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetIdentityWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentityWide(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacksWide>) -> ::windows_core::Result<()>;
    fn CreateProcess2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn CreateProcess2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn PushOutputLinePrefix(this: &Self::This, newprefix: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn PushOutputLinePrefixWide(this: &Self::This, newprefix: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn PopOutputLinePrefix(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetNumberInputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberOutputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberEventCallbacks(this: &Self::This, eventflags: u32) -> ::windows_core::Result<u32>;
    fn GetQuitLockString(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockString(this: &Self::This, string: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetQuitLockStringWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockStringWide(this: &Self::This, string: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetEventContextCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventContextCallbacks>) -> ::windows_core::Result<()>;
    fn SetClientContext(this: &Self::This, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient7 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient7 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCWSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableNameWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescriptionWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn CreateProcessWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttachWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn OpenDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle)).into())
        }
        unsafe extern "system" fn WriteDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetNumberDumpFiles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberDumpFiles(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFile(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFileWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn AttachKernelWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernelWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptionsWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptionsWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServerWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCWSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServerWide(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServerWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServersWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServersWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefixWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefixWide(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentityWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentityWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn CreateProcess2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcess2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn PushOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefix(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefixWide(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PopOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PopOutputLinePrefix(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEventCallbacks(this, ::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockString(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockString(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn GetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockStringWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockStringWide(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn SetEventContextCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventContextCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn SetClientContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        IDebugClient7_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Identity, Impl, OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Identity, Impl, OFFSET>,
            CreateProcessWide: CreateProcessWide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Identity, Impl, OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Identity, Impl, OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Identity, Impl, OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Identity, Impl, OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Identity, Impl, OFFSET>,
            GetDumpFile: GetDumpFile::<Identity, Impl, OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Identity, Impl, OFFSET>,
            AttachKernelWide: AttachKernelWide::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Identity, Impl, OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Identity, Impl, OFFSET>,
            StartServerWide: StartServerWide::<Identity, Impl, OFFSET>,
            OutputServersWide: OutputServersWide::<Identity, Impl, OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            GetIdentityWide: GetIdentityWide::<Identity, Impl, OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Identity, Impl, OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Identity, Impl, OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Identity, Impl, OFFSET>,
            CreateProcess2: CreateProcess2::<Identity, Impl, OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Identity, Impl, OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Identity, Impl, OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Identity, Impl, OFFSET>,
            GetQuitLockString: GetQuitLockString::<Identity, Impl, OFFSET>,
            SetQuitLockString: SetQuitLockString::<Identity, Impl, OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetEventContextCallbacks: SetEventContextCallbacks::<Identity, Impl, OFFSET>,
            SetClientContext: SetClientContext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugClient8_Impl: ::windows_core::BaseImpl {
    fn AttachKernel(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptions(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptions(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn StartProcessServer(this: &Self::This, flags: u32, options: &::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServer(this: &Self::This, remoteoptions: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn DisconnectProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIds(this: &Self::This, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableName(this: &Self::This, server: u64, exename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescription(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn AttachProcess(this: &Self::This, server: u64, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn GetProcessOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetProcessOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WriteDumpFile(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32) -> ::windows_core::Result<()>;
    fn ConnectSession(this: &Self::This, flags: u32, historylimit: u32) -> ::windows_core::Result<()>;
    fn StartServer(this: &Self::This, options: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputServers(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn TerminateProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachProcesses(this: &Self::This) -> ::windows_core::Result<()>;
    fn EndSession(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetExitCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn DispatchCallbacks(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn ExitDispatch(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<()>;
    fn CreateClient(this: &Self::This) -> ::windows_core::Result<IDebugClient>;
    fn GetInputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugInputCallbacks>;
    fn SetInputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugInputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacks>;
    fn SetOutputCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacks>) -> ::windows_core::Result<()>;
    fn GetOutputMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn GetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>) -> ::windows_core::Result<u32>;
    fn SetOtherOutputMask(this: &Self::This, client: ::core::option::Option<&IDebugClient>, mask: u32) -> ::windows_core::Result<()>;
    fn GetOutputWidth(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputWidth(this: &Self::This, columns: u32) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefix(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefix(this: &Self::This, prefix: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetIdentity(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentity(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacks(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacks>;
    fn SetEventCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacks>) -> ::windows_core::Result<()>;
    fn FlushCallbacks(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteDumpFile2(this: &Self::This, dumpfile: &::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFile(this: &Self::This, infofile: &::windows_core::PCSTR, r#type: u32) -> ::windows_core::Result<()>;
    fn EndProcessServer(this: &Self::This, server: u64) -> ::windows_core::Result<()>;
    fn WaitForProcessServerEnd(this: &Self::This, timeout: u32) -> ::windows_core::Result<()>;
    fn IsKernelDebuggerEnabled(this: &Self::This) -> ::windows_core::Result<()>;
    fn TerminateCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn AbandonCurrentProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRunningProcessSystemIdByExecutableNameWide(this: &Self::This, server: u64, exename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u32>;
    fn GetRunningProcessDescriptionWide(this: &Self::This, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::Result<()>;
    fn CreateProcessWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttachWide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::Result<()>;
    fn WriteDumpFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddDumpInformationFileWide(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::Result<()>;
    fn GetNumberDumpFiles(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFile(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn GetDumpFileWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::Result<()>;
    fn AttachKernelWide(this: &Self::This, flags: u32, connectoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetKernelConnectionOptionsWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::Result<()>;
    fn SetKernelConnectionOptionsWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn StartProcessServerWide(this: &Self::This, flags: u32, options: &::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ConnectProcessServerWide(this: &Self::This, remoteoptions: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn StartServerWide(this: &Self::This, options: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputServersWide(this: &Self::This, outputcontrol: u32, machine: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetOutputCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugOutputCallbacksWide>;
    fn SetOutputCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugOutputCallbacksWide>) -> ::windows_core::Result<()>;
    fn GetOutputLinePrefixWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputLinePrefixWide(this: &Self::This, prefix: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetIdentityWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputIdentityWide(this: &Self::This, outputcontrol: u32, flags: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetEventCallbacksWide(this: &Self::This) -> ::windows_core::Result<IDebugEventCallbacksWide>;
    fn SetEventCallbacksWide(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventCallbacksWide>) -> ::windows_core::Result<()>;
    fn CreateProcess2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn CreateProcess2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2(this: &Self::This, server: u64, commandline: &::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCSTR, environment: &::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn CreateProcessAndAttach2Wide(this: &Self::This, server: u64, commandline: &::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: &::windows_core::PCWSTR, environment: &::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::Result<()>;
    fn PushOutputLinePrefix(this: &Self::This, newprefix: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn PushOutputLinePrefixWide(this: &Self::This, newprefix: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn PopOutputLinePrefix(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetNumberInputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberOutputCallbacks(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberEventCallbacks(this: &Self::This, eventflags: u32) -> ::windows_core::Result<u32>;
    fn GetQuitLockString(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockString(this: &Self::This, string: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetQuitLockStringWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetQuitLockStringWide(this: &Self::This, string: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetEventContextCallbacks(this: &Self::This, callbacks: ::core::option::Option<&IDebugEventContextCallbacks>) -> ::windows_core::Result<()>;
    fn SetClientContext(this: &Self::This, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn OpenDumpFileWide2(this: &Self::This, filename: &::windows_core::PCWSTR, filehandle: u64, alternatearch: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugClient8 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugClient8 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttachKernel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernel(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptions(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptions(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServer(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServer(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, ids: *mut u32, count: u32, actualcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessSystemIds(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&actualcount)).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableName(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescription(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn AttachProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachProcess(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessA(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn GetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetProcessOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn OpenDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFile(this, ::core::mem::transmute(&dumpfile)).into())
        }
        unsafe extern "system" fn WriteDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn ConnectSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, historylimit: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectSession(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&historylimit)).into())
        }
        unsafe extern "system" fn StartServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServer(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServers(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn TerminateProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateProcesses(this).into())
        }
        unsafe extern "system" fn DetachProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachProcesses(this).into())
        }
        unsafe extern "system" fn EndSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSession(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetExitCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExitCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DispatchCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DispatchCallbacks(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn ExitDispatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitDispatch(this, ::windows_core::from_raw_borrowed(&client)).into())
        }
        unsafe extern "system" fn CreateClient<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateClient(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(client, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherOutputMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, client: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherOutputMask(this, ::windows_core::from_raw_borrowed(&client), ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn GetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputWidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(columns, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columns: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputWidth(this, ::core::mem::transmute_copy(&columns)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefix(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefix(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentity(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentity(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn FlushCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushCallbacks(this).into())
        }
        unsafe extern "system" fn WriteDumpFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dumpfile: ::windows_core::PCSTR, qualifier: u32, formatflags: u32, comment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFile2(this, ::core::mem::transmute(&dumpfile), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, infofile: ::windows_core::PCSTR, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFile(this, ::core::mem::transmute(&infofile), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn EndProcessServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndProcessServer(this, ::core::mem::transmute_copy(&server)).into())
        }
        unsafe extern "system" fn WaitForProcessServerEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForProcessServerEnd(this, ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn IsKernelDebuggerEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsKernelDebuggerEnabled(this).into())
        }
        unsafe extern "system" fn TerminateCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminateCurrentProcess(this).into())
        }
        unsafe extern "system" fn DetachCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachCurrentProcess(this).into())
        }
        unsafe extern "system" fn AbandonCurrentProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AbandonCurrentProcess(this).into())
        }
        unsafe extern "system" fn GetRunningProcessSystemIdByExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, exename: ::windows_core::PCWSTR, flags: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRunningProcessSystemIdByExecutableNameWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&exename), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRunningProcessDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, systemid: u32, flags: u32, exename: ::windows_core::PWSTR, exenamesize: u32, actualexenamesize: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, actualdescriptionsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRunningProcessDescriptionWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&systemid), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&exename), ::core::mem::transmute_copy(&exenamesize), ::core::mem::transmute_copy(&actualexenamesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&actualdescriptionsize)).into())
        }
        unsafe extern "system" fn CreateProcessWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttachWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, createflags: u32, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttachWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&createflags), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn OpenDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle)).into())
        }
        unsafe extern "system" fn WriteDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, qualifier: u32, formatflags: u32, comment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteDumpFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&qualifier), ::core::mem::transmute_copy(&formatflags), ::core::mem::transmute(&comment)).into())
        }
        unsafe extern "system" fn AddDumpInformationFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDumpInformationFileWide(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetNumberDumpFiles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberDumpFiles(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFile(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetDumpFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32, handle: *mut u64, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDumpFileWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn AttachKernelWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, connectoptions: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachKernelWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&connectoptions)).into())
        }
        unsafe extern "system" fn GetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, optionssize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKernelConnectionOptionsWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&optionssize)).into())
        }
        unsafe extern "system" fn SetKernelConnectionOptionsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKernelConnectionOptionsWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn StartProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, options: ::windows_core::PCWSTR, reserved: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartProcessServerWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&options), ::core::mem::transmute_copy(&reserved)).into())
        }
        unsafe extern "system" fn ConnectProcessServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, remoteoptions: ::windows_core::PCWSTR, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectProcessServerWide(this, ::core::mem::transmute(&remoteoptions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartServerWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartServerWide(this, ::core::mem::transmute(&options)).into())
        }
        unsafe extern "system" fn OutputServersWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, machine: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputServersWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&machine), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn GetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, prefixsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputLinePrefixWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&prefixsize)).into())
        }
        unsafe extern "system" fn SetOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prefix: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputLinePrefixWide(this, ::core::mem::transmute(&prefix)).into())
        }
        unsafe extern "system" fn GetIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, identitysize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentityWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&identitysize)).into())
        }
        unsafe extern "system" fn OutputIdentityWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputIdentityWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn GetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventCallbacksWide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(callbacks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEventCallbacksWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventCallbacksWide(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn CreateProcess2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcess2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcess2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCSTR, environment: ::windows_core::PCSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn CreateProcessAndAttach2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, commandline: ::windows_core::PCWSTR, optionsbuffer: *const ::core::ffi::c_void, optionsbuffersize: u32, initialdirectory: ::windows_core::PCWSTR, environment: ::windows_core::PCWSTR, processid: u32, attachflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateProcessAndAttach2Wide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&commandline), ::core::mem::transmute_copy(&optionsbuffer), ::core::mem::transmute_copy(&optionsbuffersize), ::core::mem::transmute(&initialdirectory), ::core::mem::transmute(&environment), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&attachflags)).into())
        }
        unsafe extern "system" fn PushOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefix(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PushOutputLinePrefixWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newprefix: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PushOutputLinePrefixWide(this, ::core::mem::transmute(&newprefix)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PopOutputLinePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PopOutputLinePrefix(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetNumberInputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberInputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOutputCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOutputCallbacks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberEventCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eventflags: u32, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEventCallbacks(this, ::core::mem::transmute_copy(&eventflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockString(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockString(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn GetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetQuitLockStringWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn SetQuitLockStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, string: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQuitLockStringWide(this, ::core::mem::transmute(&string)).into())
        }
        unsafe extern "system" fn SetEventContextCallbacks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, callbacks: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventContextCallbacks(this, ::windows_core::from_raw_borrowed(&callbacks)).into())
        }
        unsafe extern "system" fn SetClientContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientContext(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn OpenDumpFileWide2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugClient8_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR, filehandle: u64, alternatearch: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenDumpFileWide2(this, ::core::mem::transmute(&filename), ::core::mem::transmute_copy(&filehandle), ::core::mem::transmute_copy(&alternatearch)).into())
        }
        IDebugClient8_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttachKernel: AttachKernel::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptions: GetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptions: SetKernelConnectionOptions::<Identity, Impl, OFFSET>,
            StartProcessServer: StartProcessServer::<Identity, Impl, OFFSET>,
            ConnectProcessServer: ConnectProcessServer::<Identity, Impl, OFFSET>,
            DisconnectProcessServer: DisconnectProcessServer::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIds: GetRunningProcessSystemIds::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableName: GetRunningProcessSystemIdByExecutableName::<Identity, Impl, OFFSET>,
            GetRunningProcessDescription: GetRunningProcessDescription::<Identity, Impl, OFFSET>,
            AttachProcess: AttachProcess::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach: CreateProcessAndAttach::<Identity, Impl, OFFSET>,
            GetProcessOptions: GetProcessOptions::<Identity, Impl, OFFSET>,
            AddProcessOptions: AddProcessOptions::<Identity, Impl, OFFSET>,
            RemoveProcessOptions: RemoveProcessOptions::<Identity, Impl, OFFSET>,
            SetProcessOptions: SetProcessOptions::<Identity, Impl, OFFSET>,
            OpenDumpFile: OpenDumpFile::<Identity, Impl, OFFSET>,
            WriteDumpFile: WriteDumpFile::<Identity, Impl, OFFSET>,
            ConnectSession: ConnectSession::<Identity, Impl, OFFSET>,
            StartServer: StartServer::<Identity, Impl, OFFSET>,
            OutputServers: OutputServers::<Identity, Impl, OFFSET>,
            TerminateProcesses: TerminateProcesses::<Identity, Impl, OFFSET>,
            DetachProcesses: DetachProcesses::<Identity, Impl, OFFSET>,
            EndSession: EndSession::<Identity, Impl, OFFSET>,
            GetExitCode: GetExitCode::<Identity, Impl, OFFSET>,
            DispatchCallbacks: DispatchCallbacks::<Identity, Impl, OFFSET>,
            ExitDispatch: ExitDispatch::<Identity, Impl, OFFSET>,
            CreateClient: CreateClient::<Identity, Impl, OFFSET>,
            GetInputCallbacks: GetInputCallbacks::<Identity, Impl, OFFSET>,
            SetInputCallbacks: SetInputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputCallbacks: GetOutputCallbacks::<Identity, Impl, OFFSET>,
            SetOutputCallbacks: SetOutputCallbacks::<Identity, Impl, OFFSET>,
            GetOutputMask: GetOutputMask::<Identity, Impl, OFFSET>,
            SetOutputMask: SetOutputMask::<Identity, Impl, OFFSET>,
            GetOtherOutputMask: GetOtherOutputMask::<Identity, Impl, OFFSET>,
            SetOtherOutputMask: SetOtherOutputMask::<Identity, Impl, OFFSET>,
            GetOutputWidth: GetOutputWidth::<Identity, Impl, OFFSET>,
            SetOutputWidth: SetOutputWidth::<Identity, Impl, OFFSET>,
            GetOutputLinePrefix: GetOutputLinePrefix::<Identity, Impl, OFFSET>,
            SetOutputLinePrefix: SetOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetIdentity: GetIdentity::<Identity, Impl, OFFSET>,
            OutputIdentity: OutputIdentity::<Identity, Impl, OFFSET>,
            GetEventCallbacks: GetEventCallbacks::<Identity, Impl, OFFSET>,
            SetEventCallbacks: SetEventCallbacks::<Identity, Impl, OFFSET>,
            FlushCallbacks: FlushCallbacks::<Identity, Impl, OFFSET>,
            WriteDumpFile2: WriteDumpFile2::<Identity, Impl, OFFSET>,
            AddDumpInformationFile: AddDumpInformationFile::<Identity, Impl, OFFSET>,
            EndProcessServer: EndProcessServer::<Identity, Impl, OFFSET>,
            WaitForProcessServerEnd: WaitForProcessServerEnd::<Identity, Impl, OFFSET>,
            IsKernelDebuggerEnabled: IsKernelDebuggerEnabled::<Identity, Impl, OFFSET>,
            TerminateCurrentProcess: TerminateCurrentProcess::<Identity, Impl, OFFSET>,
            DetachCurrentProcess: DetachCurrentProcess::<Identity, Impl, OFFSET>,
            AbandonCurrentProcess: AbandonCurrentProcess::<Identity, Impl, OFFSET>,
            GetRunningProcessSystemIdByExecutableNameWide: GetRunningProcessSystemIdByExecutableNameWide::<Identity, Impl, OFFSET>,
            GetRunningProcessDescriptionWide: GetRunningProcessDescriptionWide::<Identity, Impl, OFFSET>,
            CreateProcessWide: CreateProcessWide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttachWide: CreateProcessAndAttachWide::<Identity, Impl, OFFSET>,
            OpenDumpFileWide: OpenDumpFileWide::<Identity, Impl, OFFSET>,
            WriteDumpFileWide: WriteDumpFileWide::<Identity, Impl, OFFSET>,
            AddDumpInformationFileWide: AddDumpInformationFileWide::<Identity, Impl, OFFSET>,
            GetNumberDumpFiles: GetNumberDumpFiles::<Identity, Impl, OFFSET>,
            GetDumpFile: GetDumpFile::<Identity, Impl, OFFSET>,
            GetDumpFileWide: GetDumpFileWide::<Identity, Impl, OFFSET>,
            AttachKernelWide: AttachKernelWide::<Identity, Impl, OFFSET>,
            GetKernelConnectionOptionsWide: GetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            SetKernelConnectionOptionsWide: SetKernelConnectionOptionsWide::<Identity, Impl, OFFSET>,
            StartProcessServerWide: StartProcessServerWide::<Identity, Impl, OFFSET>,
            ConnectProcessServerWide: ConnectProcessServerWide::<Identity, Impl, OFFSET>,
            StartServerWide: StartServerWide::<Identity, Impl, OFFSET>,
            OutputServersWide: OutputServersWide::<Identity, Impl, OFFSET>,
            GetOutputCallbacksWide: GetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            SetOutputCallbacksWide: SetOutputCallbacksWide::<Identity, Impl, OFFSET>,
            GetOutputLinePrefixWide: GetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            SetOutputLinePrefixWide: SetOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            GetIdentityWide: GetIdentityWide::<Identity, Impl, OFFSET>,
            OutputIdentityWide: OutputIdentityWide::<Identity, Impl, OFFSET>,
            GetEventCallbacksWide: GetEventCallbacksWide::<Identity, Impl, OFFSET>,
            SetEventCallbacksWide: SetEventCallbacksWide::<Identity, Impl, OFFSET>,
            CreateProcess2: CreateProcess2::<Identity, Impl, OFFSET>,
            CreateProcess2Wide: CreateProcess2Wide::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2: CreateProcessAndAttach2::<Identity, Impl, OFFSET>,
            CreateProcessAndAttach2Wide: CreateProcessAndAttach2Wide::<Identity, Impl, OFFSET>,
            PushOutputLinePrefix: PushOutputLinePrefix::<Identity, Impl, OFFSET>,
            PushOutputLinePrefixWide: PushOutputLinePrefixWide::<Identity, Impl, OFFSET>,
            PopOutputLinePrefix: PopOutputLinePrefix::<Identity, Impl, OFFSET>,
            GetNumberInputCallbacks: GetNumberInputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberOutputCallbacks: GetNumberOutputCallbacks::<Identity, Impl, OFFSET>,
            GetNumberEventCallbacks: GetNumberEventCallbacks::<Identity, Impl, OFFSET>,
            GetQuitLockString: GetQuitLockString::<Identity, Impl, OFFSET>,
            SetQuitLockString: SetQuitLockString::<Identity, Impl, OFFSET>,
            GetQuitLockStringWide: GetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetQuitLockStringWide: SetQuitLockStringWide::<Identity, Impl, OFFSET>,
            SetEventContextCallbacks: SetEventContextCallbacks::<Identity, Impl, OFFSET>,
            SetClientContext: SetClientContext::<Identity, Impl, OFFSET>,
            OpenDumpFileWide2: OpenDumpFileWide2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        IDebugControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl2_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentTimeDate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFormatFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberTextReplacements(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, dsttext: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveTextReplacements(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputTextReplacements(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetCurrentTimeDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentTimeDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(timedate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFormatFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDumpFormatFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formatflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberTextReplacements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(numrepl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, dsttext: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn RemoveTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTextReplacements(this).into())
        }
        unsafe extern "system" fn OutputTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTextReplacements(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        IDebugControl2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Identity, Impl, OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Identity, Impl, OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Identity, Impl, OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Identity, Impl, OFFSET>,
            GetTextReplacement: GetTextReplacement::<Identity, Impl, OFFSET>,
            SetTextReplacement: SetTextReplacement::<Identity, Impl, OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Identity, Impl, OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl3_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentTimeDate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFormatFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberTextReplacements(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, dsttext: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveTextReplacements(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputTextReplacements(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetAssemblyOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetExpressionSyntax(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExpressionSyntax(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByName(this: &Self::This, abbrevname: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetNumberExpressionSyntaxes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExpressionSyntaxNames(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberEvents(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventIndexDescription(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentEventIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetNextEventIndex(this: &Self::This, relation: u32, value: u32) -> ::windows_core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetCurrentTimeDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentTimeDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(timedate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFormatFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDumpFormatFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formatflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberTextReplacements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(numrepl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, dsttext: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn RemoveTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTextReplacements(this).into())
        }
        unsafe extern "system" fn OutputTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTextReplacements(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAssemblyOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpressionSyntax(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntax(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByName(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberExpressionSyntaxes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNames(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetNumberEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEvents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(events, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventIndexDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescription(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetCurrentEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentEventIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNextEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetNextEventIndex(this, ::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nextindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugControl3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Identity, Impl, OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Identity, Impl, OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Identity, Impl, OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Identity, Impl, OFFSET>,
            GetTextReplacement: GetTextReplacement::<Identity, Impl, OFFSET>,
            SetTextReplacement: SetTextReplacement::<Identity, Impl, OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Identity, Impl, OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Identity, Impl, OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Identity, Impl, OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Identity, Impl, OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Identity, Impl, OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Identity, Impl, OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Identity, Impl, OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Identity, Impl, OFFSET>,
            GetNumberEvents: GetNumberEvents::<Identity, Impl, OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Identity, Impl, OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Identity, Impl, OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl4_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentTimeDate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFormatFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberTextReplacements(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, dsttext: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveTextReplacements(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputTextReplacements(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetAssemblyOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetExpressionSyntax(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExpressionSyntax(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByName(this: &Self::This, abbrevname: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetNumberExpressionSyntaxes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExpressionSyntaxNames(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberEvents(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventIndexDescription(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentEventIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetNextEventIndex(this: &Self::This, relation: u32, value: u32) -> ::windows_core::Result<u32>;
    fn GetLogFileWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFileWide(this: &Self::This, file: &::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn InputWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInputWide(this: &Self::This, buffer: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputVaListWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutputWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaListWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPromptWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaListWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptTextWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn AssembleWide(this: &Self::This, offset: u64, instr: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn DisassembleWide(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNamesWide(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextMacroWide(this: &Self::This, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacroWide(this: &Self::This, slot: u32, r#macro: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EvaluateWide(this: &Self::This, expression: &::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn ExecuteWide(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFileWide(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByIndex2(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint2>) -> ::windows_core::Result<()>;
    fn AddExtensionWide(this: &Self::This, path: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn GetExtensionByPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn CallExtensionWide(this: &Self::This, handle: u64, function: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunctionWide(this: &Self::This, handle: u64, funcname: &::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetEventFilterTextWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgumentWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgumentWide(this: &Self::This, index: u32, argument: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLastEventInformationWide(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, dsttext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByNameWide(this: &Self::This, abbrevname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExpressionSyntaxNamesWide(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventIndexDescriptionWide(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetLogFile2(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2(this: &Self::This, file: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetLogFile2Wide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2Wide(this: &Self::This, file: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionValues(this: &Self::This, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionString(this: &Self::This, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionStringWide(this: &Self::This, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetContextStackTrace(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetStoredEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatus(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatusWide(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn ResetManagedStatus(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetCurrentTimeDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentTimeDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(timedate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFormatFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDumpFormatFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formatflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberTextReplacements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(numrepl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, dsttext: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn RemoveTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTextReplacements(this).into())
        }
        unsafe extern "system" fn OutputTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTextReplacements(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAssemblyOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpressionSyntax(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntax(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByName(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberExpressionSyntaxes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNames(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetNumberEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEvents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(events, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventIndexDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescription(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetCurrentEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentEventIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNextEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetNextEventIndex(this, ::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nextindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFileWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFileWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn InputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InputWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInputWide(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn OutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaListWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPromptWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptTextWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn AssembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCWSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AssembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisassembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisassembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNamesWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn EvaluateWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateWide(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn ExecuteWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFileWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex2(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById2(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint2(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint2(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtensionWide(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtensionByPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPathWide(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtensionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunctionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetEventFilterTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterTextWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetLastEventInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformationWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, dsttext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByNameWide(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNamesWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescriptionWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2Wide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2Wide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetSystemVersionValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionValues(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into())
        }
        unsafe extern "system" fn GetSystemVersionString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTrace(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStoredEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStoredEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into())
        }
        unsafe extern "system" fn GetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatus(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn GetManagedStatusWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatusWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn ResetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetManagedStatus(this, ::core::mem::transmute_copy(&flags)).into())
        }
        IDebugControl4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Identity, Impl, OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Identity, Impl, OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Identity, Impl, OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Identity, Impl, OFFSET>,
            GetTextReplacement: GetTextReplacement::<Identity, Impl, OFFSET>,
            SetTextReplacement: SetTextReplacement::<Identity, Impl, OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Identity, Impl, OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Identity, Impl, OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Identity, Impl, OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Identity, Impl, OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Identity, Impl, OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Identity, Impl, OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Identity, Impl, OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Identity, Impl, OFFSET>,
            GetNumberEvents: GetNumberEvents::<Identity, Impl, OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Identity, Impl, OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Identity, Impl, OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Identity, Impl, OFFSET>,
            GetLogFileWide: GetLogFileWide::<Identity, Impl, OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Identity, Impl, OFFSET>,
            InputWide: InputWide::<Identity, Impl, OFFSET>,
            ReturnInputWide: ReturnInputWide::<Identity, Impl, OFFSET>,
            OutputWide: OutputWide::<Identity, Impl, OFFSET>,
            OutputVaListWide: OutputVaListWide::<Identity, Impl, OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Identity, Impl, OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Identity, Impl, OFFSET>,
            OutputPromptWide: OutputPromptWide::<Identity, Impl, OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Identity, Impl, OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Identity, Impl, OFFSET>,
            AssembleWide: AssembleWide::<Identity, Impl, OFFSET>,
            DisassembleWide: DisassembleWide::<Identity, Impl, OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Identity, Impl, OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Identity, Impl, OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Identity, Impl, OFFSET>,
            EvaluateWide: EvaluateWide::<Identity, Impl, OFFSET>,
            ExecuteWide: ExecuteWide::<Identity, Impl, OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Identity, Impl, OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Identity, Impl, OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Identity, Impl, OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Identity, Impl, OFFSET>,
            AddExtensionWide: AddExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Identity, Impl, OFFSET>,
            CallExtensionWide: CallExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Identity, Impl, OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Identity, Impl, OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Identity, Impl, OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Identity, Impl, OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Identity, Impl, OFFSET>,
            GetLogFile2: GetLogFile2::<Identity, Impl, OFFSET>,
            OpenLogFile2: OpenLogFile2::<Identity, Impl, OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Identity, Impl, OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Identity, Impl, OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Identity, Impl, OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Identity, Impl, OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Identity, Impl, OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Identity, Impl, OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Identity, Impl, OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Identity, Impl, OFFSET>,
            GetManagedStatus: GetManagedStatus::<Identity, Impl, OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Identity, Impl, OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl5_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentTimeDate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFormatFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberTextReplacements(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, dsttext: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveTextReplacements(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputTextReplacements(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetAssemblyOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetExpressionSyntax(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExpressionSyntax(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByName(this: &Self::This, abbrevname: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetNumberExpressionSyntaxes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExpressionSyntaxNames(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberEvents(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventIndexDescription(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentEventIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetNextEventIndex(this: &Self::This, relation: u32, value: u32) -> ::windows_core::Result<u32>;
    fn GetLogFileWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFileWide(this: &Self::This, file: &::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn InputWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInputWide(this: &Self::This, buffer: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputVaListWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutputWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaListWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPromptWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaListWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptTextWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn AssembleWide(this: &Self::This, offset: u64, instr: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn DisassembleWide(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNamesWide(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextMacroWide(this: &Self::This, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacroWide(this: &Self::This, slot: u32, r#macro: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EvaluateWide(this: &Self::This, expression: &::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn ExecuteWide(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFileWide(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByIndex2(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint2>) -> ::windows_core::Result<()>;
    fn AddExtensionWide(this: &Self::This, path: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn GetExtensionByPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn CallExtensionWide(this: &Self::This, handle: u64, function: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunctionWide(this: &Self::This, handle: u64, funcname: &::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetEventFilterTextWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgumentWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgumentWide(this: &Self::This, index: u32, argument: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLastEventInformationWide(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, dsttext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByNameWide(this: &Self::This, abbrevname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExpressionSyntaxNamesWide(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventIndexDescriptionWide(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetLogFile2(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2(this: &Self::This, file: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetLogFile2Wide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2Wide(this: &Self::This, file: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionValues(this: &Self::This, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionString(this: &Self::This, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionStringWide(this: &Self::This, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetContextStackTrace(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetStoredEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatus(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatusWide(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn ResetManagedStatus(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetStackTraceEx(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputStackTraceEx(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetContextStackTraceEx(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTraceEx(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByGuid(this: &Self::This, guid: *const ::windows_core::GUID) -> ::windows_core::Result<IDebugBreakpoint3>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl5 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl5 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetCurrentTimeDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentTimeDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(timedate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFormatFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDumpFormatFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formatflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberTextReplacements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(numrepl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, dsttext: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn RemoveTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTextReplacements(this).into())
        }
        unsafe extern "system" fn OutputTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTextReplacements(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAssemblyOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpressionSyntax(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntax(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByName(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberExpressionSyntaxes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNames(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetNumberEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEvents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(events, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventIndexDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescription(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetCurrentEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentEventIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNextEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetNextEventIndex(this, ::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nextindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFileWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFileWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn InputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InputWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInputWide(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn OutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaListWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPromptWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptTextWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn AssembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCWSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AssembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisassembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisassembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNamesWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn EvaluateWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateWide(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn ExecuteWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFileWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex2(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById2(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint2(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint2(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtensionWide(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtensionByPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPathWide(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtensionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunctionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetEventFilterTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterTextWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetLastEventInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformationWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, dsttext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByNameWide(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNamesWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescriptionWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2Wide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2Wide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetSystemVersionValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionValues(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into())
        }
        unsafe extern "system" fn GetSystemVersionString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTrace(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStoredEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStoredEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into())
        }
        unsafe extern "system" fn GetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatus(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn GetManagedStatusWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatusWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn ResetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetManagedStatus(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTraceEx(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTraceEx(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetContextStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTraceEx(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTraceEx(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByGuid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByGuid(this, ::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugControl5_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Identity, Impl, OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Identity, Impl, OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Identity, Impl, OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Identity, Impl, OFFSET>,
            GetTextReplacement: GetTextReplacement::<Identity, Impl, OFFSET>,
            SetTextReplacement: SetTextReplacement::<Identity, Impl, OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Identity, Impl, OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Identity, Impl, OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Identity, Impl, OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Identity, Impl, OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Identity, Impl, OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Identity, Impl, OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Identity, Impl, OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Identity, Impl, OFFSET>,
            GetNumberEvents: GetNumberEvents::<Identity, Impl, OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Identity, Impl, OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Identity, Impl, OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Identity, Impl, OFFSET>,
            GetLogFileWide: GetLogFileWide::<Identity, Impl, OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Identity, Impl, OFFSET>,
            InputWide: InputWide::<Identity, Impl, OFFSET>,
            ReturnInputWide: ReturnInputWide::<Identity, Impl, OFFSET>,
            OutputWide: OutputWide::<Identity, Impl, OFFSET>,
            OutputVaListWide: OutputVaListWide::<Identity, Impl, OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Identity, Impl, OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Identity, Impl, OFFSET>,
            OutputPromptWide: OutputPromptWide::<Identity, Impl, OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Identity, Impl, OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Identity, Impl, OFFSET>,
            AssembleWide: AssembleWide::<Identity, Impl, OFFSET>,
            DisassembleWide: DisassembleWide::<Identity, Impl, OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Identity, Impl, OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Identity, Impl, OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Identity, Impl, OFFSET>,
            EvaluateWide: EvaluateWide::<Identity, Impl, OFFSET>,
            ExecuteWide: ExecuteWide::<Identity, Impl, OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Identity, Impl, OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Identity, Impl, OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Identity, Impl, OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Identity, Impl, OFFSET>,
            AddExtensionWide: AddExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Identity, Impl, OFFSET>,
            CallExtensionWide: CallExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Identity, Impl, OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Identity, Impl, OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Identity, Impl, OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Identity, Impl, OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Identity, Impl, OFFSET>,
            GetLogFile2: GetLogFile2::<Identity, Impl, OFFSET>,
            OpenLogFile2: OpenLogFile2::<Identity, Impl, OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Identity, Impl, OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Identity, Impl, OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Identity, Impl, OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Identity, Impl, OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Identity, Impl, OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Identity, Impl, OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Identity, Impl, OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Identity, Impl, OFFSET>,
            GetManagedStatus: GetManagedStatus::<Identity, Impl, OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Identity, Impl, OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Identity, Impl, OFFSET>,
            GetStackTraceEx: GetStackTraceEx::<Identity, Impl, OFFSET>,
            OutputStackTraceEx: OutputStackTraceEx::<Identity, Impl, OFFSET>,
            GetContextStackTraceEx: GetContextStackTraceEx::<Identity, Impl, OFFSET>,
            OutputContextStackTraceEx: OutputContextStackTraceEx::<Identity, Impl, OFFSET>,
            GetBreakpointByGuid: GetBreakpointByGuid::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl6_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentTimeDate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFormatFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberTextReplacements(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, dsttext: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveTextReplacements(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputTextReplacements(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetAssemblyOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetExpressionSyntax(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExpressionSyntax(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByName(this: &Self::This, abbrevname: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetNumberExpressionSyntaxes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExpressionSyntaxNames(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberEvents(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventIndexDescription(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentEventIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetNextEventIndex(this: &Self::This, relation: u32, value: u32) -> ::windows_core::Result<u32>;
    fn GetLogFileWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFileWide(this: &Self::This, file: &::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn InputWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInputWide(this: &Self::This, buffer: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputVaListWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutputWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaListWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPromptWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaListWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptTextWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn AssembleWide(this: &Self::This, offset: u64, instr: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn DisassembleWide(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNamesWide(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextMacroWide(this: &Self::This, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacroWide(this: &Self::This, slot: u32, r#macro: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EvaluateWide(this: &Self::This, expression: &::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn ExecuteWide(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFileWide(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByIndex2(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint2>) -> ::windows_core::Result<()>;
    fn AddExtensionWide(this: &Self::This, path: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn GetExtensionByPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn CallExtensionWide(this: &Self::This, handle: u64, function: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunctionWide(this: &Self::This, handle: u64, funcname: &::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetEventFilterTextWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgumentWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgumentWide(this: &Self::This, index: u32, argument: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLastEventInformationWide(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, dsttext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByNameWide(this: &Self::This, abbrevname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExpressionSyntaxNamesWide(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventIndexDescriptionWide(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetLogFile2(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2(this: &Self::This, file: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetLogFile2Wide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2Wide(this: &Self::This, file: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionValues(this: &Self::This, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionString(this: &Self::This, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionStringWide(this: &Self::This, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetContextStackTrace(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetStoredEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatus(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatusWide(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn ResetManagedStatus(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetStackTraceEx(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputStackTraceEx(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetContextStackTraceEx(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTraceEx(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByGuid(this: &Self::This, guid: *const ::windows_core::GUID) -> ::windows_core::Result<IDebugBreakpoint3>;
    fn GetExecutionStatusEx(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSynchronizationStatus(this: &Self::This, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl6 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl6 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetCurrentTimeDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentTimeDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(timedate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFormatFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDumpFormatFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formatflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberTextReplacements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(numrepl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, dsttext: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn RemoveTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTextReplacements(this).into())
        }
        unsafe extern "system" fn OutputTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTextReplacements(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAssemblyOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpressionSyntax(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntax(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByName(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberExpressionSyntaxes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNames(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetNumberEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEvents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(events, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventIndexDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescription(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetCurrentEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentEventIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNextEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetNextEventIndex(this, ::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nextindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFileWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFileWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn InputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InputWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInputWide(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn OutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaListWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPromptWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptTextWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn AssembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCWSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AssembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisassembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisassembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNamesWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn EvaluateWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateWide(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn ExecuteWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFileWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex2(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById2(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint2(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint2(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtensionWide(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtensionByPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPathWide(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtensionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunctionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetEventFilterTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterTextWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetLastEventInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformationWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, dsttext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByNameWide(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNamesWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescriptionWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2Wide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2Wide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetSystemVersionValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionValues(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into())
        }
        unsafe extern "system" fn GetSystemVersionString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTrace(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStoredEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStoredEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into())
        }
        unsafe extern "system" fn GetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatus(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn GetManagedStatusWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatusWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn ResetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetManagedStatus(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTraceEx(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTraceEx(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetContextStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTraceEx(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTraceEx(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByGuid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByGuid(this, ::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutionStatusEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatusEx(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSynchronizationStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl6_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSynchronizationStatus(this, ::core::mem::transmute_copy(&sendsattempted), ::core::mem::transmute_copy(&secondssincelastresponse)).into())
        }
        IDebugControl6_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Identity, Impl, OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Identity, Impl, OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Identity, Impl, OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Identity, Impl, OFFSET>,
            GetTextReplacement: GetTextReplacement::<Identity, Impl, OFFSET>,
            SetTextReplacement: SetTextReplacement::<Identity, Impl, OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Identity, Impl, OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Identity, Impl, OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Identity, Impl, OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Identity, Impl, OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Identity, Impl, OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Identity, Impl, OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Identity, Impl, OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Identity, Impl, OFFSET>,
            GetNumberEvents: GetNumberEvents::<Identity, Impl, OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Identity, Impl, OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Identity, Impl, OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Identity, Impl, OFFSET>,
            GetLogFileWide: GetLogFileWide::<Identity, Impl, OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Identity, Impl, OFFSET>,
            InputWide: InputWide::<Identity, Impl, OFFSET>,
            ReturnInputWide: ReturnInputWide::<Identity, Impl, OFFSET>,
            OutputWide: OutputWide::<Identity, Impl, OFFSET>,
            OutputVaListWide: OutputVaListWide::<Identity, Impl, OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Identity, Impl, OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Identity, Impl, OFFSET>,
            OutputPromptWide: OutputPromptWide::<Identity, Impl, OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Identity, Impl, OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Identity, Impl, OFFSET>,
            AssembleWide: AssembleWide::<Identity, Impl, OFFSET>,
            DisassembleWide: DisassembleWide::<Identity, Impl, OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Identity, Impl, OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Identity, Impl, OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Identity, Impl, OFFSET>,
            EvaluateWide: EvaluateWide::<Identity, Impl, OFFSET>,
            ExecuteWide: ExecuteWide::<Identity, Impl, OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Identity, Impl, OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Identity, Impl, OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Identity, Impl, OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Identity, Impl, OFFSET>,
            AddExtensionWide: AddExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Identity, Impl, OFFSET>,
            CallExtensionWide: CallExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Identity, Impl, OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Identity, Impl, OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Identity, Impl, OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Identity, Impl, OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Identity, Impl, OFFSET>,
            GetLogFile2: GetLogFile2::<Identity, Impl, OFFSET>,
            OpenLogFile2: OpenLogFile2::<Identity, Impl, OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Identity, Impl, OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Identity, Impl, OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Identity, Impl, OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Identity, Impl, OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Identity, Impl, OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Identity, Impl, OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Identity, Impl, OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Identity, Impl, OFFSET>,
            GetManagedStatus: GetManagedStatus::<Identity, Impl, OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Identity, Impl, OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Identity, Impl, OFFSET>,
            GetStackTraceEx: GetStackTraceEx::<Identity, Impl, OFFSET>,
            OutputStackTraceEx: OutputStackTraceEx::<Identity, Impl, OFFSET>,
            GetContextStackTraceEx: GetContextStackTraceEx::<Identity, Impl, OFFSET>,
            OutputContextStackTraceEx: OutputContextStackTraceEx::<Identity, Impl, OFFSET>,
            GetBreakpointByGuid: GetBreakpointByGuid::<Identity, Impl, OFFSET>,
            GetExecutionStatusEx: GetExecutionStatusEx::<Identity, Impl, OFFSET>,
            GetSynchronizationStatus: GetSynchronizationStatus::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Kernel\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
pub trait IDebugControl7_Impl: ::windows_core::BaseImpl {
    fn GetInterrupt(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetInterrupt(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetInterruptTimeout(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetInterruptTimeout(this: &Self::This, seconds: u32) -> ::windows_core::Result<()>;
    fn GetLogFile(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFile(this: &Self::This, file: &::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CloseLogFile(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLogMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetLogMask(this: &Self::This, mask: u32) -> ::windows_core::Result<()>;
    fn Input(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInput(this: &Self::This, buffer: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn Output(this: &Self::This, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputVaList(this: &Self::This, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutput(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaList(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPrompt(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaList(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptText(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn OutputCurrentState(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn OutputVersionInformation(this: &Self::This, outputcontrol: u32) -> ::windows_core::Result<()>;
    fn GetNotifyEventHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetNotifyEventHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Assemble(this: &Self::This, offset: u64, instr: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn Disassemble(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetDisassembleEffectiveOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputDisassembly(this: &Self::This, outputcontrol: u32, offset: u64, flags: u32) -> ::windows_core::Result<u64>;
    fn OutputDisassemblyLines(this: &Self::This, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::Result<()>;
    fn GetNearInstruction(this: &Self::This, offset: u64, delta: i32) -> ::windows_core::Result<u64>;
    fn GetStackTrace(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn GetReturnOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn OutputStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType(this: &Self::This, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
    fn GetActualProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExecutingProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberPossibleExecutingProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPossibleExecutingProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberProcessors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemVersion(this: &Self::This, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::Result<()>;
    fn GetPageSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsPointer64Bit(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadBugCheckData(this: &Self::This, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::Result<()>;
    fn GetNumberSupportedProcessorTypes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProcessorTypes(this: &Self::This, start: u32, count: u32, types: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNames(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEffectiveProcessorType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetEffectiveProcessorType(this: &Self::This, r#type: u32) -> ::windows_core::Result<()>;
    fn GetExecutionStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExecutionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn GetCodeLevel(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCodeLevel(this: &Self::This, level: u32) -> ::windows_core::Result<()>;
    fn GetEngineOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetEngineOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetSystemErrorControl(this: &Self::This, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::Result<()>;
    fn SetSystemErrorControl(this: &Self::This, outputlevel: u32, breaklevel: u32) -> ::windows_core::Result<()>;
    fn GetTextMacro(this: &Self::This, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacro(this: &Self::This, slot: u32, r#macro: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetRadix(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetRadix(this: &Self::This, radix: u32) -> ::windows_core::Result<()>;
    fn Evaluate(this: &Self::This, expression: &::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn CoerceValue(this: &Self::This, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn CoerceValues(this: &Self::This, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFile(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetNumberBreakpoints(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBreakpointByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointById(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn GetBreakpointParameters(this: &Self::This, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::Result<()>;
    fn AddBreakpoint(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint>;
    fn RemoveBreakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, path: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn RemoveExtension(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetExtensionByPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn CallExtension(this: &Self::This, handle: u64, function: &::windows_core::PCSTR, arguments: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunction(this: &Self::This, handle: u64, funcname: &::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis32(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::Result<()>;
    fn GetWindbgExtensionApis64(this: &Self::This, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::Result<()>;
    fn GetNumberEventFilters(this: &Self::This, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetSpecificFilterParameters(this: &Self::This, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgument(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgument(this: &Self::This, index: u32, argument: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterParameters(this: &Self::This, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn SetExceptionFilterParameters(this: &Self::This, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommand(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommand(this: &Self::This, index: u32, command: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn WaitForEvent(this: &Self::This, flags: u32, timeout: u32) -> ::windows_core::Result<()>;
    fn GetLastEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentTimeDate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDumpFormatFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetNumberTextReplacements(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacement(this: &Self::This, srctext: &::windows_core::PCSTR, dsttext: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveTextReplacements(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputTextReplacements(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetAssemblyOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetAssemblyOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetExpressionSyntax(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetExpressionSyntax(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByName(this: &Self::This, abbrevname: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetNumberExpressionSyntaxes(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExpressionSyntaxNames(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetNumberEvents(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventIndexDescription(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentEventIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetNextEventIndex(this: &Self::This, relation: u32, value: u32) -> ::windows_core::Result<u32>;
    fn GetLogFileWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenLogFileWide(this: &Self::This, file: &::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn InputWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::Result<()>;
    fn ReturnInputWide(this: &Self::This, buffer: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputVaListWide(this: &Self::This, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn ControlledOutputWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ControlledOutputVaListWide(this: &Self::This, outputcontrol: u32, mask: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn OutputPromptWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputPromptVaListWide(this: &Self::This, outputcontrol: u32, format: &::windows_core::PCWSTR, args: *const i8) -> ::windows_core::Result<()>;
    fn GetPromptTextWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn AssembleWide(this: &Self::This, offset: u64, instr: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn DisassembleWide(this: &Self::This, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::Result<()>;
    fn GetProcessorTypeNamesWide(this: &Self::This, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextMacroWide(this: &Self::This, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextMacroWide(this: &Self::This, slot: u32, r#macro: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn EvaluateWide(this: &Self::This, expression: &::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::Result<()>;
    fn ExecuteWide(this: &Self::This, outputcontrol: u32, command: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn ExecuteCommandFileWide(this: &Self::This, outputcontrol: u32, commandfile: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByIndex2(this: &Self::This, index: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn GetBreakpointById2(this: &Self::This, id: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn AddBreakpoint2(this: &Self::This, r#type: u32, desiredid: u32) -> ::windows_core::Result<IDebugBreakpoint2>;
    fn RemoveBreakpoint2(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint2>) -> ::windows_core::Result<()>;
    fn AddExtensionWide(this: &Self::This, path: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<u64>;
    fn GetExtensionByPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn CallExtensionWide(this: &Self::This, handle: u64, function: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExtensionFunctionWide(this: &Self::This, handle: u64, funcname: &::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::Result<()>;
    fn GetEventFilterTextWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventFilterCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetEventFilterCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSpecificFilterArgumentWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSpecificFilterArgumentWide(this: &Self::This, index: u32, argument: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetExceptionFilterSecondCommandWide(this: &Self::This, index: u32, command: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLastEventInformationWide(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::Result<()>;
    fn GetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetTextReplacementWide(this: &Self::This, srctext: &::windows_core::PCWSTR, dsttext: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetExpressionSyntaxByNameWide(this: &Self::This, abbrevname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetExpressionSyntaxNamesWide(this: &Self::This, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetEventIndexDescriptionWide(this: &Self::This, index: u32, which: u32, buffer: &::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetLogFile2(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2(this: &Self::This, file: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetLogFile2Wide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn OpenLogFile2Wide(this: &Self::This, file: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionValues(this: &Self::This, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionString(this: &Self::This, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSystemVersionStringWide(this: &Self::This, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetContextStackTrace(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTrace(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetStoredEventInformation(this: &Self::This, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatus(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetManagedStatusWide(this: &Self::This, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::Result<()>;
    fn ResetManagedStatus(this: &Self::This, flags: u32) -> ::windows_core::Result<()>;
    fn GetStackTraceEx(this: &Self::This, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputStackTraceEx(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetContextStackTraceEx(this: &Self::This, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::Result<()>;
    fn OutputContextStackTraceEx(this: &Self::This, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetBreakpointByGuid(this: &Self::This, guid: *const ::windows_core::GUID) -> ::windows_core::Result<IDebugBreakpoint3>;
    fn GetExecutionStatusEx(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSynchronizationStatus(this: &Self::This, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows_core::Result<()>;
    fn GetDebuggeeType2(this: &Self::This, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl ::windows_core::Iids for IDebugControl7 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Kernel"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugControl7 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInterrupt(this).into())
        }
        unsafe extern "system" fn SetInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterrupt(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterruptTimeout(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(seconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInterruptTimeout<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterruptTimeout(this, ::core::mem::transmute_copy(&seconds)).into())
        }
        unsafe extern "system" fn GetLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn CloseLogFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseLogFile(this).into())
        }
        unsafe extern "system" fn GetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLogMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLogMask(this, ::core::mem::transmute_copy(&mask)).into())
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Input(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInput(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaList(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutput(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPrompt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPrompt(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaList(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptText(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn OutputCurrentState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputCurrentState(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OutputVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVersionInformation(this, ::core::mem::transmute_copy(&outputcontrol)).into())
        }
        unsafe extern "system" fn GetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNotifyEventHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotifyEventHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotifyEventHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Assemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Assemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Disassemble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disassemble(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetDisassembleEffectiveOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisassembleEffectiveOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassembly<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, flags: u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputDisassembly(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputDisassemblyLines<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, previouslines: u32, totallines: u32, offset: u64, flags: u32, offsetline: *mut u32, startoffset: *mut u64, endoffset: *mut u64, lineoffsets: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputDisassemblyLines(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&previouslines), ::core::mem::transmute_copy(&totallines), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offsetline), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&endoffset), ::core::mem::transmute_copy(&lineoffsets)).into())
        }
        unsafe extern "system" fn GetNearInstruction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, nearoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNearInstruction(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nearoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTrace(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn GetReturnOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReturnOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OutputStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetDebuggeeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType(this, ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        unsafe extern "system" fn GetActualProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActualProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutingProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutingProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPossibleExecutingProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPossibleExecutingProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPossibleExecutingProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetNumberProcessors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcessors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, major: *mut u32, minor: *mut u32, servicepackstring: ::windows_core::PSTR, servicepackstringsize: u32, servicepackstringused: *mut u32, servicepacknumber: *mut u32, buildstring: ::windows_core::PSTR, buildstringsize: u32, buildstringused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetSystemVersion(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&major), ::core::mem::transmute_copy(&minor), ::core::mem::transmute_copy(&servicepackstring), ::core::mem::transmute_copy(&servicepackstringsize), ::core::mem::transmute_copy(&servicepackstringused), ::core::mem::transmute_copy(&servicepacknumber), ::core::mem::transmute_copy(&buildstring), ::core::mem::transmute_copy(&buildstringsize), ::core::mem::transmute_copy(&buildstringused)).into()
            })
        }
        unsafe extern "system" fn GetPageSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPageSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsPointer64Bit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPointer64Bit(this).into())
        }
        unsafe extern "system" fn ReadBugCheckData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u32, arg1: *mut u64, arg2: *mut u64, arg3: *mut u64, arg4: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBugCheckData(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&arg1), ::core::mem::transmute_copy(&arg2), ::core::mem::transmute_copy(&arg3), ::core::mem::transmute_copy(&arg4)).into())
        }
        unsafe extern "system" fn GetNumberSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSupportedProcessorTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProcessorTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, types: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedProcessorTypes(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&types)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNames(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEffectiveProcessorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEffectiveProcessorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEffectiveProcessorType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExecutionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExecutionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn GetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(level, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCodeLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCodeLevel(this, ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn GetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEngineOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetEngineOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEngineOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: *mut u32, breaklevel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn SetSystemErrorControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlevel: u32, breaklevel: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemErrorControl(this, ::core::mem::transmute_copy(&outputlevel), ::core::mem::transmute_copy(&breaklevel)).into())
        }
        unsafe extern "system" fn GetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacro<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacro(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn GetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRadix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(radix, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRadix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, radix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRadix(this, ::core::mem::transmute_copy(&radix)).into())
        }
        unsafe extern "system" fn Evaluate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Evaluate(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn CoerceValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#in: *const DEBUG_VALUE, outtype: u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValue(this, ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtype), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn CoerceValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, r#in: *const DEBUG_VALUE, outtypes: *const u32, out: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CoerceValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&r#in), ::core::mem::transmute_copy(&outtypes), ::core::mem::transmute_copy(&out)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFile(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetNumberBreakpoints<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberBreakpoints(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, ids: *const u32, start: u32, params: *mut DEBUG_BREAKPOINT_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBreakpointParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn AddBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtension(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetExtensionByPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPath(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCSTR, arguments: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtension(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunction(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis32(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetWindbgExtensionApis64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *mut WINDBG_EXTENSION_APIS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetWindbgExtensionApis64(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetNumberEventFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, specificevents: *mut u32, specificexceptions: *mut u32, arbitraryexceptions: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberEventFilters(this, ::core::mem::transmute_copy(&specificevents), ::core::mem::transmute_copy(&specificexceptions), ::core::mem::transmute_copy(&arbitraryexceptions)).into())
        }
        unsafe extern "system" fn GetEventFilterText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetSpecificFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *const DEBUG_SPECIFIC_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgument<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgument(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, codes: *const u32, start: u32, params: *mut DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&codes), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn SetExceptionFilterParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, params: *const DEBUG_EXCEPTION_FILTER_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommand(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn WaitForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, timeout: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitForEvent(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&timeout)).into())
        }
        unsafe extern "system" fn GetLastEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetCurrentTimeDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timedate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentTimeDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(timedate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDumpFormatFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formatflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDumpFormatFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formatflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numrepl: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberTextReplacements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(numrepl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, index: u32, srcbuffer: ::windows_core::PSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCSTR, dsttext: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacement(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn RemoveTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTextReplacements(this).into())
        }
        unsafe extern "system" fn OutputTextReplacements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTextReplacements(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAssemblyOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetAssemblyOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAssemblyOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpressionSyntax(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExpressionSyntax<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntax(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByName(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetNumberExpressionSyntaxes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberExpressionSyntaxes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpressionSyntaxNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNames(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetNumberEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, events: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberEvents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(events, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventIndexDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescription(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetCurrentEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentEventIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNextEventIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, relation: u32, value: u32, nextindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetNextEventIndex(this, ::core::mem::transmute_copy(&relation), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nextindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, append: *mut super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFileWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn OpenLogFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, append: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFileWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&append)).into())
        }
        unsafe extern "system" fn InputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, inputsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InputWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&inputsize)).into())
        }
        unsafe extern "system" fn ReturnInputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnInputWide(this, ::core::mem::transmute(&buffer)).into())
        }
        unsafe extern "system" fn OutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputVaListWide(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn ControlledOutputWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn ControlledOutputVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, mask: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ControlledOutputVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn OutputPromptWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format)).into())
        }
        unsafe extern "system" fn OutputPromptVaListWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, format: ::windows_core::PCWSTR, args: *const i8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputPromptVaListWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&format), ::core::mem::transmute_copy(&args)).into())
        }
        unsafe extern "system" fn GetPromptTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPromptTextWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn AssembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, instr: ::windows_core::PCWSTR, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AssembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute(&instr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(endoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisassembleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: ::windows_core::PWSTR, buffersize: u32, disassemblysize: *mut u32, endoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisassembleWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&disassemblysize), ::core::mem::transmute_copy(&endoffset)).into())
        }
        unsafe extern "system" fn GetProcessorTypeNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessorTypeNamesWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, buffer: ::windows_core::PWSTR, buffersize: u32, macrosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&macrosize)).into())
        }
        unsafe extern "system" fn SetTextMacroWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, slot: u32, r#macro: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextMacroWide(this, ::core::mem::transmute_copy(&slot), ::core::mem::transmute(&r#macro)).into())
        }
        unsafe extern "system" fn EvaluateWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR, desiredtype: u32, value: *mut DEBUG_VALUE, remainderindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateWide(this, ::core::mem::transmute(&expression), ::core::mem::transmute_copy(&desiredtype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&remainderindex)).into())
        }
        unsafe extern "system" fn ExecuteWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, command: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&command), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ExecuteCommandFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, commandfile: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteCommandFileWide(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute(&commandfile), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByIndex2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByIndex2(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBreakpointById2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointById2(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: u32, desiredid: u32, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddBreakpoint2(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&desiredid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveBreakpoint2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBreakpoint2(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn AddExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, flags: u32, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddExtensionWide(this, ::core::mem::transmute(&path), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtensionByPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtensionByPathWide(this, ::core::mem::transmute(&path)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CallExtensionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, function: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CallExtensionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&function), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn GetExtensionFunctionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, funcname: ::windows_core::PCWSTR, function: *mut super::super::super::super::Foundation::FARPROC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtensionFunctionWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute(&funcname), ::core::mem::transmute_copy(&function)).into())
        }
        unsafe extern "system" fn GetEventFilterTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, textsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterTextWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&textsize)).into())
        }
        unsafe extern "system" fn GetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetEventFilterCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEventFilterCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, argumentsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&argumentsize)).into())
        }
        unsafe extern "system" fn SetSpecificFilterArgumentWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, argument: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpecificFilterArgumentWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&argument)).into())
        }
        unsafe extern "system" fn GetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, commandsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&commandsize)).into())
        }
        unsafe extern "system" fn SetExceptionFilterSecondCommandWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, command: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExceptionFilterSecondCommandWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&command)).into())
        }
        unsafe extern "system" fn GetLastEventInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32, description: ::windows_core::PWSTR, descriptionsize: u32, descriptionused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastEventInformationWide(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descriptionsize), ::core::mem::transmute_copy(&descriptionused)).into())
        }
        unsafe extern "system" fn GetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, index: u32, srcbuffer: ::windows_core::PWSTR, srcbuffersize: u32, srcsize: *mut u32, dstbuffer: ::windows_core::PWSTR, dstbuffersize: u32, dstsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&srcbuffer), ::core::mem::transmute_copy(&srcbuffersize), ::core::mem::transmute_copy(&srcsize), ::core::mem::transmute_copy(&dstbuffer), ::core::mem::transmute_copy(&dstbuffersize), ::core::mem::transmute_copy(&dstsize)).into())
        }
        unsafe extern "system" fn SetTextReplacementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, srctext: ::windows_core::PCWSTR, dsttext: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTextReplacementWide(this, ::core::mem::transmute(&srctext), ::core::mem::transmute(&dsttext)).into())
        }
        unsafe extern "system" fn SetExpressionSyntaxByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, abbrevname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExpressionSyntaxByNameWide(this, ::core::mem::transmute(&abbrevname)).into())
        }
        unsafe extern "system" fn GetExpressionSyntaxNamesWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, fullnamebuffer: ::windows_core::PWSTR, fullnamebuffersize: u32, fullnamesize: *mut u32, abbrevnamebuffer: ::windows_core::PWSTR, abbrevnamebuffersize: u32, abbrevnamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpressionSyntaxNamesWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&fullnamebuffer), ::core::mem::transmute_copy(&fullnamebuffersize), ::core::mem::transmute_copy(&fullnamesize), ::core::mem::transmute_copy(&abbrevnamebuffer), ::core::mem::transmute_copy(&abbrevnamebuffersize), ::core::mem::transmute_copy(&abbrevnamesize)).into())
        }
        unsafe extern "system" fn GetEventIndexDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, which: u32, buffer: ::windows_core::PCWSTR, buffersize: u32, descsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventIndexDescriptionWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&which), ::core::mem::transmute(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&descsize)).into())
        }
        unsafe extern "system" fn GetLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, filesize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLogFile2Wide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn OpenLogFile2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenLogFile2Wide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetSystemVersionValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, platformid: *mut u32, win32major: *mut u32, win32minor: *mut u32, kdmajor: *mut u32, kdminor: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionValues(this, ::core::mem::transmute_copy(&platformid), ::core::mem::transmute_copy(&win32major), ::core::mem::transmute_copy(&win32minor), ::core::mem::transmute_copy(&kdmajor), ::core::mem::transmute_copy(&kdminor)).into())
        }
        unsafe extern "system" fn GetSystemVersionString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSystemVersionStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemVersionStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTrace(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTrace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTrace(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStoredEventInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut u32, processid: *mut u32, threadid: *mut u32, context: *mut ::core::ffi::c_void, contextsize: u32, contextused: *mut u32, extrainformation: *mut ::core::ffi::c_void, extrainformationsize: u32, extrainformationused: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStoredEventInformation(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize), ::core::mem::transmute_copy(&contextused), ::core::mem::transmute_copy(&extrainformation), ::core::mem::transmute_copy(&extrainformationsize), ::core::mem::transmute_copy(&extrainformationused)).into())
        }
        unsafe extern "system" fn GetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatus(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn GetManagedStatusWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut u32, whichstring: u32, string: ::windows_core::PWSTR, stringsize: u32, stringneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetManagedStatusWide(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&whichstring), ::core::mem::transmute_copy(&string), ::core::mem::transmute_copy(&stringsize), ::core::mem::transmute_copy(&stringneeded)).into())
        }
        unsafe extern "system" fn ResetManagedStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetManagedStatus(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frameoffset: u64, stackoffset: u64, instructionoffset: u64, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStackTraceEx(this, ::core::mem::transmute_copy(&frameoffset), ::core::mem::transmute_copy(&stackoffset), ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputStackTraceEx(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetContextStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startcontext: *const ::core::ffi::c_void, startcontextsize: u32, frames: *mut DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *mut ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, framesfilled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContextStackTraceEx(this, ::core::mem::transmute_copy(&startcontext), ::core::mem::transmute_copy(&startcontextsize), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&framesfilled)).into())
        }
        unsafe extern "system" fn OutputContextStackTraceEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, frames: *const DEBUG_STACK_FRAME_EX, framessize: u32, framecontexts: *const ::core::ffi::c_void, framecontextssize: u32, framecontextsentrysize: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputContextStackTraceEx(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&frames), ::core::mem::transmute_copy(&framessize), ::core::mem::transmute_copy(&framecontexts), ::core::mem::transmute_copy(&framecontextssize), ::core::mem::transmute_copy(&framecontextsentrysize), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetBreakpointByGuid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, bp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBreakpointByGuid(this, ::core::mem::transmute_copy(&guid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExecutionStatusEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExecutionStatusEx(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSynchronizationStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sendsattempted: *mut u32, secondssincelastresponse: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSynchronizationStatus(this, ::core::mem::transmute_copy(&sendsattempted), ::core::mem::transmute_copy(&secondssincelastresponse)).into())
        }
        unsafe extern "system" fn GetDebuggeeType2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugControl7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, class: *mut u32, qualifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDebuggeeType2(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&class), ::core::mem::transmute_copy(&qualifier)).into())
        }
        IDebugControl7_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterrupt: GetInterrupt::<Identity, Impl, OFFSET>,
            SetInterrupt: SetInterrupt::<Identity, Impl, OFFSET>,
            GetInterruptTimeout: GetInterruptTimeout::<Identity, Impl, OFFSET>,
            SetInterruptTimeout: SetInterruptTimeout::<Identity, Impl, OFFSET>,
            GetLogFile: GetLogFile::<Identity, Impl, OFFSET>,
            OpenLogFile: OpenLogFile::<Identity, Impl, OFFSET>,
            CloseLogFile: CloseLogFile::<Identity, Impl, OFFSET>,
            GetLogMask: GetLogMask::<Identity, Impl, OFFSET>,
            SetLogMask: SetLogMask::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            ReturnInput: ReturnInput::<Identity, Impl, OFFSET>,
            Output: Output::<Identity, Impl, OFFSET>,
            OutputVaList: OutputVaList::<Identity, Impl, OFFSET>,
            ControlledOutput: ControlledOutput::<Identity, Impl, OFFSET>,
            ControlledOutputVaList: ControlledOutputVaList::<Identity, Impl, OFFSET>,
            OutputPrompt: OutputPrompt::<Identity, Impl, OFFSET>,
            OutputPromptVaList: OutputPromptVaList::<Identity, Impl, OFFSET>,
            GetPromptText: GetPromptText::<Identity, Impl, OFFSET>,
            OutputCurrentState: OutputCurrentState::<Identity, Impl, OFFSET>,
            OutputVersionInformation: OutputVersionInformation::<Identity, Impl, OFFSET>,
            GetNotifyEventHandle: GetNotifyEventHandle::<Identity, Impl, OFFSET>,
            SetNotifyEventHandle: SetNotifyEventHandle::<Identity, Impl, OFFSET>,
            Assemble: Assemble::<Identity, Impl, OFFSET>,
            Disassemble: Disassemble::<Identity, Impl, OFFSET>,
            GetDisassembleEffectiveOffset: GetDisassembleEffectiveOffset::<Identity, Impl, OFFSET>,
            OutputDisassembly: OutputDisassembly::<Identity, Impl, OFFSET>,
            OutputDisassemblyLines: OutputDisassemblyLines::<Identity, Impl, OFFSET>,
            GetNearInstruction: GetNearInstruction::<Identity, Impl, OFFSET>,
            GetStackTrace: GetStackTrace::<Identity, Impl, OFFSET>,
            GetReturnOffset: GetReturnOffset::<Identity, Impl, OFFSET>,
            OutputStackTrace: OutputStackTrace::<Identity, Impl, OFFSET>,
            GetDebuggeeType: GetDebuggeeType::<Identity, Impl, OFFSET>,
            GetActualProcessorType: GetActualProcessorType::<Identity, Impl, OFFSET>,
            GetExecutingProcessorType: GetExecutingProcessorType::<Identity, Impl, OFFSET>,
            GetNumberPossibleExecutingProcessorTypes: GetNumberPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetPossibleExecutingProcessorTypes: GetPossibleExecutingProcessorTypes::<Identity, Impl, OFFSET>,
            GetNumberProcessors: GetNumberProcessors::<Identity, Impl, OFFSET>,
            GetSystemVersion: GetSystemVersion::<Identity, Impl, OFFSET>,
            GetPageSize: GetPageSize::<Identity, Impl, OFFSET>,
            IsPointer64Bit: IsPointer64Bit::<Identity, Impl, OFFSET>,
            ReadBugCheckData: ReadBugCheckData::<Identity, Impl, OFFSET>,
            GetNumberSupportedProcessorTypes: GetNumberSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetSupportedProcessorTypes: GetSupportedProcessorTypes::<Identity, Impl, OFFSET>,
            GetProcessorTypeNames: GetProcessorTypeNames::<Identity, Impl, OFFSET>,
            GetEffectiveProcessorType: GetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            SetEffectiveProcessorType: SetEffectiveProcessorType::<Identity, Impl, OFFSET>,
            GetExecutionStatus: GetExecutionStatus::<Identity, Impl, OFFSET>,
            SetExecutionStatus: SetExecutionStatus::<Identity, Impl, OFFSET>,
            GetCodeLevel: GetCodeLevel::<Identity, Impl, OFFSET>,
            SetCodeLevel: SetCodeLevel::<Identity, Impl, OFFSET>,
            GetEngineOptions: GetEngineOptions::<Identity, Impl, OFFSET>,
            AddEngineOptions: AddEngineOptions::<Identity, Impl, OFFSET>,
            RemoveEngineOptions: RemoveEngineOptions::<Identity, Impl, OFFSET>,
            SetEngineOptions: SetEngineOptions::<Identity, Impl, OFFSET>,
            GetSystemErrorControl: GetSystemErrorControl::<Identity, Impl, OFFSET>,
            SetSystemErrorControl: SetSystemErrorControl::<Identity, Impl, OFFSET>,
            GetTextMacro: GetTextMacro::<Identity, Impl, OFFSET>,
            SetTextMacro: SetTextMacro::<Identity, Impl, OFFSET>,
            GetRadix: GetRadix::<Identity, Impl, OFFSET>,
            SetRadix: SetRadix::<Identity, Impl, OFFSET>,
            Evaluate: Evaluate::<Identity, Impl, OFFSET>,
            CoerceValue: CoerceValue::<Identity, Impl, OFFSET>,
            CoerceValues: CoerceValues::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
            ExecuteCommandFile: ExecuteCommandFile::<Identity, Impl, OFFSET>,
            GetNumberBreakpoints: GetNumberBreakpoints::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex: GetBreakpointByIndex::<Identity, Impl, OFFSET>,
            GetBreakpointById: GetBreakpointById::<Identity, Impl, OFFSET>,
            GetBreakpointParameters: GetBreakpointParameters::<Identity, Impl, OFFSET>,
            AddBreakpoint: AddBreakpoint::<Identity, Impl, OFFSET>,
            RemoveBreakpoint: RemoveBreakpoint::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
            GetExtensionByPath: GetExtensionByPath::<Identity, Impl, OFFSET>,
            CallExtension: CallExtension::<Identity, Impl, OFFSET>,
            GetExtensionFunction: GetExtensionFunction::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis32: GetWindbgExtensionApis32::<Identity, Impl, OFFSET>,
            GetWindbgExtensionApis64: GetWindbgExtensionApis64::<Identity, Impl, OFFSET>,
            GetNumberEventFilters: GetNumberEventFilters::<Identity, Impl, OFFSET>,
            GetEventFilterText: GetEventFilterText::<Identity, Impl, OFFSET>,
            GetEventFilterCommand: GetEventFilterCommand::<Identity, Impl, OFFSET>,
            SetEventFilterCommand: SetEventFilterCommand::<Identity, Impl, OFFSET>,
            GetSpecificFilterParameters: GetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            SetSpecificFilterParameters: SetSpecificFilterParameters::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgument: GetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgument: SetSpecificFilterArgument::<Identity, Impl, OFFSET>,
            GetExceptionFilterParameters: GetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            SetExceptionFilterParameters: SetExceptionFilterParameters::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommand: GetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommand: SetExceptionFilterSecondCommand::<Identity, Impl, OFFSET>,
            WaitForEvent: WaitForEvent::<Identity, Impl, OFFSET>,
            GetLastEventInformation: GetLastEventInformation::<Identity, Impl, OFFSET>,
            GetCurrentTimeDate: GetCurrentTimeDate::<Identity, Impl, OFFSET>,
            GetCurrentSystemUpTime: GetCurrentSystemUpTime::<Identity, Impl, OFFSET>,
            GetDumpFormatFlags: GetDumpFormatFlags::<Identity, Impl, OFFSET>,
            GetNumberTextReplacements: GetNumberTextReplacements::<Identity, Impl, OFFSET>,
            GetTextReplacement: GetTextReplacement::<Identity, Impl, OFFSET>,
            SetTextReplacement: SetTextReplacement::<Identity, Impl, OFFSET>,
            RemoveTextReplacements: RemoveTextReplacements::<Identity, Impl, OFFSET>,
            OutputTextReplacements: OutputTextReplacements::<Identity, Impl, OFFSET>,
            GetAssemblyOptions: GetAssemblyOptions::<Identity, Impl, OFFSET>,
            AddAssemblyOptions: AddAssemblyOptions::<Identity, Impl, OFFSET>,
            RemoveAssemblyOptions: RemoveAssemblyOptions::<Identity, Impl, OFFSET>,
            SetAssemblyOptions: SetAssemblyOptions::<Identity, Impl, OFFSET>,
            GetExpressionSyntax: GetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntax: SetExpressionSyntax::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByName: SetExpressionSyntaxByName::<Identity, Impl, OFFSET>,
            GetNumberExpressionSyntaxes: GetNumberExpressionSyntaxes::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNames: GetExpressionSyntaxNames::<Identity, Impl, OFFSET>,
            GetNumberEvents: GetNumberEvents::<Identity, Impl, OFFSET>,
            GetEventIndexDescription: GetEventIndexDescription::<Identity, Impl, OFFSET>,
            GetCurrentEventIndex: GetCurrentEventIndex::<Identity, Impl, OFFSET>,
            SetNextEventIndex: SetNextEventIndex::<Identity, Impl, OFFSET>,
            GetLogFileWide: GetLogFileWide::<Identity, Impl, OFFSET>,
            OpenLogFileWide: OpenLogFileWide::<Identity, Impl, OFFSET>,
            InputWide: InputWide::<Identity, Impl, OFFSET>,
            ReturnInputWide: ReturnInputWide::<Identity, Impl, OFFSET>,
            OutputWide: OutputWide::<Identity, Impl, OFFSET>,
            OutputVaListWide: OutputVaListWide::<Identity, Impl, OFFSET>,
            ControlledOutputWide: ControlledOutputWide::<Identity, Impl, OFFSET>,
            ControlledOutputVaListWide: ControlledOutputVaListWide::<Identity, Impl, OFFSET>,
            OutputPromptWide: OutputPromptWide::<Identity, Impl, OFFSET>,
            OutputPromptVaListWide: OutputPromptVaListWide::<Identity, Impl, OFFSET>,
            GetPromptTextWide: GetPromptTextWide::<Identity, Impl, OFFSET>,
            AssembleWide: AssembleWide::<Identity, Impl, OFFSET>,
            DisassembleWide: DisassembleWide::<Identity, Impl, OFFSET>,
            GetProcessorTypeNamesWide: GetProcessorTypeNamesWide::<Identity, Impl, OFFSET>,
            GetTextMacroWide: GetTextMacroWide::<Identity, Impl, OFFSET>,
            SetTextMacroWide: SetTextMacroWide::<Identity, Impl, OFFSET>,
            EvaluateWide: EvaluateWide::<Identity, Impl, OFFSET>,
            ExecuteWide: ExecuteWide::<Identity, Impl, OFFSET>,
            ExecuteCommandFileWide: ExecuteCommandFileWide::<Identity, Impl, OFFSET>,
            GetBreakpointByIndex2: GetBreakpointByIndex2::<Identity, Impl, OFFSET>,
            GetBreakpointById2: GetBreakpointById2::<Identity, Impl, OFFSET>,
            AddBreakpoint2: AddBreakpoint2::<Identity, Impl, OFFSET>,
            RemoveBreakpoint2: RemoveBreakpoint2::<Identity, Impl, OFFSET>,
            AddExtensionWide: AddExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionByPathWide: GetExtensionByPathWide::<Identity, Impl, OFFSET>,
            CallExtensionWide: CallExtensionWide::<Identity, Impl, OFFSET>,
            GetExtensionFunctionWide: GetExtensionFunctionWide::<Identity, Impl, OFFSET>,
            GetEventFilterTextWide: GetEventFilterTextWide::<Identity, Impl, OFFSET>,
            GetEventFilterCommandWide: GetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            SetEventFilterCommandWide: SetEventFilterCommandWide::<Identity, Impl, OFFSET>,
            GetSpecificFilterArgumentWide: GetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            SetSpecificFilterArgumentWide: SetSpecificFilterArgumentWide::<Identity, Impl, OFFSET>,
            GetExceptionFilterSecondCommandWide: GetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            SetExceptionFilterSecondCommandWide: SetExceptionFilterSecondCommandWide::<Identity, Impl, OFFSET>,
            GetLastEventInformationWide: GetLastEventInformationWide::<Identity, Impl, OFFSET>,
            GetTextReplacementWide: GetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetTextReplacementWide: SetTextReplacementWide::<Identity, Impl, OFFSET>,
            SetExpressionSyntaxByNameWide: SetExpressionSyntaxByNameWide::<Identity, Impl, OFFSET>,
            GetExpressionSyntaxNamesWide: GetExpressionSyntaxNamesWide::<Identity, Impl, OFFSET>,
            GetEventIndexDescriptionWide: GetEventIndexDescriptionWide::<Identity, Impl, OFFSET>,
            GetLogFile2: GetLogFile2::<Identity, Impl, OFFSET>,
            OpenLogFile2: OpenLogFile2::<Identity, Impl, OFFSET>,
            GetLogFile2Wide: GetLogFile2Wide::<Identity, Impl, OFFSET>,
            OpenLogFile2Wide: OpenLogFile2Wide::<Identity, Impl, OFFSET>,
            GetSystemVersionValues: GetSystemVersionValues::<Identity, Impl, OFFSET>,
            GetSystemVersionString: GetSystemVersionString::<Identity, Impl, OFFSET>,
            GetSystemVersionStringWide: GetSystemVersionStringWide::<Identity, Impl, OFFSET>,
            GetContextStackTrace: GetContextStackTrace::<Identity, Impl, OFFSET>,
            OutputContextStackTrace: OutputContextStackTrace::<Identity, Impl, OFFSET>,
            GetStoredEventInformation: GetStoredEventInformation::<Identity, Impl, OFFSET>,
            GetManagedStatus: GetManagedStatus::<Identity, Impl, OFFSET>,
            GetManagedStatusWide: GetManagedStatusWide::<Identity, Impl, OFFSET>,
            ResetManagedStatus: ResetManagedStatus::<Identity, Impl, OFFSET>,
            GetStackTraceEx: GetStackTraceEx::<Identity, Impl, OFFSET>,
            OutputStackTraceEx: OutputStackTraceEx::<Identity, Impl, OFFSET>,
            GetContextStackTraceEx: GetContextStackTraceEx::<Identity, Impl, OFFSET>,
            OutputContextStackTraceEx: OutputContextStackTraceEx::<Identity, Impl, OFFSET>,
            GetBreakpointByGuid: GetBreakpointByGuid::<Identity, Impl, OFFSET>,
            GetExecutionStatusEx: GetExecutionStatusEx::<Identity, Impl, OFFSET>,
            GetSynchronizationStatus: GetSynchronizationStatus::<Identity, Impl, OFFSET>,
            GetDebuggeeType2: GetDebuggeeType2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugDataSpaces_Impl: ::windows_core::BaseImpl {
    fn ReadVirtual(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtual(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn SearchVirtual(this: &Self::This, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows_core::Result<u64>;
    fn ReadVirtualUncached(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtualUncached(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadPointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::Result<()>;
    fn WritePointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::Result<()>;
    fn ReadPhysical(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WritePhysical(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadControl(this: &Self::This, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteControl(this: &Self::This, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadMsr(this: &Self::This, msr: u32) -> ::windows_core::Result<u64>;
    fn WriteMsr(this: &Self::This, msr: u32, value: u64) -> ::windows_core::Result<()>;
    fn ReadBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn CheckLowMemory(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadDebuggerData(this: &Self::This, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn ReadProcessorSystemData(this: &Self::This, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugDataSpaces {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugDataSpaces {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn SearchVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(matchoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReadVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadPointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn WritePointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn ReadPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WritePhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReadMsr(this, ::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn WriteMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteMsr(this, ::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ReadBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn CheckLowMemory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckLowMemory(this).into())
        }
        unsafe extern "system" fn ReadDebuggerData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadDebuggerData(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn ReadProcessorSystemData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadProcessorSystemData(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        IDebugDataSpaces_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadVirtual: ReadVirtual::<Identity, Impl, OFFSET>,
            WriteVirtual: WriteVirtual::<Identity, Impl, OFFSET>,
            SearchVirtual: SearchVirtual::<Identity, Impl, OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Identity, Impl, OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Identity, Impl, OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Identity, Impl, OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Identity, Impl, OFFSET>,
            ReadPhysical: ReadPhysical::<Identity, Impl, OFFSET>,
            WritePhysical: WritePhysical::<Identity, Impl, OFFSET>,
            ReadControl: ReadControl::<Identity, Impl, OFFSET>,
            WriteControl: WriteControl::<Identity, Impl, OFFSET>,
            ReadIo: ReadIo::<Identity, Impl, OFFSET>,
            WriteIo: WriteIo::<Identity, Impl, OFFSET>,
            ReadMsr: ReadMsr::<Identity, Impl, OFFSET>,
            WriteMsr: WriteMsr::<Identity, Impl, OFFSET>,
            ReadBusData: ReadBusData::<Identity, Impl, OFFSET>,
            WriteBusData: WriteBusData::<Identity, Impl, OFFSET>,
            CheckLowMemory: CheckLowMemory::<Identity, Impl, OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Identity, Impl, OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Memory\"`"]
#[cfg(feature = "Win32_System_Memory")]
pub trait IDebugDataSpaces2_Impl: ::windows_core::BaseImpl {
    fn ReadVirtual(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtual(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn SearchVirtual(this: &Self::This, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows_core::Result<u64>;
    fn ReadVirtualUncached(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtualUncached(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadPointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::Result<()>;
    fn WritePointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::Result<()>;
    fn ReadPhysical(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WritePhysical(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadControl(this: &Self::This, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteControl(this: &Self::This, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadMsr(this: &Self::This, msr: u32) -> ::windows_core::Result<u64>;
    fn WriteMsr(this: &Self::This, msr: u32, value: u64) -> ::windows_core::Result<()>;
    fn ReadBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn CheckLowMemory(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadDebuggerData(this: &Self::This, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn ReadProcessorSystemData(this: &Self::This, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn VirtualToPhysical(this: &Self::This, r#virtual: u64) -> ::windows_core::Result<u64>;
    fn GetVirtualTranslationPhysicalOffsets(this: &Self::This, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows_core::Result<()>;
    fn ReadHandleData(this: &Self::This, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn FillVirtual(this: &Self::This, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::Result<()>;
    fn FillPhysical(this: &Self::This, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::Result<()>;
    fn QueryVirtual(this: &Self::This, offset: u64, info: *mut super::super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Memory")]
impl ::windows_core::Iids for IDebugDataSpaces2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Memory")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugDataSpaces2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn SearchVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(matchoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReadVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadPointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn WritePointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn ReadPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WritePhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReadMsr(this, ::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn WriteMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteMsr(this, ::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ReadBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn CheckLowMemory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckLowMemory(this).into())
        }
        unsafe extern "system" fn ReadDebuggerData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadDebuggerData(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn ReadProcessorSystemData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadProcessorSystemData(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn VirtualToPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VirtualToPhysical(this, ::core::mem::transmute_copy(&r#virtual)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(physical, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVirtualTranslationPhysicalOffsets(this, ::core::mem::transmute_copy(&r#virtual), ::core::mem::transmute_copy(&offsets), ::core::mem::transmute_copy(&offsetssize), ::core::mem::transmute_copy(&levels)).into())
        }
        unsafe extern "system" fn ReadHandleData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadHandleData(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&datatype), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn FillVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillVirtual(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&filled)).into())
        }
        unsafe extern "system" fn FillPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillPhysical(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&filled)).into())
        }
        unsafe extern "system" fn QueryVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&info)).into())
        }
        IDebugDataSpaces2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadVirtual: ReadVirtual::<Identity, Impl, OFFSET>,
            WriteVirtual: WriteVirtual::<Identity, Impl, OFFSET>,
            SearchVirtual: SearchVirtual::<Identity, Impl, OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Identity, Impl, OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Identity, Impl, OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Identity, Impl, OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Identity, Impl, OFFSET>,
            ReadPhysical: ReadPhysical::<Identity, Impl, OFFSET>,
            WritePhysical: WritePhysical::<Identity, Impl, OFFSET>,
            ReadControl: ReadControl::<Identity, Impl, OFFSET>,
            WriteControl: WriteControl::<Identity, Impl, OFFSET>,
            ReadIo: ReadIo::<Identity, Impl, OFFSET>,
            WriteIo: WriteIo::<Identity, Impl, OFFSET>,
            ReadMsr: ReadMsr::<Identity, Impl, OFFSET>,
            WriteMsr: WriteMsr::<Identity, Impl, OFFSET>,
            ReadBusData: ReadBusData::<Identity, Impl, OFFSET>,
            WriteBusData: WriteBusData::<Identity, Impl, OFFSET>,
            CheckLowMemory: CheckLowMemory::<Identity, Impl, OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Identity, Impl, OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Identity, Impl, OFFSET>,
            VirtualToPhysical: VirtualToPhysical::<Identity, Impl, OFFSET>,
            GetVirtualTranslationPhysicalOffsets: GetVirtualTranslationPhysicalOffsets::<Identity, Impl, OFFSET>,
            ReadHandleData: ReadHandleData::<Identity, Impl, OFFSET>,
            FillVirtual: FillVirtual::<Identity, Impl, OFFSET>,
            FillPhysical: FillPhysical::<Identity, Impl, OFFSET>,
            QueryVirtual: QueryVirtual::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Memory\"`, `\"Win32_System_SystemInformation\"`"]
#[cfg(all(feature = "Win32_System_Memory", feature = "Win32_System_SystemInformation"))]
pub trait IDebugDataSpaces3_Impl: ::windows_core::BaseImpl {
    fn ReadVirtual(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtual(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn SearchVirtual(this: &Self::This, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows_core::Result<u64>;
    fn ReadVirtualUncached(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtualUncached(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadPointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::Result<()>;
    fn WritePointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::Result<()>;
    fn ReadPhysical(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WritePhysical(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadControl(this: &Self::This, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteControl(this: &Self::This, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadMsr(this: &Self::This, msr: u32) -> ::windows_core::Result<u64>;
    fn WriteMsr(this: &Self::This, msr: u32, value: u64) -> ::windows_core::Result<()>;
    fn ReadBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn CheckLowMemory(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadDebuggerData(this: &Self::This, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn ReadProcessorSystemData(this: &Self::This, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn VirtualToPhysical(this: &Self::This, r#virtual: u64) -> ::windows_core::Result<u64>;
    fn GetVirtualTranslationPhysicalOffsets(this: &Self::This, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows_core::Result<()>;
    fn ReadHandleData(this: &Self::This, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn FillVirtual(this: &Self::This, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::Result<()>;
    fn FillPhysical(this: &Self::This, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::Result<()>;
    fn QueryVirtual(this: &Self::This, offset: u64, info: *mut super::super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows_core::Result<()>;
    fn ReadImageNtHeaders(this: &Self::This, imagebase: u64, headers: *mut super::IMAGE_NT_HEADERS64) -> ::windows_core::Result<()>;
    fn ReadTagged(this: &Self::This, tag: *const ::windows_core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows_core::Result<()>;
    fn StartEnumTagged(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetNextTagged(this: &Self::This, handle: u64, tag: *mut ::windows_core::GUID, size: *mut u32) -> ::windows_core::Result<()>;
    fn EndEnumTagged(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Memory", feature = "Win32_System_SystemInformation"))]
impl ::windows_core::Iids for IDebugDataSpaces3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Memory", feature = "Win32_System_SystemInformation"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugDataSpaces3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn SearchVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(matchoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReadVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadPointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn WritePointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn ReadPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WritePhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReadMsr(this, ::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn WriteMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteMsr(this, ::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ReadBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn CheckLowMemory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckLowMemory(this).into())
        }
        unsafe extern "system" fn ReadDebuggerData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadDebuggerData(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn ReadProcessorSystemData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadProcessorSystemData(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn VirtualToPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VirtualToPhysical(this, ::core::mem::transmute_copy(&r#virtual)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(physical, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVirtualTranslationPhysicalOffsets(this, ::core::mem::transmute_copy(&r#virtual), ::core::mem::transmute_copy(&offsets), ::core::mem::transmute_copy(&offsetssize), ::core::mem::transmute_copy(&levels)).into())
        }
        unsafe extern "system" fn ReadHandleData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadHandleData(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&datatype), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn FillVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillVirtual(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&filled)).into())
        }
        unsafe extern "system" fn FillPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillPhysical(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&filled)).into())
        }
        unsafe extern "system" fn QueryVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&info)).into())
        }
        unsafe extern "system" fn ReadImageNtHeaders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut super::IMAGE_NT_HEADERS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadImageNtHeaders(this, ::core::mem::transmute_copy(&imagebase), ::core::mem::transmute_copy(&headers)).into())
        }
        unsafe extern "system" fn ReadTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: *const ::windows_core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTagged(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&totalsize)).into())
        }
        unsafe extern "system" fn StartEnumTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartEnumTagged(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows_core::GUID, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextTagged(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&size)).into())
        }
        unsafe extern "system" fn EndEnumTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndEnumTagged(this, ::core::mem::transmute_copy(&handle)).into())
        }
        IDebugDataSpaces3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadVirtual: ReadVirtual::<Identity, Impl, OFFSET>,
            WriteVirtual: WriteVirtual::<Identity, Impl, OFFSET>,
            SearchVirtual: SearchVirtual::<Identity, Impl, OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Identity, Impl, OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Identity, Impl, OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Identity, Impl, OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Identity, Impl, OFFSET>,
            ReadPhysical: ReadPhysical::<Identity, Impl, OFFSET>,
            WritePhysical: WritePhysical::<Identity, Impl, OFFSET>,
            ReadControl: ReadControl::<Identity, Impl, OFFSET>,
            WriteControl: WriteControl::<Identity, Impl, OFFSET>,
            ReadIo: ReadIo::<Identity, Impl, OFFSET>,
            WriteIo: WriteIo::<Identity, Impl, OFFSET>,
            ReadMsr: ReadMsr::<Identity, Impl, OFFSET>,
            WriteMsr: WriteMsr::<Identity, Impl, OFFSET>,
            ReadBusData: ReadBusData::<Identity, Impl, OFFSET>,
            WriteBusData: WriteBusData::<Identity, Impl, OFFSET>,
            CheckLowMemory: CheckLowMemory::<Identity, Impl, OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Identity, Impl, OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Identity, Impl, OFFSET>,
            VirtualToPhysical: VirtualToPhysical::<Identity, Impl, OFFSET>,
            GetVirtualTranslationPhysicalOffsets: GetVirtualTranslationPhysicalOffsets::<Identity, Impl, OFFSET>,
            ReadHandleData: ReadHandleData::<Identity, Impl, OFFSET>,
            FillVirtual: FillVirtual::<Identity, Impl, OFFSET>,
            FillPhysical: FillPhysical::<Identity, Impl, OFFSET>,
            QueryVirtual: QueryVirtual::<Identity, Impl, OFFSET>,
            ReadImageNtHeaders: ReadImageNtHeaders::<Identity, Impl, OFFSET>,
            ReadTagged: ReadTagged::<Identity, Impl, OFFSET>,
            StartEnumTagged: StartEnumTagged::<Identity, Impl, OFFSET>,
            GetNextTagged: GetNextTagged::<Identity, Impl, OFFSET>,
            EndEnumTagged: EndEnumTagged::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Memory\"`, `\"Win32_System_SystemInformation\"`"]
#[cfg(all(feature = "Win32_System_Memory", feature = "Win32_System_SystemInformation"))]
pub trait IDebugDataSpaces4_Impl: ::windows_core::BaseImpl {
    fn ReadVirtual(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtual(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn SearchVirtual(this: &Self::This, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows_core::Result<u64>;
    fn ReadVirtualUncached(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteVirtualUncached(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadPointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::Result<()>;
    fn WritePointersVirtual(this: &Self::This, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::Result<()>;
    fn ReadPhysical(this: &Self::This, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WritePhysical(this: &Self::This, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadControl(this: &Self::This, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteControl(this: &Self::This, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteIo(this: &Self::This, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn ReadMsr(this: &Self::This, msr: u32) -> ::windows_core::Result<u64>;
    fn WriteMsr(this: &Self::This, msr: u32, value: u64) -> ::windows_core::Result<()>;
    fn ReadBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteBusData(this: &Self::This, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn CheckLowMemory(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReadDebuggerData(this: &Self::This, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn ReadProcessorSystemData(this: &Self::This, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn VirtualToPhysical(this: &Self::This, r#virtual: u64) -> ::windows_core::Result<u64>;
    fn GetVirtualTranslationPhysicalOffsets(this: &Self::This, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows_core::Result<()>;
    fn ReadHandleData(this: &Self::This, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn FillVirtual(this: &Self::This, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::Result<()>;
    fn FillPhysical(this: &Self::This, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::Result<()>;
    fn QueryVirtual(this: &Self::This, offset: u64, info: *mut super::super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows_core::Result<()>;
    fn ReadImageNtHeaders(this: &Self::This, imagebase: u64, headers: *mut super::IMAGE_NT_HEADERS64) -> ::windows_core::Result<()>;
    fn ReadTagged(this: &Self::This, tag: *const ::windows_core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows_core::Result<()>;
    fn StartEnumTagged(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetNextTagged(this: &Self::This, handle: u64, tag: *mut ::windows_core::GUID, size: *mut u32) -> ::windows_core::Result<()>;
    fn EndEnumTagged(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn GetOffsetInformation(this: &Self::This, space: u32, which: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetNextDifferentlyValidOffsetVirtual(this: &Self::This, offset: u64) -> ::windows_core::Result<u64>;
    fn GetValidRegionVirtual(this: &Self::This, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows_core::Result<()>;
    fn SearchVirtual2(this: &Self::This, offset: u64, length: u64, flags: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32) -> ::windows_core::Result<u64>;
    fn ReadMultiByteStringVirtual(this: &Self::This, offset: u64, maxbytes: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::Result<()>;
    fn ReadMultiByteStringVirtualWide(this: &Self::This, offset: u64, maxbytes: u32, codepage: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::Result<()>;
    fn ReadUnicodeStringVirtual(this: &Self::This, offset: u64, maxbytes: u32, codepage: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::Result<()>;
    fn ReadUnicodeStringVirtualWide(this: &Self::This, offset: u64, maxbytes: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::Result<()>;
    fn ReadPhysical2(this: &Self::This, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WritePhysical2(this: &Self::This, offset: u64, flags: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_System_Memory", feature = "Win32_System_SystemInformation"))]
impl ::windows_core::Iids for IDebugDataSpaces4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_System_Memory", feature = "Win32_System_SystemInformation"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugDataSpaces4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn SearchVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(matchoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReadVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteVirtualUncached<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteVirtualUncached(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadPointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn WritePointersVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, offset: u64, ptrs: *const u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePointersVirtual(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&ptrs)).into())
        }
        unsafe extern "system" fn ReadPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WritePhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteControl(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteIo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interfacetype: u32, busnumber: u32, addressspace: u32, offset: u64, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteIo(this, ::core::mem::transmute_copy(&interfacetype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&addressspace), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReadMsr(this, ::core::mem::transmute_copy(&msr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn WriteMsr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msr: u32, value: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteMsr(this, ::core::mem::transmute_copy(&msr), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ReadBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteBusData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, busdatatype: u32, busnumber: u32, slotnumber: u32, offset: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBusData(this, ::core::mem::transmute_copy(&busdatatype), ::core::mem::transmute_copy(&busnumber), ::core::mem::transmute_copy(&slotnumber), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn CheckLowMemory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckLowMemory(this).into())
        }
        unsafe extern "system" fn ReadDebuggerData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadDebuggerData(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn ReadProcessorSystemData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, index: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadProcessorSystemData(this, ::core::mem::transmute_copy(&processor), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn VirtualToPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, physical: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VirtualToPhysical(this, ::core::mem::transmute_copy(&r#virtual)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(physical, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVirtualTranslationPhysicalOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#virtual: u64, offsets: *mut u64, offsetssize: u32, levels: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVirtualTranslationPhysicalOffsets(this, ::core::mem::transmute_copy(&r#virtual), ::core::mem::transmute_copy(&offsets), ::core::mem::transmute_copy(&offsetssize), ::core::mem::transmute_copy(&levels)).into())
        }
        unsafe extern "system" fn ReadHandleData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, datatype: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadHandleData(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&datatype), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn FillVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillVirtual(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&filled)).into())
        }
        unsafe extern "system" fn FillPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u64, size: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, filled: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FillPhysical(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&filled)).into())
        }
        unsafe extern "system" fn QueryVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, info: *mut super::super::super::Memory::MEMORY_BASIC_INFORMATION64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&info)).into())
        }
        unsafe extern "system" fn ReadImageNtHeaders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebase: u64, headers: *mut super::IMAGE_NT_HEADERS64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadImageNtHeaders(this, ::core::mem::transmute_copy(&imagebase), ::core::mem::transmute_copy(&headers)).into())
        }
        unsafe extern "system" fn ReadTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: *const ::windows_core::GUID, offset: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, totalsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTagged(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&totalsize)).into())
        }
        unsafe extern "system" fn StartEnumTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartEnumTagged(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, tag: *mut ::windows_core::GUID, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextTagged(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&size)).into())
        }
        unsafe extern "system" fn EndEnumTagged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndEnumTagged(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn GetOffsetInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, space: u32, which: u32, offset: u64, buffer: *mut ::core::ffi::c_void, buffersize: u32, infosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetInformation(this, ::core::mem::transmute_copy(&space), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&infosize)).into())
        }
        unsafe extern "system" fn GetNextDifferentlyValidOffsetVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, nextoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextDifferentlyValidOffsetVirtual(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nextoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValidRegionVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, validbase: *mut u64, validsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValidRegionVirtual(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&validbase), ::core::mem::transmute_copy(&validsize)).into())
        }
        unsafe extern "system" fn SearchVirtual2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, length: u64, flags: u32, pattern: *const ::core::ffi::c_void, patternsize: u32, patterngranularity: u32, matchoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SearchVirtual2(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pattern), ::core::mem::transmute_copy(&patternsize), ::core::mem::transmute_copy(&patterngranularity)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(matchoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReadMultiByteStringVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadMultiByteStringVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into())
        }
        unsafe extern "system" fn ReadMultiByteStringVirtualWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadMultiByteStringVirtualWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&codepage), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into())
        }
        unsafe extern "system" fn ReadUnicodeStringVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, codepage: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadUnicodeStringVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&codepage), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into())
        }
        unsafe extern "system" fn ReadUnicodeStringVirtualWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, maxbytes: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringbytes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadUnicodeStringVirtualWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&maxbytes), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringbytes)).into())
        }
        unsafe extern "system" fn ReadPhysical2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPhysical2(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WritePhysical2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugDataSpaces4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePhysical2(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        IDebugDataSpaces4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadVirtual: ReadVirtual::<Identity, Impl, OFFSET>,
            WriteVirtual: WriteVirtual::<Identity, Impl, OFFSET>,
            SearchVirtual: SearchVirtual::<Identity, Impl, OFFSET>,
            ReadVirtualUncached: ReadVirtualUncached::<Identity, Impl, OFFSET>,
            WriteVirtualUncached: WriteVirtualUncached::<Identity, Impl, OFFSET>,
            ReadPointersVirtual: ReadPointersVirtual::<Identity, Impl, OFFSET>,
            WritePointersVirtual: WritePointersVirtual::<Identity, Impl, OFFSET>,
            ReadPhysical: ReadPhysical::<Identity, Impl, OFFSET>,
            WritePhysical: WritePhysical::<Identity, Impl, OFFSET>,
            ReadControl: ReadControl::<Identity, Impl, OFFSET>,
            WriteControl: WriteControl::<Identity, Impl, OFFSET>,
            ReadIo: ReadIo::<Identity, Impl, OFFSET>,
            WriteIo: WriteIo::<Identity, Impl, OFFSET>,
            ReadMsr: ReadMsr::<Identity, Impl, OFFSET>,
            WriteMsr: WriteMsr::<Identity, Impl, OFFSET>,
            ReadBusData: ReadBusData::<Identity, Impl, OFFSET>,
            WriteBusData: WriteBusData::<Identity, Impl, OFFSET>,
            CheckLowMemory: CheckLowMemory::<Identity, Impl, OFFSET>,
            ReadDebuggerData: ReadDebuggerData::<Identity, Impl, OFFSET>,
            ReadProcessorSystemData: ReadProcessorSystemData::<Identity, Impl, OFFSET>,
            VirtualToPhysical: VirtualToPhysical::<Identity, Impl, OFFSET>,
            GetVirtualTranslationPhysicalOffsets: GetVirtualTranslationPhysicalOffsets::<Identity, Impl, OFFSET>,
            ReadHandleData: ReadHandleData::<Identity, Impl, OFFSET>,
            FillVirtual: FillVirtual::<Identity, Impl, OFFSET>,
            FillPhysical: FillPhysical::<Identity, Impl, OFFSET>,
            QueryVirtual: QueryVirtual::<Identity, Impl, OFFSET>,
            ReadImageNtHeaders: ReadImageNtHeaders::<Identity, Impl, OFFSET>,
            ReadTagged: ReadTagged::<Identity, Impl, OFFSET>,
            StartEnumTagged: StartEnumTagged::<Identity, Impl, OFFSET>,
            GetNextTagged: GetNextTagged::<Identity, Impl, OFFSET>,
            EndEnumTagged: EndEnumTagged::<Identity, Impl, OFFSET>,
            GetOffsetInformation: GetOffsetInformation::<Identity, Impl, OFFSET>,
            GetNextDifferentlyValidOffsetVirtual: GetNextDifferentlyValidOffsetVirtual::<Identity, Impl, OFFSET>,
            GetValidRegionVirtual: GetValidRegionVirtual::<Identity, Impl, OFFSET>,
            SearchVirtual2: SearchVirtual2::<Identity, Impl, OFFSET>,
            ReadMultiByteStringVirtual: ReadMultiByteStringVirtual::<Identity, Impl, OFFSET>,
            ReadMultiByteStringVirtualWide: ReadMultiByteStringVirtualWide::<Identity, Impl, OFFSET>,
            ReadUnicodeStringVirtual: ReadUnicodeStringVirtual::<Identity, Impl, OFFSET>,
            ReadUnicodeStringVirtualWide: ReadUnicodeStringVirtualWide::<Identity, Impl, OFFSET>,
            ReadPhysical2: ReadPhysical2::<Identity, Impl, OFFSET>,
            WritePhysical2: WritePhysical2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventCallbacks_Impl: ::windows_core::BaseImpl {
    fn GetInterestMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Breakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint>) -> ::windows_core::Result<()>;
    fn Exception(this: &Self::This, exception: *const super::EXCEPTION_RECORD64, firstchance: u32) -> ::windows_core::Result<()>;
    fn CreateThread(this: &Self::This, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows_core::Result<()>;
    fn ExitThread(this: &Self::This, exitcode: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: &::windows_core::PCSTR, imagename: &::windows_core::PCSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows_core::Result<()>;
    fn ExitProcess(this: &Self::This, exitcode: u32) -> ::windows_core::Result<()>;
    fn LoadModule(this: &Self::This, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: &::windows_core::PCSTR, imagename: &::windows_core::PCSTR, checksum: u32, timedatestamp: u32) -> ::windows_core::Result<()>;
    fn UnloadModule(this: &Self::This, imagebasename: &::windows_core::PCSTR, baseoffset: u64) -> ::windows_core::Result<()>;
    fn SystemError(this: &Self::This, error: u32, level: u32) -> ::windows_core::Result<()>;
    fn SessionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn ChangeDebuggeeState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
    fn ChangeEngineState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
    fn ChangeSymbolState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugEventCallbacks {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugEventCallbacks {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterestMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterestMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Breakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Breakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn Exception<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exception: *const super::EXCEPTION_RECORD64, firstchance: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Exception(this, ::core::mem::transmute_copy(&exception), ::core::mem::transmute_copy(&firstchance)).into())
        }
        unsafe extern "system" fn CreateThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateThread(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&dataoffset), ::core::mem::transmute_copy(&startoffset)).into())
        }
        unsafe extern "system" fn ExitThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitThread(this, ::core::mem::transmute_copy(&exitcode)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: ::windows_core::PCSTR, imagename: ::windows_core::PCSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::CreateProcessA(this, ::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute(&modulename), ::core::mem::transmute(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp), ::core::mem::transmute_copy(&initialthreadhandle), ::core::mem::transmute_copy(&threaddataoffset), ::core::mem::transmute_copy(&startoffset)).into()
            })
        }
        unsafe extern "system" fn ExitProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitProcess(this, ::core::mem::transmute_copy(&exitcode)).into())
        }
        unsafe extern "system" fn LoadModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: ::windows_core::PCSTR, imagename: ::windows_core::PCSTR, checksum: u32, timedatestamp: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadModule(this, ::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute(&modulename), ::core::mem::transmute(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp)).into())
        }
        unsafe extern "system" fn UnloadModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebasename: ::windows_core::PCSTR, baseoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnloadModule(this, ::core::mem::transmute(&imagebasename), ::core::mem::transmute_copy(&baseoffset)).into())
        }
        unsafe extern "system" fn SystemError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SystemError(this, ::core::mem::transmute_copy(&error), ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn SessionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SessionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn ChangeDebuggeeState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeDebuggeeState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        unsafe extern "system" fn ChangeEngineState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeEngineState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        unsafe extern "system" fn ChangeSymbolState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeSymbolState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        IDebugEventCallbacks_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterestMask: GetInterestMask::<Identity, Impl, OFFSET>,
            Breakpoint: Breakpoint::<Identity, Impl, OFFSET>,
            Exception: Exception::<Identity, Impl, OFFSET>,
            CreateThread: CreateThread::<Identity, Impl, OFFSET>,
            ExitThread: ExitThread::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            ExitProcess: ExitProcess::<Identity, Impl, OFFSET>,
            LoadModule: LoadModule::<Identity, Impl, OFFSET>,
            UnloadModule: UnloadModule::<Identity, Impl, OFFSET>,
            SystemError: SystemError::<Identity, Impl, OFFSET>,
            SessionStatus: SessionStatus::<Identity, Impl, OFFSET>,
            ChangeDebuggeeState: ChangeDebuggeeState::<Identity, Impl, OFFSET>,
            ChangeEngineState: ChangeEngineState::<Identity, Impl, OFFSET>,
            ChangeSymbolState: ChangeSymbolState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventCallbacksWide_Impl: ::windows_core::BaseImpl {
    fn GetInterestMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Breakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint2>) -> ::windows_core::Result<()>;
    fn Exception(this: &Self::This, exception: *const super::EXCEPTION_RECORD64, firstchance: u32) -> ::windows_core::Result<()>;
    fn CreateThread(this: &Self::This, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows_core::Result<()>;
    fn ExitThread(this: &Self::This, exitcode: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: &::windows_core::PCWSTR, imagename: &::windows_core::PCWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows_core::Result<()>;
    fn ExitProcess(this: &Self::This, exitcode: u32) -> ::windows_core::Result<()>;
    fn LoadModule(this: &Self::This, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: &::windows_core::PCWSTR, imagename: &::windows_core::PCWSTR, checksum: u32, timedatestamp: u32) -> ::windows_core::Result<()>;
    fn UnloadModule(this: &Self::This, imagebasename: &::windows_core::PCWSTR, baseoffset: u64) -> ::windows_core::Result<()>;
    fn SystemError(this: &Self::This, error: u32, level: u32) -> ::windows_core::Result<()>;
    fn SessionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn ChangeDebuggeeState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
    fn ChangeEngineState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
    fn ChangeSymbolState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugEventCallbacksWide {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugEventCallbacksWide {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterestMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterestMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Breakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Breakpoint(this, ::windows_core::from_raw_borrowed(&bp)).into())
        }
        unsafe extern "system" fn Exception<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exception: *const super::EXCEPTION_RECORD64, firstchance: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Exception(this, ::core::mem::transmute_copy(&exception), ::core::mem::transmute_copy(&firstchance)).into())
        }
        unsafe extern "system" fn CreateThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateThread(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&dataoffset), ::core::mem::transmute_copy(&startoffset)).into())
        }
        unsafe extern "system" fn ExitThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitThread(this, ::core::mem::transmute_copy(&exitcode)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: ::windows_core::PCWSTR, imagename: ::windows_core::PCWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::CreateProcessA(this, ::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute(&modulename), ::core::mem::transmute(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp), ::core::mem::transmute_copy(&initialthreadhandle), ::core::mem::transmute_copy(&threaddataoffset), ::core::mem::transmute_copy(&startoffset)).into()
            })
        }
        unsafe extern "system" fn ExitProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitProcess(this, ::core::mem::transmute_copy(&exitcode)).into())
        }
        unsafe extern "system" fn LoadModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: ::windows_core::PCWSTR, imagename: ::windows_core::PCWSTR, checksum: u32, timedatestamp: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadModule(this, ::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute(&modulename), ::core::mem::transmute(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp)).into())
        }
        unsafe extern "system" fn UnloadModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebasename: ::windows_core::PCWSTR, baseoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnloadModule(this, ::core::mem::transmute(&imagebasename), ::core::mem::transmute_copy(&baseoffset)).into())
        }
        unsafe extern "system" fn SystemError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: u32, level: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SystemError(this, ::core::mem::transmute_copy(&error), ::core::mem::transmute_copy(&level)).into())
        }
        unsafe extern "system" fn SessionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SessionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn ChangeDebuggeeState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeDebuggeeState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        unsafe extern "system" fn ChangeEngineState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeEngineState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        unsafe extern "system" fn ChangeSymbolState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeSymbolState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        IDebugEventCallbacksWide_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterestMask: GetInterestMask::<Identity, Impl, OFFSET>,
            Breakpoint: Breakpoint::<Identity, Impl, OFFSET>,
            Exception: Exception::<Identity, Impl, OFFSET>,
            CreateThread: CreateThread::<Identity, Impl, OFFSET>,
            ExitThread: ExitThread::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            ExitProcess: ExitProcess::<Identity, Impl, OFFSET>,
            LoadModule: LoadModule::<Identity, Impl, OFFSET>,
            UnloadModule: UnloadModule::<Identity, Impl, OFFSET>,
            SystemError: SystemError::<Identity, Impl, OFFSET>,
            SessionStatus: SessionStatus::<Identity, Impl, OFFSET>,
            ChangeDebuggeeState: ChangeDebuggeeState::<Identity, Impl, OFFSET>,
            ChangeEngineState: ChangeEngineState::<Identity, Impl, OFFSET>,
            ChangeSymbolState: ChangeSymbolState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugEventContextCallbacks_Impl: ::windows_core::BaseImpl {
    fn GetInterestMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Breakpoint(this: &Self::This, bp: ::core::option::Option<&IDebugBreakpoint2>, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn Exception(this: &Self::This, exception: *const super::EXCEPTION_RECORD64, firstchance: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn CreateThread(this: &Self::This, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn ExitThread(this: &Self::This, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn CreateProcessA(this: &Self::This, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: &::windows_core::PCWSTR, imagename: &::windows_core::PCWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn ExitProcess(this: &Self::This, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn LoadModule(this: &Self::This, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: &::windows_core::PCWSTR, imagename: &::windows_core::PCWSTR, checksum: u32, timedatestamp: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn UnloadModule(this: &Self::This, imagebasename: &::windows_core::PCWSTR, baseoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn SystemError(this: &Self::This, error: u32, level: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn SessionStatus(this: &Self::This, status: u32) -> ::windows_core::Result<()>;
    fn ChangeDebuggeeState(this: &Self::This, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn ChangeEngineState(this: &Self::This, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::Result<()>;
    fn ChangeSymbolState(this: &Self::This, flags: u32, argument: u64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugEventContextCallbacks {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugEventContextCallbacks {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInterestMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterestMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Breakpoint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bp: *mut ::core::ffi::c_void, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Breakpoint(this, ::windows_core::from_raw_borrowed(&bp), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn Exception<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exception: *const super::EXCEPTION_RECORD64, firstchance: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Exception(this, ::core::mem::transmute_copy(&exception), ::core::mem::transmute_copy(&firstchance), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn CreateThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, dataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateThread(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&dataoffset), ::core::mem::transmute_copy(&startoffset), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn ExitThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitThread(this, ::core::mem::transmute_copy(&exitcode), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn CreateProcessA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, handle: u64, baseoffset: u64, modulesize: u32, modulename: ::windows_core::PCWSTR, imagename: ::windows_core::PCWSTR, checksum: u32, timedatestamp: u32, initialthreadhandle: u64, threaddataoffset: u64, startoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::CreateProcessA(
                    this,
                    ::core::mem::transmute_copy(&imagefilehandle),
                    ::core::mem::transmute_copy(&handle),
                    ::core::mem::transmute_copy(&baseoffset),
                    ::core::mem::transmute_copy(&modulesize),
                    ::core::mem::transmute(&modulename),
                    ::core::mem::transmute(&imagename),
                    ::core::mem::transmute_copy(&checksum),
                    ::core::mem::transmute_copy(&timedatestamp),
                    ::core::mem::transmute_copy(&initialthreadhandle),
                    ::core::mem::transmute_copy(&threaddataoffset),
                    ::core::mem::transmute_copy(&startoffset),
                    ::core::mem::transmute_copy(&context),
                    ::core::mem::transmute_copy(&contextsize),
                )
                .into()
            })
        }
        unsafe extern "system" fn ExitProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitcode: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExitProcess(this, ::core::mem::transmute_copy(&exitcode), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn LoadModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagefilehandle: u64, baseoffset: u64, modulesize: u32, modulename: ::windows_core::PCWSTR, imagename: ::windows_core::PCWSTR, checksum: u32, timedatestamp: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadModule(this, ::core::mem::transmute_copy(&imagefilehandle), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&modulesize), ::core::mem::transmute(&modulename), ::core::mem::transmute(&imagename), ::core::mem::transmute_copy(&checksum), ::core::mem::transmute_copy(&timedatestamp), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn UnloadModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, imagebasename: ::windows_core::PCWSTR, baseoffset: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnloadModule(this, ::core::mem::transmute(&imagebasename), ::core::mem::transmute_copy(&baseoffset), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn SystemError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: u32, level: u32, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SystemError(this, ::core::mem::transmute_copy(&error), ::core::mem::transmute_copy(&level), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn SessionStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SessionStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn ChangeDebuggeeState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeDebuggeeState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn ChangeEngineState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64, context: *const ::core::ffi::c_void, contextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeEngineState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&contextsize)).into())
        }
        unsafe extern "system" fn ChangeSymbolState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugEventContextCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, argument: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeSymbolState(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&argument)).into())
        }
        IDebugEventContextCallbacks_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInterestMask: GetInterestMask::<Identity, Impl, OFFSET>,
            Breakpoint: Breakpoint::<Identity, Impl, OFFSET>,
            Exception: Exception::<Identity, Impl, OFFSET>,
            CreateThread: CreateThread::<Identity, Impl, OFFSET>,
            ExitThread: ExitThread::<Identity, Impl, OFFSET>,
            CreateProcessA: CreateProcessA::<Identity, Impl, OFFSET>,
            ExitProcess: ExitProcess::<Identity, Impl, OFFSET>,
            LoadModule: LoadModule::<Identity, Impl, OFFSET>,
            UnloadModule: UnloadModule::<Identity, Impl, OFFSET>,
            SystemError: SystemError::<Identity, Impl, OFFSET>,
            SessionStatus: SessionStatus::<Identity, Impl, OFFSET>,
            ChangeDebuggeeState: ChangeDebuggeeState::<Identity, Impl, OFFSET>,
            ChangeEngineState: ChangeEngineState::<Identity, Impl, OFFSET>,
            ChangeSymbolState: ChangeSymbolState::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugFAEntryTags_Impl: Sized {
    fn GetType(&self, tag: DEBUG_FLR_PARAM_TYPE) -> FA_ENTRY_TYPE;
    fn SetType(&self, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE) -> ::windows_core::Result<()>;
    fn GetProperties(&self, tag: DEBUG_FLR_PARAM_TYPE, name: ::windows_core::PSTR, namesize: *mut u32, description: ::windows_core::PSTR, descsize: *mut u32, flags: *mut u32) -> ::windows_core::Result<()>;
    fn SetProperties(&self, tag: DEBUG_FLR_PARAM_TYPE, name: &::windows_core::PCSTR, description: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn GetTagByName(&self, pluginid: &::windows_core::PCSTR, tagname: &::windows_core::PCSTR) -> ::windows_core::Result<DEBUG_FLR_PARAM_TYPE>;
    fn IsValidTagToSet(&self, tag: DEBUG_FLR_PARAM_TYPE) -> super::super::super::super::Foundation::BOOL;
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugFAEntryTags_Vtbl {
    pub const fn new<Impl: IDebugFAEntryTags_Impl>() -> IDebugFAEntryTags_Vtbl {
        unsafe extern "system" fn GetType<Impl: IDebugFAEntryTags_Impl>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE) -> FA_ENTRY_TYPE {
            let this = (this as *mut *mut ::core::ffi::c_void) as *const ::windows_core::ScopedHeap;
            let this = &*((*this).this as *const Impl);
            Impl::GetType(this, ::core::mem::transmute_copy(&tag))
        }
        unsafe extern "system" fn SetType<Impl: IDebugFAEntryTags_Impl>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE) -> ::windows_core::HRESULT {
            let this = (this as *mut *mut ::core::ffi::c_void) as *const ::windows_core::ScopedHeap;
            let this = &*((*this).this as *const Impl);
            Impl::SetType(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&entrytype)).into()
        }
        unsafe extern "system" fn GetProperties<Impl: IDebugFAEntryTags_Impl>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, name: ::windows_core::PSTR, namesize: *mut u32, description: ::windows_core::PSTR, descsize: *mut u32, flags: *mut u32) -> ::windows_core::HRESULT {
            let this = (this as *mut *mut ::core::ffi::c_void) as *const ::windows_core::ScopedHeap;
            let this = &*((*this).this as *const Impl);
            Impl::GetProperties(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&description), ::core::mem::transmute_copy(&descsize), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn SetProperties<Impl: IDebugFAEntryTags_Impl>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, name: ::windows_core::PCSTR, description: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            let this = (this as *mut *mut ::core::ffi::c_void) as *const ::windows_core::ScopedHeap;
            let this = &*((*this).this as *const Impl);
            Impl::SetProperties(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&name), ::core::mem::transmute(&description), ::core::mem::transmute_copy(&flags)).into()
        }
        unsafe extern "system" fn GetTagByName<Impl: IDebugFAEntryTags_Impl>(this: *mut ::core::ffi::c_void, pluginid: ::windows_core::PCSTR, tagname: ::windows_core::PCSTR, tag: *mut DEBUG_FLR_PARAM_TYPE) -> ::windows_core::HRESULT {
            let this = (this as *mut *mut ::core::ffi::c_void) as *const ::windows_core::ScopedHeap;
            let this = &*((*this).this as *const Impl);
            match Impl::GetTagByName(this, ::core::mem::transmute(&pluginid), ::core::mem::transmute(&tagname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tag, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn IsValidTagToSet<Impl: IDebugFAEntryTags_Impl>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE) -> super::super::super::super::Foundation::BOOL {
            let this = (this as *mut *mut ::core::ffi::c_void) as *const ::windows_core::ScopedHeap;
            let this = &*((*this).this as *const Impl);
            Impl::IsValidTagToSet(this, ::core::mem::transmute_copy(&tag))
        }
        Self {
            GetType: GetType::<Impl>,
            SetType: SetType::<Impl>,
            GetProperties: GetProperties::<Impl>,
            SetProperties: SetProperties::<Impl>,
            GetTagByName: GetTagByName::<Impl>,
            IsValidTagToSet: IsValidTagToSet::<Impl>,
        }
    }
}
#[doc(hidden)]
#[cfg(feature = "Win32_Foundation")]
struct IDebugFAEntryTags_ImplVtbl<T: IDebugFAEntryTags_Impl>(::std::marker::PhantomData<T>);
#[cfg(feature = "Win32_Foundation")]
impl<T: IDebugFAEntryTags_Impl> IDebugFAEntryTags_ImplVtbl<T> {
    const VTABLE: IDebugFAEntryTags_Vtbl = IDebugFAEntryTags_Vtbl::new::<T>();
}
#[cfg(feature = "Win32_Foundation")]
impl IDebugFAEntryTags {
    pub fn new<'a, T: IDebugFAEntryTags_Impl>(this: &'a T) -> ::windows_core::ScopedInterface<'a, Self> {
        let this = ::windows_core::ScopedHeap { vtable: &IDebugFAEntryTags_ImplVtbl::<T>::VTABLE as *const _ as *const _, this: this as *const _ as *const _ };
        let this = ::std::boxed::Box::into_raw(::std::boxed::Box::new(this));
        unsafe { ::windows_core::ScopedInterface::new(::windows_core::Interface::from_raw(this.cast())) }
    }
}
pub trait IDebugFailureAnalysis_Impl: ::windows_core::BaseImpl {
    fn GetFailureClass(this: &Self::This) -> u32;
    fn GetFailureType(this: &Self::This) -> DEBUG_FAILURE_TYPE;
    fn GetFailureCode(this: &Self::This) -> u32;
    fn Get(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY;
    fn GetNext(this: &Self::This, entry: *mut FA_ENTRY, tag: DEBUG_FLR_PARAM_TYPE, tagmask: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY;
    fn GetString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PSTR, maxsize: u32) -> *mut FA_ENTRY;
    fn GetBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, buf: *mut ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn GetUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u32) -> *mut FA_ENTRY;
    fn GetUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u64) -> *mut FA_ENTRY;
    fn NextEntry(this: &Self::This, entry: *const FA_ENTRY) -> *mut FA_ENTRY;
}
impl ::windows_core::Iids for IDebugFailureAnalysis {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugFailureAnalysis {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFailureClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureClass(this))
        }
        unsafe extern "system" fn GetFailureType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> DEBUG_FAILURE_TYPE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureType(this))
        }
        unsafe extern "system" fn GetFailureCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureCode(this))
        }
        unsafe extern "system" fn Get<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Get(this, ::core::mem::transmute_copy(&tag)))
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *mut FA_ENTRY, tag: DEBUG_FLR_PARAM_TYPE, tagmask: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&tagmask)))
        }
        unsafe extern "system" fn GetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PSTR, maxsize: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&str), ::core::mem::transmute_copy(&maxsize)))
        }
        unsafe extern "system" fn GetBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, buf: *mut ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn GetUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn GetUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn NextEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const FA_ENTRY) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NextEntry(this, ::core::mem::transmute_copy(&entry)))
        }
        IDebugFailureAnalysis_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFailureClass: GetFailureClass::<Identity, Impl, OFFSET>,
            GetFailureType: GetFailureType::<Identity, Impl, OFFSET>,
            GetFailureCode: GetFailureCode::<Identity, Impl, OFFSET>,
            Get: Get::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
            GetString: GetString::<Identity, Impl, OFFSET>,
            GetBuffer: GetBuffer::<Identity, Impl, OFFSET>,
            GetUlong: GetUlong::<Identity, Impl, OFFSET>,
            GetUlong64: GetUlong64::<Identity, Impl, OFFSET>,
            NextEntry: NextEntry::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Data_Xml_MsXml\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com"))]
pub trait IDebugFailureAnalysis2_Impl: ::windows_core::BaseImpl {
    fn GetFailureClass(this: &Self::This) -> u32;
    fn GetFailureType(this: &Self::This) -> DEBUG_FAILURE_TYPE;
    fn GetFailureCode(this: &Self::This) -> u32;
    fn Get(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY;
    fn GetNext(this: &Self::This, entry: *const FA_ENTRY, tag: DEBUG_FLR_PARAM_TYPE, tagmask: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY;
    fn GetString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PSTR, maxsize: u32) -> *mut FA_ENTRY;
    fn GetBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, buf: *mut ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn GetUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u32) -> *mut FA_ENTRY;
    fn GetUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u64) -> *mut FA_ENTRY;
    fn NextEntry(this: &Self::This, entry: *const FA_ENTRY) -> *mut FA_ENTRY;
    fn SetString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn SetExtensionCommand(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, extension: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn SetUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY;
    fn SetUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY;
    fn SetBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn AddString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn AddExtensionCommand(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, extension: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn AddUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY;
    fn AddUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY;
    fn AddBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn GetDebugFATagControl(this: &Self::This) -> ::windows_core::Result<IDebugFAEntryTags>;
    fn GetAnalysisXml(this: &Self::This) -> ::windows_core::Result<super::super::super::super::Data::Xml::MsXml::IXMLDOMElement>;
    fn AddStructuredAnalysisData(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, analysis: ::core::option::Option<&IDebugFailureAnalysis2>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IDebugFailureAnalysis2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugFailureAnalysis2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFailureClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureClass(this))
        }
        unsafe extern "system" fn GetFailureType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> DEBUG_FAILURE_TYPE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureType(this))
        }
        unsafe extern "system" fn GetFailureCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureCode(this))
        }
        unsafe extern "system" fn Get<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Get(this, ::core::mem::transmute_copy(&tag)))
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const FA_ENTRY, tag: DEBUG_FLR_PARAM_TYPE, tagmask: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&tagmask)))
        }
        unsafe extern "system" fn GetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PSTR, maxsize: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&str), ::core::mem::transmute_copy(&maxsize)))
        }
        unsafe extern "system" fn GetBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, buf: *mut ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn GetUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn GetUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn NextEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const FA_ENTRY) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NextEntry(this, ::core::mem::transmute_copy(&entry)))
        }
        unsafe extern "system" fn SetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&str)))
        }
        unsafe extern "system" fn SetExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, extension: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExtensionCommand(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&extension)))
        }
        unsafe extern "system" fn SetUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn SetUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn SetBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&entrytype), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn AddString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&str)))
        }
        unsafe extern "system" fn AddExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, extension: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddExtensionCommand(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&extension)))
        }
        unsafe extern "system" fn AddUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn AddUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn AddBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&entrytype), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn GetDebugFATagControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fatagcontrol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDebugFATagControl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fatagcontrol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAnalysisXml<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppxmldomelement: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAnalysisXml(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppxmldomelement, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddStructuredAnalysisData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, analysis: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStructuredAnalysisData(this, ::core::mem::transmute_copy(&tag), ::windows_core::from_raw_borrowed(&analysis)).into())
        }
        IDebugFailureAnalysis2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFailureClass: GetFailureClass::<Identity, Impl, OFFSET>,
            GetFailureType: GetFailureType::<Identity, Impl, OFFSET>,
            GetFailureCode: GetFailureCode::<Identity, Impl, OFFSET>,
            Get: Get::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
            GetString: GetString::<Identity, Impl, OFFSET>,
            GetBuffer: GetBuffer::<Identity, Impl, OFFSET>,
            GetUlong: GetUlong::<Identity, Impl, OFFSET>,
            GetUlong64: GetUlong64::<Identity, Impl, OFFSET>,
            NextEntry: NextEntry::<Identity, Impl, OFFSET>,
            SetString: SetString::<Identity, Impl, OFFSET>,
            SetExtensionCommand: SetExtensionCommand::<Identity, Impl, OFFSET>,
            SetUlong: SetUlong::<Identity, Impl, OFFSET>,
            SetUlong64: SetUlong64::<Identity, Impl, OFFSET>,
            SetBuffer: SetBuffer::<Identity, Impl, OFFSET>,
            AddString: AddString::<Identity, Impl, OFFSET>,
            AddExtensionCommand: AddExtensionCommand::<Identity, Impl, OFFSET>,
            AddUlong: AddUlong::<Identity, Impl, OFFSET>,
            AddUlong64: AddUlong64::<Identity, Impl, OFFSET>,
            AddBuffer: AddBuffer::<Identity, Impl, OFFSET>,
            GetDebugFATagControl: GetDebugFATagControl::<Identity, Impl, OFFSET>,
            GetAnalysisXml: GetAnalysisXml::<Identity, Impl, OFFSET>,
            AddStructuredAnalysisData: AddStructuredAnalysisData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Data_Xml_MsXml\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDebugFailureAnalysis3_Impl: ::windows_core::BaseImpl {
    fn GetFailureClass(this: &Self::This) -> u32;
    fn GetFailureType(this: &Self::This) -> DEBUG_FAILURE_TYPE;
    fn GetFailureCode(this: &Self::This) -> u32;
    fn Get(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY;
    fn GetNext(this: &Self::This, entry: *const FA_ENTRY, tag: DEBUG_FLR_PARAM_TYPE, tagmask: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY;
    fn GetString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PSTR, maxsize: u32) -> *mut FA_ENTRY;
    fn GetBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, buf: *mut ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn GetUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u32) -> *mut FA_ENTRY;
    fn GetUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u64) -> *mut FA_ENTRY;
    fn NextEntry(this: &Self::This, entry: *const FA_ENTRY) -> *mut FA_ENTRY;
    fn SetString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn SetExtensionCommand(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, extension: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn SetUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY;
    fn SetUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY;
    fn SetBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn AddString(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, str: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn AddExtensionCommand(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, extension: &::windows_core::PCSTR) -> *mut FA_ENTRY;
    fn AddUlong(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY;
    fn AddUlong64(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY;
    fn AddBuffer(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY;
    fn GetDebugFATagControl(this: &Self::This) -> ::windows_core::Result<IDebugFAEntryTags>;
    fn GetAnalysisXml(this: &Self::This) -> ::windows_core::Result<super::super::super::super::Data::Xml::MsXml::IXMLDOMElement>;
    fn AddStructuredAnalysisData(this: &Self::This, tag: DEBUG_FLR_PARAM_TYPE, analysis: ::core::option::Option<&IDebugFailureAnalysis2>) -> ::windows_core::Result<()>;
    fn AddThreads(this: &Self::This, pdebugfailurethreadenum: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn AttributeGet(this: &Self::This, nindex: u32) -> ::windows_core::Result<super::super::super::Variant::VARIANT>;
    fn AttributeGetName(this: &Self::This, nindex: u32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn AttributeSet(this: &Self::This, nindex: u32, value: &super::super::super::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn BlameApplication(this: &Self::This, postfix: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn BlameProcess(this: &Self::This, postfix: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn BlameThread(this: &Self::This, pthread: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn BlameStitch(this: &Self::This, pthread: ::core::option::Option<&::windows_core::IUnknown>, stitch: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn BlameTEB(this: &Self::This, address: u64) -> ::windows_core::Result<()>;
    fn BlameETHREAD(this: &Self::This, address: u64) -> ::windows_core::Result<()>;
    fn ProblemClassIsSet(this: &Self::This, nindex: u32) -> ::windows_core::Result<super::super::super::super::Foundation::VARIANT_BOOL>;
    fn ProblemClassDelete(this: &Self::This, nindex: u32) -> ::windows_core::Result<()>;
    fn ProblemClassSet(this: &Self::This, nindex: u32) -> ::windows_core::Result<()>;
    fn ProblemClassSetBSTR(this: &Self::This, nindex: u32, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetAdditionalXML(this: &Self::This, key: &::windows_core::BSTR, pxmldomelement: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetAdditionalXML(this: &Self::This, key: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn DeleteAdditionalXML(this: &Self::This, key: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDebugFailureAnalysis3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Data_Xml_MsXml", feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugFailureAnalysis3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFailureClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureClass(this))
        }
        unsafe extern "system" fn GetFailureType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> DEBUG_FAILURE_TYPE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureType(this))
        }
        unsafe extern "system" fn GetFailureCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFailureCode(this))
        }
        unsafe extern "system" fn Get<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Get(this, ::core::mem::transmute_copy(&tag)))
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const FA_ENTRY, tag: DEBUG_FLR_PARAM_TYPE, tagmask: DEBUG_FLR_PARAM_TYPE) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&tagmask)))
        }
        unsafe extern "system" fn GetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PSTR, maxsize: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&str), ::core::mem::transmute_copy(&maxsize)))
        }
        unsafe extern "system" fn GetBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, buf: *mut ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn GetUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn GetUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: *mut u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn NextEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const FA_ENTRY) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NextEntry(this, ::core::mem::transmute_copy(&entry)))
        }
        unsafe extern "system" fn SetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&str)))
        }
        unsafe extern "system" fn SetExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, extension: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExtensionCommand(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&extension)))
        }
        unsafe extern "system" fn SetUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn SetUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn SetBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&entrytype), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn AddString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, str: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddString(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&str)))
        }
        unsafe extern "system" fn AddExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, extension: ::windows_core::PCSTR) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddExtensionCommand(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute(&extension)))
        }
        unsafe extern "system" fn AddUlong<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddUlong(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn AddUlong64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, value: u64) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddUlong64(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&value)))
        }
        unsafe extern "system" fn AddBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, entrytype: FA_ENTRY_TYPE, buf: *const ::core::ffi::c_void, size: u32) -> *mut FA_ENTRY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddBuffer(this, ::core::mem::transmute_copy(&tag), ::core::mem::transmute_copy(&entrytype), ::core::mem::transmute_copy(&buf), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn GetDebugFATagControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fatagcontrol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDebugFATagControl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fatagcontrol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAnalysisXml<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppxmldomelement: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAnalysisXml(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppxmldomelement, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddStructuredAnalysisData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tag: DEBUG_FLR_PARAM_TYPE, analysis: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStructuredAnalysisData(this, ::core::mem::transmute_copy(&tag), ::windows_core::from_raw_borrowed(&analysis)).into())
        }
        unsafe extern "system" fn AddThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdebugfailurethreadenum: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddThreads(this, ::windows_core::from_raw_borrowed(&pdebugfailurethreadenum)).into())
        }
        unsafe extern "system" fn AttributeGet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32, pvalue: *mut super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AttributeGet(this, ::core::mem::transmute_copy(&nindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AttributeGetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32, pname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AttributeGetName(this, ::core::mem::transmute_copy(&nindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AttributeSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32, value: super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttributeSet(this, ::core::mem::transmute_copy(&nindex), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn BlameApplication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, postfix: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BlameApplication(this, ::core::mem::transmute(&postfix)).into())
        }
        unsafe extern "system" fn BlameProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, postfix: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BlameProcess(this, ::core::mem::transmute(&postfix)).into())
        }
        unsafe extern "system" fn BlameThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pthread: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BlameThread(this, ::windows_core::from_raw_borrowed(&pthread)).into())
        }
        unsafe extern "system" fn BlameStitch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pthread: *mut ::core::ffi::c_void, stitch: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BlameStitch(this, ::windows_core::from_raw_borrowed(&pthread), ::core::mem::transmute(&stitch)).into())
        }
        unsafe extern "system" fn BlameTEB<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BlameTEB(this, ::core::mem::transmute_copy(&address)).into())
        }
        unsafe extern "system" fn BlameETHREAD<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, address: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BlameETHREAD(this, ::core::mem::transmute_copy(&address)).into())
        }
        unsafe extern "system" fn ProblemClassIsSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32, pset: *mut super::super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProblemClassIsSet(this, ::core::mem::transmute_copy(&nindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProblemClassDelete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProblemClassDelete(this, ::core::mem::transmute_copy(&nindex)).into())
        }
        unsafe extern "system" fn ProblemClassSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProblemClassSet(this, ::core::mem::transmute_copy(&nindex)).into())
        }
        unsafe extern "system" fn ProblemClassSetBSTR<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nindex: u32, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProblemClassSetBSTR(this, ::core::mem::transmute_copy(&nindex), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SetAdditionalXML<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::std::mem::MaybeUninit<::windows_core::BSTR>, pxmldomelement: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAdditionalXML(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&pxmldomelement)).into())
        }
        unsafe extern "system" fn GetAdditionalXML<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppxmldomelement: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAdditionalXML(this, ::core::mem::transmute(&key)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppxmldomelement, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteAdditionalXML<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugFailureAnalysis3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteAdditionalXML(this, ::core::mem::transmute(&key)).into())
        }
        IDebugFailureAnalysis3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFailureClass: GetFailureClass::<Identity, Impl, OFFSET>,
            GetFailureType: GetFailureType::<Identity, Impl, OFFSET>,
            GetFailureCode: GetFailureCode::<Identity, Impl, OFFSET>,
            Get: Get::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
            GetString: GetString::<Identity, Impl, OFFSET>,
            GetBuffer: GetBuffer::<Identity, Impl, OFFSET>,
            GetUlong: GetUlong::<Identity, Impl, OFFSET>,
            GetUlong64: GetUlong64::<Identity, Impl, OFFSET>,
            NextEntry: NextEntry::<Identity, Impl, OFFSET>,
            SetString: SetString::<Identity, Impl, OFFSET>,
            SetExtensionCommand: SetExtensionCommand::<Identity, Impl, OFFSET>,
            SetUlong: SetUlong::<Identity, Impl, OFFSET>,
            SetUlong64: SetUlong64::<Identity, Impl, OFFSET>,
            SetBuffer: SetBuffer::<Identity, Impl, OFFSET>,
            AddString: AddString::<Identity, Impl, OFFSET>,
            AddExtensionCommand: AddExtensionCommand::<Identity, Impl, OFFSET>,
            AddUlong: AddUlong::<Identity, Impl, OFFSET>,
            AddUlong64: AddUlong64::<Identity, Impl, OFFSET>,
            AddBuffer: AddBuffer::<Identity, Impl, OFFSET>,
            GetDebugFATagControl: GetDebugFATagControl::<Identity, Impl, OFFSET>,
            GetAnalysisXml: GetAnalysisXml::<Identity, Impl, OFFSET>,
            AddStructuredAnalysisData: AddStructuredAnalysisData::<Identity, Impl, OFFSET>,
            AddThreads: AddThreads::<Identity, Impl, OFFSET>,
            AttributeGet: AttributeGet::<Identity, Impl, OFFSET>,
            AttributeGetName: AttributeGetName::<Identity, Impl, OFFSET>,
            AttributeSet: AttributeSet::<Identity, Impl, OFFSET>,
            BlameApplication: BlameApplication::<Identity, Impl, OFFSET>,
            BlameProcess: BlameProcess::<Identity, Impl, OFFSET>,
            BlameThread: BlameThread::<Identity, Impl, OFFSET>,
            BlameStitch: BlameStitch::<Identity, Impl, OFFSET>,
            BlameTEB: BlameTEB::<Identity, Impl, OFFSET>,
            BlameETHREAD: BlameETHREAD::<Identity, Impl, OFFSET>,
            ProblemClassIsSet: ProblemClassIsSet::<Identity, Impl, OFFSET>,
            ProblemClassDelete: ProblemClassDelete::<Identity, Impl, OFFSET>,
            ProblemClassSet: ProblemClassSet::<Identity, Impl, OFFSET>,
            ProblemClassSetBSTR: ProblemClassSetBSTR::<Identity, Impl, OFFSET>,
            SetAdditionalXML: SetAdditionalXML::<Identity, Impl, OFFSET>,
            GetAdditionalXML: GetAdditionalXML::<Identity, Impl, OFFSET>,
            DeleteAdditionalXML: DeleteAdditionalXML::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHost_Impl: ::windows_core::BaseImpl {
    fn GetHostDefinedInterface(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetCurrentContext(this: &Self::This) -> ::windows_core::Result<IDebugHostContext>;
    fn GetDefaultMetadata(this: &Self::This) -> ::windows_core::Result<IKeyStore>;
}
impl ::windows_core::Iids for IDebugHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetHostDefinedInterface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hostunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHostDefinedInterface(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hostunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(context, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDefaultMetadata<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, defaultmetadatastore: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultMetadata(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(defaultmetadatastore, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHost_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetHostDefinedInterface: GetHostDefinedInterface::<Identity, Impl, OFFSET>,
            GetCurrentContext: GetCurrentContext::<Identity, Impl, OFFSET>,
            GetDefaultMetadata: GetDefaultMetadata::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostBaseClass_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetOffset(this: &Self::This) -> ::windows_core::Result<u64>;
}
impl ::windows_core::Iids for IDebugHostBaseClass {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostBaseClass_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostBaseClass {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostBaseClass_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostBaseClass_Vtbl { base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetOffset: GetOffset::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDebugHostConstant_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetValue(this: &Self::This) -> ::windows_core::Result<super::super::super::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDebugHostConstant {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostConstant_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostConstant {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostConstant_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostConstant_Vtbl { base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetValue: GetValue::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostContext_Impl: ::windows_core::BaseImpl {
    fn IsEqualTo(this: &Self::This, pcontext: ::core::option::Option<&IDebugHostContext>) -> ::windows_core::Result<bool>;
}
impl ::windows_core::Iids for IDebugHostContext {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostContext_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostContext {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsEqualTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontext: *mut ::core::ffi::c_void, pisequal: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsEqualTo(this, ::windows_core::from_raw_borrowed(&pcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pisequal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostContext_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, IsEqualTo: IsEqualTo::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDebugHostData_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetLocationKind(this: &Self::This) -> ::windows_core::Result<LocationKind>;
    fn GetLocation(this: &Self::This) -> ::windows_core::Result<Location>;
    fn GetValue(this: &Self::This) -> ::windows_core::Result<super::super::super::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDebugHostData {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostData_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostData {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLocationKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocationKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locationkind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(location, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostData_Vtbl {
            base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLocationKind: GetLocationKind::<Identity, Impl, OFFSET>,
            GetLocation: GetLocation::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostErrorSink_Impl: ::windows_core::BaseImpl {
    fn ReportError(this: &Self::This, errclass: ErrorClass, hrerror: ::windows_core::HRESULT, message: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugHostErrorSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostErrorSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostErrorSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReportError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostErrorSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errclass: ErrorClass, hrerror: ::windows_core::HRESULT, message: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReportError(this, ::core::mem::transmute_copy(&errclass), ::core::mem::transmute_copy(&hrerror), ::core::mem::transmute(&message)).into())
        }
        IDebugHostErrorSink_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, ReportError: ReportError::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostEvaluator_Impl: ::windows_core::BaseImpl {
    fn EvaluateExpression(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, expression: &::windows_core::PCWSTR, bindingcontext: ::core::option::Option<&IModelObject>, result: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn EvaluateExtendedExpression(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, expression: &::windows_core::PCWSTR, bindingcontext: ::core::option::Option<&IModelObject>, result: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugHostEvaluator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostEvaluator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostEvaluator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EvaluateExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostEvaluator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR, bindingcontext: *mut ::core::ffi::c_void, result: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateExpression(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&expression), ::windows_core::from_raw_borrowed(&bindingcontext), ::core::mem::transmute_copy(&result), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn EvaluateExtendedExpression<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostEvaluator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, expression: ::windows_core::PCWSTR, bindingcontext: *mut ::core::ffi::c_void, result: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EvaluateExtendedExpression(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&expression), ::windows_core::from_raw_borrowed(&bindingcontext), ::core::mem::transmute_copy(&result), ::core::mem::transmute_copy(&metadata)).into())
        }
        IDebugHostEvaluator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EvaluateExpression: EvaluateExpression::<Identity, Impl, OFFSET>,
            EvaluateExtendedExpression: EvaluateExtendedExpression::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostEvaluator2_Impl: ::windows_core::BaseImpl + IDebugHostEvaluator_Impl {
    fn AssignTo(this: &Self::This, assignmentreference: ::core::option::Option<&IModelObject>, assignmentvalue: ::core::option::Option<&IModelObject>, assignmentresult: *mut ::core::option::Option<IModelObject>, assignmentmetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugHostEvaluator2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostEvaluator);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostEvaluator2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostEvaluator2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AssignTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostEvaluator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, assignmentreference: *mut ::core::ffi::c_void, assignmentvalue: *mut ::core::ffi::c_void, assignmentresult: *mut *mut ::core::ffi::c_void, assignmentmetadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AssignTo(this, ::windows_core::from_raw_borrowed(&assignmentreference), ::windows_core::from_raw_borrowed(&assignmentvalue), ::core::mem::transmute_copy(&assignmentresult), ::core::mem::transmute_copy(&assignmentmetadata)).into())
        }
        IDebugHostEvaluator2_Vtbl { base__: <IDebugHostEvaluator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, AssignTo: AssignTo::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostExtensibility_Impl: ::windows_core::BaseImpl {
    fn CreateFunctionAlias(this: &Self::This, aliasname: &::windows_core::PCWSTR, functionobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn DestroyFunctionAlias(this: &Self::This, aliasname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugHostExtensibility {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostExtensibility_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostExtensibility {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateFunctionAlias<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostExtensibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, aliasname: ::windows_core::PCWSTR, functionobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateFunctionAlias(this, ::core::mem::transmute(&aliasname), ::windows_core::from_raw_borrowed(&functionobject)).into())
        }
        unsafe extern "system" fn DestroyFunctionAlias<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostExtensibility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, aliasname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DestroyFunctionAlias(this, ::core::mem::transmute(&aliasname)).into())
        }
        IDebugHostExtensibility_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateFunctionAlias: CreateFunctionAlias::<Identity, Impl, OFFSET>,
            DestroyFunctionAlias: DestroyFunctionAlias::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDebugHostField_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetLocationKind(this: &Self::This) -> ::windows_core::Result<LocationKind>;
    fn GetOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetLocation(this: &Self::This) -> ::windows_core::Result<Location>;
    fn GetValue(this: &Self::This) -> ::windows_core::Result<super::super::super::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDebugHostField {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostField_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostField {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLocationKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostField_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocationKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locationkind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostField_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostField_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(location, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostField_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostField_Vtbl {
            base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLocationKind: GetLocationKind::<Identity, Impl, OFFSET>,
            GetOffset: GetOffset::<Identity, Impl, OFFSET>,
            GetLocation: GetLocation::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostMemory_Impl: ::windows_core::BaseImpl {
    fn ReadBytes(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, location: &Location, buffer: *mut ::core::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows_core::Result<()>;
    fn WriteBytes(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, location: &Location, buffer: *const ::core::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows_core::Result<()>;
    fn ReadPointers(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, location: &Location, count: u64, pointers: *mut u64) -> ::windows_core::Result<()>;
    fn WritePointers(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, location: &Location, count: u64, pointers: *const u64) -> ::windows_core::Result<()>;
    fn GetDisplayStringForLocation(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, location: &Location, verbose: u8) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDebugHostMemory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostMemory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ReadBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, location: Location, buffer: *mut ::core::ffi::c_void, buffersize: u64, bytesread: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadBytes(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&location), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, location: Location, buffer: *const ::core::ffi::c_void, buffersize: u64, byteswritten: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBytes(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&location), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn ReadPointers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, location: Location, count: u64, pointers: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadPointers(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&location), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pointers)).into())
        }
        unsafe extern "system" fn WritePointers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, location: Location, count: u64, pointers: *const u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WritePointers(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&location), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pointers)).into())
        }
        unsafe extern "system" fn GetDisplayStringForLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, location: Location, verbose: u8, locationname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisplayStringForLocation(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&location), ::core::mem::transmute_copy(&verbose)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locationname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostMemory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ReadBytes: ReadBytes::<Identity, Impl, OFFSET>,
            WriteBytes: WriteBytes::<Identity, Impl, OFFSET>,
            ReadPointers: ReadPointers::<Identity, Impl, OFFSET>,
            WritePointers: WritePointers::<Identity, Impl, OFFSET>,
            GetDisplayStringForLocation: GetDisplayStringForLocation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostMemory2_Impl: ::windows_core::BaseImpl + IDebugHostMemory_Impl {
    fn LinearizeLocation(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, location: &Location) -> ::windows_core::Result<Location>;
}
impl ::windows_core::Iids for IDebugHostMemory2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostMemory);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostMemory2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LinearizeLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostMemory2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, location: Location, plinearizedlocation: *mut Location) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LinearizeLocation(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&location)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plinearizedlocation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostMemory2_Vtbl { base__: <IDebugHostMemory as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, LinearizeLocation: LinearizeLocation::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostModule_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetImageName(this: &Self::This, allowpath: u8) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetBaseLocation(this: &Self::This) -> ::windows_core::Result<Location>;
    fn GetVersion(this: &Self::This, fileversion: *mut u64, productversion: *mut u64) -> ::windows_core::Result<()>;
    fn FindTypeByName(this: &Self::This, typename: &::windows_core::PCWSTR) -> ::windows_core::Result<IDebugHostType>;
    fn FindSymbolByRVA(this: &Self::This, rva: u64) -> ::windows_core::Result<IDebugHostSymbol>;
    fn FindSymbolByName(this: &Self::This, symbolname: &::windows_core::PCWSTR) -> ::windows_core::Result<IDebugHostSymbol>;
}
impl ::windows_core::Iids for IDebugHostModule {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostModule {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetImageName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allowpath: u8, imagename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImageName(this, ::core::mem::transmute_copy(&allowpath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(imagename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBaseLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebaselocation: *mut Location) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBaseLocation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(modulebaselocation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fileversion: *mut u64, productversion: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVersion(this, ::core::mem::transmute_copy(&fileversion), ::core::mem::transmute_copy(&productversion)).into())
        }
        unsafe extern "system" fn FindTypeByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typename: ::windows_core::PCWSTR, r#type: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindTypeByName(this, ::core::mem::transmute(&typename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindSymbolByRVA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindSymbolByRVA(this, ::core::mem::transmute_copy(&rva)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindSymbolByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbolname: ::windows_core::PCWSTR, symbol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindSymbolByName(this, ::core::mem::transmute(&symbolname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostModule_Vtbl {
            base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetImageName: GetImageName::<Identity, Impl, OFFSET>,
            GetBaseLocation: GetBaseLocation::<Identity, Impl, OFFSET>,
            GetVersion: GetVersion::<Identity, Impl, OFFSET>,
            FindTypeByName: FindTypeByName::<Identity, Impl, OFFSET>,
            FindSymbolByRVA: FindSymbolByRVA::<Identity, Impl, OFFSET>,
            FindSymbolByName: FindSymbolByName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostModule2_Impl: ::windows_core::BaseImpl + IDebugHostModule_Impl {
    fn FindContainingSymbolByRVA(this: &Self::This, rva: u64, symbol: *mut ::core::option::Option<IDebugHostSymbol>, offset: *mut u64) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugHostModule2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostModule);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostModule2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FindContainingSymbolByRVA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModule2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rva: u64, symbol: *mut *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindContainingSymbolByRVA(this, ::core::mem::transmute_copy(&rva), ::core::mem::transmute_copy(&symbol), ::core::mem::transmute_copy(&offset)).into())
        }
        IDebugHostModule2_Vtbl {
            base__: <IDebugHostModule as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FindContainingSymbolByRVA: FindContainingSymbolByRVA::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostModuleSignature_Impl: ::windows_core::BaseImpl {
    fn IsMatch(this: &Self::This, pmodule: ::core::option::Option<&IDebugHostModule>) -> ::windows_core::Result<bool>;
}
impl ::windows_core::Iids for IDebugHostModuleSignature {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModuleSignature_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostModuleSignature {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostModuleSignature_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmodule: *mut ::core::ffi::c_void, ismatch: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsMatch(this, ::windows_core::from_raw_borrowed(&pmodule)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ismatch, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostModuleSignature_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, IsMatch: IsMatch::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostPublic_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetLocationKind(this: &Self::This) -> ::windows_core::Result<LocationKind>;
    fn GetLocation(this: &Self::This) -> ::windows_core::Result<Location>;
}
impl ::windows_core::Iids for IDebugHostPublic {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostPublic_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostPublic {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLocationKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostPublic_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locationkind: *mut LocationKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocationKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locationkind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostPublic_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(location, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostPublic_Vtbl {
            base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLocationKind: GetLocationKind::<Identity, Impl, OFFSET>,
            GetLocation: GetLocation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostScriptHost_Impl: ::windows_core::BaseImpl {
    fn CreateContext(this: &Self::This, script: ::core::option::Option<&IDataModelScript>) -> ::windows_core::Result<IDataModelScriptHostContext>;
}
impl ::windows_core::Iids for IDebugHostScriptHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostScriptHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostScriptHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostScriptHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, script: *mut ::core::ffi::c_void, scriptcontext: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateContext(this, ::windows_core::from_raw_borrowed(&script)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(scriptcontext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostScriptHost_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateContext: CreateContext::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostStatus_Impl: ::windows_core::BaseImpl {
    fn PollUserInterrupt(this: &Self::This) -> ::windows_core::Result<bool>;
}
impl ::windows_core::Iids for IDebugHostStatus {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostStatus_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostStatus {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PollUserInterrupt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interruptrequested: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PollUserInterrupt(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(interruptrequested, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostStatus_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PollUserInterrupt: PollUserInterrupt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostSymbol_Impl: ::windows_core::BaseImpl {
    fn GetContext(this: &Self::This) -> ::windows_core::Result<IDebugHostContext>;
    fn EnumerateChildren(this: &Self::This, kind: SymbolKind, name: &::windows_core::PCWSTR) -> ::windows_core::Result<IDebugHostSymbolEnumerator>;
    fn GetSymbolKind(this: &Self::This) -> ::windows_core::Result<SymbolKind>;
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetType(this: &Self::This) -> ::windows_core::Result<IDebugHostType>;
    fn GetContainingModule(this: &Self::This) -> ::windows_core::Result<IDebugHostModule>;
    fn CompareAgainst(this: &Self::This, pcomparisonsymbol: ::core::option::Option<&IDebugHostSymbol>, comparisonflags: u32) -> ::windows_core::Result<bool>;
}
impl ::windows_core::Iids for IDebugHostSymbol {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostSymbol {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(context, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateChildren<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: ::windows_core::PCWSTR, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateChildren(this, ::core::mem::transmute_copy(&kind), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: *mut SymbolKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(kind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbolname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbolname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContainingModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, containingmodule: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContainingModule(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(containingmodule, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CompareAgainst<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcomparisonsymbol: *mut ::core::ffi::c_void, comparisonflags: u32, pmatches: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CompareAgainst(this, ::windows_core::from_raw_borrowed(&pcomparisonsymbol), ::core::mem::transmute_copy(&comparisonflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmatches, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostSymbol_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetContext: GetContext::<Identity, Impl, OFFSET>,
            EnumerateChildren: EnumerateChildren::<Identity, Impl, OFFSET>,
            GetSymbolKind: GetSymbolKind::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetContainingModule: GetContainingModule::<Identity, Impl, OFFSET>,
            CompareAgainst: CompareAgainst::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostSymbol2_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetLanguage(this: &Self::This) -> ::windows_core::Result<LanguageKind>;
}
impl ::windows_core::Iids for IDebugHostSymbol2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostSymbol2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbol2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkind: *mut LanguageKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLanguage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pkind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostSymbol2_Vtbl { base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetLanguage: GetLanguage::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostSymbolEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This) -> ::windows_core::Result<IDebugHostSymbol>;
}
impl ::windows_core::Iids for IDebugHostSymbolEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbolEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostSymbolEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbolEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbolEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostSymbolEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostSymbols_Impl: ::windows_core::BaseImpl {
    fn CreateModuleSignature(this: &Self::This, pwszmodulename: &::windows_core::PCWSTR, pwszminversion: &::windows_core::PCWSTR, pwszmaxversion: &::windows_core::PCWSTR) -> ::windows_core::Result<IDebugHostModuleSignature>;
    fn CreateTypeSignature(this: &Self::This, signaturespecification: &::windows_core::PCWSTR, module: ::core::option::Option<&IDebugHostModule>) -> ::windows_core::Result<IDebugHostTypeSignature>;
    fn CreateTypeSignatureForModuleRange(this: &Self::This, signaturespecification: &::windows_core::PCWSTR, modulename: &::windows_core::PCWSTR, minversion: &::windows_core::PCWSTR, maxversion: &::windows_core::PCWSTR) -> ::windows_core::Result<IDebugHostTypeSignature>;
    fn EnumerateModules(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>) -> ::windows_core::Result<IDebugHostSymbolEnumerator>;
    fn FindModuleByName(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, modulename: &::windows_core::PCWSTR) -> ::windows_core::Result<IDebugHostModule>;
    fn FindModuleByLocation(this: &Self::This, context: ::core::option::Option<&IDebugHostContext>, modulelocation: &Location) -> ::windows_core::Result<IDebugHostModule>;
    fn GetMostDerivedObject(this: &Self::This, pcontext: ::core::option::Option<&IDebugHostContext>, location: &Location, objecttype: ::core::option::Option<&IDebugHostType>, derivedlocation: *mut Location, derivedtype: *mut ::core::option::Option<IDebugHostType>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugHostSymbols {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostSymbols {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateModuleSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszmodulename: ::windows_core::PCWSTR, pwszminversion: ::windows_core::PCWSTR, pwszmaxversion: ::windows_core::PCWSTR, ppmodulesignature: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateModuleSignature(this, ::core::mem::transmute(&pwszmodulename), ::core::mem::transmute(&pwszminversion), ::core::mem::transmute(&pwszmaxversion)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmodulesignature, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTypeSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, signaturespecification: ::windows_core::PCWSTR, module: *mut ::core::ffi::c_void, typesignature: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTypeSignature(this, ::core::mem::transmute(&signaturespecification), ::windows_core::from_raw_borrowed(&module)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typesignature, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTypeSignatureForModuleRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, signaturespecification: ::windows_core::PCWSTR, modulename: ::windows_core::PCWSTR, minversion: ::windows_core::PCWSTR, maxversion: ::windows_core::PCWSTR, typesignature: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTypeSignatureForModuleRange(this, ::core::mem::transmute(&signaturespecification), ::core::mem::transmute(&modulename), ::core::mem::transmute(&minversion), ::core::mem::transmute(&maxversion)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typesignature, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateModules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, moduleenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateModules(this, ::windows_core::from_raw_borrowed(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(moduleenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindModuleByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, modulename: ::windows_core::PCWSTR, module: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindModuleByName(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&modulename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(module, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindModuleByLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void, modulelocation: Location, module: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindModuleByLocation(this, ::windows_core::from_raw_borrowed(&context), ::core::mem::transmute(&modulelocation)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(module, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMostDerivedObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontext: *mut ::core::ffi::c_void, location: Location, objecttype: *mut ::core::ffi::c_void, derivedlocation: *mut Location, derivedtype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMostDerivedObject(this, ::windows_core::from_raw_borrowed(&pcontext), ::core::mem::transmute(&location), ::windows_core::from_raw_borrowed(&objecttype), ::core::mem::transmute_copy(&derivedlocation), ::core::mem::transmute_copy(&derivedtype)).into())
        }
        IDebugHostSymbols_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateModuleSignature: CreateModuleSignature::<Identity, Impl, OFFSET>,
            CreateTypeSignature: CreateTypeSignature::<Identity, Impl, OFFSET>,
            CreateTypeSignatureForModuleRange: CreateTypeSignatureForModuleRange::<Identity, Impl, OFFSET>,
            EnumerateModules: EnumerateModules::<Identity, Impl, OFFSET>,
            FindModuleByName: FindModuleByName::<Identity, Impl, OFFSET>,
            FindModuleByLocation: FindModuleByLocation::<Identity, Impl, OFFSET>,
            GetMostDerivedObject: GetMostDerivedObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostType_Impl: ::windows_core::BaseImpl + IDebugHostSymbol_Impl {
    fn GetTypeKind(this: &Self::This) -> ::windows_core::Result<TypeKind>;
    fn GetSize(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetBaseType(this: &Self::This) -> ::windows_core::Result<IDebugHostType>;
    fn GetHashCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetIntrinsicType(this: &Self::This, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows_core::Result<()>;
    fn GetBitField(this: &Self::This, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows_core::Result<()>;
    fn GetPointerKind(this: &Self::This) -> ::windows_core::Result<PointerKind>;
    fn GetMemberType(this: &Self::This) -> ::windows_core::Result<IDebugHostType>;
    fn CreatePointerTo(this: &Self::This, kind: PointerKind) -> ::windows_core::Result<IDebugHostType>;
    fn GetArrayDimensionality(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetArrayDimensions(this: &Self::This, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows_core::Result<()>;
    fn CreateArrayOf(this: &Self::This, dimensions: u64, pdimensions: *const ArrayDimension) -> ::windows_core::Result<IDebugHostType>;
    fn GetFunctionCallingConvention(this: &Self::This) -> ::windows_core::Result<CallingConventionKind>;
    fn GetFunctionReturnType(this: &Self::This) -> ::windows_core::Result<IDebugHostType>;
    fn GetFunctionParameterTypeCount(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetFunctionParameterTypeAt(this: &Self::This, i: u64) -> ::windows_core::Result<IDebugHostType>;
    fn IsGeneric(this: &Self::This) -> ::windows_core::Result<bool>;
    fn GetGenericArgumentCount(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetGenericArgumentAt(this: &Self::This, i: u64) -> ::windows_core::Result<IDebugHostSymbol>;
}
impl ::windows_core::Iids for IDebugHostType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostSymbol);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTypeKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: *mut TypeKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(kind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBaseType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, basetype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBaseType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(basetype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHashCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHashCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hashcode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIntrinsicType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, intrinsickind: *mut IntrinsicKind, carriertype: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIntrinsicType(this, ::core::mem::transmute_copy(&intrinsickind), ::core::mem::transmute_copy(&carriertype)).into())
        }
        unsafe extern "system" fn GetBitField<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lsboffield: *mut u32, lengthoffield: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBitField(this, ::core::mem::transmute_copy(&lsboffield), ::core::mem::transmute_copy(&lengthoffield)).into())
        }
        unsafe extern "system" fn GetPointerKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pointerkind: *mut PointerKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPointerKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pointerkind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMemberType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, membertype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMemberType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(membertype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreatePointerTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: PointerKind, newtype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreatePointerTo(this, ::core::mem::transmute_copy(&kind)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetArrayDimensionality<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, arraydimensionality: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetArrayDimensionality(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(arraydimensionality, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetArrayDimensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *mut ArrayDimension) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetArrayDimensions(this, ::core::mem::transmute_copy(&dimensions), ::core::mem::transmute_copy(&pdimensions)).into())
        }
        unsafe extern "system" fn CreateArrayOf<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dimensions: u64, pdimensions: *const ArrayDimension, newtype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateArrayOf(this, ::core::mem::transmute_copy(&dimensions), ::core::mem::transmute_copy(&pdimensions)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFunctionCallingConvention<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, conventionkind: *mut CallingConventionKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFunctionCallingConvention(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(conventionkind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFunctionReturnType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, returntype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFunctionReturnType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(returntype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFunctionParameterTypeCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFunctionParameterTypeCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFunctionParameterTypeAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, i: u64, parametertype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFunctionParameterTypeAt(this, ::core::mem::transmute_copy(&i)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(parametertype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsGeneric<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isgeneric: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsGeneric(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(isgeneric, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGenericArgumentCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, argcount: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGenericArgumentCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(argcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGenericArgumentAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, i: u64, argument: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGenericArgumentAt(this, ::core::mem::transmute_copy(&i)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(argument, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostType_Vtbl {
            base__: <IDebugHostSymbol as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTypeKind: GetTypeKind::<Identity, Impl, OFFSET>,
            GetSize: GetSize::<Identity, Impl, OFFSET>,
            GetBaseType: GetBaseType::<Identity, Impl, OFFSET>,
            GetHashCode: GetHashCode::<Identity, Impl, OFFSET>,
            GetIntrinsicType: GetIntrinsicType::<Identity, Impl, OFFSET>,
            GetBitField: GetBitField::<Identity, Impl, OFFSET>,
            GetPointerKind: GetPointerKind::<Identity, Impl, OFFSET>,
            GetMemberType: GetMemberType::<Identity, Impl, OFFSET>,
            CreatePointerTo: CreatePointerTo::<Identity, Impl, OFFSET>,
            GetArrayDimensionality: GetArrayDimensionality::<Identity, Impl, OFFSET>,
            GetArrayDimensions: GetArrayDimensions::<Identity, Impl, OFFSET>,
            CreateArrayOf: CreateArrayOf::<Identity, Impl, OFFSET>,
            GetFunctionCallingConvention: GetFunctionCallingConvention::<Identity, Impl, OFFSET>,
            GetFunctionReturnType: GetFunctionReturnType::<Identity, Impl, OFFSET>,
            GetFunctionParameterTypeCount: GetFunctionParameterTypeCount::<Identity, Impl, OFFSET>,
            GetFunctionParameterTypeAt: GetFunctionParameterTypeAt::<Identity, Impl, OFFSET>,
            IsGeneric: IsGeneric::<Identity, Impl, OFFSET>,
            GetGenericArgumentCount: GetGenericArgumentCount::<Identity, Impl, OFFSET>,
            GetGenericArgumentAt: GetGenericArgumentAt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostType2_Impl: ::windows_core::BaseImpl + IDebugHostType_Impl {
    fn IsTypedef(this: &Self::This) -> ::windows_core::Result<bool>;
    fn GetTypedefBaseType(this: &Self::This) -> ::windows_core::Result<IDebugHostType2>;
    fn GetTypedefFinalBaseType(this: &Self::This) -> ::windows_core::Result<IDebugHostType2>;
    fn GetFunctionVarArgsKind(this: &Self::This) -> ::windows_core::Result<VarArgsKind>;
    fn GetFunctionInstancePointerType(this: &Self::This) -> ::windows_core::Result<IDebugHostType2>;
}
impl ::windows_core::Iids for IDebugHostType2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDebugHostType);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostType2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsTypedef<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, istypedef: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsTypedef(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(istypedef, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypedefBaseType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, basetype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypedefBaseType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(basetype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypedefFinalBaseType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, finalbasetype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypedefFinalBaseType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(finalbasetype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFunctionVarArgsKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varargskind: *mut VarArgsKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFunctionVarArgsKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(varargskind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFunctionInstancePointerType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostType2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instancepointertype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFunctionInstancePointerType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(instancepointertype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostType2_Vtbl {
            base__: <IDebugHostType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsTypedef: IsTypedef::<Identity, Impl, OFFSET>,
            GetTypedefBaseType: GetTypedefBaseType::<Identity, Impl, OFFSET>,
            GetTypedefFinalBaseType: GetTypedefFinalBaseType::<Identity, Impl, OFFSET>,
            GetFunctionVarArgsKind: GetFunctionVarArgsKind::<Identity, Impl, OFFSET>,
            GetFunctionInstancePointerType: GetFunctionInstancePointerType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugHostTypeSignature_Impl: ::windows_core::BaseImpl {
    fn GetHashCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsMatch(this: &Self::This, r#type: ::core::option::Option<&IDebugHostType>, ismatch: *mut bool, wildcardmatches: *mut ::core::option::Option<IDebugHostSymbolEnumerator>) -> ::windows_core::Result<()>;
    fn CompareAgainst(this: &Self::This, typesignature: ::core::option::Option<&IDebugHostTypeSignature>) -> ::windows_core::Result<SignatureComparison>;
}
impl ::windows_core::Iids for IDebugHostTypeSignature {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostTypeSignature_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugHostTypeSignature {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetHashCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostTypeSignature_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashcode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHashCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hashcode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostTypeSignature_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut ::core::ffi::c_void, ismatch: *mut bool, wildcardmatches: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsMatch(this, ::windows_core::from_raw_borrowed(&r#type), ::core::mem::transmute_copy(&ismatch), ::core::mem::transmute_copy(&wildcardmatches)).into())
        }
        unsafe extern "system" fn CompareAgainst<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugHostTypeSignature_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, typesignature: *mut ::core::ffi::c_void, result: *mut SignatureComparison) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CompareAgainst(this, ::windows_core::from_raw_borrowed(&typesignature)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugHostTypeSignature_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetHashCode: GetHashCode::<Identity, Impl, OFFSET>,
            IsMatch: IsMatch::<Identity, Impl, OFFSET>,
            CompareAgainst: CompareAgainst::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugInputCallbacks_Impl: ::windows_core::BaseImpl {
    fn StartInput(this: &Self::This, buffersize: u32) -> ::windows_core::Result<()>;
    fn EndInput(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugInputCallbacks {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugInputCallbacks_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugInputCallbacks {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugInputCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffersize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartInput(this, ::core::mem::transmute_copy(&buffersize)).into())
        }
        unsafe extern "system" fn EndInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugInputCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndInput(this).into())
        }
        IDebugInputCallbacks_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartInput: StartInput::<Identity, Impl, OFFSET>,
            EndInput: EndInput::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugOutputCallbacks_Impl: ::windows_core::BaseImpl {
    fn Output(this: &Self::This, mask: u32, text: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugOutputCallbacks {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacks_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugOutputCallbacks {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, text: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&text)).into())
        }
        IDebugOutputCallbacks_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Output: Output::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugOutputCallbacks2_Impl: ::windows_core::BaseImpl {
    fn Output(this: &Self::This, mask: u32, text: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetInterestMask(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Output2(this: &Self::This, which: u32, flags: u32, arg: u64, text: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugOutputCallbacks2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacks2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugOutputCallbacks2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacks2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, text: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&text)).into())
        }
        unsafe extern "system" fn GetInterestMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacks2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInterestMask(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Output2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacks2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, flags: u32, arg: u64, text: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output2(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&arg), ::core::mem::transmute(&text)).into())
        }
        IDebugOutputCallbacks2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Output: Output::<Identity, Impl, OFFSET>,
            GetInterestMask: GetInterestMask::<Identity, Impl, OFFSET>,
            Output2: Output2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugOutputCallbacksWide_Impl: ::windows_core::BaseImpl {
    fn Output(this: &Self::This, mask: u32, text: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugOutputCallbacksWide {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacksWide_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugOutputCallbacksWide {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Output<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputCallbacksWide_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mask: u32, text: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Output(this, ::core::mem::transmute_copy(&mask), ::core::mem::transmute(&text)).into())
        }
        IDebugOutputCallbacksWide_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Output: Output::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugOutputStream_Impl: ::windows_core::BaseImpl {
    fn Write(this: &Self::This, psz: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugOutputStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugOutputStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Write<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugOutputStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psz: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Write(this, ::core::mem::transmute(&psz)).into())
        }
        IDebugOutputStream_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Write: Write::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugPlmClient_Impl: ::windows_core::BaseImpl {
    fn LaunchPlmPackageForDebugWide(this: &Self::This, server: u64, timeout: u32, packagefullname: &::windows_core::PCWSTR, appname: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugPlmClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugPlmClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: ::windows_core::PCWSTR, appname: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchPlmPackageForDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&appname), ::core::mem::transmute(&arguments), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into())
        }
        IDebugPlmClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LaunchPlmPackageForDebugWide: LaunchPlmPackageForDebugWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugPlmClient2_Impl: ::windows_core::BaseImpl {
    fn LaunchPlmPackageForDebugWide(this: &Self::This, server: u64, timeout: u32, packagefullname: &::windows_core::PCWSTR, appname: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::Result<()>;
    fn LaunchPlmBgTaskForDebugWide(this: &Self::This, server: u64, timeout: u32, packagefullname: &::windows_core::PCWSTR, backgroundtaskid: &::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugPlmClient2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugPlmClient2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: ::windows_core::PCWSTR, appname: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchPlmPackageForDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&appname), ::core::mem::transmute(&arguments), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into())
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: ::windows_core::PCWSTR, backgroundtaskid: ::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchPlmBgTaskForDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&backgroundtaskid), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into())
        }
        IDebugPlmClient2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LaunchPlmPackageForDebugWide: LaunchPlmPackageForDebugWide::<Identity, Impl, OFFSET>,
            LaunchPlmBgTaskForDebugWide: LaunchPlmBgTaskForDebugWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugPlmClient3_Impl: ::windows_core::BaseImpl {
    fn LaunchPlmPackageForDebugWide(this: &Self::This, server: u64, timeout: u32, packagefullname: &::windows_core::PCWSTR, appname: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::Result<()>;
    fn LaunchPlmBgTaskForDebugWide(this: &Self::This, server: u64, timeout: u32, packagefullname: &::windows_core::PCWSTR, backgroundtaskid: &::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::Result<()>;
    fn QueryPlmPackageWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR, stream: ::core::option::Option<&IDebugOutputStream>) -> ::windows_core::Result<()>;
    fn QueryPlmPackageList(this: &Self::This, server: u64, stream: ::core::option::Option<&IDebugOutputStream>) -> ::windows_core::Result<()>;
    fn EnablePlmPackageDebugWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn DisablePlmPackageDebugWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SuspendPlmPackageWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ResumePlmPackageWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn TerminatePlmPackageWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn LaunchAndDebugPlmAppWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR, appname: &::windows_core::PCWSTR, arguments: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ActivateAndDebugPlmBgTaskWide(this: &Self::This, server: u64, packagefullname: &::windows_core::PCWSTR, backgroundtaskid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugPlmClient3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugPlmClient3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LaunchPlmPackageForDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: ::windows_core::PCWSTR, appname: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchPlmPackageForDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&appname), ::core::mem::transmute(&arguments), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into())
        }
        unsafe extern "system" fn LaunchPlmBgTaskForDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, timeout: u32, packagefullname: ::windows_core::PCWSTR, backgroundtaskid: ::windows_core::PCWSTR, processid: *mut u32, threadid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchPlmBgTaskForDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&backgroundtaskid), ::core::mem::transmute_copy(&processid), ::core::mem::transmute_copy(&threadid)).into())
        }
        unsafe extern "system" fn QueryPlmPackageWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR, stream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryPlmPackageWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname), ::windows_core::from_raw_borrowed(&stream)).into())
        }
        unsafe extern "system" fn QueryPlmPackageList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, stream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryPlmPackageList(this, ::core::mem::transmute_copy(&server), ::windows_core::from_raw_borrowed(&stream)).into())
        }
        unsafe extern "system" fn EnablePlmPackageDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnablePlmPackageDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn DisablePlmPackageDebugWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisablePlmPackageDebugWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn SuspendPlmPackageWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SuspendPlmPackageWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn ResumePlmPackageWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResumePlmPackageWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn TerminatePlmPackageWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TerminatePlmPackageWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname)).into())
        }
        unsafe extern "system" fn LaunchAndDebugPlmAppWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR, appname: ::windows_core::PCWSTR, arguments: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LaunchAndDebugPlmAppWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&appname), ::core::mem::transmute(&arguments)).into())
        }
        unsafe extern "system" fn ActivateAndDebugPlmBgTaskWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugPlmClient3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, packagefullname: ::windows_core::PCWSTR, backgroundtaskid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateAndDebugPlmBgTaskWide(this, ::core::mem::transmute_copy(&server), ::core::mem::transmute(&packagefullname), ::core::mem::transmute(&backgroundtaskid)).into())
        }
        IDebugPlmClient3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LaunchPlmPackageForDebugWide: LaunchPlmPackageForDebugWide::<Identity, Impl, OFFSET>,
            LaunchPlmBgTaskForDebugWide: LaunchPlmBgTaskForDebugWide::<Identity, Impl, OFFSET>,
            QueryPlmPackageWide: QueryPlmPackageWide::<Identity, Impl, OFFSET>,
            QueryPlmPackageList: QueryPlmPackageList::<Identity, Impl, OFFSET>,
            EnablePlmPackageDebugWide: EnablePlmPackageDebugWide::<Identity, Impl, OFFSET>,
            DisablePlmPackageDebugWide: DisablePlmPackageDebugWide::<Identity, Impl, OFFSET>,
            SuspendPlmPackageWide: SuspendPlmPackageWide::<Identity, Impl, OFFSET>,
            ResumePlmPackageWide: ResumePlmPackageWide::<Identity, Impl, OFFSET>,
            TerminatePlmPackageWide: TerminatePlmPackageWide::<Identity, Impl, OFFSET>,
            LaunchAndDebugPlmAppWide: LaunchAndDebugPlmAppWide::<Identity, Impl, OFFSET>,
            ActivateAndDebugPlmBgTaskWide: ActivateAndDebugPlmBgTaskWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugRegisters_Impl: ::windows_core::BaseImpl {
    fn GetNumberRegisters(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDescription(this: &Self::This, register: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows_core::Result<()>;
    fn GetIndexByName(this: &Self::This, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetValue(this: &Self::This, register: u32, value: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn SetValue(this: &Self::This, register: u32, value: *const DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn GetValues(this: &Self::This, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn SetValues(this: &Self::This, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn OutputRegisters(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetInstructionOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetStackOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetFrameOffset(this: &Self::This) -> ::windows_core::Result<u64>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugRegisters {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugRegisters {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberRegisters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberRegisters(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)).into())
        }
        unsafe extern "system" fn GetIndexByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIndexByName(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValue(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn GetValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn SetValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn OutputRegisters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputRegisters(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInstructionOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInstructionOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStackOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFrameOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFrameOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugRegisters_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberRegisters: GetNumberRegisters::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            GetIndexByName: GetIndexByName::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            GetValues: GetValues::<Identity, Impl, OFFSET>,
            SetValues: SetValues::<Identity, Impl, OFFSET>,
            OutputRegisters: OutputRegisters::<Identity, Impl, OFFSET>,
            GetInstructionOffset: GetInstructionOffset::<Identity, Impl, OFFSET>,
            GetStackOffset: GetStackOffset::<Identity, Impl, OFFSET>,
            GetFrameOffset: GetFrameOffset::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugRegisters2_Impl: ::windows_core::BaseImpl {
    fn GetNumberRegisters(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDescription(this: &Self::This, register: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows_core::Result<()>;
    fn GetIndexByName(this: &Self::This, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetValue(this: &Self::This, register: u32, value: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn SetValue(this: &Self::This, register: u32, value: *const DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn GetValues(this: &Self::This, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn SetValues(this: &Self::This, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn OutputRegisters(this: &Self::This, outputcontrol: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetInstructionOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetStackOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetFrameOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetDescriptionWide(this: &Self::This, register: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows_core::Result<()>;
    fn GetIndexByNameWide(this: &Self::This, name: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetNumberPseudoRegisters(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPseudoDescription(this: &Self::This, register: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows_core::Result<()>;
    fn GetPseudoDescriptionWide(this: &Self::This, register: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows_core::Result<()>;
    fn GetPseudoIndexByName(this: &Self::This, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetPseudoIndexByNameWide(this: &Self::This, name: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetPseudoValues(this: &Self::This, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn SetPseudoValues(this: &Self::This, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn GetValues2(this: &Self::This, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn SetValues2(this: &Self::This, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::Result<()>;
    fn OutputRegisters2(this: &Self::This, outputcontrol: u32, source: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetInstructionOffset2(this: &Self::This, source: u32) -> ::windows_core::Result<u64>;
    fn GetStackOffset2(this: &Self::This, source: u32) -> ::windows_core::Result<u64>;
    fn GetFrameOffset2(this: &Self::This, source: u32) -> ::windows_core::Result<u64>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugRegisters2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugRegisters2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberRegisters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberRegisters(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)).into())
        }
        unsafe extern "system" fn GetIndexByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIndexByName(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValue(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, value: *const DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn GetValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn SetValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValues(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn OutputRegisters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputRegisters(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInstructionOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInstructionOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStackOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFrameOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFrameOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, desc: *mut DEBUG_REGISTER_DESCRIPTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescriptionWide(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&desc)).into())
        }
        unsafe extern "system" fn GetIndexByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIndexByNameWide(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberPseudoRegisters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberPseudoRegisters(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPseudoDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPseudoDescription(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&typemodule), ::core::mem::transmute_copy(&typeid)).into())
        }
        unsafe extern "system" fn GetPseudoDescriptionWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, register: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, typemodule: *mut u64, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPseudoDescriptionWide(this, ::core::mem::transmute_copy(&register), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&typemodule), ::core::mem::transmute_copy(&typeid)).into())
        }
        unsafe extern "system" fn GetPseudoIndexByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPseudoIndexByName(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPseudoIndexByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPseudoIndexByNameWide(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPseudoValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPseudoValues(this, ::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn SetPseudoValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPseudoValues(this, ::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn GetValues2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *mut DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValues2(this, ::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn SetValues2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, count: u32, indices: *const u32, start: u32, values: *const DEBUG_VALUE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValues2(this, ::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&indices), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&values)).into())
        }
        unsafe extern "system" fn OutputRegisters2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, source: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputRegisters2(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&source), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetInstructionOffset2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInstructionOffset2(this, ::core::mem::transmute_copy(&source)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStackOffset2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStackOffset2(this, ::core::mem::transmute_copy(&source)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFrameOffset2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugRegisters2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, source: u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFrameOffset2(this, ::core::mem::transmute_copy(&source)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDebugRegisters2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberRegisters: GetNumberRegisters::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            GetIndexByName: GetIndexByName::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            GetValues: GetValues::<Identity, Impl, OFFSET>,
            SetValues: SetValues::<Identity, Impl, OFFSET>,
            OutputRegisters: OutputRegisters::<Identity, Impl, OFFSET>,
            GetInstructionOffset: GetInstructionOffset::<Identity, Impl, OFFSET>,
            GetStackOffset: GetStackOffset::<Identity, Impl, OFFSET>,
            GetFrameOffset: GetFrameOffset::<Identity, Impl, OFFSET>,
            GetDescriptionWide: GetDescriptionWide::<Identity, Impl, OFFSET>,
            GetIndexByNameWide: GetIndexByNameWide::<Identity, Impl, OFFSET>,
            GetNumberPseudoRegisters: GetNumberPseudoRegisters::<Identity, Impl, OFFSET>,
            GetPseudoDescription: GetPseudoDescription::<Identity, Impl, OFFSET>,
            GetPseudoDescriptionWide: GetPseudoDescriptionWide::<Identity, Impl, OFFSET>,
            GetPseudoIndexByName: GetPseudoIndexByName::<Identity, Impl, OFFSET>,
            GetPseudoIndexByNameWide: GetPseudoIndexByNameWide::<Identity, Impl, OFFSET>,
            GetPseudoValues: GetPseudoValues::<Identity, Impl, OFFSET>,
            SetPseudoValues: SetPseudoValues::<Identity, Impl, OFFSET>,
            GetValues2: GetValues2::<Identity, Impl, OFFSET>,
            SetValues2: SetValues2::<Identity, Impl, OFFSET>,
            OutputRegisters2: OutputRegisters2::<Identity, Impl, OFFSET>,
            GetInstructionOffset2: GetInstructionOffset2::<Identity, Impl, OFFSET>,
            GetStackOffset2: GetStackOffset2::<Identity, Impl, OFFSET>,
            GetFrameOffset2: GetFrameOffset2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolGroup_Impl: ::windows_core::BaseImpl {
    fn GetNumberSymbols(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbol(this: &Self::This, name: &::windows_core::PCSTR, index: *mut u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolByName(this: &Self::This, name: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveSymbolByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<()>;
    fn GetSymbolName(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows_core::Result<()>;
    fn ExpandSymbol(this: &Self::This, index: u32, expand: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OutputSymbols(this: &Self::This, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows_core::Result<()>;
    fn WriteSymbol(this: &Self::This, index: u32, value: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputAsType(this: &Self::This, index: u32, r#type: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbolGroup {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbolGroup {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberSymbols<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSymbols(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbol(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn RemoveSymbolByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolByName(this, ::core::mem::transmute(&name)).into())
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolByIndex(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn GetSymbolName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolName(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetSymbolParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn ExpandSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExpandSymbol(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&expand)).into())
        }
        unsafe extern "system" fn OutputSymbols<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbols(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn WriteSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, value: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteSymbol(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn OutputAsType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, r#type: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputAsType(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&r#type)).into())
        }
        IDebugSymbolGroup_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberSymbols: GetNumberSymbols::<Identity, Impl, OFFSET>,
            AddSymbol: AddSymbol::<Identity, Impl, OFFSET>,
            RemoveSymbolByName: RemoveSymbolByName::<Identity, Impl, OFFSET>,
            RemoveSymbolByIndex: RemoveSymbolByIndex::<Identity, Impl, OFFSET>,
            GetSymbolName: GetSymbolName::<Identity, Impl, OFFSET>,
            GetSymbolParameters: GetSymbolParameters::<Identity, Impl, OFFSET>,
            ExpandSymbol: ExpandSymbol::<Identity, Impl, OFFSET>,
            OutputSymbols: OutputSymbols::<Identity, Impl, OFFSET>,
            WriteSymbol: WriteSymbol::<Identity, Impl, OFFSET>,
            OutputAsType: OutputAsType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbolGroup2_Impl: ::windows_core::BaseImpl {
    fn GetNumberSymbols(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbol(this: &Self::This, name: &::windows_core::PCSTR, index: *mut u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolByName(this: &Self::This, name: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn RemoveSymbolByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<()>;
    fn GetSymbolName(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolParameters(this: &Self::This, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows_core::Result<()>;
    fn ExpandSymbol(this: &Self::This, index: u32, expand: super::super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OutputSymbols(this: &Self::This, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows_core::Result<()>;
    fn WriteSymbol(this: &Self::This, index: u32, value: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn OutputAsType(this: &Self::This, index: u32, r#type: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AddSymbolWide(this: &Self::This, name: &::windows_core::PCWSTR, index: *mut u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolByNameWide(this: &Self::This, name: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSymbolNameWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn WriteSymbolWide(this: &Self::This, index: u32, value: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn OutputAsTypeWide(this: &Self::This, index: u32, r#type: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSymbolTypeName(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolTypeNameWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolSize(this: &Self::This, index: u32) -> ::windows_core::Result<u32>;
    fn GetSymbolOffset(this: &Self::This, index: u32) -> ::windows_core::Result<u64>;
    fn GetSymbolRegister(this: &Self::This, index: u32) -> ::windows_core::Result<u32>;
    fn GetSymbolValueText(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolValueTextWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryInformation(this: &Self::This, index: u32, entry: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbolGroup2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbolGroup2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberSymbols<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSymbols(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbol(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn RemoveSymbolByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolByName(this, ::core::mem::transmute(&name)).into())
        }
        unsafe extern "system" fn RemoveSymbolByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolByIndex(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn GetSymbolName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolName(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetSymbolParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, params: *mut DEBUG_SYMBOL_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolParameters(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn ExpandSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, expand: super::super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExpandSymbol(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&expand)).into())
        }
        unsafe extern "system" fn OutputSymbols<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, start: u32, count: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbols(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn WriteSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, value: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteSymbol(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn OutputAsType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, r#type: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputAsType(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&r#type)).into())
        }
        unsafe extern "system" fn AddSymbolWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbolWide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn RemoveSymbolByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolByNameWide(this, ::core::mem::transmute(&name)).into())
        }
        unsafe extern "system" fn GetSymbolNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolNameWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn WriteSymbolWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, value: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteSymbolWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn OutputAsTypeWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, r#type: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputAsTypeWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&r#type)).into())
        }
        unsafe extern "system" fn GetSymbolTypeName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeName(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetSymbolTypeNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeNameWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetSymbolSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolSize(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolOffset(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolRegister<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, register: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolRegister(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(register, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolValueText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolValueText(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetSymbolValueTextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolValueTextWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbolGroup2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, entry: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryInformation(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&entry)).into())
        }
        IDebugSymbolGroup2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberSymbols: GetNumberSymbols::<Identity, Impl, OFFSET>,
            AddSymbol: AddSymbol::<Identity, Impl, OFFSET>,
            RemoveSymbolByName: RemoveSymbolByName::<Identity, Impl, OFFSET>,
            RemoveSymbolByIndex: RemoveSymbolByIndex::<Identity, Impl, OFFSET>,
            GetSymbolName: GetSymbolName::<Identity, Impl, OFFSET>,
            GetSymbolParameters: GetSymbolParameters::<Identity, Impl, OFFSET>,
            ExpandSymbol: ExpandSymbol::<Identity, Impl, OFFSET>,
            OutputSymbols: OutputSymbols::<Identity, Impl, OFFSET>,
            WriteSymbol: WriteSymbol::<Identity, Impl, OFFSET>,
            OutputAsType: OutputAsType::<Identity, Impl, OFFSET>,
            AddSymbolWide: AddSymbolWide::<Identity, Impl, OFFSET>,
            RemoveSymbolByNameWide: RemoveSymbolByNameWide::<Identity, Impl, OFFSET>,
            GetSymbolNameWide: GetSymbolNameWide::<Identity, Impl, OFFSET>,
            WriteSymbolWide: WriteSymbolWide::<Identity, Impl, OFFSET>,
            OutputAsTypeWide: OutputAsTypeWide::<Identity, Impl, OFFSET>,
            GetSymbolTypeName: GetSymbolTypeName::<Identity, Impl, OFFSET>,
            GetSymbolTypeNameWide: GetSymbolTypeNameWide::<Identity, Impl, OFFSET>,
            GetSymbolSize: GetSymbolSize::<Identity, Impl, OFFSET>,
            GetSymbolOffset: GetSymbolOffset::<Identity, Impl, OFFSET>,
            GetSymbolRegister: GetSymbolRegister::<Identity, Impl, OFFSET>,
            GetSymbolValueText: GetSymbolValueText::<Identity, Impl, OFFSET>,
            GetSymbolValueTextWide: GetSymbolValueTextWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols_Impl: ::windows_core::BaseImpl {
    fn GetSymbolOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffset(this: &Self::This, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByName(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffset(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffset(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNumberModules(this: &Self::This, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleName(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset(this: &Self::This, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleNames(this: &Self::This, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleParameters(this: &Self::This, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSymbolModule(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetTypeName(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeId(this: &Self::This, module: u64, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetTypeSize(this: &Self::This, module: u64, typeid: u32) -> ::windows_core::Result<u32>;
    fn GetFieldOffset(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeId(this: &Self::This, symbol: &::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetTypeId(this: &Self::This, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn ReadTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataVirtual(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn ReadTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataPhysical(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetScope(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScope(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn ResetScope(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup>) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(this: &Self::This, pattern: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatch(this: &Self::This, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn EndSymbolMatch(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Reload(this: &Self::This, module: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetImagePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendImagePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSourcePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElement(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn FindSourceFile(this: &Self::This, startelement: u32, file: &::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsets(this: &Self::This, file: &::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbols {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbols {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByName(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberModules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberModules(this, ::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into())
        }
        unsafe extern "system" fn GetModuleByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModuleByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetModuleNames(
                    this,
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
            })
        }
        unsafe extern "system" fn GetModuleParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSymbolModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModule(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeId(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeSize(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeId(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetOffsetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetTypeId(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataVirtual(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataPhysical(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn ResetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetScope(this).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatch(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatch(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn EndSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSymbolMatch(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Reload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reload(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElement(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFile(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsets(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        IDebugSymbols_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSymbolOptions: GetSymbolOptions::<Identity, Impl, OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Identity, Impl, OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Identity, Impl, OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Identity, Impl, OFFSET>,
            GetNameByOffset: GetNameByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByName: GetOffsetByName::<Identity, Impl, OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Identity, Impl, OFFSET>,
            GetLineByOffset: GetLineByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Identity, Impl, OFFSET>,
            GetNumberModules: GetNumberModules::<Identity, Impl, OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Identity, Impl, OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Identity, Impl, OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Identity, Impl, OFFSET>,
            GetModuleNames: GetModuleNames::<Identity, Impl, OFFSET>,
            GetModuleParameters: GetModuleParameters::<Identity, Impl, OFFSET>,
            GetSymbolModule: GetSymbolModule::<Identity, Impl, OFFSET>,
            GetTypeName: GetTypeName::<Identity, Impl, OFFSET>,
            GetTypeId: GetTypeId::<Identity, Impl, OFFSET>,
            GetTypeSize: GetTypeSize::<Identity, Impl, OFFSET>,
            GetFieldOffset: GetFieldOffset::<Identity, Impl, OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Identity, Impl, OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Identity, Impl, OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Identity, Impl, OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Identity, Impl, OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Identity, Impl, OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Identity, Impl, OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Identity, Impl, OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Identity, Impl, OFFSET>,
            GetScope: GetScope::<Identity, Impl, OFFSET>,
            SetScope: SetScope::<Identity, Impl, OFFSET>,
            ResetScope: ResetScope::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Identity, Impl, OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Identity, Impl, OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Identity, Impl, OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Identity, Impl, OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Identity, Impl, OFFSET>,
            Reload: Reload::<Identity, Impl, OFFSET>,
            GetSymbolPath: GetSymbolPath::<Identity, Impl, OFFSET>,
            SetSymbolPath: SetSymbolPath::<Identity, Impl, OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Identity, Impl, OFFSET>,
            GetImagePath: GetImagePath::<Identity, Impl, OFFSET>,
            SetImagePath: SetImagePath::<Identity, Impl, OFFSET>,
            AppendImagePath: AppendImagePath::<Identity, Impl, OFFSET>,
            GetSourcePath: GetSourcePath::<Identity, Impl, OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Identity, Impl, OFFSET>,
            SetSourcePath: SetSourcePath::<Identity, Impl, OFFSET>,
            AppendSourcePath: AppendSourcePath::<Identity, Impl, OFFSET>,
            FindSourceFile: FindSourceFile::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols2_Impl: ::windows_core::BaseImpl {
    fn GetSymbolOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffset(this: &Self::This, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByName(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffset(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffset(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNumberModules(this: &Self::This, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleName(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset(this: &Self::This, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleNames(this: &Self::This, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleParameters(this: &Self::This, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSymbolModule(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetTypeName(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeId(this: &Self::This, module: u64, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetTypeSize(this: &Self::This, module: u64, typeid: u32) -> ::windows_core::Result<u32>;
    fn GetFieldOffset(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeId(this: &Self::This, symbol: &::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetTypeId(this: &Self::This, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn ReadTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataVirtual(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn ReadTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataPhysical(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetScope(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScope(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn ResetScope(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup>) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(this: &Self::This, pattern: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatch(this: &Self::This, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn EndSymbolMatch(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Reload(this: &Self::This, module: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetImagePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendImagePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSourcePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElement(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn FindSourceFile(this: &Self::This, startelement: u32, file: &::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsets(this: &Self::This, file: &::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformation(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameString(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantName(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldName(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbols2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbols2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByName(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberModules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberModules(this, ::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into())
        }
        unsafe extern "system" fn GetModuleByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModuleByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetModuleNames(
                    this,
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
            })
        }
        unsafe extern "system" fn GetModuleParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSymbolModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModule(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeId(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeSize(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeId(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetOffsetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetTypeId(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataVirtual(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataPhysical(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn ResetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetScope(this).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatch(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatch(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn EndSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSymbolMatch(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Reload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reload(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElement(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFile(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsets(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformation(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        IDebugSymbols2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSymbolOptions: GetSymbolOptions::<Identity, Impl, OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Identity, Impl, OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Identity, Impl, OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Identity, Impl, OFFSET>,
            GetNameByOffset: GetNameByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByName: GetOffsetByName::<Identity, Impl, OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Identity, Impl, OFFSET>,
            GetLineByOffset: GetLineByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Identity, Impl, OFFSET>,
            GetNumberModules: GetNumberModules::<Identity, Impl, OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Identity, Impl, OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Identity, Impl, OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Identity, Impl, OFFSET>,
            GetModuleNames: GetModuleNames::<Identity, Impl, OFFSET>,
            GetModuleParameters: GetModuleParameters::<Identity, Impl, OFFSET>,
            GetSymbolModule: GetSymbolModule::<Identity, Impl, OFFSET>,
            GetTypeName: GetTypeName::<Identity, Impl, OFFSET>,
            GetTypeId: GetTypeId::<Identity, Impl, OFFSET>,
            GetTypeSize: GetTypeSize::<Identity, Impl, OFFSET>,
            GetFieldOffset: GetFieldOffset::<Identity, Impl, OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Identity, Impl, OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Identity, Impl, OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Identity, Impl, OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Identity, Impl, OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Identity, Impl, OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Identity, Impl, OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Identity, Impl, OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Identity, Impl, OFFSET>,
            GetScope: GetScope::<Identity, Impl, OFFSET>,
            SetScope: SetScope::<Identity, Impl, OFFSET>,
            ResetScope: ResetScope::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Identity, Impl, OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Identity, Impl, OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Identity, Impl, OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Identity, Impl, OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Identity, Impl, OFFSET>,
            Reload: Reload::<Identity, Impl, OFFSET>,
            GetSymbolPath: GetSymbolPath::<Identity, Impl, OFFSET>,
            SetSymbolPath: SetSymbolPath::<Identity, Impl, OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Identity, Impl, OFFSET>,
            GetImagePath: GetImagePath::<Identity, Impl, OFFSET>,
            SetImagePath: SetImagePath::<Identity, Impl, OFFSET>,
            AppendImagePath: AppendImagePath::<Identity, Impl, OFFSET>,
            GetSourcePath: GetSourcePath::<Identity, Impl, OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Identity, Impl, OFFSET>,
            SetSourcePath: SetSourcePath::<Identity, Impl, OFFSET>,
            AppendSourcePath: AppendSourcePath::<Identity, Impl, OFFSET>,
            FindSourceFile: FindSourceFile::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Identity, Impl, OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Identity, Impl, OFFSET>,
            GetModuleNameString: GetModuleNameString::<Identity, Impl, OFFSET>,
            GetConstantName: GetConstantName::<Identity, Impl, OFFSET>,
            GetFieldName: GetFieldName::<Identity, Impl, OFFSET>,
            GetTypeOptions: GetTypeOptions::<Identity, Impl, OFFSET>,
            AddTypeOptions: AddTypeOptions::<Identity, Impl, OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Identity, Impl, OFFSET>,
            SetTypeOptions: SetTypeOptions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols3_Impl: ::windows_core::BaseImpl {
    fn GetSymbolOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffset(this: &Self::This, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByName(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffset(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffset(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNumberModules(this: &Self::This, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleName(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset(this: &Self::This, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleNames(this: &Self::This, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleParameters(this: &Self::This, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSymbolModule(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetTypeName(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeId(this: &Self::This, module: u64, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetTypeSize(this: &Self::This, module: u64, typeid: u32) -> ::windows_core::Result<u32>;
    fn GetFieldOffset(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeId(this: &Self::This, symbol: &::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetTypeId(this: &Self::This, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn ReadTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataVirtual(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn ReadTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataPhysical(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetScope(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScope(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn ResetScope(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup>) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(this: &Self::This, pattern: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatch(this: &Self::This, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn EndSymbolMatch(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Reload(this: &Self::This, module: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetImagePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendImagePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSourcePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElement(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn FindSourceFile(this: &Self::This, startelement: u32, file: &::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsets(this: &Self::This, file: &::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformation(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameString(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantName(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldName(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffsetWide(this: &Self::This, offset: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByNameWide(this: &Self::This, symbol: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffsetWide(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffsetWide(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLineWide(this: &Self::This, line: u32, file: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleNameWide(this: &Self::This, name: &::windows_core::PCWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetSymbolModuleWide(this: &Self::This, symbol: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetTypeNameWide(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeIdWide(this: &Self::This, module: u64, name: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetFieldOffsetWide(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeIdWide(this: &Self::This, symbol: &::windows_core::PCWSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup2(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup2>) -> ::windows_core::Result<IDebugSymbolGroup2>;
    fn CreateSymbolGroup2(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup2>;
    fn StartSymbolMatchWide(this: &Self::This, pattern: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatchWide(this: &Self::This, handle: u64, buffer: ::windows_core::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn ReloadWide(this: &Self::This, module: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetImagePathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendImagePathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSourcePathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElementWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn FindSourceFileWide(this: &Self::This, startelement: u32, file: &::windows_core::PCWSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsetsWide(this: &Self::This, file: &::windows_core::PCWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformationWide(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameStringWide(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantNameWide(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldNameWide(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn IsManagedModule(this: &Self::This, index: u32, base: u64) -> ::windows_core::Result<()>;
    fn GetModuleByModuleName2(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByModuleName2Wide(this: &Self::This, name: &::windows_core::PCWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset2(this: &Self::This, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn AddSyntheticModule(this: &Self::This, base: u64, size: u32, imagepath: &::windows_core::PCSTR, modulename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn AddSyntheticModuleWide(this: &Self::This, base: u64, size: u32, imagepath: &::windows_core::PCWSTR, modulename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn RemoveSyntheticModule(this: &Self::This, base: u64) -> ::windows_core::Result<()>;
    fn GetCurrentScopeFrameIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetScopeFrameByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<()>;
    fn SetScopeFromJitDebugInfo(this: &Self::This, outputcontrol: u32, infooffset: u64) -> ::windows_core::Result<()>;
    fn SetScopeFromStoredEvent(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputSymbolByOffset(this: &Self::This, outputcontrol: u32, flags: u32, offset: u64) -> ::windows_core::Result<()>;
    fn GetFunctionEntryByOffset(this: &Self::This, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldTypeAndOffset(this: &Self::This, module: u64, containertypeid: u32, field: &::windows_core::PCSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldTypeAndOffsetWide(this: &Self::This, module: u64, containertypeid: u32, field: &::windows_core::PCWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::Result<()>;
    fn AddSyntheticSymbol(this: &Self::This, offset: u64, size: u32, name: &::windows_core::PCSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn AddSyntheticSymbolWide(this: &Self::This, offset: u64, size: u32, name: &::windows_core::PCWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn RemoveSyntheticSymbol(this: &Self::This, id: *const DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByOffset(this: &Self::This, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByName(this: &Self::This, symbol: &::windows_core::PCSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByNameWide(this: &Self::This, symbol: &::windows_core::PCWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryByToken(this: &Self::This, modulebase: u64, token: u32) -> ::windows_core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSymbolEntryInformation(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::Result<()>;
    fn GetSymbolEntryString(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryStringWide(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryOffsetRegions(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryBySymbolEntry(this: &Self::This, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows_core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSourceEntriesByOffset(this: &Self::This, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntriesByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntriesByLineWide(this: &Self::This, line: u32, file: &::windows_core::PCWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryString(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryStringWide(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryOffsetRegions(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryBySourceEntry(this: &Self::This, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbols3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbols3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByName(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberModules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberModules(this, ::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into())
        }
        unsafe extern "system" fn GetModuleByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModuleByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetModuleNames(
                    this,
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
            })
        }
        unsafe extern "system" fn GetModuleParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSymbolModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModule(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeId(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeSize(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeId(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetOffsetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetTypeId(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataVirtual(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataPhysical(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn ResetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetScope(this).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatch(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatch(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn EndSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSymbolMatch(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Reload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reload(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElement(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFile(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsets(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformation(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByNameWide(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLineWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCWSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLineWide(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleNameWide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetSymbolModuleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModuleWide(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeIdWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCWSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeIdWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCWSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffsetWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeIdWide(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup2(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup2(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatchWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatchWide(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatchWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn ReloadWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReloadWide(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElementWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCWSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileWide(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsetsWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformationWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn IsManagedModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsManagedModule(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByModuleName2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName2(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName2Wide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset2(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn AddSyntheticModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: ::windows_core::PCSTR, modulename: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticModule(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&imagepath), ::core::mem::transmute(&modulename), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: ::windows_core::PCWSTR, modulename: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticModuleWide(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&imagepath), ::core::mem::transmute(&modulename), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RemoveSyntheticModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSyntheticModule(this, ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentScopeFrameIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFrameByIndex(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFromJitDebugInfo(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&infooffset)).into())
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFromStoredEvent(this).into())
        }
        unsafe extern "system" fn OutputSymbolByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbolByOffset(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFunctionEntryByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bufferneeded)).into())
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: ::windows_core::PCSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldTypeAndOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: ::windows_core::PCWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldTypeAndOffsetWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn AddSyntheticSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: ::windows_core::PCSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticSymbol(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: ::windows_core::PCWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticSymbolWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSyntheticSymbol(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByName(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByNameWide(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolEntryByToken(this, ::core::mem::transmute_copy(&modulebase), ::core::mem::transmute_copy(&token)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryInformation(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&info)).into())
        }
        unsafe extern "system" fn GetSymbolEntryString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryString(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryStringWide(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryOffsetRegions(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into())
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolEntryBySymbolEntry(this, ::core::mem::transmute_copy(&fromid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(toid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByLineWide(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntryString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryString(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryStringWide(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryOffsetRegions(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into())
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryBySourceEntry(this, ::core::mem::transmute_copy(&fromentry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&toentry)).into())
        }
        IDebugSymbols3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSymbolOptions: GetSymbolOptions::<Identity, Impl, OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Identity, Impl, OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Identity, Impl, OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Identity, Impl, OFFSET>,
            GetNameByOffset: GetNameByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByName: GetOffsetByName::<Identity, Impl, OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Identity, Impl, OFFSET>,
            GetLineByOffset: GetLineByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Identity, Impl, OFFSET>,
            GetNumberModules: GetNumberModules::<Identity, Impl, OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Identity, Impl, OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Identity, Impl, OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Identity, Impl, OFFSET>,
            GetModuleNames: GetModuleNames::<Identity, Impl, OFFSET>,
            GetModuleParameters: GetModuleParameters::<Identity, Impl, OFFSET>,
            GetSymbolModule: GetSymbolModule::<Identity, Impl, OFFSET>,
            GetTypeName: GetTypeName::<Identity, Impl, OFFSET>,
            GetTypeId: GetTypeId::<Identity, Impl, OFFSET>,
            GetTypeSize: GetTypeSize::<Identity, Impl, OFFSET>,
            GetFieldOffset: GetFieldOffset::<Identity, Impl, OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Identity, Impl, OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Identity, Impl, OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Identity, Impl, OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Identity, Impl, OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Identity, Impl, OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Identity, Impl, OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Identity, Impl, OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Identity, Impl, OFFSET>,
            GetScope: GetScope::<Identity, Impl, OFFSET>,
            SetScope: SetScope::<Identity, Impl, OFFSET>,
            ResetScope: ResetScope::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Identity, Impl, OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Identity, Impl, OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Identity, Impl, OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Identity, Impl, OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Identity, Impl, OFFSET>,
            Reload: Reload::<Identity, Impl, OFFSET>,
            GetSymbolPath: GetSymbolPath::<Identity, Impl, OFFSET>,
            SetSymbolPath: SetSymbolPath::<Identity, Impl, OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Identity, Impl, OFFSET>,
            GetImagePath: GetImagePath::<Identity, Impl, OFFSET>,
            SetImagePath: SetImagePath::<Identity, Impl, OFFSET>,
            AppendImagePath: AppendImagePath::<Identity, Impl, OFFSET>,
            GetSourcePath: GetSourcePath::<Identity, Impl, OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Identity, Impl, OFFSET>,
            SetSourcePath: SetSourcePath::<Identity, Impl, OFFSET>,
            AppendSourcePath: AppendSourcePath::<Identity, Impl, OFFSET>,
            FindSourceFile: FindSourceFile::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Identity, Impl, OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Identity, Impl, OFFSET>,
            GetModuleNameString: GetModuleNameString::<Identity, Impl, OFFSET>,
            GetConstantName: GetConstantName::<Identity, Impl, OFFSET>,
            GetFieldName: GetFieldName::<Identity, Impl, OFFSET>,
            GetTypeOptions: GetTypeOptions::<Identity, Impl, OFFSET>,
            AddTypeOptions: AddTypeOptions::<Identity, Impl, OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Identity, Impl, OFFSET>,
            SetTypeOptions: SetTypeOptions::<Identity, Impl, OFFSET>,
            GetNameByOffsetWide: GetNameByOffsetWide::<Identity, Impl, OFFSET>,
            GetOffsetByNameWide: GetOffsetByNameWide::<Identity, Impl, OFFSET>,
            GetNearNameByOffsetWide: GetNearNameByOffsetWide::<Identity, Impl, OFFSET>,
            GetLineByOffsetWide: GetLineByOffsetWide::<Identity, Impl, OFFSET>,
            GetOffsetByLineWide: GetOffsetByLineWide::<Identity, Impl, OFFSET>,
            GetModuleByModuleNameWide: GetModuleByModuleNameWide::<Identity, Impl, OFFSET>,
            GetSymbolModuleWide: GetSymbolModuleWide::<Identity, Impl, OFFSET>,
            GetTypeNameWide: GetTypeNameWide::<Identity, Impl, OFFSET>,
            GetTypeIdWide: GetTypeIdWide::<Identity, Impl, OFFSET>,
            GetFieldOffsetWide: GetFieldOffsetWide::<Identity, Impl, OFFSET>,
            GetSymbolTypeIdWide: GetSymbolTypeIdWide::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup2: GetScopeSymbolGroup2::<Identity, Impl, OFFSET>,
            CreateSymbolGroup2: CreateSymbolGroup2::<Identity, Impl, OFFSET>,
            StartSymbolMatchWide: StartSymbolMatchWide::<Identity, Impl, OFFSET>,
            GetNextSymbolMatchWide: GetNextSymbolMatchWide::<Identity, Impl, OFFSET>,
            ReloadWide: ReloadWide::<Identity, Impl, OFFSET>,
            GetSymbolPathWide: GetSymbolPathWide::<Identity, Impl, OFFSET>,
            SetSymbolPathWide: SetSymbolPathWide::<Identity, Impl, OFFSET>,
            AppendSymbolPathWide: AppendSymbolPathWide::<Identity, Impl, OFFSET>,
            GetImagePathWide: GetImagePathWide::<Identity, Impl, OFFSET>,
            SetImagePathWide: SetImagePathWide::<Identity, Impl, OFFSET>,
            AppendImagePathWide: AppendImagePathWide::<Identity, Impl, OFFSET>,
            GetSourcePathWide: GetSourcePathWide::<Identity, Impl, OFFSET>,
            GetSourcePathElementWide: GetSourcePathElementWide::<Identity, Impl, OFFSET>,
            SetSourcePathWide: SetSourcePathWide::<Identity, Impl, OFFSET>,
            AppendSourcePathWide: AppendSourcePathWide::<Identity, Impl, OFFSET>,
            FindSourceFileWide: FindSourceFileWide::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsetsWide: GetSourceFileLineOffsetsWide::<Identity, Impl, OFFSET>,
            GetModuleVersionInformationWide: GetModuleVersionInformationWide::<Identity, Impl, OFFSET>,
            GetModuleNameStringWide: GetModuleNameStringWide::<Identity, Impl, OFFSET>,
            GetConstantNameWide: GetConstantNameWide::<Identity, Impl, OFFSET>,
            GetFieldNameWide: GetFieldNameWide::<Identity, Impl, OFFSET>,
            IsManagedModule: IsManagedModule::<Identity, Impl, OFFSET>,
            GetModuleByModuleName2: GetModuleByModuleName2::<Identity, Impl, OFFSET>,
            GetModuleByModuleName2Wide: GetModuleByModuleName2Wide::<Identity, Impl, OFFSET>,
            GetModuleByOffset2: GetModuleByOffset2::<Identity, Impl, OFFSET>,
            AddSyntheticModule: AddSyntheticModule::<Identity, Impl, OFFSET>,
            AddSyntheticModuleWide: AddSyntheticModuleWide::<Identity, Impl, OFFSET>,
            RemoveSyntheticModule: RemoveSyntheticModule::<Identity, Impl, OFFSET>,
            GetCurrentScopeFrameIndex: GetCurrentScopeFrameIndex::<Identity, Impl, OFFSET>,
            SetScopeFrameByIndex: SetScopeFrameByIndex::<Identity, Impl, OFFSET>,
            SetScopeFromJitDebugInfo: SetScopeFromJitDebugInfo::<Identity, Impl, OFFSET>,
            SetScopeFromStoredEvent: SetScopeFromStoredEvent::<Identity, Impl, OFFSET>,
            OutputSymbolByOffset: OutputSymbolByOffset::<Identity, Impl, OFFSET>,
            GetFunctionEntryByOffset: GetFunctionEntryByOffset::<Identity, Impl, OFFSET>,
            GetFieldTypeAndOffset: GetFieldTypeAndOffset::<Identity, Impl, OFFSET>,
            GetFieldTypeAndOffsetWide: GetFieldTypeAndOffsetWide::<Identity, Impl, OFFSET>,
            AddSyntheticSymbol: AddSyntheticSymbol::<Identity, Impl, OFFSET>,
            AddSyntheticSymbolWide: AddSyntheticSymbolWide::<Identity, Impl, OFFSET>,
            RemoveSyntheticSymbol: RemoveSyntheticSymbol::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByOffset: GetSymbolEntriesByOffset::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByName: GetSymbolEntriesByName::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByNameWide: GetSymbolEntriesByNameWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryByToken: GetSymbolEntryByToken::<Identity, Impl, OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Identity, Impl, OFFSET>,
            GetSymbolEntryString: GetSymbolEntryString::<Identity, Impl, OFFSET>,
            GetSymbolEntryStringWide: GetSymbolEntryStringWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryOffsetRegions: GetSymbolEntryOffsetRegions::<Identity, Impl, OFFSET>,
            GetSymbolEntryBySymbolEntry: GetSymbolEntryBySymbolEntry::<Identity, Impl, OFFSET>,
            GetSourceEntriesByOffset: GetSourceEntriesByOffset::<Identity, Impl, OFFSET>,
            GetSourceEntriesByLine: GetSourceEntriesByLine::<Identity, Impl, OFFSET>,
            GetSourceEntriesByLineWide: GetSourceEntriesByLineWide::<Identity, Impl, OFFSET>,
            GetSourceEntryString: GetSourceEntryString::<Identity, Impl, OFFSET>,
            GetSourceEntryStringWide: GetSourceEntryStringWide::<Identity, Impl, OFFSET>,
            GetSourceEntryOffsetRegions: GetSourceEntryOffsetRegions::<Identity, Impl, OFFSET>,
            GetSourceEntryBySourceEntry: GetSourceEntryBySourceEntry::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols4_Impl: ::windows_core::BaseImpl {
    fn GetSymbolOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffset(this: &Self::This, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByName(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffset(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffset(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNumberModules(this: &Self::This, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleName(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset(this: &Self::This, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleNames(this: &Self::This, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleParameters(this: &Self::This, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSymbolModule(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetTypeName(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeId(this: &Self::This, module: u64, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetTypeSize(this: &Self::This, module: u64, typeid: u32) -> ::windows_core::Result<u32>;
    fn GetFieldOffset(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeId(this: &Self::This, symbol: &::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetTypeId(this: &Self::This, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn ReadTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataVirtual(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn ReadTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataPhysical(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetScope(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScope(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn ResetScope(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup>) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(this: &Self::This, pattern: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatch(this: &Self::This, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn EndSymbolMatch(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Reload(this: &Self::This, module: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetImagePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendImagePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSourcePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElement(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn FindSourceFile(this: &Self::This, startelement: u32, file: &::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsets(this: &Self::This, file: &::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformation(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameString(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantName(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldName(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffsetWide(this: &Self::This, offset: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByNameWide(this: &Self::This, symbol: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffsetWide(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffsetWide(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLineWide(this: &Self::This, line: u32, file: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleNameWide(this: &Self::This, name: &::windows_core::PCWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetSymbolModuleWide(this: &Self::This, symbol: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetTypeNameWide(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeIdWide(this: &Self::This, module: u64, name: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetFieldOffsetWide(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeIdWide(this: &Self::This, symbol: &::windows_core::PCWSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup2(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup2>) -> ::windows_core::Result<IDebugSymbolGroup2>;
    fn CreateSymbolGroup2(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup2>;
    fn StartSymbolMatchWide(this: &Self::This, pattern: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatchWide(this: &Self::This, handle: u64, buffer: ::windows_core::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn ReloadWide(this: &Self::This, module: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetImagePathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendImagePathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSourcePathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElementWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn FindSourceFileWide(this: &Self::This, startelement: u32, file: &::windows_core::PCWSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsetsWide(this: &Self::This, file: &::windows_core::PCWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformationWide(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameStringWide(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantNameWide(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldNameWide(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn IsManagedModule(this: &Self::This, index: u32, base: u64) -> ::windows_core::Result<()>;
    fn GetModuleByModuleName2(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByModuleName2Wide(this: &Self::This, name: &::windows_core::PCWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset2(this: &Self::This, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn AddSyntheticModule(this: &Self::This, base: u64, size: u32, imagepath: &::windows_core::PCSTR, modulename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn AddSyntheticModuleWide(this: &Self::This, base: u64, size: u32, imagepath: &::windows_core::PCWSTR, modulename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn RemoveSyntheticModule(this: &Self::This, base: u64) -> ::windows_core::Result<()>;
    fn GetCurrentScopeFrameIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetScopeFrameByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<()>;
    fn SetScopeFromJitDebugInfo(this: &Self::This, outputcontrol: u32, infooffset: u64) -> ::windows_core::Result<()>;
    fn SetScopeFromStoredEvent(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputSymbolByOffset(this: &Self::This, outputcontrol: u32, flags: u32, offset: u64) -> ::windows_core::Result<()>;
    fn GetFunctionEntryByOffset(this: &Self::This, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldTypeAndOffset(this: &Self::This, module: u64, containertypeid: u32, field: &::windows_core::PCSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldTypeAndOffsetWide(this: &Self::This, module: u64, containertypeid: u32, field: &::windows_core::PCWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::Result<()>;
    fn AddSyntheticSymbol(this: &Self::This, offset: u64, size: u32, name: &::windows_core::PCSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn AddSyntheticSymbolWide(this: &Self::This, offset: u64, size: u32, name: &::windows_core::PCWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn RemoveSyntheticSymbol(this: &Self::This, id: *const DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByOffset(this: &Self::This, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByName(this: &Self::This, symbol: &::windows_core::PCSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByNameWide(this: &Self::This, symbol: &::windows_core::PCWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryByToken(this: &Self::This, modulebase: u64, token: u32) -> ::windows_core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSymbolEntryInformation(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::Result<()>;
    fn GetSymbolEntryString(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryStringWide(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryOffsetRegions(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryBySymbolEntry(this: &Self::This, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows_core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSourceEntriesByOffset(this: &Self::This, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntriesByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntriesByLineWide(this: &Self::This, line: u32, file: &::windows_core::PCWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryString(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryStringWide(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryOffsetRegions(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryBySourceEntry(this: &Self::This, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows_core::Result<()>;
    fn GetScopeEx(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScopeEx(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn GetNameByInlineContext(this: &Self::This, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetNameByInlineContextWide(this: &Self::This, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByInlineContext(this: &Self::This, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByInlineContextWide(this: &Self::This, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn OutputSymbolByInlineContext(this: &Self::This, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbols4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbols4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByName(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberModules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberModules(this, ::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into())
        }
        unsafe extern "system" fn GetModuleByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModuleByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetModuleNames(
                    this,
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
            })
        }
        unsafe extern "system" fn GetModuleParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSymbolModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModule(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeId(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeSize(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeId(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetOffsetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetTypeId(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataVirtual(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataPhysical(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn ResetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetScope(this).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatch(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatch(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn EndSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSymbolMatch(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Reload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reload(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElement(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFile(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsets(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformation(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByNameWide(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLineWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCWSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLineWide(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleNameWide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetSymbolModuleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModuleWide(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeIdWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCWSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeIdWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCWSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffsetWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeIdWide(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup2(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup2(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatchWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatchWide(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatchWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn ReloadWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReloadWide(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElementWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCWSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileWide(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsetsWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformationWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn IsManagedModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsManagedModule(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByModuleName2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName2(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName2Wide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset2(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn AddSyntheticModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: ::windows_core::PCSTR, modulename: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticModule(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&imagepath), ::core::mem::transmute(&modulename), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: ::windows_core::PCWSTR, modulename: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticModuleWide(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&imagepath), ::core::mem::transmute(&modulename), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RemoveSyntheticModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSyntheticModule(this, ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentScopeFrameIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFrameByIndex(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFromJitDebugInfo(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&infooffset)).into())
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFromStoredEvent(this).into())
        }
        unsafe extern "system" fn OutputSymbolByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbolByOffset(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFunctionEntryByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bufferneeded)).into())
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: ::windows_core::PCSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldTypeAndOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: ::windows_core::PCWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldTypeAndOffsetWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn AddSyntheticSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: ::windows_core::PCSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticSymbol(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: ::windows_core::PCWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticSymbolWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSyntheticSymbol(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByName(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByNameWide(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolEntryByToken(this, ::core::mem::transmute_copy(&modulebase), ::core::mem::transmute_copy(&token)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryInformation(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&info)).into())
        }
        unsafe extern "system" fn GetSymbolEntryString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryString(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryStringWide(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryOffsetRegions(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into())
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolEntryBySymbolEntry(this, ::core::mem::transmute_copy(&fromid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(toid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByLineWide(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntryString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryString(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryStringWide(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryOffsetRegions(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into())
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryBySourceEntry(this, ::core::mem::transmute_copy(&fromentry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&toentry)).into())
        }
        unsafe extern "system" fn GetScopeEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScopeEx(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScopeEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeEx(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn GetNameByInlineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByInlineContext(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByInlineContextWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByInlineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByInlineContext(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByInlineContextWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbolByInlineContext(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext)).into())
        }
        IDebugSymbols4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSymbolOptions: GetSymbolOptions::<Identity, Impl, OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Identity, Impl, OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Identity, Impl, OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Identity, Impl, OFFSET>,
            GetNameByOffset: GetNameByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByName: GetOffsetByName::<Identity, Impl, OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Identity, Impl, OFFSET>,
            GetLineByOffset: GetLineByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Identity, Impl, OFFSET>,
            GetNumberModules: GetNumberModules::<Identity, Impl, OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Identity, Impl, OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Identity, Impl, OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Identity, Impl, OFFSET>,
            GetModuleNames: GetModuleNames::<Identity, Impl, OFFSET>,
            GetModuleParameters: GetModuleParameters::<Identity, Impl, OFFSET>,
            GetSymbolModule: GetSymbolModule::<Identity, Impl, OFFSET>,
            GetTypeName: GetTypeName::<Identity, Impl, OFFSET>,
            GetTypeId: GetTypeId::<Identity, Impl, OFFSET>,
            GetTypeSize: GetTypeSize::<Identity, Impl, OFFSET>,
            GetFieldOffset: GetFieldOffset::<Identity, Impl, OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Identity, Impl, OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Identity, Impl, OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Identity, Impl, OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Identity, Impl, OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Identity, Impl, OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Identity, Impl, OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Identity, Impl, OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Identity, Impl, OFFSET>,
            GetScope: GetScope::<Identity, Impl, OFFSET>,
            SetScope: SetScope::<Identity, Impl, OFFSET>,
            ResetScope: ResetScope::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Identity, Impl, OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Identity, Impl, OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Identity, Impl, OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Identity, Impl, OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Identity, Impl, OFFSET>,
            Reload: Reload::<Identity, Impl, OFFSET>,
            GetSymbolPath: GetSymbolPath::<Identity, Impl, OFFSET>,
            SetSymbolPath: SetSymbolPath::<Identity, Impl, OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Identity, Impl, OFFSET>,
            GetImagePath: GetImagePath::<Identity, Impl, OFFSET>,
            SetImagePath: SetImagePath::<Identity, Impl, OFFSET>,
            AppendImagePath: AppendImagePath::<Identity, Impl, OFFSET>,
            GetSourcePath: GetSourcePath::<Identity, Impl, OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Identity, Impl, OFFSET>,
            SetSourcePath: SetSourcePath::<Identity, Impl, OFFSET>,
            AppendSourcePath: AppendSourcePath::<Identity, Impl, OFFSET>,
            FindSourceFile: FindSourceFile::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Identity, Impl, OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Identity, Impl, OFFSET>,
            GetModuleNameString: GetModuleNameString::<Identity, Impl, OFFSET>,
            GetConstantName: GetConstantName::<Identity, Impl, OFFSET>,
            GetFieldName: GetFieldName::<Identity, Impl, OFFSET>,
            GetTypeOptions: GetTypeOptions::<Identity, Impl, OFFSET>,
            AddTypeOptions: AddTypeOptions::<Identity, Impl, OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Identity, Impl, OFFSET>,
            SetTypeOptions: SetTypeOptions::<Identity, Impl, OFFSET>,
            GetNameByOffsetWide: GetNameByOffsetWide::<Identity, Impl, OFFSET>,
            GetOffsetByNameWide: GetOffsetByNameWide::<Identity, Impl, OFFSET>,
            GetNearNameByOffsetWide: GetNearNameByOffsetWide::<Identity, Impl, OFFSET>,
            GetLineByOffsetWide: GetLineByOffsetWide::<Identity, Impl, OFFSET>,
            GetOffsetByLineWide: GetOffsetByLineWide::<Identity, Impl, OFFSET>,
            GetModuleByModuleNameWide: GetModuleByModuleNameWide::<Identity, Impl, OFFSET>,
            GetSymbolModuleWide: GetSymbolModuleWide::<Identity, Impl, OFFSET>,
            GetTypeNameWide: GetTypeNameWide::<Identity, Impl, OFFSET>,
            GetTypeIdWide: GetTypeIdWide::<Identity, Impl, OFFSET>,
            GetFieldOffsetWide: GetFieldOffsetWide::<Identity, Impl, OFFSET>,
            GetSymbolTypeIdWide: GetSymbolTypeIdWide::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup2: GetScopeSymbolGroup2::<Identity, Impl, OFFSET>,
            CreateSymbolGroup2: CreateSymbolGroup2::<Identity, Impl, OFFSET>,
            StartSymbolMatchWide: StartSymbolMatchWide::<Identity, Impl, OFFSET>,
            GetNextSymbolMatchWide: GetNextSymbolMatchWide::<Identity, Impl, OFFSET>,
            ReloadWide: ReloadWide::<Identity, Impl, OFFSET>,
            GetSymbolPathWide: GetSymbolPathWide::<Identity, Impl, OFFSET>,
            SetSymbolPathWide: SetSymbolPathWide::<Identity, Impl, OFFSET>,
            AppendSymbolPathWide: AppendSymbolPathWide::<Identity, Impl, OFFSET>,
            GetImagePathWide: GetImagePathWide::<Identity, Impl, OFFSET>,
            SetImagePathWide: SetImagePathWide::<Identity, Impl, OFFSET>,
            AppendImagePathWide: AppendImagePathWide::<Identity, Impl, OFFSET>,
            GetSourcePathWide: GetSourcePathWide::<Identity, Impl, OFFSET>,
            GetSourcePathElementWide: GetSourcePathElementWide::<Identity, Impl, OFFSET>,
            SetSourcePathWide: SetSourcePathWide::<Identity, Impl, OFFSET>,
            AppendSourcePathWide: AppendSourcePathWide::<Identity, Impl, OFFSET>,
            FindSourceFileWide: FindSourceFileWide::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsetsWide: GetSourceFileLineOffsetsWide::<Identity, Impl, OFFSET>,
            GetModuleVersionInformationWide: GetModuleVersionInformationWide::<Identity, Impl, OFFSET>,
            GetModuleNameStringWide: GetModuleNameStringWide::<Identity, Impl, OFFSET>,
            GetConstantNameWide: GetConstantNameWide::<Identity, Impl, OFFSET>,
            GetFieldNameWide: GetFieldNameWide::<Identity, Impl, OFFSET>,
            IsManagedModule: IsManagedModule::<Identity, Impl, OFFSET>,
            GetModuleByModuleName2: GetModuleByModuleName2::<Identity, Impl, OFFSET>,
            GetModuleByModuleName2Wide: GetModuleByModuleName2Wide::<Identity, Impl, OFFSET>,
            GetModuleByOffset2: GetModuleByOffset2::<Identity, Impl, OFFSET>,
            AddSyntheticModule: AddSyntheticModule::<Identity, Impl, OFFSET>,
            AddSyntheticModuleWide: AddSyntheticModuleWide::<Identity, Impl, OFFSET>,
            RemoveSyntheticModule: RemoveSyntheticModule::<Identity, Impl, OFFSET>,
            GetCurrentScopeFrameIndex: GetCurrentScopeFrameIndex::<Identity, Impl, OFFSET>,
            SetScopeFrameByIndex: SetScopeFrameByIndex::<Identity, Impl, OFFSET>,
            SetScopeFromJitDebugInfo: SetScopeFromJitDebugInfo::<Identity, Impl, OFFSET>,
            SetScopeFromStoredEvent: SetScopeFromStoredEvent::<Identity, Impl, OFFSET>,
            OutputSymbolByOffset: OutputSymbolByOffset::<Identity, Impl, OFFSET>,
            GetFunctionEntryByOffset: GetFunctionEntryByOffset::<Identity, Impl, OFFSET>,
            GetFieldTypeAndOffset: GetFieldTypeAndOffset::<Identity, Impl, OFFSET>,
            GetFieldTypeAndOffsetWide: GetFieldTypeAndOffsetWide::<Identity, Impl, OFFSET>,
            AddSyntheticSymbol: AddSyntheticSymbol::<Identity, Impl, OFFSET>,
            AddSyntheticSymbolWide: AddSyntheticSymbolWide::<Identity, Impl, OFFSET>,
            RemoveSyntheticSymbol: RemoveSyntheticSymbol::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByOffset: GetSymbolEntriesByOffset::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByName: GetSymbolEntriesByName::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByNameWide: GetSymbolEntriesByNameWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryByToken: GetSymbolEntryByToken::<Identity, Impl, OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Identity, Impl, OFFSET>,
            GetSymbolEntryString: GetSymbolEntryString::<Identity, Impl, OFFSET>,
            GetSymbolEntryStringWide: GetSymbolEntryStringWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryOffsetRegions: GetSymbolEntryOffsetRegions::<Identity, Impl, OFFSET>,
            GetSymbolEntryBySymbolEntry: GetSymbolEntryBySymbolEntry::<Identity, Impl, OFFSET>,
            GetSourceEntriesByOffset: GetSourceEntriesByOffset::<Identity, Impl, OFFSET>,
            GetSourceEntriesByLine: GetSourceEntriesByLine::<Identity, Impl, OFFSET>,
            GetSourceEntriesByLineWide: GetSourceEntriesByLineWide::<Identity, Impl, OFFSET>,
            GetSourceEntryString: GetSourceEntryString::<Identity, Impl, OFFSET>,
            GetSourceEntryStringWide: GetSourceEntryStringWide::<Identity, Impl, OFFSET>,
            GetSourceEntryOffsetRegions: GetSourceEntryOffsetRegions::<Identity, Impl, OFFSET>,
            GetSourceEntryBySourceEntry: GetSourceEntryBySourceEntry::<Identity, Impl, OFFSET>,
            GetScopeEx: GetScopeEx::<Identity, Impl, OFFSET>,
            SetScopeEx: SetScopeEx::<Identity, Impl, OFFSET>,
            GetNameByInlineContext: GetNameByInlineContext::<Identity, Impl, OFFSET>,
            GetNameByInlineContextWide: GetNameByInlineContextWide::<Identity, Impl, OFFSET>,
            GetLineByInlineContext: GetLineByInlineContext::<Identity, Impl, OFFSET>,
            GetLineByInlineContextWide: GetLineByInlineContextWide::<Identity, Impl, OFFSET>,
            OutputSymbolByInlineContext: OutputSymbolByInlineContext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDebugSymbols5_Impl: ::windows_core::BaseImpl {
    fn GetSymbolOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetSymbolOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffset(this: &Self::This, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByName(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffset(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffset(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNumberModules(this: &Self::This, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleName(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset(this: &Self::This, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleNames(this: &Self::This, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleParameters(this: &Self::This, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetSymbolModule(this: &Self::This, symbol: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetTypeName(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeId(this: &Self::This, module: u64, name: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetTypeSize(this: &Self::This, module: u64, typeid: u32) -> ::windows_core::Result<u32>;
    fn GetFieldOffset(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeId(this: &Self::This, symbol: &::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetTypeId(this: &Self::This, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn ReadTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataVirtual(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataVirtual(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn ReadTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::Result<()>;
    fn WriteTypedDataPhysical(this: &Self::This, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::Result<()>;
    fn OutputTypedDataPhysical(this: &Self::This, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::Result<()>;
    fn GetScope(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScope(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn ResetScope(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup>) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn CreateSymbolGroup(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup>;
    fn StartSymbolMatch(this: &Self::This, pattern: &::windows_core::PCSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatch(this: &Self::This, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn EndSymbolMatch(this: &Self::This, handle: u64) -> ::windows_core::Result<()>;
    fn Reload(this: &Self::This, module: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetImagePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendImagePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn GetSourcePath(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElement(this: &Self::This, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePath(this: &Self::This, path: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePath(this: &Self::This, addition: &::windows_core::PCSTR) -> ::windows_core::Result<()>;
    fn FindSourceFile(this: &Self::This, startelement: u32, file: &::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsets(this: &Self::This, file: &::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformation(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameString(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantName(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldName(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeOptions(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn RemoveTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn SetTypeOptions(this: &Self::This, options: u32) -> ::windows_core::Result<()>;
    fn GetNameByOffsetWide(this: &Self::This, offset: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByNameWide(this: &Self::This, symbol: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetNearNameByOffsetWide(this: &Self::This, offset: u64, delta: i32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByOffsetWide(this: &Self::This, offset: u64, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetOffsetByLineWide(this: &Self::This, line: u32, file: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetModuleByModuleNameWide(this: &Self::This, name: &::windows_core::PCWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetSymbolModuleWide(this: &Self::This, symbol: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetTypeNameWide(this: &Self::This, module: u64, typeid: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetTypeIdWide(this: &Self::This, module: u64, name: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetFieldOffsetWide(this: &Self::This, module: u64, typeid: u32, field: &::windows_core::PCWSTR) -> ::windows_core::Result<u32>;
    fn GetSymbolTypeIdWide(this: &Self::This, symbol: &::windows_core::PCWSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::Result<()>;
    fn GetScopeSymbolGroup2(this: &Self::This, flags: u32, update: ::core::option::Option<&IDebugSymbolGroup2>) -> ::windows_core::Result<IDebugSymbolGroup2>;
    fn CreateSymbolGroup2(this: &Self::This) -> ::windows_core::Result<IDebugSymbolGroup2>;
    fn StartSymbolMatchWide(this: &Self::This, pattern: &::windows_core::PCWSTR) -> ::windows_core::Result<u64>;
    fn GetNextSymbolMatchWide(this: &Self::This, handle: u64, buffer: ::windows_core::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::Result<()>;
    fn ReloadWide(this: &Self::This, module: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSymbolPathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSymbolPathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendSymbolPathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetImagePathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetImagePathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendImagePathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSourcePathWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourcePathElementWide(this: &Self::This, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::Result<()>;
    fn SetSourcePathWide(this: &Self::This, path: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendSourcePathWide(this: &Self::This, addition: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn FindSourceFileWide(this: &Self::This, startelement: u32, file: &::windows_core::PCWSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceFileLineOffsetsWide(this: &Self::This, file: &::windows_core::PCWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleVersionInformationWide(this: &Self::This, index: u32, base: u64, item: &::windows_core::PCWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::Result<()>;
    fn GetModuleNameStringWide(this: &Self::This, which: u32, index: u32, base: u64, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetConstantNameWide(this: &Self::This, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldNameWide(this: &Self::This, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn IsManagedModule(this: &Self::This, index: u32, base: u64) -> ::windows_core::Result<()>;
    fn GetModuleByModuleName2(this: &Self::This, name: &::windows_core::PCSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByModuleName2Wide(this: &Self::This, name: &::windows_core::PCWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn GetModuleByOffset2(this: &Self::This, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::Result<()>;
    fn AddSyntheticModule(this: &Self::This, base: u64, size: u32, imagepath: &::windows_core::PCSTR, modulename: &::windows_core::PCSTR, flags: u32) -> ::windows_core::Result<()>;
    fn AddSyntheticModuleWide(this: &Self::This, base: u64, size: u32, imagepath: &::windows_core::PCWSTR, modulename: &::windows_core::PCWSTR, flags: u32) -> ::windows_core::Result<()>;
    fn RemoveSyntheticModule(this: &Self::This, base: u64) -> ::windows_core::Result<()>;
    fn GetCurrentScopeFrameIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetScopeFrameByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<()>;
    fn SetScopeFromJitDebugInfo(this: &Self::This, outputcontrol: u32, infooffset: u64) -> ::windows_core::Result<()>;
    fn SetScopeFromStoredEvent(this: &Self::This) -> ::windows_core::Result<()>;
    fn OutputSymbolByOffset(this: &Self::This, outputcontrol: u32, flags: u32, offset: u64) -> ::windows_core::Result<()>;
    fn GetFunctionEntryByOffset(this: &Self::This, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldTypeAndOffset(this: &Self::This, module: u64, containertypeid: u32, field: &::windows_core::PCSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::Result<()>;
    fn GetFieldTypeAndOffsetWide(this: &Self::This, module: u64, containertypeid: u32, field: &::windows_core::PCWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::Result<()>;
    fn AddSyntheticSymbol(this: &Self::This, offset: u64, size: u32, name: &::windows_core::PCSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn AddSyntheticSymbolWide(this: &Self::This, offset: u64, size: u32, name: &::windows_core::PCWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn RemoveSyntheticSymbol(this: &Self::This, id: *const DEBUG_MODULE_AND_ID) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByOffset(this: &Self::This, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByName(this: &Self::This, symbol: &::windows_core::PCSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntriesByNameWide(this: &Self::This, symbol: &::windows_core::PCWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryByToken(this: &Self::This, modulebase: u64, token: u32) -> ::windows_core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSymbolEntryInformation(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::Result<()>;
    fn GetSymbolEntryString(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryStringWide(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryOffsetRegions(this: &Self::This, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolEntryBySymbolEntry(this: &Self::This, fromid: *const DEBUG_MODULE_AND_ID, flags: u32) -> ::windows_core::Result<DEBUG_MODULE_AND_ID>;
    fn GetSourceEntriesByOffset(this: &Self::This, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntriesByLine(this: &Self::This, line: u32, file: &::windows_core::PCSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntriesByLineWide(this: &Self::This, line: u32, file: &::windows_core::PCWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryString(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryStringWide(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryOffsetRegions(this: &Self::This, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::Result<()>;
    fn GetSourceEntryBySourceEntry(this: &Self::This, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows_core::Result<()>;
    fn GetScopeEx(this: &Self::This, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn SetScopeEx(this: &Self::This, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::Result<()>;
    fn GetNameByInlineContext(this: &Self::This, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetNameByInlineContextWide(this: &Self::This, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByInlineContext(this: &Self::This, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn GetLineByInlineContextWide(this: &Self::This, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::Result<()>;
    fn OutputSymbolByInlineContext(this: &Self::This, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows_core::Result<()>;
    fn GetCurrentScopeFrameIndexEx(this: &Self::This, flags: u32) -> ::windows_core::Result<u32>;
    fn SetScopeFrameByIndexEx(this: &Self::This, flags: u32, index: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDebugSymbols5 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSymbols5 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetSymbolOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByName(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberModules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, loaded: *mut u32, unloaded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumberModules(this, ::core::mem::transmute_copy(&loaded), ::core::mem::transmute_copy(&unloaded)).into())
        }
        unsafe extern "system" fn GetModuleByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModuleByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, imagenamebuffer: ::windows_core::PSTR, imagenamebuffersize: u32, imagenamesize: *mut u32, modulenamebuffer: ::windows_core::PSTR, modulenamebuffersize: u32, modulenamesize: *mut u32, loadedimagenamebuffer: ::windows_core::PSTR, loadedimagenamebuffersize: u32, loadedimagenamesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::GetModuleNames(
                    this,
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&base),
                    ::core::mem::transmute_copy(&imagenamebuffer),
                    ::core::mem::transmute_copy(&imagenamebuffersize),
                    ::core::mem::transmute_copy(&imagenamesize),
                    ::core::mem::transmute_copy(&modulenamebuffer),
                    ::core::mem::transmute_copy(&modulenamebuffersize),
                    ::core::mem::transmute_copy(&modulenamesize),
                    ::core::mem::transmute_copy(&loadedimagenamebuffer),
                    ::core::mem::transmute_copy(&loadedimagenamebuffersize),
                    ::core::mem::transmute_copy(&loadedimagenamesize),
                )
                .into()
            })
        }
        unsafe extern "system" fn GetModuleParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, bases: *const u64, start: u32, params: *mut DEBUG_MODULE_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleParameters(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&bases), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&params)).into())
        }
        unsafe extern "system" fn GetSymbolModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModule(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeId(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, size: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeSize(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(size, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeId(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetOffsetTypeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOffsetTypeId(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn ReadTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataVirtual(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataVirtual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataVirtual(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn ReadTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bytesread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bytesread)).into())
        }
        unsafe extern "system" fn WriteTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, module: u64, typeid: u32, buffer: *const ::core::ffi::c_void, buffersize: u32, byteswritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteTypedDataPhysical(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&byteswritten)).into())
        }
        unsafe extern "system" fn OutputTypedDataPhysical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, offset: u64, module: u64, typeid: u32, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputTypedDataPhysical(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn GetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScope(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn ResetScope<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetScope(this).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatch(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatch(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn EndSymbolMatch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSymbolMatch(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn Reload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reload(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePath(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElement(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePath(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePath(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFile(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsets(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformation(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameString(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldName(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeOptions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(options, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn RemoveTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn SetTypeOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, options: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTypeOptions(this, ::core::mem::transmute_copy(&options)).into())
        }
        unsafe extern "system" fn GetNameByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByNameWide(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNearNameByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, delta: i32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearNameByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&delta), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByOffsetWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetOffsetByLineWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCWSTR, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOffsetByLineWide(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModuleByModuleNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, startindex: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleNameWide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetSymbolModuleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolModuleWide(this, ::core::mem::transmute(&symbol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(base, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTypeNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetTypeIdWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, name: ::windows_core::PCWSTR, typeid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeIdWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(typeid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFieldOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, field: ::windows_core::PCWSTR, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFieldOffsetWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute(&field)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolTypeIdWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, typeid: *mut u32, module: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolTypeIdWide(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&module)).into())
        }
        unsafe extern "system" fn GetScopeSymbolGroup2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, update: *mut ::core::ffi::c_void, symbols: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScopeSymbolGroup2(this, ::core::mem::transmute_copy(&flags), ::windows_core::from_raw_borrowed(&update)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(symbols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSymbolGroup2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, group: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSymbolGroup2(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(group, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StartSymbolMatchWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattern: ::windows_core::PCWSTR, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartSymbolMatchWide(this, ::core::mem::transmute(&pattern)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextSymbolMatchWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, buffer: ::windows_core::PWSTR, buffersize: u32, matchsize: *mut u32, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSymbolMatchWide(this, ::core::mem::transmute_copy(&handle), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&matchsize), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn ReloadWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReloadWide(this, ::core::mem::transmute(&module)).into())
        }
        unsafe extern "system" fn GetSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolPathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolPathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSymbolPathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSymbolPathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetImagePathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn SetImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImagePathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendImagePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendImagePathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn GetSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, pathsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&pathsize)).into())
        }
        unsafe extern "system" fn GetSourcePathElementWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, buffer: ::windows_core::PWSTR, buffersize: u32, elementsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourcePathElementWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&elementsize)).into())
        }
        unsafe extern "system" fn SetSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, path: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourcePathWide(this, ::core::mem::transmute(&path)).into())
        }
        unsafe extern "system" fn AppendSourcePathWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, addition: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendSourcePathWide(this, ::core::mem::transmute(&addition)).into())
        }
        unsafe extern "system" fn FindSourceFileWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, startelement: u32, file: ::windows_core::PCWSTR, flags: u32, foundelement: *mut u32, buffer: ::windows_core::PWSTR, buffersize: u32, foundsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindSourceFileWide(this, ::core::mem::transmute_copy(&startelement), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&foundelement), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&foundsize)).into())
        }
        unsafe extern "system" fn GetSourceFileLineOffsetsWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, file: ::windows_core::PCWSTR, buffer: *mut u64, bufferlines: u32, filelines: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceFileLineOffsetsWide(this, ::core::mem::transmute(&file), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&bufferlines), ::core::mem::transmute_copy(&filelines)).into())
        }
        unsafe extern "system" fn GetModuleVersionInformationWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64, item: ::windows_core::PCWSTR, buffer: *mut ::core::ffi::c_void, buffersize: u32, verinfosize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleVersionInformationWide(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute(&item), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&verinfosize)).into())
        }
        unsafe extern "system" fn GetModuleNameStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, which: u32, index: u32, base: u64, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleNameStringWide(this, ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetConstantNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, value: u64, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConstantNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetFieldNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, typeid: u32, fieldindex: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldNameWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&typeid), ::core::mem::transmute_copy(&fieldindex), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn IsManagedModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, base: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsManagedModule(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByModuleName2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName2(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByModuleName2Wide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByModuleName2Wide(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetModuleByOffset2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, startindex: u32, flags: u32, index: *mut u32, base: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModuleByOffset2(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn AddSyntheticModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: ::windows_core::PCSTR, modulename: ::windows_core::PCSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticModule(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&imagepath), ::core::mem::transmute(&modulename), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn AddSyntheticModuleWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64, size: u32, imagepath: ::windows_core::PCWSTR, modulename: ::windows_core::PCWSTR, flags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticModuleWide(this, ::core::mem::transmute_copy(&base), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&imagepath), ::core::mem::transmute(&modulename), ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn RemoveSyntheticModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, base: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSyntheticModule(this, ::core::mem::transmute_copy(&base)).into())
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentScopeFrameIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetScopeFrameByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFrameByIndex(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn SetScopeFromJitDebugInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, infooffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFromJitDebugInfo(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&infooffset)).into())
        }
        unsafe extern "system" fn SetScopeFromStoredEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFromStoredEvent(this).into())
        }
        unsafe extern "system" fn OutputSymbolByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbolByOffset(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetFunctionEntryByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, buffer: *mut ::core::ffi::c_void, buffersize: u32, bufferneeded: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFunctionEntryByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&bufferneeded)).into())
        }
        unsafe extern "system" fn GetFieldTypeAndOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: ::windows_core::PCSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldTypeAndOffset(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetFieldTypeAndOffsetWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, module: u64, containertypeid: u32, field: ::windows_core::PCWSTR, fieldtypeid: *mut u32, offset: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFieldTypeAndOffsetWide(this, ::core::mem::transmute_copy(&module), ::core::mem::transmute_copy(&containertypeid), ::core::mem::transmute(&field), ::core::mem::transmute_copy(&fieldtypeid), ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn AddSyntheticSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: ::windows_core::PCSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticSymbol(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn AddSyntheticSymbolWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, size: u32, name: ::windows_core::PCWSTR, flags: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSyntheticSymbolWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&size), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn RemoveSyntheticSymbol<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSyntheticSymbol(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, displacements: *mut u64, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&displacements), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByName(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntriesByNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbol: ::windows_core::PCWSTR, flags: u32, ids: *mut DEBUG_MODULE_AND_ID, idscount: u32, entries: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntriesByNameWide(this, ::core::mem::transmute(&symbol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&idscount), ::core::mem::transmute_copy(&entries)).into())
        }
        unsafe extern "system" fn GetSymbolEntryByToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulebase: u64, token: u32, id: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolEntryByToken(this, ::core::mem::transmute_copy(&modulebase), ::core::mem::transmute_copy(&token)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolEntryInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, info: *mut DEBUG_SYMBOL_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryInformation(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&info)).into())
        }
        unsafe extern "system" fn GetSymbolEntryString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryString(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryStringWide(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSymbolEntryOffsetRegions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *const DEBUG_MODULE_AND_ID, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolEntryOffsetRegions(this, ::core::mem::transmute_copy(&id), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into())
        }
        unsafe extern "system" fn GetSymbolEntryBySymbolEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromid: *const DEBUG_MODULE_AND_ID, flags: u32, toid: *mut DEBUG_MODULE_AND_ID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolEntryBySymbolEntry(this, ::core::mem::transmute_copy(&fromid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(toid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceEntriesByOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByOffset(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntriesByLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByLine(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntriesByLineWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, line: u32, file: ::windows_core::PCWSTR, flags: u32, entries: *mut DEBUG_SYMBOL_SOURCE_ENTRY, entriescount: u32, entriesavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntriesByLineWide(this, ::core::mem::transmute_copy(&line), ::core::mem::transmute(&file), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&entries), ::core::mem::transmute_copy(&entriescount), ::core::mem::transmute_copy(&entriesavail)).into())
        }
        unsafe extern "system" fn GetSourceEntryString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryString(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSourceEntryStringWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, which: u32, buffer: ::windows_core::PWSTR, buffersize: u32, stringsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryStringWide(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&which), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&stringsize)).into())
        }
        unsafe extern "system" fn GetSourceEntryOffsetRegions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, regions: *mut DEBUG_OFFSET_REGION, regionscount: u32, regionsavail: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryOffsetRegions(this, ::core::mem::transmute_copy(&entry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&regions), ::core::mem::transmute_copy(&regionscount), ::core::mem::transmute_copy(&regionsavail)).into())
        }
        unsafe extern "system" fn GetSourceEntryBySourceEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fromentry: *const DEBUG_SYMBOL_SOURCE_ENTRY, flags: u32, toentry: *mut DEBUG_SYMBOL_SOURCE_ENTRY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceEntryBySourceEntry(this, ::core::mem::transmute_copy(&fromentry), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&toentry)).into())
        }
        unsafe extern "system" fn GetScopeEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: *mut u64, scopeframe: *mut DEBUG_STACK_FRAME_EX, scopecontext: *mut ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScopeEx(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn SetScopeEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, instructionoffset: u64, scopeframe: *const DEBUG_STACK_FRAME_EX, scopecontext: *const ::core::ffi::c_void, scopecontextsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeEx(this, ::core::mem::transmute_copy(&instructionoffset), ::core::mem::transmute_copy(&scopeframe), ::core::mem::transmute_copy(&scopecontext), ::core::mem::transmute_copy(&scopecontextsize)).into())
        }
        unsafe extern "system" fn GetNameByInlineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByInlineContext(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetNameByInlineContextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, namebuffer: ::windows_core::PWSTR, namebuffersize: u32, namesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNameByInlineContextWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&namebuffer), ::core::mem::transmute_copy(&namebuffersize), ::core::mem::transmute_copy(&namesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByInlineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByInlineContext(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn GetLineByInlineContextWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, inlinecontext: u32, line: *mut u32, filebuffer: ::windows_core::PWSTR, filebuffersize: u32, filesize: *mut u32, displacement: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineByInlineContextWide(this, ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext), ::core::mem::transmute_copy(&line), ::core::mem::transmute_copy(&filebuffer), ::core::mem::transmute_copy(&filebuffersize), ::core::mem::transmute_copy(&filesize), ::core::mem::transmute_copy(&displacement)).into())
        }
        unsafe extern "system" fn OutputSymbolByInlineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputcontrol: u32, flags: u32, offset: u64, inlinecontext: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OutputSymbolByInlineContext(this, ::core::mem::transmute_copy(&outputcontrol), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&offset), ::core::mem::transmute_copy(&inlinecontext)).into())
        }
        unsafe extern "system" fn GetCurrentScopeFrameIndexEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, index: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentScopeFrameIndexEx(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(index, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetScopeFrameByIndexEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSymbols5_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: u32, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScopeFrameByIndexEx(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&index)).into())
        }
        IDebugSymbols5_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSymbolOptions: GetSymbolOptions::<Identity, Impl, OFFSET>,
            AddSymbolOptions: AddSymbolOptions::<Identity, Impl, OFFSET>,
            RemoveSymbolOptions: RemoveSymbolOptions::<Identity, Impl, OFFSET>,
            SetSymbolOptions: SetSymbolOptions::<Identity, Impl, OFFSET>,
            GetNameByOffset: GetNameByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByName: GetOffsetByName::<Identity, Impl, OFFSET>,
            GetNearNameByOffset: GetNearNameByOffset::<Identity, Impl, OFFSET>,
            GetLineByOffset: GetLineByOffset::<Identity, Impl, OFFSET>,
            GetOffsetByLine: GetOffsetByLine::<Identity, Impl, OFFSET>,
            GetNumberModules: GetNumberModules::<Identity, Impl, OFFSET>,
            GetModuleByIndex: GetModuleByIndex::<Identity, Impl, OFFSET>,
            GetModuleByModuleName: GetModuleByModuleName::<Identity, Impl, OFFSET>,
            GetModuleByOffset: GetModuleByOffset::<Identity, Impl, OFFSET>,
            GetModuleNames: GetModuleNames::<Identity, Impl, OFFSET>,
            GetModuleParameters: GetModuleParameters::<Identity, Impl, OFFSET>,
            GetSymbolModule: GetSymbolModule::<Identity, Impl, OFFSET>,
            GetTypeName: GetTypeName::<Identity, Impl, OFFSET>,
            GetTypeId: GetTypeId::<Identity, Impl, OFFSET>,
            GetTypeSize: GetTypeSize::<Identity, Impl, OFFSET>,
            GetFieldOffset: GetFieldOffset::<Identity, Impl, OFFSET>,
            GetSymbolTypeId: GetSymbolTypeId::<Identity, Impl, OFFSET>,
            GetOffsetTypeId: GetOffsetTypeId::<Identity, Impl, OFFSET>,
            ReadTypedDataVirtual: ReadTypedDataVirtual::<Identity, Impl, OFFSET>,
            WriteTypedDataVirtual: WriteTypedDataVirtual::<Identity, Impl, OFFSET>,
            OutputTypedDataVirtual: OutputTypedDataVirtual::<Identity, Impl, OFFSET>,
            ReadTypedDataPhysical: ReadTypedDataPhysical::<Identity, Impl, OFFSET>,
            WriteTypedDataPhysical: WriteTypedDataPhysical::<Identity, Impl, OFFSET>,
            OutputTypedDataPhysical: OutputTypedDataPhysical::<Identity, Impl, OFFSET>,
            GetScope: GetScope::<Identity, Impl, OFFSET>,
            SetScope: SetScope::<Identity, Impl, OFFSET>,
            ResetScope: ResetScope::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup: GetScopeSymbolGroup::<Identity, Impl, OFFSET>,
            CreateSymbolGroup: CreateSymbolGroup::<Identity, Impl, OFFSET>,
            StartSymbolMatch: StartSymbolMatch::<Identity, Impl, OFFSET>,
            GetNextSymbolMatch: GetNextSymbolMatch::<Identity, Impl, OFFSET>,
            EndSymbolMatch: EndSymbolMatch::<Identity, Impl, OFFSET>,
            Reload: Reload::<Identity, Impl, OFFSET>,
            GetSymbolPath: GetSymbolPath::<Identity, Impl, OFFSET>,
            SetSymbolPath: SetSymbolPath::<Identity, Impl, OFFSET>,
            AppendSymbolPath: AppendSymbolPath::<Identity, Impl, OFFSET>,
            GetImagePath: GetImagePath::<Identity, Impl, OFFSET>,
            SetImagePath: SetImagePath::<Identity, Impl, OFFSET>,
            AppendImagePath: AppendImagePath::<Identity, Impl, OFFSET>,
            GetSourcePath: GetSourcePath::<Identity, Impl, OFFSET>,
            GetSourcePathElement: GetSourcePathElement::<Identity, Impl, OFFSET>,
            SetSourcePath: SetSourcePath::<Identity, Impl, OFFSET>,
            AppendSourcePath: AppendSourcePath::<Identity, Impl, OFFSET>,
            FindSourceFile: FindSourceFile::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsets: GetSourceFileLineOffsets::<Identity, Impl, OFFSET>,
            GetModuleVersionInformation: GetModuleVersionInformation::<Identity, Impl, OFFSET>,
            GetModuleNameString: GetModuleNameString::<Identity, Impl, OFFSET>,
            GetConstantName: GetConstantName::<Identity, Impl, OFFSET>,
            GetFieldName: GetFieldName::<Identity, Impl, OFFSET>,
            GetTypeOptions: GetTypeOptions::<Identity, Impl, OFFSET>,
            AddTypeOptions: AddTypeOptions::<Identity, Impl, OFFSET>,
            RemoveTypeOptions: RemoveTypeOptions::<Identity, Impl, OFFSET>,
            SetTypeOptions: SetTypeOptions::<Identity, Impl, OFFSET>,
            GetNameByOffsetWide: GetNameByOffsetWide::<Identity, Impl, OFFSET>,
            GetOffsetByNameWide: GetOffsetByNameWide::<Identity, Impl, OFFSET>,
            GetNearNameByOffsetWide: GetNearNameByOffsetWide::<Identity, Impl, OFFSET>,
            GetLineByOffsetWide: GetLineByOffsetWide::<Identity, Impl, OFFSET>,
            GetOffsetByLineWide: GetOffsetByLineWide::<Identity, Impl, OFFSET>,
            GetModuleByModuleNameWide: GetModuleByModuleNameWide::<Identity, Impl, OFFSET>,
            GetSymbolModuleWide: GetSymbolModuleWide::<Identity, Impl, OFFSET>,
            GetTypeNameWide: GetTypeNameWide::<Identity, Impl, OFFSET>,
            GetTypeIdWide: GetTypeIdWide::<Identity, Impl, OFFSET>,
            GetFieldOffsetWide: GetFieldOffsetWide::<Identity, Impl, OFFSET>,
            GetSymbolTypeIdWide: GetSymbolTypeIdWide::<Identity, Impl, OFFSET>,
            GetScopeSymbolGroup2: GetScopeSymbolGroup2::<Identity, Impl, OFFSET>,
            CreateSymbolGroup2: CreateSymbolGroup2::<Identity, Impl, OFFSET>,
            StartSymbolMatchWide: StartSymbolMatchWide::<Identity, Impl, OFFSET>,
            GetNextSymbolMatchWide: GetNextSymbolMatchWide::<Identity, Impl, OFFSET>,
            ReloadWide: ReloadWide::<Identity, Impl, OFFSET>,
            GetSymbolPathWide: GetSymbolPathWide::<Identity, Impl, OFFSET>,
            SetSymbolPathWide: SetSymbolPathWide::<Identity, Impl, OFFSET>,
            AppendSymbolPathWide: AppendSymbolPathWide::<Identity, Impl, OFFSET>,
            GetImagePathWide: GetImagePathWide::<Identity, Impl, OFFSET>,
            SetImagePathWide: SetImagePathWide::<Identity, Impl, OFFSET>,
            AppendImagePathWide: AppendImagePathWide::<Identity, Impl, OFFSET>,
            GetSourcePathWide: GetSourcePathWide::<Identity, Impl, OFFSET>,
            GetSourcePathElementWide: GetSourcePathElementWide::<Identity, Impl, OFFSET>,
            SetSourcePathWide: SetSourcePathWide::<Identity, Impl, OFFSET>,
            AppendSourcePathWide: AppendSourcePathWide::<Identity, Impl, OFFSET>,
            FindSourceFileWide: FindSourceFileWide::<Identity, Impl, OFFSET>,
            GetSourceFileLineOffsetsWide: GetSourceFileLineOffsetsWide::<Identity, Impl, OFFSET>,
            GetModuleVersionInformationWide: GetModuleVersionInformationWide::<Identity, Impl, OFFSET>,
            GetModuleNameStringWide: GetModuleNameStringWide::<Identity, Impl, OFFSET>,
            GetConstantNameWide: GetConstantNameWide::<Identity, Impl, OFFSET>,
            GetFieldNameWide: GetFieldNameWide::<Identity, Impl, OFFSET>,
            IsManagedModule: IsManagedModule::<Identity, Impl, OFFSET>,
            GetModuleByModuleName2: GetModuleByModuleName2::<Identity, Impl, OFFSET>,
            GetModuleByModuleName2Wide: GetModuleByModuleName2Wide::<Identity, Impl, OFFSET>,
            GetModuleByOffset2: GetModuleByOffset2::<Identity, Impl, OFFSET>,
            AddSyntheticModule: AddSyntheticModule::<Identity, Impl, OFFSET>,
            AddSyntheticModuleWide: AddSyntheticModuleWide::<Identity, Impl, OFFSET>,
            RemoveSyntheticModule: RemoveSyntheticModule::<Identity, Impl, OFFSET>,
            GetCurrentScopeFrameIndex: GetCurrentScopeFrameIndex::<Identity, Impl, OFFSET>,
            SetScopeFrameByIndex: SetScopeFrameByIndex::<Identity, Impl, OFFSET>,
            SetScopeFromJitDebugInfo: SetScopeFromJitDebugInfo::<Identity, Impl, OFFSET>,
            SetScopeFromStoredEvent: SetScopeFromStoredEvent::<Identity, Impl, OFFSET>,
            OutputSymbolByOffset: OutputSymbolByOffset::<Identity, Impl, OFFSET>,
            GetFunctionEntryByOffset: GetFunctionEntryByOffset::<Identity, Impl, OFFSET>,
            GetFieldTypeAndOffset: GetFieldTypeAndOffset::<Identity, Impl, OFFSET>,
            GetFieldTypeAndOffsetWide: GetFieldTypeAndOffsetWide::<Identity, Impl, OFFSET>,
            AddSyntheticSymbol: AddSyntheticSymbol::<Identity, Impl, OFFSET>,
            AddSyntheticSymbolWide: AddSyntheticSymbolWide::<Identity, Impl, OFFSET>,
            RemoveSyntheticSymbol: RemoveSyntheticSymbol::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByOffset: GetSymbolEntriesByOffset::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByName: GetSymbolEntriesByName::<Identity, Impl, OFFSET>,
            GetSymbolEntriesByNameWide: GetSymbolEntriesByNameWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryByToken: GetSymbolEntryByToken::<Identity, Impl, OFFSET>,
            GetSymbolEntryInformation: GetSymbolEntryInformation::<Identity, Impl, OFFSET>,
            GetSymbolEntryString: GetSymbolEntryString::<Identity, Impl, OFFSET>,
            GetSymbolEntryStringWide: GetSymbolEntryStringWide::<Identity, Impl, OFFSET>,
            GetSymbolEntryOffsetRegions: GetSymbolEntryOffsetRegions::<Identity, Impl, OFFSET>,
            GetSymbolEntryBySymbolEntry: GetSymbolEntryBySymbolEntry::<Identity, Impl, OFFSET>,
            GetSourceEntriesByOffset: GetSourceEntriesByOffset::<Identity, Impl, OFFSET>,
            GetSourceEntriesByLine: GetSourceEntriesByLine::<Identity, Impl, OFFSET>,
            GetSourceEntriesByLineWide: GetSourceEntriesByLineWide::<Identity, Impl, OFFSET>,
            GetSourceEntryString: GetSourceEntryString::<Identity, Impl, OFFSET>,
            GetSourceEntryStringWide: GetSourceEntryStringWide::<Identity, Impl, OFFSET>,
            GetSourceEntryOffsetRegions: GetSourceEntryOffsetRegions::<Identity, Impl, OFFSET>,
            GetSourceEntryBySourceEntry: GetSourceEntryBySourceEntry::<Identity, Impl, OFFSET>,
            GetScopeEx: GetScopeEx::<Identity, Impl, OFFSET>,
            SetScopeEx: SetScopeEx::<Identity, Impl, OFFSET>,
            GetNameByInlineContext: GetNameByInlineContext::<Identity, Impl, OFFSET>,
            GetNameByInlineContextWide: GetNameByInlineContextWide::<Identity, Impl, OFFSET>,
            GetLineByInlineContext: GetLineByInlineContext::<Identity, Impl, OFFSET>,
            GetLineByInlineContextWide: GetLineByInlineContextWide::<Identity, Impl, OFFSET>,
            OutputSymbolByInlineContext: OutputSymbolByInlineContext::<Identity, Impl, OFFSET>,
            GetCurrentScopeFrameIndexEx: GetCurrentScopeFrameIndexEx::<Identity, Impl, OFFSET>,
            SetScopeFrameByIndexEx: SetScopeFrameByIndexEx::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugSystemObjects_Impl: ::windows_core::BaseImpl {
    fn GetEventThread(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventProcess(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentThreadId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentProcessId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetNumberThreads(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTotalNumberThreads(this: &Self::This, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdByProcessor(this: &Self::This, processor: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadTeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByTeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetThreadIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetNumberProcesses(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessPeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByPeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessExecutableName(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugSystemObjects {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSystemObjects {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventThread(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventProcess(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentThreadId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentProcessId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberThreads(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTotalNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTotalNumberThreads(this, ::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into())
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByProcessor(this, ::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadTeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByTeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcesses(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessPeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByPeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentProcessExecutableName(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into())
        }
        IDebugSystemObjects_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEventThread: GetEventThread::<Identity, Impl, OFFSET>,
            GetEventProcess: GetEventProcess::<Identity, Impl, OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Identity, Impl, OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Identity, Impl, OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Identity, Impl, OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Identity, Impl, OFFSET>,
            GetNumberThreads: GetNumberThreads::<Identity, Impl, OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Identity, Impl, OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Identity, Impl, OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Identity, Impl, OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Identity, Impl, OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Identity, Impl, OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Identity, Impl, OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Identity, Impl, OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Identity, Impl, OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Identity, Impl, OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Identity, Impl, OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Identity, Impl, OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Identity, Impl, OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Identity, Impl, OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Identity, Impl, OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Identity, Impl, OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Identity, Impl, OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Identity, Impl, OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugSystemObjects2_Impl: ::windows_core::BaseImpl {
    fn GetEventThread(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventProcess(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentThreadId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentProcessId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetNumberThreads(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTotalNumberThreads(this: &Self::This, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdByProcessor(this: &Self::This, processor: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadTeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByTeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetThreadIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetNumberProcesses(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessPeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByPeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessExecutableName(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetImplicitThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetImplicitThreadDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetImplicitProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetImplicitProcessDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugSystemObjects2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSystemObjects2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventThread(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventProcess(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentThreadId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentProcessId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberThreads(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTotalNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTotalNumberThreads(this, ::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into())
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByProcessor(this, ::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadTeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByTeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcesses(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessPeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByPeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentProcessExecutableName(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into())
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImplicitThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImplicitThreadDataOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImplicitProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImplicitProcessDataOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        IDebugSystemObjects2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEventThread: GetEventThread::<Identity, Impl, OFFSET>,
            GetEventProcess: GetEventProcess::<Identity, Impl, OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Identity, Impl, OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Identity, Impl, OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Identity, Impl, OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Identity, Impl, OFFSET>,
            GetNumberThreads: GetNumberThreads::<Identity, Impl, OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Identity, Impl, OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Identity, Impl, OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Identity, Impl, OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Identity, Impl, OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Identity, Impl, OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Identity, Impl, OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Identity, Impl, OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Identity, Impl, OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Identity, Impl, OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Identity, Impl, OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Identity, Impl, OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Identity, Impl, OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Identity, Impl, OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Identity, Impl, OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Identity, Impl, OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Identity, Impl, OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Identity, Impl, OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Identity, Impl, OFFSET>,
            GetCurrentProcessUpTime: GetCurrentProcessUpTime::<Identity, Impl, OFFSET>,
            GetImplicitThreadDataOffset: GetImplicitThreadDataOffset::<Identity, Impl, OFFSET>,
            SetImplicitThreadDataOffset: SetImplicitThreadDataOffset::<Identity, Impl, OFFSET>,
            GetImplicitProcessDataOffset: GetImplicitProcessDataOffset::<Identity, Impl, OFFSET>,
            SetImplicitProcessDataOffset: SetImplicitProcessDataOffset::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugSystemObjects3_Impl: ::windows_core::BaseImpl {
    fn GetEventThread(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventProcess(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentThreadId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentProcessId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetNumberThreads(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTotalNumberThreads(this: &Self::This, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdByProcessor(this: &Self::This, processor: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadTeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByTeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetThreadIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetNumberProcesses(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessPeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByPeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessExecutableName(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetImplicitThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetImplicitThreadDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetImplicitProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetImplicitProcessDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetEventSystem(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentSystemId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetNumberSystems(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32) -> ::windows_core::Result<()>;
    fn GetTotalNumberThreadsAndProcesses(this: &Self::This, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentSystemServer(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetSystemByServer(this: &Self::This, server: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemServerName(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugSystemObjects3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSystemObjects3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventThread(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventProcess(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentThreadId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentProcessId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberThreads(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTotalNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTotalNumberThreads(this, ::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into())
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByProcessor(this, ::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadTeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByTeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcesses(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessPeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByPeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentProcessExecutableName(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into())
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImplicitThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImplicitThreadDataOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImplicitProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImplicitProcessDataOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetEventSystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventSystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentSystemId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetNumberSystems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSystems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids)).into())
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTotalNumberThreadsAndProcesses(this, ::core::mem::transmute_copy(&totalthreads), ::core::mem::transmute_copy(&totalprocesses), ::core::mem::transmute_copy(&largestprocessthreads), ::core::mem::transmute_copy(&largestsystemthreads), ::core::mem::transmute_copy(&largestsystemprocesses)).into())
        }
        unsafe extern "system" fn GetCurrentSystemServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemByServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSystemByServer(this, ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentSystemServerName(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        IDebugSystemObjects3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEventThread: GetEventThread::<Identity, Impl, OFFSET>,
            GetEventProcess: GetEventProcess::<Identity, Impl, OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Identity, Impl, OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Identity, Impl, OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Identity, Impl, OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Identity, Impl, OFFSET>,
            GetNumberThreads: GetNumberThreads::<Identity, Impl, OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Identity, Impl, OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Identity, Impl, OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Identity, Impl, OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Identity, Impl, OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Identity, Impl, OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Identity, Impl, OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Identity, Impl, OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Identity, Impl, OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Identity, Impl, OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Identity, Impl, OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Identity, Impl, OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Identity, Impl, OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Identity, Impl, OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Identity, Impl, OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Identity, Impl, OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Identity, Impl, OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Identity, Impl, OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Identity, Impl, OFFSET>,
            GetCurrentProcessUpTime: GetCurrentProcessUpTime::<Identity, Impl, OFFSET>,
            GetImplicitThreadDataOffset: GetImplicitThreadDataOffset::<Identity, Impl, OFFSET>,
            SetImplicitThreadDataOffset: SetImplicitThreadDataOffset::<Identity, Impl, OFFSET>,
            GetImplicitProcessDataOffset: GetImplicitProcessDataOffset::<Identity, Impl, OFFSET>,
            SetImplicitProcessDataOffset: SetImplicitProcessDataOffset::<Identity, Impl, OFFSET>,
            GetEventSystem: GetEventSystem::<Identity, Impl, OFFSET>,
            GetCurrentSystemId: GetCurrentSystemId::<Identity, Impl, OFFSET>,
            SetCurrentSystemId: SetCurrentSystemId::<Identity, Impl, OFFSET>,
            GetNumberSystems: GetNumberSystems::<Identity, Impl, OFFSET>,
            GetSystemIdsByIndex: GetSystemIdsByIndex::<Identity, Impl, OFFSET>,
            GetTotalNumberThreadsAndProcesses: GetTotalNumberThreadsAndProcesses::<Identity, Impl, OFFSET>,
            GetCurrentSystemServer: GetCurrentSystemServer::<Identity, Impl, OFFSET>,
            GetSystemByServer: GetSystemByServer::<Identity, Impl, OFFSET>,
            GetCurrentSystemServerName: GetCurrentSystemServerName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDebugSystemObjects4_Impl: ::windows_core::BaseImpl {
    fn GetEventThread(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEventProcess(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentThreadId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentProcessId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetNumberThreads(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTotalNumberThreads(this: &Self::This, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetThreadIdByProcessor(this: &Self::This, processor: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadTeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByTeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetThreadIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentThreadHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetThreadIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetNumberProcesses(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessPeb(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByPeb(this: &Self::This, offset: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessIdBySystemId(this: &Self::This, sysid: u32) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessHandle(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetProcessIdByHandle(this: &Self::This, handle: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentProcessExecutableName(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessUpTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetImplicitThreadDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetImplicitThreadDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetImplicitProcessDataOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetImplicitProcessDataOffset(this: &Self::This, offset: u64) -> ::windows_core::Result<()>;
    fn GetEventSystem(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentSystemId(this: &Self::This, id: u32) -> ::windows_core::Result<()>;
    fn GetNumberSystems(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSystemIdsByIndex(this: &Self::This, start: u32, count: u32, ids: *mut u32) -> ::windows_core::Result<()>;
    fn GetTotalNumberThreadsAndProcesses(this: &Self::This, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentSystemServer(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetSystemByServer(this: &Self::This, server: u64) -> ::windows_core::Result<u32>;
    fn GetCurrentSystemServerName(this: &Self::This, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentProcessExecutableNameWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCurrentSystemServerNameWide(this: &Self::This, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDebugSystemObjects4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDebugSystemObjects4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventThread<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventThread(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEventProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventProcess(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentThreadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentThreadId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentProcessId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberThreads(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTotalNumberThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, total: *mut u32, largestprocess: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTotalNumberThreads(this, ::core::mem::transmute_copy(&total), ::core::mem::transmute_copy(&largestprocess)).into())
        }
        unsafe extern "system" fn GetThreadIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetThreadIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetThreadIdByProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processor: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByProcessor(this, ::core::mem::transmute_copy(&processor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadTeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByTeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByTeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentThreadHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentThreadHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetThreadIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetThreadIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberProcesses(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32, sysids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcessIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids), ::core::mem::transmute_copy(&sysids)).into())
        }
        unsafe extern "system" fn GetCurrentProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByDataOffset(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessPeb(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByPeb<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByPeb(this, ::core::mem::transmute_copy(&offset)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sysid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdBySystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sysid: u32, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdBySystemId(this, ::core::mem::transmute_copy(&sysid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(handle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessIdByHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessIdByHandle(this, ::core::mem::transmute_copy(&handle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentProcessExecutableName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentProcessExecutableName(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into())
        }
        unsafe extern "system" fn GetCurrentProcessUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uptime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentProcessUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(uptime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetImplicitThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImplicitThreadDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetImplicitThreadDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImplicitThreadDataOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetImplicitProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetImplicitProcessDataOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetImplicitProcessDataOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetImplicitProcessDataOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetEventSystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventSystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentSystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentSystemId(this, ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn GetNumberSystems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, number: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberSystems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(number, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemIdsByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: u32, count: u32, ids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSystemIdsByIndex(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&ids)).into())
        }
        unsafe extern "system" fn GetTotalNumberThreadsAndProcesses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, totalthreads: *mut u32, totalprocesses: *mut u32, largestprocessthreads: *mut u32, largestsystemthreads: *mut u32, largestsystemprocesses: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTotalNumberThreadsAndProcesses(this, ::core::mem::transmute_copy(&totalthreads), ::core::mem::transmute_copy(&totalprocesses), ::core::mem::transmute_copy(&largestprocessthreads), ::core::mem::transmute_copy(&largestsystemthreads), ::core::mem::transmute_copy(&largestsystemprocesses)).into())
        }
        unsafe extern "system" fn GetCurrentSystemServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSystemServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(server, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemByServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, server: u64, id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSystemByServer(this, ::core::mem::transmute_copy(&server)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentSystemServerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentSystemServerName(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        unsafe extern "system" fn GetCurrentProcessExecutableNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, exesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentProcessExecutableNameWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&exesize)).into())
        }
        unsafe extern "system" fn GetCurrentSystemServerNameWide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDebugSystemObjects4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: ::windows_core::PWSTR, buffersize: u32, namesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentSystemServerNameWide(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&buffersize), ::core::mem::transmute_copy(&namesize)).into())
        }
        IDebugSystemObjects4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEventThread: GetEventThread::<Identity, Impl, OFFSET>,
            GetEventProcess: GetEventProcess::<Identity, Impl, OFFSET>,
            GetCurrentThreadId: GetCurrentThreadId::<Identity, Impl, OFFSET>,
            SetCurrentThreadId: SetCurrentThreadId::<Identity, Impl, OFFSET>,
            GetCurrentProcessId: GetCurrentProcessId::<Identity, Impl, OFFSET>,
            SetCurrentProcessId: SetCurrentProcessId::<Identity, Impl, OFFSET>,
            GetNumberThreads: GetNumberThreads::<Identity, Impl, OFFSET>,
            GetTotalNumberThreads: GetTotalNumberThreads::<Identity, Impl, OFFSET>,
            GetThreadIdsByIndex: GetThreadIdsByIndex::<Identity, Impl, OFFSET>,
            GetThreadIdByProcessor: GetThreadIdByProcessor::<Identity, Impl, OFFSET>,
            GetCurrentThreadDataOffset: GetCurrentThreadDataOffset::<Identity, Impl, OFFSET>,
            GetThreadIdByDataOffset: GetThreadIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentThreadTeb: GetCurrentThreadTeb::<Identity, Impl, OFFSET>,
            GetThreadIdByTeb: GetThreadIdByTeb::<Identity, Impl, OFFSET>,
            GetCurrentThreadSystemId: GetCurrentThreadSystemId::<Identity, Impl, OFFSET>,
            GetThreadIdBySystemId: GetThreadIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentThreadHandle: GetCurrentThreadHandle::<Identity, Impl, OFFSET>,
            GetThreadIdByHandle: GetThreadIdByHandle::<Identity, Impl, OFFSET>,
            GetNumberProcesses: GetNumberProcesses::<Identity, Impl, OFFSET>,
            GetProcessIdsByIndex: GetProcessIdsByIndex::<Identity, Impl, OFFSET>,
            GetCurrentProcessDataOffset: GetCurrentProcessDataOffset::<Identity, Impl, OFFSET>,
            GetProcessIdByDataOffset: GetProcessIdByDataOffset::<Identity, Impl, OFFSET>,
            GetCurrentProcessPeb: GetCurrentProcessPeb::<Identity, Impl, OFFSET>,
            GetProcessIdByPeb: GetProcessIdByPeb::<Identity, Impl, OFFSET>,
            GetCurrentProcessSystemId: GetCurrentProcessSystemId::<Identity, Impl, OFFSET>,
            GetProcessIdBySystemId: GetProcessIdBySystemId::<Identity, Impl, OFFSET>,
            GetCurrentProcessHandle: GetCurrentProcessHandle::<Identity, Impl, OFFSET>,
            GetProcessIdByHandle: GetProcessIdByHandle::<Identity, Impl, OFFSET>,
            GetCurrentProcessExecutableName: GetCurrentProcessExecutableName::<Identity, Impl, OFFSET>,
            GetCurrentProcessUpTime: GetCurrentProcessUpTime::<Identity, Impl, OFFSET>,
            GetImplicitThreadDataOffset: GetImplicitThreadDataOffset::<Identity, Impl, OFFSET>,
            SetImplicitThreadDataOffset: SetImplicitThreadDataOffset::<Identity, Impl, OFFSET>,
            GetImplicitProcessDataOffset: GetImplicitProcessDataOffset::<Identity, Impl, OFFSET>,
            SetImplicitProcessDataOffset: SetImplicitProcessDataOffset::<Identity, Impl, OFFSET>,
            GetEventSystem: GetEventSystem::<Identity, Impl, OFFSET>,
            GetCurrentSystemId: GetCurrentSystemId::<Identity, Impl, OFFSET>,
            SetCurrentSystemId: SetCurrentSystemId::<Identity, Impl, OFFSET>,
            GetNumberSystems: GetNumberSystems::<Identity, Impl, OFFSET>,
            GetSystemIdsByIndex: GetSystemIdsByIndex::<Identity, Impl, OFFSET>,
            GetTotalNumberThreadsAndProcesses: GetTotalNumberThreadsAndProcesses::<Identity, Impl, OFFSET>,
            GetCurrentSystemServer: GetCurrentSystemServer::<Identity, Impl, OFFSET>,
            GetSystemByServer: GetSystemByServer::<Identity, Impl, OFFSET>,
            GetCurrentSystemServerName: GetCurrentSystemServerName::<Identity, Impl, OFFSET>,
            GetCurrentProcessExecutableNameWide: GetCurrentProcessExecutableNameWide::<Identity, Impl, OFFSET>,
            GetCurrentSystemServerNameWide: GetCurrentSystemServerNameWide::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDynamicConceptProviderConcept_Impl: ::windows_core::BaseImpl {
    fn GetConcept(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, conceptid: *const ::windows_core::GUID, conceptinterface: *mut ::core::option::Option<::windows_core::IUnknown>, conceptmetadata: *mut ::core::option::Option<IKeyStore>, hasconcept: *mut bool) -> ::windows_core::Result<()>;
    fn SetConcept(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, conceptid: *const ::windows_core::GUID, conceptinterface: ::core::option::Option<&::windows_core::IUnknown>, conceptmetadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<()>;
    fn NotifyParent(this: &Self::This, parentmodel: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn NotifyParentChange(this: &Self::This, parentmodel: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn NotifyDestruct(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDynamicConceptProviderConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicConceptProviderConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDynamicConceptProviderConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetConcept<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicConceptProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, conceptid: *const ::windows_core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut *mut ::core::ffi::c_void, hasconcept: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConcept(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute_copy(&conceptid), ::core::mem::transmute_copy(&conceptinterface), ::core::mem::transmute_copy(&conceptmetadata), ::core::mem::transmute_copy(&hasconcept)).into())
        }
        unsafe extern "system" fn SetConcept<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicConceptProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, conceptid: *const ::windows_core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConcept(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute_copy(&conceptid), ::windows_core::from_raw_borrowed(&conceptinterface), ::windows_core::from_raw_borrowed(&conceptmetadata)).into())
        }
        unsafe extern "system" fn NotifyParent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicConceptProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parentmodel: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyParent(this, ::windows_core::from_raw_borrowed(&parentmodel)).into())
        }
        unsafe extern "system" fn NotifyParentChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicConceptProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, parentmodel: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyParentChange(this, ::windows_core::from_raw_borrowed(&parentmodel)).into())
        }
        unsafe extern "system" fn NotifyDestruct<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicConceptProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyDestruct(this).into())
        }
        IDynamicConceptProviderConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetConcept: GetConcept::<Identity, Impl, OFFSET>,
            SetConcept: SetConcept::<Identity, Impl, OFFSET>,
            NotifyParent: NotifyParent::<Identity, Impl, OFFSET>,
            NotifyParentChange: NotifyParentChange::<Identity, Impl, OFFSET>,
            NotifyDestruct: NotifyDestruct::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDynamicKeyProviderConcept_Impl: ::windows_core::BaseImpl {
    fn GetKey(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, key: &::windows_core::PCWSTR, keyvalue: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>, haskey: *mut bool) -> ::windows_core::Result<()>;
    fn SetKey(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, key: &::windows_core::PCWSTR, keyvalue: ::core::option::Option<&IModelObject>, metadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<()>;
    fn EnumerateKeys(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IKeyEnumerator>;
}
impl ::windows_core::Iids for IDynamicKeyProviderConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicKeyProviderConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDynamicKeyProviderConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicKeyProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, keyvalue: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void, haskey: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKey(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute(&key), ::core::mem::transmute_copy(&keyvalue), ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&haskey)).into())
        }
        unsafe extern "system" fn SetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicKeyProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, keyvalue: *mut ::core::ffi::c_void, metadata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKey(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&keyvalue), ::windows_core::from_raw_borrowed(&metadata)).into())
        }
        unsafe extern "system" fn EnumerateKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDynamicKeyProviderConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, ppenumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateKeys(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDynamicKeyProviderConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetKey: GetKey::<Identity, Impl, OFFSET>,
            SetKey: SetKey::<Identity, Impl, OFFSET>,
            EnumerateKeys: EnumerateKeys::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEquatableConcept_Impl: ::windows_core::BaseImpl {
    fn AreObjectsEqual(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, otherobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<bool>;
}
impl ::windows_core::Iids for IEquatableConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEquatableConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEquatableConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AreObjectsEqual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEquatableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, otherobject: *mut ::core::ffi::c_void, isequal: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AreObjectsEqual(this, ::windows_core::from_raw_borrowed(&contextobject), ::windows_core::from_raw_borrowed(&otherobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(isequal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEquatableConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AreObjectsEqual: AreObjectsEqual::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IHostDataModelAccess_Impl: ::windows_core::BaseImpl {
    fn GetDataModel(this: &Self::This, manager: *mut ::core::option::Option<IDataModelManager>, host: *mut ::core::option::Option<IDebugHost>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IHostDataModelAccess {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHostDataModelAccess_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IHostDataModelAccess {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDataModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IHostDataModelAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, manager: *mut *mut ::core::ffi::c_void, host: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDataModel(this, ::core::mem::transmute_copy(&manager), ::core::mem::transmute_copy(&host)).into())
        }
        IHostDataModelAccess_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetDataModel: GetDataModel::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIndexableConcept_Impl: ::windows_core::BaseImpl {
    fn GetDimensionality(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<u64>;
    fn GetAt(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, indexercount: u64, indexers: *const ::core::option::Option<IModelObject>, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn SetAt(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, indexercount: u64, indexers: *const ::core::option::Option<IModelObject>, value: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIndexableConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIndexableConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIndexableConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDimensionality<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIndexableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, dimensionality: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDimensionality(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dimensionality, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIndexableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, indexercount: u64, indexers: *const *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAt(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute_copy(&indexercount), ::core::mem::transmute_copy(&indexers), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn SetAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIndexableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, indexercount: u64, indexers: *const *mut ::core::ffi::c_void, value: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAt(this, ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute_copy(&indexercount), ::core::mem::transmute_copy(&indexers), ::windows_core::from_raw_borrowed(&value)).into())
        }
        IIndexableConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDimensionality: GetDimensionality::<Identity, Impl, OFFSET>,
            GetAt: GetAt::<Identity, Impl, OFFSET>,
            SetAt: SetAt::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIterableConcept_Impl: ::windows_core::BaseImpl {
    fn GetDefaultIndexDimensionality(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<u64>;
    fn GetIterator(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IModelIterator>;
}
impl ::windows_core::Iids for IIterableConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIterableConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIterableConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDefaultIndexDimensionality<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIterableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, dimensionality: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultIndexDimensionality(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dimensionality, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIterator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIterableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, iterator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIterator(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(iterator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIterableConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDefaultIndexDimensionality: GetDefaultIndexDimensionality::<Identity, Impl, OFFSET>,
            GetIterator: GetIterator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IKeyEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This, key: *mut ::windows_core::BSTR, value: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IKeyEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IKeyEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, value: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&metadata)).into())
        }
        IKeyEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IKeyStore_Impl: ::windows_core::BaseImpl {
    fn GetKey(this: &Self::This, key: &::windows_core::PCWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn SetKey(this: &Self::This, key: &::windows_core::PCWSTR, object: ::core::option::Option<&IModelObject>, metadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<()>;
    fn GetKeyValue(this: &Self::This, key: &::windows_core::PCWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn SetKeyValue(this: &Self::This, key: &::windows_core::PCWSTR, object: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn ClearKeys(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IKeyStore {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyStore_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IKeyStore {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKey(this, ::core::mem::transmute(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn SetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut ::core::ffi::c_void, metadata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKey(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&object), ::windows_core::from_raw_borrowed(&metadata)).into())
        }
        unsafe extern "system" fn GetKeyValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyValue(this, ::core::mem::transmute(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn SetKeyValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyValue(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&object)).into())
        }
        unsafe extern "system" fn ClearKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IKeyStore_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearKeys(this).into())
        }
        IKeyStore_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetKey: GetKey::<Identity, Impl, OFFSET>,
            SetKey: SetKey::<Identity, Impl, OFFSET>,
            GetKeyValue: GetKeyValue::<Identity, Impl, OFFSET>,
            SetKeyValue: SetKeyValue::<Identity, Impl, OFFSET>,
            ClearKeys: ClearKeys::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IModelIterator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This, object: *mut ::core::option::Option<IModelObject>, dimensions: u64, indexers: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IModelIterator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelIterator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModelIterator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelIterator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelIterator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void, dimensions: u64, indexers: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&dimensions), ::core::mem::transmute_copy(&indexers), ::core::mem::transmute_copy(&metadata)).into())
        }
        IModelIterator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IModelKeyReference_Impl: ::windows_core::BaseImpl {
    fn GetKeyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetOriginalObject(this: &Self::This) -> ::windows_core::Result<IModelObject>;
    fn GetContextObject(this: &Self::This) -> ::windows_core::Result<IModelObject>;
    fn GetKey(this: &Self::This, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn GetKeyValue(this: &Self::This, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn SetKey(this: &Self::This, object: ::core::option::Option<&IModelObject>, metadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<()>;
    fn SetKeyValue(this: &Self::This, object: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IModelKeyReference {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModelKeyReference {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetKeyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keyname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(keyname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, originalobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(originalobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContextObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, containingobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContextObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(containingobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKey(this, ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn GetKeyValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyValue(this, ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn SetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::core::ffi::c_void, metadata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKey(this, ::windows_core::from_raw_borrowed(&object), ::windows_core::from_raw_borrowed(&metadata)).into())
        }
        unsafe extern "system" fn SetKeyValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyValue(this, ::windows_core::from_raw_borrowed(&object)).into())
        }
        IModelKeyReference_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetKeyName: GetKeyName::<Identity, Impl, OFFSET>,
            GetOriginalObject: GetOriginalObject::<Identity, Impl, OFFSET>,
            GetContextObject: GetContextObject::<Identity, Impl, OFFSET>,
            GetKey: GetKey::<Identity, Impl, OFFSET>,
            GetKeyValue: GetKeyValue::<Identity, Impl, OFFSET>,
            SetKey: SetKey::<Identity, Impl, OFFSET>,
            SetKeyValue: SetKeyValue::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IModelKeyReference2_Impl: ::windows_core::BaseImpl + IModelKeyReference_Impl {
    fn OverrideContextObject(this: &Self::This, newcontextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IModelKeyReference2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IModelKeyReference);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModelKeyReference2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OverrideContextObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelKeyReference2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcontextobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OverrideContextObject(this, ::windows_core::from_raw_borrowed(&newcontextobject)).into())
        }
        IModelKeyReference2_Vtbl {
            base__: <IModelKeyReference as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OverrideContextObject: OverrideContextObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IModelMethod_Impl: ::windows_core::BaseImpl {
    fn Call(this: &Self::This, pcontextobject: ::core::option::Option<&IModelObject>, argcount: u64, pparguments: *const ::core::option::Option<IModelObject>, ppresult: *mut ::core::option::Option<IModelObject>, ppmetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IModelMethod {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelMethod_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModelMethod {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Call<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelMethod_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcontextobject: *mut ::core::ffi::c_void, argcount: u64, pparguments: *const *mut ::core::ffi::c_void, ppresult: *mut *mut ::core::ffi::c_void, ppmetadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Call(this, ::windows_core::from_raw_borrowed(&pcontextobject), ::core::mem::transmute_copy(&argcount), ::core::mem::transmute_copy(&pparguments), ::core::mem::transmute_copy(&ppresult), ::core::mem::transmute_copy(&ppmetadata)).into())
        }
        IModelMethod_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Call: Call::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IModelObject_Impl: ::windows_core::BaseImpl {
    fn GetContext(this: &Self::This) -> ::windows_core::Result<IDebugHostContext>;
    fn GetKind(this: &Self::This) -> ::windows_core::Result<ModelObjectKind>;
    fn GetIntrinsicValue(this: &Self::This) -> ::windows_core::Result<super::super::super::Variant::VARIANT>;
    fn GetIntrinsicValueAs(this: &Self::This, vt: super::super::super::Variant::VARENUM) -> ::windows_core::Result<super::super::super::Variant::VARIANT>;
    fn GetKeyValue(this: &Self::This, key: &::windows_core::PCWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn SetKeyValue(this: &Self::This, key: &::windows_core::PCWSTR, object: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn EnumerateKeyValues(this: &Self::This) -> ::windows_core::Result<IKeyEnumerator>;
    fn GetRawValue(this: &Self::This, kind: SymbolKind, name: &::windows_core::PCWSTR, searchflags: u32) -> ::windows_core::Result<IModelObject>;
    fn EnumerateRawValues(this: &Self::This, kind: SymbolKind, searchflags: u32) -> ::windows_core::Result<IRawEnumerator>;
    fn Dereference(this: &Self::This) -> ::windows_core::Result<IModelObject>;
    fn TryCastToRuntimeType(this: &Self::This) -> ::windows_core::Result<IModelObject>;
    fn GetConcept(this: &Self::This, conceptid: *const ::windows_core::GUID, conceptinterface: *mut ::core::option::Option<::windows_core::IUnknown>, conceptmetadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn GetLocation(this: &Self::This) -> ::windows_core::Result<Location>;
    fn GetTypeInfo(this: &Self::This) -> ::windows_core::Result<IDebugHostType>;
    fn GetTargetInfo(this: &Self::This, location: *mut Location, r#type: *mut ::core::option::Option<IDebugHostType>) -> ::windows_core::Result<()>;
    fn GetNumberOfParentModels(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetParentModel(this: &Self::This, i: u64, model: *mut ::core::option::Option<IModelObject>, contextobject: *mut ::core::option::Option<IModelObject>) -> ::windows_core::Result<()>;
    fn AddParentModel(this: &Self::This, model: ::core::option::Option<&IModelObject>, contextobject: ::core::option::Option<&IModelObject>, r#override: u8) -> ::windows_core::Result<()>;
    fn RemoveParentModel(this: &Self::This, model: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
    fn GetKey(this: &Self::This, key: &::windows_core::PCWSTR, object: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn GetKeyReference(this: &Self::This, key: &::windows_core::PCWSTR, objectreference: *mut ::core::option::Option<IModelObject>, metadata: *mut ::core::option::Option<IKeyStore>) -> ::windows_core::Result<()>;
    fn SetKey(this: &Self::This, key: &::windows_core::PCWSTR, object: ::core::option::Option<&IModelObject>, metadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<()>;
    fn ClearKeys(this: &Self::This) -> ::windows_core::Result<()>;
    fn EnumerateKeys(this: &Self::This) -> ::windows_core::Result<IKeyEnumerator>;
    fn EnumerateKeyReferences(this: &Self::This) -> ::windows_core::Result<IKeyEnumerator>;
    fn SetConcept(this: &Self::This, conceptid: *const ::windows_core::GUID, conceptinterface: ::core::option::Option<&::windows_core::IUnknown>, conceptmetadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<()>;
    fn ClearConcepts(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetRawReference(this: &Self::This, kind: SymbolKind, name: &::windows_core::PCWSTR, searchflags: u32) -> ::windows_core::Result<IModelObject>;
    fn EnumerateRawReferences(this: &Self::This, kind: SymbolKind, searchflags: u32) -> ::windows_core::Result<IRawEnumerator>;
    fn SetContextForDataModel(this: &Self::This, datamodelobject: ::core::option::Option<&IModelObject>, context: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetContextForDataModel(this: &Self::This, datamodelobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Compare(this: &Self::This, other: ::core::option::Option<&IModelObject>, ppresult: *mut ::core::option::Option<IModelObject>) -> ::windows_core::Result<()>;
    fn IsEqualTo(this: &Self::This, other: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<bool>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IModelObject {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModelObject {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(context, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: *mut ModelObjectKind) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKind(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(kind, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIntrinsicValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, intrinsicdata: *mut super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIntrinsicValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(intrinsicdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIntrinsicValueAs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vt: super::super::super::Variant::VARENUM, intrinsicdata: *mut super::super::super::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIntrinsicValueAs(this, ::core::mem::transmute_copy(&vt)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(intrinsicdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKeyValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyValue(this, ::core::mem::transmute(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn SetKeyValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyValue(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&object)).into())
        }
        unsafe extern "system" fn EnumerateKeyValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateKeyValues(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRawValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: ::windows_core::PCWSTR, searchflags: u32, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRawValue(this, ::core::mem::transmute_copy(&kind), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateRawValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateRawValues(this, ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Dereference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Dereference(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TryCastToRuntimeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, runtimetypedobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TryCastToRuntimeType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(runtimetypedobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConcept<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows_core::GUID, conceptinterface: *mut *mut ::core::ffi::c_void, conceptmetadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConcept(this, ::core::mem::transmute_copy(&conceptid), ::core::mem::transmute_copy(&conceptinterface), ::core::mem::transmute_copy(&conceptmetadata)).into())
        }
        unsafe extern "system" fn GetLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(location, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTypeInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTypeInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r#type, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTargetInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, location: *mut Location, r#type: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTargetInfo(this, ::core::mem::transmute_copy(&location), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetNumberOfParentModels<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nummodels: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfParentModels(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(nummodels, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetParentModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, i: u64, model: *mut *mut ::core::ffi::c_void, contextobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParentModel(this, ::core::mem::transmute_copy(&i), ::core::mem::transmute_copy(&model), ::core::mem::transmute_copy(&contextobject)).into())
        }
        unsafe extern "system" fn AddParentModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, model: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, r#override: u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddParentModel(this, ::windows_core::from_raw_borrowed(&model), ::windows_core::from_raw_borrowed(&contextobject), ::core::mem::transmute_copy(&r#override)).into())
        }
        unsafe extern "system" fn RemoveParentModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, model: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveParentModel(this, ::windows_core::from_raw_borrowed(&model)).into())
        }
        unsafe extern "system" fn GetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKey(this, ::core::mem::transmute(&key), ::core::mem::transmute_copy(&object), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn GetKeyReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, objectreference: *mut *mut ::core::ffi::c_void, metadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyReference(this, ::core::mem::transmute(&key), ::core::mem::transmute_copy(&objectreference), ::core::mem::transmute_copy(&metadata)).into())
        }
        unsafe extern "system" fn SetKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, object: *mut ::core::ffi::c_void, metadata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKey(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&object), ::windows_core::from_raw_borrowed(&metadata)).into())
        }
        unsafe extern "system" fn ClearKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearKeys(this).into())
        }
        unsafe extern "system" fn EnumerateKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateKeys(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateKeyReferences<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateKeyReferences(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetConcept<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, conceptid: *const ::windows_core::GUID, conceptinterface: *mut ::core::ffi::c_void, conceptmetadata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConcept(this, ::core::mem::transmute_copy(&conceptid), ::windows_core::from_raw_borrowed(&conceptinterface), ::windows_core::from_raw_borrowed(&conceptmetadata)).into())
        }
        unsafe extern "system" fn ClearConcepts<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearConcepts(this).into())
        }
        unsafe extern "system" fn GetRawReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, name: ::windows_core::PCWSTR, searchflags: u32, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRawReference(this, ::core::mem::transmute_copy(&kind), ::core::mem::transmute(&name), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateRawReferences<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kind: SymbolKind, searchflags: u32, enumerator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateRawReferences(this, ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&searchflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(enumerator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContextForDataModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodelobject: *mut ::core::ffi::c_void, context: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContextForDataModel(this, ::windows_core::from_raw_borrowed(&datamodelobject), ::windows_core::from_raw_borrowed(&context)).into())
        }
        unsafe extern "system" fn GetContextForDataModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datamodelobject: *mut ::core::ffi::c_void, context: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContextForDataModel(this, ::windows_core::from_raw_borrowed(&datamodelobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(context, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Compare<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, other: *mut ::core::ffi::c_void, ppresult: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Compare(this, ::windows_core::from_raw_borrowed(&other), ::core::mem::transmute_copy(&ppresult)).into())
        }
        unsafe extern "system" fn IsEqualTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, other: *mut ::core::ffi::c_void, equal: *mut bool) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsEqualTo(this, ::windows_core::from_raw_borrowed(&other)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(equal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IModelObject_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetContext: GetContext::<Identity, Impl, OFFSET>,
            GetKind: GetKind::<Identity, Impl, OFFSET>,
            GetIntrinsicValue: GetIntrinsicValue::<Identity, Impl, OFFSET>,
            GetIntrinsicValueAs: GetIntrinsicValueAs::<Identity, Impl, OFFSET>,
            GetKeyValue: GetKeyValue::<Identity, Impl, OFFSET>,
            SetKeyValue: SetKeyValue::<Identity, Impl, OFFSET>,
            EnumerateKeyValues: EnumerateKeyValues::<Identity, Impl, OFFSET>,
            GetRawValue: GetRawValue::<Identity, Impl, OFFSET>,
            EnumerateRawValues: EnumerateRawValues::<Identity, Impl, OFFSET>,
            Dereference: Dereference::<Identity, Impl, OFFSET>,
            TryCastToRuntimeType: TryCastToRuntimeType::<Identity, Impl, OFFSET>,
            GetConcept: GetConcept::<Identity, Impl, OFFSET>,
            GetLocation: GetLocation::<Identity, Impl, OFFSET>,
            GetTypeInfo: GetTypeInfo::<Identity, Impl, OFFSET>,
            GetTargetInfo: GetTargetInfo::<Identity, Impl, OFFSET>,
            GetNumberOfParentModels: GetNumberOfParentModels::<Identity, Impl, OFFSET>,
            GetParentModel: GetParentModel::<Identity, Impl, OFFSET>,
            AddParentModel: AddParentModel::<Identity, Impl, OFFSET>,
            RemoveParentModel: RemoveParentModel::<Identity, Impl, OFFSET>,
            GetKey: GetKey::<Identity, Impl, OFFSET>,
            GetKeyReference: GetKeyReference::<Identity, Impl, OFFSET>,
            SetKey: SetKey::<Identity, Impl, OFFSET>,
            ClearKeys: ClearKeys::<Identity, Impl, OFFSET>,
            EnumerateKeys: EnumerateKeys::<Identity, Impl, OFFSET>,
            EnumerateKeyReferences: EnumerateKeyReferences::<Identity, Impl, OFFSET>,
            SetConcept: SetConcept::<Identity, Impl, OFFSET>,
            ClearConcepts: ClearConcepts::<Identity, Impl, OFFSET>,
            GetRawReference: GetRawReference::<Identity, Impl, OFFSET>,
            EnumerateRawReferences: EnumerateRawReferences::<Identity, Impl, OFFSET>,
            SetContextForDataModel: SetContextForDataModel::<Identity, Impl, OFFSET>,
            GetContextForDataModel: GetContextForDataModel::<Identity, Impl, OFFSET>,
            Compare: Compare::<Identity, Impl, OFFSET>,
            IsEqualTo: IsEqualTo::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IModelPropertyAccessor_Impl: ::windows_core::BaseImpl {
    fn GetValue(this: &Self::This, key: &::windows_core::PCWSTR, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IModelObject>;
    fn SetValue(this: &Self::This, key: &::windows_core::PCWSTR, contextobject: ::core::option::Option<&IModelObject>, value: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IModelPropertyAccessor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelPropertyAccessor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IModelPropertyAccessor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelPropertyAccessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, contextobject: *mut ::core::ffi::c_void, value: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IModelPropertyAccessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: ::windows_core::PCWSTR, contextobject: *mut ::core::ffi::c_void, value: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute(&key), ::windows_core::from_raw_borrowed(&contextobject), ::windows_core::from_raw_borrowed(&value)).into())
        }
        IModelPropertyAccessor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPreferredRuntimeTypeConcept_Impl: ::windows_core::BaseImpl {
    fn CastToPreferredRuntimeType(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>) -> ::windows_core::Result<IModelObject>;
}
impl ::windows_core::Iids for IPreferredRuntimeTypeConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreferredRuntimeTypeConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPreferredRuntimeTypeConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CastToPreferredRuntimeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPreferredRuntimeTypeConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, object: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CastToPreferredRuntimeType(this, ::windows_core::from_raw_borrowed(&contextobject)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(object, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPreferredRuntimeTypeConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CastToPreferredRuntimeType: CastToPreferredRuntimeType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IRawEnumerator_Impl: ::windows_core::BaseImpl {
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNext(this: &Self::This, name: *mut ::windows_core::BSTR, kind: *mut SymbolKind, value: *mut ::core::option::Option<IModelObject>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IRawEnumerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRawEnumerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IRawEnumerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRawEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRawEnumerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, kind: *mut SymbolKind, value: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNext(this, ::core::mem::transmute_copy(&name), ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&value)).into())
        }
        IRawEnumerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetNext: GetNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStringDisplayableConcept_Impl: ::windows_core::BaseImpl {
    fn ToDisplayString(this: &Self::This, contextobject: ::core::option::Option<&IModelObject>, metadata: ::core::option::Option<&IKeyStore>) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IStringDisplayableConcept {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStringDisplayableConcept_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStringDisplayableConcept {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ToDisplayString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStringDisplayableConcept_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contextobject: *mut ::core::ffi::c_void, metadata: *mut ::core::ffi::c_void, displaystring: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ToDisplayString(this, ::windows_core::from_raw_borrowed(&contextobject), ::windows_core::from_raw_borrowed(&metadata)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(displaystring, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStringDisplayableConcept_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ToDisplayString: ToDisplayString::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
