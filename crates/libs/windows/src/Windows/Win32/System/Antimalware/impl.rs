pub trait IAmsiStream_Impl: ::windows_core::BaseImpl {
    fn GetAttribute(this: &Self::This, attribute: AMSI_ATTRIBUTE, datasize: u32, data: *mut u8, retdata: *mut u32) -> ::windows_core::Result<()>;
    fn Read(this: &Self::This, position: u64, size: u32, buffer: *mut u8, readsize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAmsiStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAmsiStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAmsiStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAmsiStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, attribute: AMSI_ATTRIBUTE, datasize: u32, data: *mut u8, retdata: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttribute(this, ::core::mem::transmute_copy(&attribute), ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&data), ::core::mem::transmute_copy(&retdata)).into())
        }
        unsafe extern "system" fn Read<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAmsiStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, position: u64, size: u32, buffer: *mut u8, readsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Read(this, ::core::mem::transmute_copy(&position), ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&readsize)).into())
        }
        IAmsiStream_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAttribute: GetAttribute::<Identity, Impl, OFFSET>,
            Read: Read::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAntimalware_Impl: ::windows_core::BaseImpl {
    fn Scan(this: &Self::This, stream: ::core::option::Option<&IAmsiStream>, result: *mut AMSI_RESULT, provider: *mut ::core::option::Option<IAntimalwareProvider>) -> ::windows_core::Result<()>;
    fn CloseSession(this: &Self::This, session: u64);
}
impl ::windows_core::Iids for IAntimalware {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalware_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAntimalware {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Scan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalware_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stream: *mut ::core::ffi::c_void, result: *mut AMSI_RESULT, provider: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Scan(this, ::windows_core::from_raw_borrowed(&stream), ::core::mem::transmute_copy(&result), ::core::mem::transmute_copy(&provider)).into())
        }
        unsafe extern "system" fn CloseSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalware_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, session: u64) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseSession(this, ::core::mem::transmute_copy(&session)))
        }
        IAntimalware_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Scan: Scan::<Identity, Impl, OFFSET>,
            CloseSession: CloseSession::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAntimalware2_Impl: ::windows_core::BaseImpl + IAntimalware_Impl {
    fn Notify(this: &Self::This, buffer: *const ::core::ffi::c_void, length: u32, contentname: &::windows_core::PCWSTR, appname: &::windows_core::PCWSTR) -> ::windows_core::Result<AMSI_RESULT>;
}
impl ::windows_core::Iids for IAntimalware2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IAntimalware);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalware2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAntimalware2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Notify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalware2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: *const ::core::ffi::c_void, length: u32, contentname: ::windows_core::PCWSTR, appname: ::windows_core::PCWSTR, presult: *mut AMSI_RESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Notify(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&length), ::core::mem::transmute(&contentname), ::core::mem::transmute(&appname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(presult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAntimalware2_Vtbl { base__: <IAntimalware as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Notify: Notify::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAntimalwareProvider_Impl: ::windows_core::BaseImpl {
    fn Scan(this: &Self::This, stream: ::core::option::Option<&IAmsiStream>) -> ::windows_core::Result<AMSI_RESULT>;
    fn CloseSession(this: &Self::This, session: u64);
    fn DisplayName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IAntimalwareProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAntimalwareProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Scan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stream: *mut ::core::ffi::c_void, result: *mut AMSI_RESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Scan(this, ::windows_core::from_raw_borrowed(&stream)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CloseSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, session: u64) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseSession(this, ::core::mem::transmute_copy(&session)))
        }
        unsafe extern "system" fn DisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, displayname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DisplayName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(displayname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAntimalwareProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Scan: Scan::<Identity, Impl, OFFSET>,
            CloseSession: CloseSession::<Identity, Impl, OFFSET>,
            DisplayName: DisplayName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAntimalwareProvider2_Impl: ::windows_core::BaseImpl + IAntimalwareProvider_Impl {
    fn Notify(this: &Self::This, buffer: *const ::core::ffi::c_void, length: u32, contentname: &::windows_core::PCWSTR, appname: &::windows_core::PCWSTR) -> ::windows_core::Result<AMSI_RESULT>;
}
impl ::windows_core::Iids for IAntimalwareProvider2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IAntimalwareProvider);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareProvider2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAntimalwareProvider2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Notify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareProvider2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffer: *const ::core::ffi::c_void, length: u32, contentname: ::windows_core::PCWSTR, appname: ::windows_core::PCWSTR, presult: *mut AMSI_RESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Notify(this, ::core::mem::transmute_copy(&buffer), ::core::mem::transmute_copy(&length), ::core::mem::transmute(&contentname), ::core::mem::transmute(&appname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(presult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAntimalwareProvider2_Vtbl { base__: <IAntimalwareProvider as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Notify: Notify::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IAntimalwareUacProvider_Impl: ::windows_core::BaseImpl {
    fn UacScan(this: &Self::This, context: *const AMSI_UAC_REQUEST_CONTEXT) -> ::windows_core::Result<AMSI_RESULT>;
    fn DisplayName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IAntimalwareUacProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareUacProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAntimalwareUacProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UacScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareUacProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: *const AMSI_UAC_REQUEST_CONTEXT, result: *mut AMSI_RESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UacScan(this, ::core::mem::transmute_copy(&context)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAntimalwareUacProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, displayname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DisplayName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(displayname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAntimalwareUacProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            UacScan: UacScan::<Identity, Impl, OFFSET>,
            DisplayName: DisplayName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
