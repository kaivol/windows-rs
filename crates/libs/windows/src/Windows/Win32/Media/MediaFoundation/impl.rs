pub trait IAdvancedMediaCapture_Impl: ::windows_core::BaseImpl {
    fn GetAdvancedMediaCaptureSettings(this: &Self::This) -> ::windows_core::Result<IAdvancedMediaCaptureSettings>;
}
impl ::windows_core::Iids for IAdvancedMediaCapture {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAdvancedMediaCapture_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAdvancedMediaCapture {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAdvancedMediaCaptureSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAdvancedMediaCapture_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAdvancedMediaCaptureSettings(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAdvancedMediaCapture_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAdvancedMediaCaptureSettings: GetAdvancedMediaCaptureSettings::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IAdvancedMediaCaptureInitializationSettings_Impl: ::windows_core::BaseImpl {
    fn SetDirectxDeviceManager(this: &Self::This, value: ::core::option::Option<&IMFDXGIDeviceManager>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAdvancedMediaCaptureInitializationSettings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAdvancedMediaCaptureInitializationSettings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAdvancedMediaCaptureInitializationSettings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDirectxDeviceManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAdvancedMediaCaptureInitializationSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDirectxDeviceManager(this, ::windows_core::from_raw_borrowed(&value)).into())
        }
        IAdvancedMediaCaptureInitializationSettings_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDirectxDeviceManager: SetDirectxDeviceManager::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IAdvancedMediaCaptureSettings_Impl: ::windows_core::BaseImpl {
    fn GetDirectxDeviceManager(this: &Self::This) -> ::windows_core::Result<IMFDXGIDeviceManager>;
}
impl ::windows_core::Iids for IAdvancedMediaCaptureSettings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAdvancedMediaCaptureSettings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAdvancedMediaCaptureSettings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDirectxDeviceManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAdvancedMediaCaptureSettings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDirectxDeviceManager(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAdvancedMediaCaptureSettings_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDirectxDeviceManager: GetDirectxDeviceManager::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IAudioSourceProvider_Impl: ::windows_core::BaseImpl {
    fn ProvideInput(this: &Self::This, dwsamplecount: u32, pdwchannelcount: *mut u32, pinterleavedaudiodata: *mut f32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAudioSourceProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAudioSourceProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAudioSourceProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProvideInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAudioSourceProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsamplecount: u32, pdwchannelcount: *mut u32, pinterleavedaudiodata: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProvideInput(this, ::core::mem::transmute_copy(&dwsamplecount), ::core::mem::transmute_copy(&pdwchannelcount), ::core::mem::transmute_copy(&pinterleavedaudiodata)).into())
        }
        IAudioSourceProvider_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, ProvideInput: ProvideInput::<Identity, Impl, OFFSET> }
    };
}
pub trait IClusterDetector_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, wbaseentrylevel: u16, wclusterentrylevel: u16) -> ::windows_core::Result<()>;
    fn Detect(this: &Self::This, dwmaxnumclusters: u32, fminclusterduration: f32, fmaxclusterduration: f32, psrctoc: ::core::option::Option<&IToc>) -> ::windows_core::Result<IToc>;
}
impl ::windows_core::Iids for IClusterDetector {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IClusterDetector_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IClusterDetector {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IClusterDetector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wbaseentrylevel: u16, wclusterentrylevel: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&wbaseentrylevel), ::core::mem::transmute_copy(&wclusterentrylevel)).into())
        }
        unsafe extern "system" fn Detect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IClusterDetector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmaxnumclusters: u32, fminclusterduration: f32, fmaxclusterduration: f32, psrctoc: *mut ::core::ffi::c_void, ppdsttoc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Detect(this, ::core::mem::transmute_copy(&dwmaxnumclusters), ::core::mem::transmute_copy(&fminclusterduration), ::core::mem::transmute_copy(&fmaxclusterduration), ::windows_core::from_raw_borrowed(&psrctoc)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdsttoc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IClusterDetector_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Detect: Detect::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICodecAPI_Impl: ::windows_core::BaseImpl {
    fn IsSupported(this: &Self::This, api: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn IsModifiable(this: &Self::This, api: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetParameterRange(this: &Self::This, api: *const ::windows_core::GUID, valuemin: *mut super::super::System::Variant::VARIANT, valuemax: *mut super::super::System::Variant::VARIANT, steppingdelta: *mut super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn GetParameterValues(this: &Self::This, api: *const ::windows_core::GUID, values: *mut *mut super::super::System::Variant::VARIANT, valuescount: *mut u32) -> ::windows_core::Result<()>;
    fn GetDefaultValue(this: &Self::This, api: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn GetValue(this: &Self::This, api: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Variant::VARIANT>;
    fn SetValue(this: &Self::This, api: *const ::windows_core::GUID, value: *const super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn RegisterForEvent(this: &Self::This, api: *const ::windows_core::GUID, userdata: isize) -> ::windows_core::Result<()>;
    fn UnregisterForEvent(this: &Self::This, api: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetAllDefaults(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetValueWithNotify(this: &Self::This, api: *const ::windows_core::GUID, value: *const super::super::System::Variant::VARIANT, changedparam: *mut *mut ::windows_core::GUID, changedparamcount: *mut u32) -> ::windows_core::Result<()>;
    fn SetAllDefaultsWithNotify(this: &Self::This, changedparam: *mut *mut ::windows_core::GUID, changedparamcount: *mut u32) -> ::windows_core::Result<()>;
    fn GetAllSettings(this: &Self::This, __midl__icodecapi0000: ::core::option::Option<&super::super::System::Com::IStream>) -> ::windows_core::Result<()>;
    fn SetAllSettings(this: &Self::This, __midl__icodecapi0001: ::core::option::Option<&super::super::System::Com::IStream>) -> ::windows_core::Result<()>;
    fn SetAllSettingsWithNotify(this: &Self::This, __midl__icodecapi0002: ::core::option::Option<&super::super::System::Com::IStream>, changedparam: *mut *mut ::windows_core::GUID, changedparamcount: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICodecAPI {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICodecAPI {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsSupported(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn IsModifiable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsModifiable(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn GetParameterRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, valuemin: *mut super::super::System::Variant::VARIANT, valuemax: *mut super::super::System::Variant::VARIANT, steppingdelta: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParameterRange(this, ::core::mem::transmute_copy(&api), ::core::mem::transmute_copy(&valuemin), ::core::mem::transmute_copy(&valuemax), ::core::mem::transmute_copy(&steppingdelta)).into())
        }
        unsafe extern "system" fn GetParameterValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, values: *mut *mut super::super::System::Variant::VARIANT, valuescount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParameterValues(this, ::core::mem::transmute_copy(&api), ::core::mem::transmute_copy(&values), ::core::mem::transmute_copy(&valuescount)).into())
        }
        unsafe extern "system" fn GetDefaultValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, value: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultValue(this, ::core::mem::transmute_copy(&api)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, value: *mut super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this, ::core::mem::transmute_copy(&api)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, value: *const super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute_copy(&api), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn RegisterForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, userdata: isize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForEvent(this, ::core::mem::transmute_copy(&api), ::core::mem::transmute_copy(&userdata)).into())
        }
        unsafe extern "system" fn UnregisterForEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterForEvent(this, ::core::mem::transmute_copy(&api)).into())
        }
        unsafe extern "system" fn SetAllDefaults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllDefaults(this).into())
        }
        unsafe extern "system" fn SetValueWithNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, api: *const ::windows_core::GUID, value: *const super::super::System::Variant::VARIANT, changedparam: *mut *mut ::windows_core::GUID, changedparamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValueWithNotify(this, ::core::mem::transmute_copy(&api), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&changedparam), ::core::mem::transmute_copy(&changedparamcount)).into())
        }
        unsafe extern "system" fn SetAllDefaultsWithNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, changedparam: *mut *mut ::windows_core::GUID, changedparamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllDefaultsWithNotify(this, ::core::mem::transmute_copy(&changedparam), ::core::mem::transmute_copy(&changedparamcount)).into())
        }
        unsafe extern "system" fn GetAllSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, __midl__icodecapi0000: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAllSettings(this, ::windows_core::from_raw_borrowed(&__midl__icodecapi0000)).into())
        }
        unsafe extern "system" fn SetAllSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, __midl__icodecapi0001: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllSettings(this, ::windows_core::from_raw_borrowed(&__midl__icodecapi0001)).into())
        }
        unsafe extern "system" fn SetAllSettingsWithNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICodecAPI_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, __midl__icodecapi0002: *mut ::core::ffi::c_void, changedparam: *mut *mut ::windows_core::GUID, changedparamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllSettingsWithNotify(this, ::windows_core::from_raw_borrowed(&__midl__icodecapi0002), ::core::mem::transmute_copy(&changedparam), ::core::mem::transmute_copy(&changedparamcount)).into())
        }
        ICodecAPI_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsSupported: IsSupported::<Identity, Impl, OFFSET>,
            IsModifiable: IsModifiable::<Identity, Impl, OFFSET>,
            GetParameterRange: GetParameterRange::<Identity, Impl, OFFSET>,
            GetParameterValues: GetParameterValues::<Identity, Impl, OFFSET>,
            GetDefaultValue: GetDefaultValue::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            RegisterForEvent: RegisterForEvent::<Identity, Impl, OFFSET>,
            UnregisterForEvent: UnregisterForEvent::<Identity, Impl, OFFSET>,
            SetAllDefaults: SetAllDefaults::<Identity, Impl, OFFSET>,
            SetValueWithNotify: SetValueWithNotify::<Identity, Impl, OFFSET>,
            SetAllDefaultsWithNotify: SetAllDefaultsWithNotify::<Identity, Impl, OFFSET>,
            GetAllSettings: GetAllSettings::<Identity, Impl, OFFSET>,
            SetAllSettings: SetAllSettings::<Identity, Impl, OFFSET>,
            SetAllSettingsWithNotify: SetAllSettingsWithNotify::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDecodeCommandList_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12CommandList_Impl {
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This, pallocator: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12CommandAllocator>) -> ::windows_core::Result<()>;
    fn ClearState(this: &Self::This);
    fn ResourceBarrier(this: &Self::This, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER);
    fn DiscardResource(this: &Self::This, presource: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION);
    fn BeginQuery(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32);
    fn EndQuery(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32);
    fn ResolveQueryData(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, aligneddestinationbufferoffset: u64);
    fn SetPredication(this: &Self::This, pbuffer: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP);
    fn SetMarker(this: &Self::This, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32);
    fn BeginEvent(this: &Self::This, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32);
    fn EndEvent(this: &Self::This);
    fn DecodeFrame(this: &Self::This, pdecoder: ::core::option::Option<&ID3D12VideoDecoder>, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS);
    fn WriteBufferImmediate(this: &Self::This, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDecodeCommandList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12CommandList);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecodeCommandList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pallocator: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::windows_core::from_raw_borrowed(&pallocator)).into())
        }
        unsafe extern "system" fn ClearState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearState(this))
        }
        unsafe extern "system" fn ResourceBarrier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResourceBarrier(this, ::core::mem::transmute_copy(&numbarriers), ::core::mem::transmute_copy(&pbarriers)))
        }
        unsafe extern "system" fn DiscardResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presource: *mut ::core::ffi::c_void, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DiscardResource(this, ::windows_core::from_raw_borrowed(&presource), ::core::mem::transmute_copy(&pregion)))
        }
        unsafe extern "system" fn BeginQuery<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginQuery(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn EndQuery<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndQuery(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn ResolveQueryData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: *mut ::core::ffi::c_void, aligneddestinationbufferoffset: u64) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveQueryData(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&numqueries), ::windows_core::from_raw_borrowed(&pdestinationbuffer), ::core::mem::transmute_copy(&aligneddestinationbufferoffset)))
        }
        unsafe extern "system" fn SetPredication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuffer: *mut ::core::ffi::c_void, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPredication(this, ::windows_core::from_raw_borrowed(&pbuffer), ::core::mem::transmute_copy(&alignedbufferoffset), ::core::mem::transmute_copy(&operation)))
        }
        unsafe extern "system" fn SetMarker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMarker(this, ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn BeginEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginEvent(this, ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn EndEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndEvent(this))
        }
        unsafe extern "system" fn DecodeFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdecoder: *mut ::core::ffi::c_void, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeFrame(this, ::windows_core::from_raw_borrowed(&pdecoder), ::core::mem::transmute_copy(&poutputarguments), ::core::mem::transmute_copy(&pinputarguments)))
        }
        unsafe extern "system" fn WriteBufferImmediate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBufferImmediate(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pparams), ::core::mem::transmute_copy(&pmodes)))
        }
        ID3D12VideoDecodeCommandList_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12CommandList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Close: Close::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            ClearState: ClearState::<Identity, Impl, OFFSET>,
            ResourceBarrier: ResourceBarrier::<Identity, Impl, OFFSET>,
            DiscardResource: DiscardResource::<Identity, Impl, OFFSET>,
            BeginQuery: BeginQuery::<Identity, Impl, OFFSET>,
            EndQuery: EndQuery::<Identity, Impl, OFFSET>,
            ResolveQueryData: ResolveQueryData::<Identity, Impl, OFFSET>,
            SetPredication: SetPredication::<Identity, Impl, OFFSET>,
            SetMarker: SetMarker::<Identity, Impl, OFFSET>,
            BeginEvent: BeginEvent::<Identity, Impl, OFFSET>,
            EndEvent: EndEvent::<Identity, Impl, OFFSET>,
            DecodeFrame: DecodeFrame::<Identity, Impl, OFFSET>,
            WriteBufferImmediate: WriteBufferImmediate::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDecodeCommandList1_Impl: ::windows_core::BaseImpl + ID3D12VideoDecodeCommandList_Impl {
    fn DecodeFrame1(this: &Self::This, pdecoder: ::core::option::Option<&ID3D12VideoDecoder>, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDecodeCommandList1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDecodeCommandList);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecodeCommandList1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeFrame1<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdecoder: *mut ::core::ffi::c_void, poutputarguments: *const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pinputarguments: *const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeFrame1(this, ::windows_core::from_raw_borrowed(&pdecoder), ::core::mem::transmute_copy(&poutputarguments), ::core::mem::transmute_copy(&pinputarguments)))
        }
        ID3D12VideoDecodeCommandList1_Vtbl { base__: <ID3D12VideoDecodeCommandList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, DecodeFrame1: DecodeFrame1::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDecodeCommandList2_Impl: ::windows_core::BaseImpl + ID3D12VideoDecodeCommandList1_Impl {
    fn SetProtectedResourceSession(this: &Self::This, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>);
    fn InitializeExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize);
    fn ExecuteExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDecodeCommandList2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDecodeCommandList1);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecodeCommandList2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprotectedresourcesession: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProtectedResourceSession(this, ::windows_core::from_raw_borrowed(&pprotectedresourcesession)))
        }
        unsafe extern "system" fn InitializeExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pinitializationparameters), ::core::mem::transmute_copy(&initializationparameterssizeinbytes)))
        }
        unsafe extern "system" fn ExecuteExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pexecutionparameters), ::core::mem::transmute_copy(&executionparameterssizeinbytes)))
        }
        ID3D12VideoDecodeCommandList2_Vtbl {
            base__: <ID3D12VideoDecodeCommandList1 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetProtectedResourceSession: SetProtectedResourceSession::<Identity, Impl, OFFSET>,
            InitializeExtensionCommand: InitializeExtensionCommand::<Identity, Impl, OFFSET>,
            ExecuteExtensionCommand: ExecuteExtensionCommand::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDecodeCommandList3_Impl: ::windows_core::BaseImpl + ID3D12VideoDecodeCommandList2_Impl {
    fn Barrier(this: &Self::This, numbarriergroups: u32, pbarriergroups: *const super::super::Graphics::Direct3D12::D3D12_BARRIER_GROUP);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDecodeCommandList3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDecodeCommandList2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecodeCommandList3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Barrier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecodeCommandList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numbarriergroups: u32, pbarriergroups: *const super::super::Graphics::Direct3D12::D3D12_BARRIER_GROUP) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Barrier(this, ::core::mem::transmute_copy(&numbarriergroups), ::core::mem::transmute_copy(&pbarriergroups)))
        }
        ID3D12VideoDecodeCommandList3_Vtbl { base__: <ID3D12VideoDecodeCommandList2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Barrier: Barrier::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
pub trait ID3D12VideoDecoder_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetDesc(this: &Self::This) -> D3D12_VIDEO_DECODER_DESC;
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::windows_core::Iids for ID3D12VideoDecoder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecoder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDesc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result__: *mut D3D12_VIDEO_DECODER_DESC) {
            Identity::call_impl::<_, OFFSET>(this, |this| *result__ = Impl::GetDesc(this))
        }
        ID3D12VideoDecoder_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDesc: GetDesc::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
pub trait ID3D12VideoDecoder1_Impl: ::windows_core::BaseImpl + ID3D12VideoDecoder_Impl {
    fn GetProtectedResourceSession(this: &Self::This, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::windows_core::Iids for ID3D12VideoDecoder1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDecoder);
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoder1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecoder1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoder1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectedResourceSession(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppprotectedsession)).into())
        }
        ID3D12VideoDecoder1_Vtbl {
            base__: <ID3D12VideoDecoder as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProtectedResourceSession: GetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDecoderHeap_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetDesc(this: &Self::This) -> D3D12_VIDEO_DECODER_HEAP_DESC;
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDecoderHeap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoderHeap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecoderHeap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDesc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result__: *mut D3D12_VIDEO_DECODER_HEAP_DESC) {
            Identity::call_impl::<_, OFFSET>(this, |this| *result__ = Impl::GetDesc(this))
        }
        ID3D12VideoDecoderHeap_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDesc: GetDesc::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDecoderHeap1_Impl: ::windows_core::BaseImpl + ID3D12VideoDecoderHeap_Impl {
    fn GetProtectedResourceSession(this: &Self::This, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDecoderHeap1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDecoderHeap);
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoderHeap1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDecoderHeap1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDecoderHeap1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectedResourceSession(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppprotectedsession)).into())
        }
        ID3D12VideoDecoderHeap1_Vtbl {
            base__: <ID3D12VideoDecoderHeap as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProtectedResourceSession: GetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDevice_Impl: ::windows_core::BaseImpl {
    fn CheckFeatureSupport(this: &Self::This, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows_core::Result<()>;
    fn CreateVideoDecoder(this: &Self::This, pdesc: *const D3D12_VIDEO_DECODER_DESC, riid: *const ::windows_core::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoDecoderHeap(this: &Self::This, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, riid: *const ::windows_core::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoProcessor(this: &Self::This, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *const ::windows_core::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDevice {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CheckFeatureSupport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, featurevideo: D3D12_FEATURE_VIDEO, pfeaturesupportdata: *mut ::core::ffi::c_void, featuresupportdatasize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckFeatureSupport(this, ::core::mem::transmute_copy(&featurevideo), ::core::mem::transmute_copy(&pfeaturesupportdata), ::core::mem::transmute_copy(&featuresupportdatasize)).into())
        }
        unsafe extern "system" fn CreateVideoDecoder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_DECODER_DESC, riid: *const ::windows_core::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoDecoder(this, ::core::mem::transmute_copy(&pdesc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideodecoder)).into())
        }
        unsafe extern "system" fn CreateVideoDecoderHeap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, riid: *const ::windows_core::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoDecoderHeap(this, ::core::mem::transmute_copy(&pvideodecoderheapdesc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideodecoderheap)).into())
        }
        unsafe extern "system" fn CreateVideoProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *const ::windows_core::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoProcessor(this, ::core::mem::transmute_copy(&nodemask), ::core::mem::transmute_copy(&poutputstreamdesc), ::core::mem::transmute_copy(&numinputstreamdescs), ::core::mem::transmute_copy(&pinputstreamdescs), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideoprocessor)).into())
        }
        ID3D12VideoDevice_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CheckFeatureSupport: CheckFeatureSupport::<Identity, Impl, OFFSET>,
            CreateVideoDecoder: CreateVideoDecoder::<Identity, Impl, OFFSET>,
            CreateVideoDecoderHeap: CreateVideoDecoderHeap::<Identity, Impl, OFFSET>,
            CreateVideoProcessor: CreateVideoProcessor::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDevice1_Impl: ::windows_core::BaseImpl + ID3D12VideoDevice_Impl {
    fn CreateVideoMotionEstimator(this: &Self::This, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, riid: *const ::windows_core::GUID, ppvideomotionestimator: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoMotionVectorHeap(this: &Self::This, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, riid: *const ::windows_core::GUID, ppvideomotionvectorheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDevice1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDevice1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateVideoMotionEstimator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pprotectedresourcesession: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvideomotionestimator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoMotionEstimator(this, ::core::mem::transmute_copy(&pdesc), ::windows_core::from_raw_borrowed(&pprotectedresourcesession), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideomotionestimator)).into())
        }
        unsafe extern "system" fn CreateVideoMotionVectorHeap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pprotectedresourcesession: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvideomotionvectorheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoMotionVectorHeap(this, ::core::mem::transmute_copy(&pdesc), ::windows_core::from_raw_borrowed(&pprotectedresourcesession), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideomotionvectorheap)).into())
        }
        ID3D12VideoDevice1_Vtbl {
            base__: <ID3D12VideoDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateVideoMotionEstimator: CreateVideoMotionEstimator::<Identity, Impl, OFFSET>,
            CreateVideoMotionVectorHeap: CreateVideoMotionVectorHeap::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDevice2_Impl: ::windows_core::BaseImpl + ID3D12VideoDevice1_Impl {
    fn CreateVideoDecoder1(this: &Self::This, pdesc: *const D3D12_VIDEO_DECODER_DESC, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, riid: *const ::windows_core::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoDecoderHeap1(this: &Self::This, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, riid: *const ::windows_core::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoProcessor1(this: &Self::This, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, riid: *const ::windows_core::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoExtensionCommand(this: &Self::This, pdesc: *const D3D12_VIDEO_EXTENSION_COMMAND_DESC, pcreationparameters: *const ::core::ffi::c_void, creationparametersdatasizeinbytes: usize, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>, riid: *const ::windows_core::GUID, ppvideoextensioncommand: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ExecuteExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize, poutputdata: *mut ::core::ffi::c_void, outputdatasizeinbytes: usize) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDevice2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDevice1);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDevice2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateVideoDecoder1<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_DECODER_DESC, pprotectedresourcesession: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvideodecoder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoDecoder1(this, ::core::mem::transmute_copy(&pdesc), ::windows_core::from_raw_borrowed(&pprotectedresourcesession), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideodecoder)).into())
        }
        unsafe extern "system" fn CreateVideoDecoderHeap1<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvideodecoderheapdesc: *const D3D12_VIDEO_DECODER_HEAP_DESC, pprotectedresourcesession: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvideodecoderheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoDecoderHeap1(this, ::core::mem::transmute_copy(&pvideodecoderheapdesc), ::windows_core::from_raw_borrowed(&pprotectedresourcesession), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideodecoderheap)).into())
        }
        unsafe extern "system" fn CreateVideoProcessor1<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nodemask: u32, poutputstreamdesc: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, numinputstreamdescs: u32, pinputstreamdescs: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pprotectedresourcesession: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoProcessor1(this, ::core::mem::transmute_copy(&nodemask), ::core::mem::transmute_copy(&poutputstreamdesc), ::core::mem::transmute_copy(&numinputstreamdescs), ::core::mem::transmute_copy(&pinputstreamdescs), ::windows_core::from_raw_borrowed(&pprotectedresourcesession), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideoprocessor)).into())
        }
        unsafe extern "system" fn CreateVideoExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_EXTENSION_COMMAND_DESC, pcreationparameters: *const ::core::ffi::c_void, creationparametersdatasizeinbytes: usize, pprotectedresourcesession: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvideoextensioncommand: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoExtensionCommand(this, ::core::mem::transmute_copy(&pdesc), ::core::mem::transmute_copy(&pcreationparameters), ::core::mem::transmute_copy(&creationparametersdatasizeinbytes), ::windows_core::from_raw_borrowed(&pprotectedresourcesession), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideoextensioncommand)).into())
        }
        unsafe extern "system" fn ExecuteExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize, poutputdata: *mut ::core::ffi::c_void, outputdatasizeinbytes: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pexecutionparameters), ::core::mem::transmute_copy(&executionparameterssizeinbytes), ::core::mem::transmute_copy(&poutputdata), ::core::mem::transmute_copy(&outputdatasizeinbytes)).into())
        }
        ID3D12VideoDevice2_Vtbl {
            base__: <ID3D12VideoDevice1 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateVideoDecoder1: CreateVideoDecoder1::<Identity, Impl, OFFSET>,
            CreateVideoDecoderHeap1: CreateVideoDecoderHeap1::<Identity, Impl, OFFSET>,
            CreateVideoProcessor1: CreateVideoProcessor1::<Identity, Impl, OFFSET>,
            CreateVideoExtensionCommand: CreateVideoExtensionCommand::<Identity, Impl, OFFSET>,
            ExecuteExtensionCommand: ExecuteExtensionCommand::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoDevice3_Impl: ::windows_core::BaseImpl + ID3D12VideoDevice2_Impl {
    fn CreateVideoEncoder(this: &Self::This, pdesc: *const D3D12_VIDEO_ENCODER_DESC, riid: *const ::windows_core::GUID, ppvideoencoder: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateVideoEncoderHeap(this: &Self::This, pdesc: *const D3D12_VIDEO_ENCODER_HEAP_DESC, riid: *const ::windows_core::GUID, ppvideoencoderheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoDevice3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoDevice2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoDevice3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateVideoEncoder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_ENCODER_DESC, riid: *const ::windows_core::GUID, ppvideoencoder: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoEncoder(this, ::core::mem::transmute_copy(&pdesc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideoencoder)).into())
        }
        unsafe extern "system" fn CreateVideoEncoderHeap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoDevice3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdesc: *const D3D12_VIDEO_ENCODER_HEAP_DESC, riid: *const ::windows_core::GUID, ppvideoencoderheap: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoEncoderHeap(this, ::core::mem::transmute_copy(&pdesc), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvideoencoderheap)).into())
        }
        ID3D12VideoDevice3_Vtbl {
            base__: <ID3D12VideoDevice2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateVideoEncoder: CreateVideoEncoder::<Identity, Impl, OFFSET>,
            CreateVideoEncoderHeap: CreateVideoEncoderHeap::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait ID3D12VideoEncodeCommandList_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12CommandList_Impl {
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This, pallocator: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12CommandAllocator>) -> ::windows_core::Result<()>;
    fn ClearState(this: &Self::This);
    fn ResourceBarrier(this: &Self::This, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER);
    fn DiscardResource(this: &Self::This, presource: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION);
    fn BeginQuery(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32);
    fn EndQuery(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32);
    fn ResolveQueryData(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, aligneddestinationbufferoffset: u64);
    fn SetPredication(this: &Self::This, pbuffer: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP);
    fn SetMarker(this: &Self::This, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32);
    fn BeginEvent(this: &Self::This, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32);
    fn EndEvent(this: &Self::This);
    fn EstimateMotion(this: &Self::This, pmotionestimator: ::core::option::Option<&ID3D12VideoMotionEstimator>, poutputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pinputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT);
    fn ResolveMotionVectorHeap(this: &Self::This, poutputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pinputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT);
    fn WriteBufferImmediate(this: &Self::This, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE);
    fn SetProtectedResourceSession(this: &Self::This, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for ID3D12VideoEncodeCommandList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12CommandList);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoEncodeCommandList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pallocator: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::windows_core::from_raw_borrowed(&pallocator)).into())
        }
        unsafe extern "system" fn ClearState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearState(this))
        }
        unsafe extern "system" fn ResourceBarrier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResourceBarrier(this, ::core::mem::transmute_copy(&numbarriers), ::core::mem::transmute_copy(&pbarriers)))
        }
        unsafe extern "system" fn DiscardResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presource: *mut ::core::ffi::c_void, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DiscardResource(this, ::windows_core::from_raw_borrowed(&presource), ::core::mem::transmute_copy(&pregion)))
        }
        unsafe extern "system" fn BeginQuery<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginQuery(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn EndQuery<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndQuery(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn ResolveQueryData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: *mut ::core::ffi::c_void, aligneddestinationbufferoffset: u64) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveQueryData(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&numqueries), ::windows_core::from_raw_borrowed(&pdestinationbuffer), ::core::mem::transmute_copy(&aligneddestinationbufferoffset)))
        }
        unsafe extern "system" fn SetPredication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuffer: *mut ::core::ffi::c_void, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPredication(this, ::windows_core::from_raw_borrowed(&pbuffer), ::core::mem::transmute_copy(&alignedbufferoffset), ::core::mem::transmute_copy(&operation)))
        }
        unsafe extern "system" fn SetMarker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMarker(this, ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn BeginEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginEvent(this, ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn EndEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndEvent(this))
        }
        unsafe extern "system" fn EstimateMotion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmotionestimator: *mut ::core::ffi::c_void, poutputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pinputarguments: *const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EstimateMotion(this, ::windows_core::from_raw_borrowed(&pmotionestimator), ::core::mem::transmute_copy(&poutputarguments), ::core::mem::transmute_copy(&pinputarguments)))
        }
        unsafe extern "system" fn ResolveMotionVectorHeap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, poutputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pinputarguments: *const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveMotionVectorHeap(this, ::core::mem::transmute_copy(&poutputarguments), ::core::mem::transmute_copy(&pinputarguments)))
        }
        unsafe extern "system" fn WriteBufferImmediate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBufferImmediate(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pparams), ::core::mem::transmute_copy(&pmodes)))
        }
        unsafe extern "system" fn SetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprotectedresourcesession: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProtectedResourceSession(this, ::windows_core::from_raw_borrowed(&pprotectedresourcesession)))
        }
        ID3D12VideoEncodeCommandList_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12CommandList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Close: Close::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            ClearState: ClearState::<Identity, Impl, OFFSET>,
            ResourceBarrier: ResourceBarrier::<Identity, Impl, OFFSET>,
            DiscardResource: DiscardResource::<Identity, Impl, OFFSET>,
            BeginQuery: BeginQuery::<Identity, Impl, OFFSET>,
            EndQuery: EndQuery::<Identity, Impl, OFFSET>,
            ResolveQueryData: ResolveQueryData::<Identity, Impl, OFFSET>,
            SetPredication: SetPredication::<Identity, Impl, OFFSET>,
            SetMarker: SetMarker::<Identity, Impl, OFFSET>,
            BeginEvent: BeginEvent::<Identity, Impl, OFFSET>,
            EndEvent: EndEvent::<Identity, Impl, OFFSET>,
            EstimateMotion: EstimateMotion::<Identity, Impl, OFFSET>,
            ResolveMotionVectorHeap: ResolveMotionVectorHeap::<Identity, Impl, OFFSET>,
            WriteBufferImmediate: WriteBufferImmediate::<Identity, Impl, OFFSET>,
            SetProtectedResourceSession: SetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait ID3D12VideoEncodeCommandList1_Impl: ::windows_core::BaseImpl + ID3D12VideoEncodeCommandList_Impl {
    fn InitializeExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize);
    fn ExecuteExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for ID3D12VideoEncodeCommandList1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoEncodeCommandList);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoEncodeCommandList1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pinitializationparameters), ::core::mem::transmute_copy(&initializationparameterssizeinbytes)))
        }
        unsafe extern "system" fn ExecuteExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pexecutionparameters), ::core::mem::transmute_copy(&executionparameterssizeinbytes)))
        }
        ID3D12VideoEncodeCommandList1_Vtbl {
            base__: <ID3D12VideoEncodeCommandList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeExtensionCommand: InitializeExtensionCommand::<Identity, Impl, OFFSET>,
            ExecuteExtensionCommand: ExecuteExtensionCommand::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoEncodeCommandList2_Impl: ::windows_core::BaseImpl + ID3D12VideoEncodeCommandList1_Impl {
    fn EncodeFrame(this: &Self::This, pencoder: ::core::option::Option<&ID3D12VideoEncoder>, pheap: ::core::option::Option<&ID3D12VideoEncoderHeap>, pinputarguments: *const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS, poutputarguments: *const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS);
    fn ResolveEncoderOutputMetadata(this: &Self::This, pinputarguments: *const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS, poutputarguments: *const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoEncodeCommandList2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoEncodeCommandList1);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoEncodeCommandList2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EncodeFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pencoder: *mut ::core::ffi::c_void, pheap: *mut ::core::ffi::c_void, pinputarguments: *const D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS, poutputarguments: *const D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EncodeFrame(this, ::windows_core::from_raw_borrowed(&pencoder), ::windows_core::from_raw_borrowed(&pheap), ::core::mem::transmute_copy(&pinputarguments), ::core::mem::transmute_copy(&poutputarguments)))
        }
        unsafe extern "system" fn ResolveEncoderOutputMetadata<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinputarguments: *const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS, poutputarguments: *const D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveEncoderOutputMetadata(this, ::core::mem::transmute_copy(&pinputarguments), ::core::mem::transmute_copy(&poutputarguments)))
        }
        ID3D12VideoEncodeCommandList2_Vtbl {
            base__: <ID3D12VideoEncodeCommandList1 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EncodeFrame: EncodeFrame::<Identity, Impl, OFFSET>,
            ResolveEncoderOutputMetadata: ResolveEncoderOutputMetadata::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoEncodeCommandList3_Impl: ::windows_core::BaseImpl + ID3D12VideoEncodeCommandList2_Impl {
    fn Barrier(this: &Self::This, numbarriergroups: u32, pbarriergroups: *const super::super::Graphics::Direct3D12::D3D12_BARRIER_GROUP);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoEncodeCommandList3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoEncodeCommandList2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoEncodeCommandList3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Barrier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncodeCommandList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numbarriergroups: u32, pbarriergroups: *const super::super::Graphics::Direct3D12::D3D12_BARRIER_GROUP) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Barrier(this, ::core::mem::transmute_copy(&numbarriergroups), ::core::mem::transmute_copy(&pbarriergroups)))
        }
        ID3D12VideoEncodeCommandList3_Vtbl { base__: <ID3D12VideoEncodeCommandList2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Barrier: Barrier::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoEncoder_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetNodeMask(this: &Self::This) -> u32;
    fn GetEncoderFlags(this: &Self::This) -> D3D12_VIDEO_ENCODER_FLAGS;
    fn GetCodec(this: &Self::This) -> D3D12_VIDEO_ENCODER_CODEC;
    fn GetCodecProfile(this: &Self::This, dstprofile: &D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows_core::Result<()>;
    fn GetCodecConfiguration(this: &Self::This, dstcodecconfig: &D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> ::windows_core::Result<()>;
    fn GetInputFormat(this: &Self::This) -> super::super::Graphics::Dxgi::Common::DXGI_FORMAT;
    fn GetMaxMotionEstimationPrecision(this: &Self::This) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoEncoder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoEncoder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNodeMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNodeMask(this))
        }
        unsafe extern "system" fn GetEncoderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> D3D12_VIDEO_ENCODER_FLAGS {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEncoderFlags(this))
        }
        unsafe extern "system" fn GetCodec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> D3D12_VIDEO_ENCODER_CODEC {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodec(this))
        }
        unsafe extern "system" fn GetCodecProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dstprofile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodecProfile(this, ::core::mem::transmute(&dstprofile)).into())
        }
        unsafe extern "system" fn GetCodecConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dstcodecconfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodecConfiguration(this, ::core::mem::transmute(&dstcodecconfig)).into())
        }
        unsafe extern "system" fn GetInputFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Graphics::Dxgi::Common::DXGI_FORMAT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInputFormat(this))
        }
        unsafe extern "system" fn GetMaxMotionEstimationPrecision<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMaxMotionEstimationPrecision(this))
        }
        ID3D12VideoEncoder_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNodeMask: GetNodeMask::<Identity, Impl, OFFSET>,
            GetEncoderFlags: GetEncoderFlags::<Identity, Impl, OFFSET>,
            GetCodec: GetCodec::<Identity, Impl, OFFSET>,
            GetCodecProfile: GetCodecProfile::<Identity, Impl, OFFSET>,
            GetCodecConfiguration: GetCodecConfiguration::<Identity, Impl, OFFSET>,
            GetInputFormat: GetInputFormat::<Identity, Impl, OFFSET>,
            GetMaxMotionEstimationPrecision: GetMaxMotionEstimationPrecision::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
pub trait ID3D12VideoEncoderHeap_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetNodeMask(this: &Self::This) -> u32;
    fn GetEncoderHeapFlags(this: &Self::This) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS;
    fn GetCodec(this: &Self::This) -> D3D12_VIDEO_ENCODER_CODEC;
    fn GetCodecProfile(this: &Self::This, dstprofile: &D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows_core::Result<()>;
    fn GetCodecLevel(this: &Self::This, dstlevel: &D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> ::windows_core::Result<()>;
    fn GetResolutionListCount(this: &Self::This) -> u32;
    fn GetResolutionList(this: &Self::This, resolutionslistcount: u32, presolutionlist: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::windows_core::Iids for ID3D12VideoEncoderHeap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoEncoderHeap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNodeMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNodeMask(this))
        }
        unsafe extern "system" fn GetEncoderHeapFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEncoderHeapFlags(this))
        }
        unsafe extern "system" fn GetCodec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> D3D12_VIDEO_ENCODER_CODEC {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodec(this))
        }
        unsafe extern "system" fn GetCodecProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dstprofile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodecProfile(this, ::core::mem::transmute(&dstprofile)).into())
        }
        unsafe extern "system" fn GetCodecLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dstlevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodecLevel(this, ::core::mem::transmute(&dstlevel)).into())
        }
        unsafe extern "system" fn GetResolutionListCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetResolutionListCount(this))
        }
        unsafe extern "system" fn GetResolutionList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoEncoderHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, resolutionslistcount: u32, presolutionlist: *mut D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetResolutionList(this, ::core::mem::transmute_copy(&resolutionslistcount), ::core::mem::transmute_copy(&presolutionlist)).into())
        }
        ID3D12VideoEncoderHeap_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNodeMask: GetNodeMask::<Identity, Impl, OFFSET>,
            GetEncoderHeapFlags: GetEncoderHeapFlags::<Identity, Impl, OFFSET>,
            GetCodec: GetCodec::<Identity, Impl, OFFSET>,
            GetCodecProfile: GetCodecProfile::<Identity, Impl, OFFSET>,
            GetCodecLevel: GetCodecLevel::<Identity, Impl, OFFSET>,
            GetResolutionListCount: GetResolutionListCount::<Identity, Impl, OFFSET>,
            GetResolutionList: GetResolutionList::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(feature = "Win32_Graphics_Direct3D12")]
pub trait ID3D12VideoExtensionCommand_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetDesc(this: &Self::This) -> D3D12_VIDEO_EXTENSION_COMMAND_DESC;
    fn GetProtectedResourceSession(this: &Self::This, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl ::windows_core::Iids for ID3D12VideoExtensionCommand {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(feature = "Win32_Graphics_Direct3D12")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoExtensionCommand_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoExtensionCommand {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDesc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoExtensionCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result__: *mut D3D12_VIDEO_EXTENSION_COMMAND_DESC) {
            Identity::call_impl::<_, OFFSET>(this, |this| *result__ = Impl::GetDesc(this))
        }
        unsafe extern "system" fn GetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoExtensionCommand_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectedResourceSession(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppprotectedsession)).into())
        }
        ID3D12VideoExtensionCommand_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDesc: GetDesc::<Identity, Impl, OFFSET>,
            GetProtectedResourceSession: GetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoMotionEstimator_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetDesc(this: &Self::This) -> D3D12_VIDEO_MOTION_ESTIMATOR_DESC;
    fn GetProtectedResourceSession(this: &Self::This, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoMotionEstimator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoMotionEstimator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoMotionEstimator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDesc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoMotionEstimator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result__: *mut D3D12_VIDEO_MOTION_ESTIMATOR_DESC) {
            Identity::call_impl::<_, OFFSET>(this, |this| *result__ = Impl::GetDesc(this))
        }
        unsafe extern "system" fn GetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoMotionEstimator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectedResourceSession(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppprotectedsession)).into())
        }
        ID3D12VideoMotionEstimator_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDesc: GetDesc::<Identity, Impl, OFFSET>,
            GetProtectedResourceSession: GetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoMotionVectorHeap_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetDesc(this: &Self::This) -> D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC;
    fn GetProtectedResourceSession(this: &Self::This, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoMotionVectorHeap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(all(feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoMotionVectorHeap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoMotionVectorHeap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDesc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoMotionVectorHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result__: *mut D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC) {
            Identity::call_impl::<_, OFFSET>(this, |this| *result__ = Impl::GetDesc(this))
        }
        unsafe extern "system" fn GetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoMotionVectorHeap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectedResourceSession(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppprotectedsession)).into())
        }
        ID3D12VideoMotionVectorHeap_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDesc: GetDesc::<Identity, Impl, OFFSET>,
            GetProtectedResourceSession: GetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait ID3D12VideoProcessCommandList_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12CommandList_Impl {
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This, pallocator: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12CommandAllocator>) -> ::windows_core::Result<()>;
    fn ClearState(this: &Self::This);
    fn ResourceBarrier(this: &Self::This, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER);
    fn DiscardResource(this: &Self::This, presource: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION);
    fn BeginQuery(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32);
    fn EndQuery(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32);
    fn ResolveQueryData(this: &Self::This, pqueryheap: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12QueryHeap>, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, aligneddestinationbufferoffset: u64);
    fn SetPredication(this: &Self::This, pbuffer: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12Resource>, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP);
    fn SetMarker(this: &Self::This, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32);
    fn BeginEvent(this: &Self::This, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32);
    fn EndEvent(this: &Self::This);
    fn ProcessFrames(this: &Self::This, pvideoprocessor: ::core::option::Option<&ID3D12VideoProcessor>, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS);
    fn WriteBufferImmediate(this: &Self::This, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for ID3D12VideoProcessCommandList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12CommandList);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoProcessCommandList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pallocator: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::windows_core::from_raw_borrowed(&pallocator)).into())
        }
        unsafe extern "system" fn ClearState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearState(this))
        }
        unsafe extern "system" fn ResourceBarrier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numbarriers: u32, pbarriers: *const super::super::Graphics::Direct3D12::D3D12_RESOURCE_BARRIER) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResourceBarrier(this, ::core::mem::transmute_copy(&numbarriers), ::core::mem::transmute_copy(&pbarriers)))
        }
        unsafe extern "system" fn DiscardResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presource: *mut ::core::ffi::c_void, pregion: *const super::super::Graphics::Direct3D12::D3D12_DISCARD_REGION) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DiscardResource(this, ::windows_core::from_raw_borrowed(&presource), ::core::mem::transmute_copy(&pregion)))
        }
        unsafe extern "system" fn BeginQuery<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginQuery(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn EndQuery<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndQuery(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn ResolveQueryData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqueryheap: *mut ::core::ffi::c_void, r#type: super::super::Graphics::Direct3D12::D3D12_QUERY_TYPE, startindex: u32, numqueries: u32, pdestinationbuffer: *mut ::core::ffi::c_void, aligneddestinationbufferoffset: u64) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResolveQueryData(this, ::windows_core::from_raw_borrowed(&pqueryheap), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&startindex), ::core::mem::transmute_copy(&numqueries), ::windows_core::from_raw_borrowed(&pdestinationbuffer), ::core::mem::transmute_copy(&aligneddestinationbufferoffset)))
        }
        unsafe extern "system" fn SetPredication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuffer: *mut ::core::ffi::c_void, alignedbufferoffset: u64, operation: super::super::Graphics::Direct3D12::D3D12_PREDICATION_OP) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPredication(this, ::windows_core::from_raw_borrowed(&pbuffer), ::core::mem::transmute_copy(&alignedbufferoffset), ::core::mem::transmute_copy(&operation)))
        }
        unsafe extern "system" fn SetMarker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMarker(this, ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn BeginEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadata: u32, pdata: *const ::core::ffi::c_void, size: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginEvent(this, ::core::mem::transmute_copy(&metadata), ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&size)))
        }
        unsafe extern "system" fn EndEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndEvent(this))
        }
        unsafe extern "system" fn ProcessFrames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvideoprocessor: *mut ::core::ffi::c_void, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessFrames(this, ::windows_core::from_raw_borrowed(&pvideoprocessor), ::core::mem::transmute_copy(&poutputarguments), ::core::mem::transmute_copy(&numinputstreams), ::core::mem::transmute_copy(&pinputarguments)))
        }
        unsafe extern "system" fn WriteBufferImmediate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, pparams: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pmodes: *const super::super::Graphics::Direct3D12::D3D12_WRITEBUFFERIMMEDIATE_MODE) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteBufferImmediate(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pparams), ::core::mem::transmute_copy(&pmodes)))
        }
        ID3D12VideoProcessCommandList_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12CommandList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Close: Close::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            ClearState: ClearState::<Identity, Impl, OFFSET>,
            ResourceBarrier: ResourceBarrier::<Identity, Impl, OFFSET>,
            DiscardResource: DiscardResource::<Identity, Impl, OFFSET>,
            BeginQuery: BeginQuery::<Identity, Impl, OFFSET>,
            EndQuery: EndQuery::<Identity, Impl, OFFSET>,
            ResolveQueryData: ResolveQueryData::<Identity, Impl, OFFSET>,
            SetPredication: SetPredication::<Identity, Impl, OFFSET>,
            SetMarker: SetMarker::<Identity, Impl, OFFSET>,
            BeginEvent: BeginEvent::<Identity, Impl, OFFSET>,
            EndEvent: EndEvent::<Identity, Impl, OFFSET>,
            ProcessFrames: ProcessFrames::<Identity, Impl, OFFSET>,
            WriteBufferImmediate: WriteBufferImmediate::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait ID3D12VideoProcessCommandList1_Impl: ::windows_core::BaseImpl + ID3D12VideoProcessCommandList_Impl {
    fn ProcessFrames1(this: &Self::This, pvideoprocessor: ::core::option::Option<&ID3D12VideoProcessor>, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for ID3D12VideoProcessCommandList1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoProcessCommandList);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoProcessCommandList1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProcessFrames1<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvideoprocessor: *mut ::core::ffi::c_void, poutputarguments: *const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, numinputstreams: u32, pinputarguments: *const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessFrames1(this, ::windows_core::from_raw_borrowed(&pvideoprocessor), ::core::mem::transmute_copy(&poutputarguments), ::core::mem::transmute_copy(&numinputstreams), ::core::mem::transmute_copy(&pinputarguments)))
        }
        ID3D12VideoProcessCommandList1_Vtbl {
            base__: <ID3D12VideoProcessCommandList as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ProcessFrames1: ProcessFrames1::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait ID3D12VideoProcessCommandList2_Impl: ::windows_core::BaseImpl + ID3D12VideoProcessCommandList1_Impl {
    fn SetProtectedResourceSession(this: &Self::This, pprotectedresourcesession: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12ProtectedResourceSession>);
    fn InitializeExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize);
    fn ExecuteExtensionCommand(this: &Self::This, pextensioncommand: ::core::option::Option<&ID3D12VideoExtensionCommand>, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for ID3D12VideoProcessCommandList2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoProcessCommandList1);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoProcessCommandList2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprotectedresourcesession: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProtectedResourceSession(this, ::windows_core::from_raw_borrowed(&pprotectedresourcesession)))
        }
        unsafe extern "system" fn InitializeExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pinitializationparameters: *const ::core::ffi::c_void, initializationparameterssizeinbytes: usize) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pinitializationparameters), ::core::mem::transmute_copy(&initializationparameterssizeinbytes)))
        }
        unsafe extern "system" fn ExecuteExtensionCommand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensioncommand: *mut ::core::ffi::c_void, pexecutionparameters: *const ::core::ffi::c_void, executionparameterssizeinbytes: usize) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ExecuteExtensionCommand(this, ::windows_core::from_raw_borrowed(&pextensioncommand), ::core::mem::transmute_copy(&pexecutionparameters), ::core::mem::transmute_copy(&executionparameterssizeinbytes)))
        }
        ID3D12VideoProcessCommandList2_Vtbl {
            base__: <ID3D12VideoProcessCommandList1 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetProtectedResourceSession: SetProtectedResourceSession::<Identity, Impl, OFFSET>,
            InitializeExtensionCommand: InitializeExtensionCommand::<Identity, Impl, OFFSET>,
            ExecuteExtensionCommand: ExecuteExtensionCommand::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait ID3D12VideoProcessCommandList3_Impl: ::windows_core::BaseImpl + ID3D12VideoProcessCommandList2_Impl {
    fn Barrier(this: &Self::This, numbarriergroups: u32, pbarriergroups: *const super::super::Graphics::Direct3D12::D3D12_BARRIER_GROUP);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for ID3D12VideoProcessCommandList3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoProcessCommandList2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoProcessCommandList3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Barrier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessCommandList3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numbarriergroups: u32, pbarriergroups: *const super::super::Graphics::Direct3D12::D3D12_BARRIER_GROUP) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Barrier(this, ::core::mem::transmute_copy(&numbarriergroups), ::core::mem::transmute_copy(&pbarriergroups)))
        }
        ID3D12VideoProcessCommandList3_Vtbl { base__: <ID3D12VideoProcessCommandList2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Barrier: Barrier::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoProcessor_Impl: ::windows_core::BaseImpl + super::super::Graphics::Direct3D12::ID3D12Pageable_Impl {
    fn GetNodeMask(this: &Self::This) -> u32;
    fn GetNumInputStreamDescs(this: &Self::This) -> u32;
    fn GetInputStreamDescs(this: &Self::This, numinputstreamdescs: u32, pinputstreamdescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows_core::Result<()>;
    fn GetOutputStreamDesc(this: &Self::This) -> D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoProcessor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::Graphics::Direct3D12::ID3D12Pageable);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoProcessor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNodeMask<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNodeMask(this))
        }
        unsafe extern "system" fn GetNumInputStreamDescs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNumInputStreamDescs(this))
        }
        unsafe extern "system" fn GetInputStreamDescs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, numinputstreamdescs: u32, pinputstreamdescs: *mut D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInputStreamDescs(this, ::core::mem::transmute_copy(&numinputstreamdescs), ::core::mem::transmute_copy(&pinputstreamdescs)).into())
        }
        unsafe extern "system" fn GetOutputStreamDesc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result__: *mut D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC) {
            Identity::call_impl::<_, OFFSET>(this, |this| *result__ = Impl::GetOutputStreamDesc(this))
        }
        ID3D12VideoProcessor_Vtbl {
            base__: <super::super::Graphics::Direct3D12::ID3D12Pageable as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNodeMask: GetNodeMask::<Identity, Impl, OFFSET>,
            GetNumInputStreamDescs: GetNumInputStreamDescs::<Identity, Impl, OFFSET>,
            GetInputStreamDescs: GetInputStreamDescs::<Identity, Impl, OFFSET>,
            GetOutputStreamDesc: GetOutputStreamDesc::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`, `\"Win32_Graphics_Dxgi_Common\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
pub trait ID3D12VideoProcessor1_Impl: ::windows_core::BaseImpl + ID3D12VideoProcessor_Impl {
    fn GetProtectedResourceSession(this: &Self::This, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl ::windows_core::Iids for ID3D12VideoProcessor1 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ID3D12VideoProcessor);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12", feature = "Win32_Graphics_Dxgi_Common"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor1_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ID3D12VideoProcessor1 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProtectedResourceSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ID3D12VideoProcessor1_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppprotectedsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectedResourceSession(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppprotectedsession)).into())
        }
        ID3D12VideoProcessor1_Vtbl {
            base__: <ID3D12VideoProcessor as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProtectedResourceSession: GetProtectedResourceSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDXVAHD_Device_Impl: ::windows_core::BaseImpl {
    fn CreateVideoSurface(this: &Self::This, width: u32, height: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, r#type: DXVAHD_SURFACE_TYPE, numsurfaces: u32, ppsurfaces: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetVideoProcessorDeviceCaps(this: &Self::This, pcaps: *mut DXVAHD_VPDEVCAPS) -> ::windows_core::Result<()>;
    fn GetVideoProcessorOutputFormats(this: &Self::This, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::Result<()>;
    fn GetVideoProcessorInputFormats(this: &Self::This, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::Result<()>;
    fn GetVideoProcessorCaps(this: &Self::This, count: u32, pcaps: *mut DXVAHD_VPCAPS) -> ::windows_core::Result<()>;
    fn GetVideoProcessorCustomRates(this: &Self::This, pvpguid: *const ::windows_core::GUID, count: u32, prates: *mut DXVAHD_CUSTOM_RATE_DATA) -> ::windows_core::Result<()>;
    fn GetVideoProcessorFilterRange(this: &Self::This, filter: DXVAHD_FILTER) -> ::windows_core::Result<DXVAHD_FILTER_RANGE_DATA>;
    fn CreateVideoProcessor(this: &Self::This, pvpguid: *const ::windows_core::GUID) -> ::windows_core::Result<IDXVAHD_VideoProcessor>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDXVAHD_Device {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDXVAHD_Device {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateVideoSurface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, width: u32, height: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, r#type: DXVAHD_SURFACE_TYPE, numsurfaces: u32, ppsurfaces: *mut *mut ::core::ffi::c_void, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateVideoSurface(this, ::core::mem::transmute_copy(&width), ::core::mem::transmute_copy(&height), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&pool), ::core::mem::transmute_copy(&usage), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&numsurfaces), ::core::mem::transmute_copy(&ppsurfaces), ::core::mem::transmute_copy(&psharedhandle)).into())
        }
        unsafe extern "system" fn GetVideoProcessorDeviceCaps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcaps: *mut DXVAHD_VPDEVCAPS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorDeviceCaps(this, ::core::mem::transmute_copy(&pcaps)).into())
        }
        unsafe extern "system" fn GetVideoProcessorOutputFormats<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorOutputFormats(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pformats)).into())
        }
        unsafe extern "system" fn GetVideoProcessorInputFormats<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, pformats: *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorInputFormats(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pformats)).into())
        }
        unsafe extern "system" fn GetVideoProcessorCaps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: u32, pcaps: *mut DXVAHD_VPCAPS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorCaps(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&pcaps)).into())
        }
        unsafe extern "system" fn GetVideoProcessorCustomRates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvpguid: *const ::windows_core::GUID, count: u32, prates: *mut DXVAHD_CUSTOM_RATE_DATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorCustomRates(this, ::core::mem::transmute_copy(&pvpguid), ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&prates)).into())
        }
        unsafe extern "system" fn GetVideoProcessorFilterRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filter: DXVAHD_FILTER, prange: *mut DXVAHD_FILTER_RANGE_DATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoProcessorFilterRange(this, ::core::mem::transmute_copy(&filter)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateVideoProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_Device_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvpguid: *const ::windows_core::GUID, ppvideoprocessor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateVideoProcessor(this, ::core::mem::transmute_copy(&pvpguid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvideoprocessor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDXVAHD_Device_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateVideoSurface: CreateVideoSurface::<Identity, Impl, OFFSET>,
            GetVideoProcessorDeviceCaps: GetVideoProcessorDeviceCaps::<Identity, Impl, OFFSET>,
            GetVideoProcessorOutputFormats: GetVideoProcessorOutputFormats::<Identity, Impl, OFFSET>,
            GetVideoProcessorInputFormats: GetVideoProcessorInputFormats::<Identity, Impl, OFFSET>,
            GetVideoProcessorCaps: GetVideoProcessorCaps::<Identity, Impl, OFFSET>,
            GetVideoProcessorCustomRates: GetVideoProcessorCustomRates::<Identity, Impl, OFFSET>,
            GetVideoProcessorFilterRange: GetVideoProcessorFilterRange::<Identity, Impl, OFFSET>,
            CreateVideoProcessor: CreateVideoProcessor::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDXVAHD_VideoProcessor_Impl: ::windows_core::BaseImpl {
    fn SetVideoProcessBltState(this: &Self::This, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetVideoProcessBltState(this: &Self::This, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetVideoProcessStreamState(this: &Self::This, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetVideoProcessStreamState(this: &Self::This, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn VideoProcessBltHD(this: &Self::This, poutputsurface: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, outputframe: u32, streamcount: u32, pstreams: *const DXVAHD_STREAM_DATA) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDXVAHD_VideoProcessor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_VideoProcessor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDXVAHD_VideoProcessor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetVideoProcessBltState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoProcessBltState(this, ::core::mem::transmute_copy(&state), ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&pdata)).into())
        }
        unsafe extern "system" fn GetVideoProcessBltState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, state: DXVAHD_BLT_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessBltState(this, ::core::mem::transmute_copy(&state), ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&pdata)).into())
        }
        unsafe extern "system" fn SetVideoProcessStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoProcessStreamState(this, ::core::mem::transmute_copy(&streamnumber), ::core::mem::transmute_copy(&state), ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&pdata)).into())
        }
        unsafe extern "system" fn GetVideoProcessStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streamnumber: u32, state: DXVAHD_STREAM_STATE, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessStreamState(this, ::core::mem::transmute_copy(&streamnumber), ::core::mem::transmute_copy(&state), ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&pdata)).into())
        }
        unsafe extern "system" fn VideoProcessBltHD<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDXVAHD_VideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, poutputsurface: *mut ::core::ffi::c_void, outputframe: u32, streamcount: u32, pstreams: *const DXVAHD_STREAM_DATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::VideoProcessBltHD(this, ::windows_core::from_raw_borrowed(&poutputsurface), ::core::mem::transmute_copy(&outputframe), ::core::mem::transmute_copy(&streamcount), ::core::mem::transmute_copy(&pstreams)).into())
        }
        IDXVAHD_VideoProcessor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetVideoProcessBltState: SetVideoProcessBltState::<Identity, Impl, OFFSET>,
            GetVideoProcessBltState: GetVideoProcessBltState::<Identity, Impl, OFFSET>,
            SetVideoProcessStreamState: SetVideoProcessStreamState::<Identity, Impl, OFFSET>,
            GetVideoProcessStreamState: GetVideoProcessStreamState::<Identity, Impl, OFFSET>,
            VideoProcessBltHD: VideoProcessBltHD::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
pub trait IDirect3D9ExOverlayExtension_Impl: ::windows_core::BaseImpl {
    fn CheckDeviceOverlayType(this: &Self::This, adapter: u32, devtype: super::super::Graphics::Direct3D9::D3DDEVTYPE, overlaywidth: u32, overlayheight: u32, overlayformat: super::super::Graphics::Direct3D9::D3DFORMAT, pdisplaymode: *mut super::super::Graphics::Direct3D9::D3DDISPLAYMODEEX, displayrotation: super::super::Graphics::Direct3D9::D3DDISPLAYROTATION, poverlaycaps: *mut D3DOVERLAYCAPS) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::windows_core::Iids for IDirect3D9ExOverlayExtension {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3D9ExOverlayExtension_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirect3D9ExOverlayExtension {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CheckDeviceOverlayType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3D9ExOverlayExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, adapter: u32, devtype: super::super::Graphics::Direct3D9::D3DDEVTYPE, overlaywidth: u32, overlayheight: u32, overlayformat: super::super::Graphics::Direct3D9::D3DFORMAT, pdisplaymode: *mut super::super::Graphics::Direct3D9::D3DDISPLAYMODEEX, displayrotation: super::super::Graphics::Direct3D9::D3DDISPLAYROTATION, poverlaycaps: *mut D3DOVERLAYCAPS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckDeviceOverlayType(this, ::core::mem::transmute_copy(&adapter), ::core::mem::transmute_copy(&devtype), ::core::mem::transmute_copy(&overlaywidth), ::core::mem::transmute_copy(&overlayheight), ::core::mem::transmute_copy(&overlayformat), ::core::mem::transmute_copy(&pdisplaymode), ::core::mem::transmute_copy(&displayrotation), ::core::mem::transmute_copy(&poverlaycaps)).into())
        }
        IDirect3D9ExOverlayExtension_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CheckDeviceOverlayType: CheckDeviceOverlayType::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirect3DAuthenticatedChannel9_Impl: ::windows_core::BaseImpl {
    fn GetCertificateSize(this: &Self::This, pcertificatesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCertificate(this: &Self::This, certifactesize: u32, ppcertificate: *mut u8) -> ::windows_core::Result<()>;
    fn NegotiateKeyExchange(this: &Self::This, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn Query(this: &Self::This, inputsize: u32, pinput: *const ::core::ffi::c_void, outputsize: u32, poutput: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn Configure(this: &Self::This, inputsize: u32, pinput: *const ::core::ffi::c_void, poutput: *mut super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirect3DAuthenticatedChannel9 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DAuthenticatedChannel9_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirect3DAuthenticatedChannel9 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCertificateSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DAuthenticatedChannel9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcertificatesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCertificateSize(this, ::core::mem::transmute_copy(&pcertificatesize)).into())
        }
        unsafe extern "system" fn GetCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DAuthenticatedChannel9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, certifactesize: u32, ppcertificate: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCertificate(this, ::core::mem::transmute_copy(&certifactesize), ::core::mem::transmute_copy(&ppcertificate)).into())
        }
        unsafe extern "system" fn NegotiateKeyExchange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DAuthenticatedChannel9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NegotiateKeyExchange(this, ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&pdata)).into())
        }
        unsafe extern "system" fn Query<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DAuthenticatedChannel9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputsize: u32, pinput: *const ::core::ffi::c_void, outputsize: u32, poutput: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Query(this, ::core::mem::transmute_copy(&inputsize), ::core::mem::transmute_copy(&pinput), ::core::mem::transmute_copy(&outputsize), ::core::mem::transmute_copy(&poutput)).into())
        }
        unsafe extern "system" fn Configure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DAuthenticatedChannel9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputsize: u32, pinput: *const ::core::ffi::c_void, poutput: *mut super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNEL_CONFIGURE_OUTPUT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Configure(this, ::core::mem::transmute_copy(&inputsize), ::core::mem::transmute_copy(&pinput), ::core::mem::transmute_copy(&poutput)).into())
        }
        IDirect3DAuthenticatedChannel9_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCertificateSize: GetCertificateSize::<Identity, Impl, OFFSET>,
            GetCertificate: GetCertificate::<Identity, Impl, OFFSET>,
            NegotiateKeyExchange: NegotiateKeyExchange::<Identity, Impl, OFFSET>,
            Query: Query::<Identity, Impl, OFFSET>,
            Configure: Configure::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(feature = "Win32_Graphics_Direct3D9")]
pub trait IDirect3DCryptoSession9_Impl: ::windows_core::BaseImpl {
    fn GetCertificateSize(this: &Self::This, pcertificatesize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCertificate(this: &Self::This, certifactesize: u32, ppcertificate: *mut u8) -> ::windows_core::Result<()>;
    fn NegotiateKeyExchange(this: &Self::This, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn EncryptionBlt(this: &Self::This, psrcsurface: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, pdstsurface: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, dstsurfacesize: u32, piv: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn DecryptionBlt(this: &Self::This, psrcsurface: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, pdstsurface: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, srcsurfacesize: u32, pencryptedblockinfo: *mut super::super::Graphics::Direct3D9::D3DENCRYPTED_BLOCK_INFO, pcontentkey: *mut ::core::ffi::c_void, piv: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetSurfacePitch(this: &Self::This, psrcsurface: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, psurfacepitch: *mut u32) -> ::windows_core::Result<()>;
    fn StartSessionKeyRefresh(this: &Self::This, prandomnumber: *mut ::core::ffi::c_void, randomnumbersize: u32) -> ::windows_core::Result<()>;
    fn FinishSessionKeyRefresh(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetEncryptionBltKey(this: &Self::This, preadbackkey: *mut ::core::ffi::c_void, keysize: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl ::windows_core::Iids for IDirect3DCryptoSession9 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Graphics_Direct3D9")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirect3DCryptoSession9 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCertificateSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcertificatesize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCertificateSize(this, ::core::mem::transmute_copy(&pcertificatesize)).into())
        }
        unsafe extern "system" fn GetCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, certifactesize: u32, ppcertificate: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCertificate(this, ::core::mem::transmute_copy(&certifactesize), ::core::mem::transmute_copy(&ppcertificate)).into())
        }
        unsafe extern "system" fn NegotiateKeyExchange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, datasize: u32, pdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NegotiateKeyExchange(this, ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&pdata)).into())
        }
        unsafe extern "system" fn EncryptionBlt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrcsurface: *mut ::core::ffi::c_void, pdstsurface: *mut ::core::ffi::c_void, dstsurfacesize: u32, piv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EncryptionBlt(this, ::windows_core::from_raw_borrowed(&psrcsurface), ::windows_core::from_raw_borrowed(&pdstsurface), ::core::mem::transmute_copy(&dstsurfacesize), ::core::mem::transmute_copy(&piv)).into())
        }
        unsafe extern "system" fn DecryptionBlt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrcsurface: *mut ::core::ffi::c_void, pdstsurface: *mut ::core::ffi::c_void, srcsurfacesize: u32, pencryptedblockinfo: *mut super::super::Graphics::Direct3D9::D3DENCRYPTED_BLOCK_INFO, pcontentkey: *mut ::core::ffi::c_void, piv: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecryptionBlt(this, ::windows_core::from_raw_borrowed(&psrcsurface), ::windows_core::from_raw_borrowed(&pdstsurface), ::core::mem::transmute_copy(&srcsurfacesize), ::core::mem::transmute_copy(&pencryptedblockinfo), ::core::mem::transmute_copy(&pcontentkey), ::core::mem::transmute_copy(&piv)).into())
        }
        unsafe extern "system" fn GetSurfacePitch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrcsurface: *mut ::core::ffi::c_void, psurfacepitch: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSurfacePitch(this, ::windows_core::from_raw_borrowed(&psrcsurface), ::core::mem::transmute_copy(&psurfacepitch)).into())
        }
        unsafe extern "system" fn StartSessionKeyRefresh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prandomnumber: *mut ::core::ffi::c_void, randomnumbersize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartSessionKeyRefresh(this, ::core::mem::transmute_copy(&prandomnumber), ::core::mem::transmute_copy(&randomnumbersize)).into())
        }
        unsafe extern "system" fn FinishSessionKeyRefresh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FinishSessionKeyRefresh(this).into())
        }
        unsafe extern "system" fn GetEncryptionBltKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DCryptoSession9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, preadbackkey: *mut ::core::ffi::c_void, keysize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEncryptionBltKey(this, ::core::mem::transmute_copy(&preadbackkey), ::core::mem::transmute_copy(&keysize)).into())
        }
        IDirect3DCryptoSession9_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCertificateSize: GetCertificateSize::<Identity, Impl, OFFSET>,
            GetCertificate: GetCertificate::<Identity, Impl, OFFSET>,
            NegotiateKeyExchange: NegotiateKeyExchange::<Identity, Impl, OFFSET>,
            EncryptionBlt: EncryptionBlt::<Identity, Impl, OFFSET>,
            DecryptionBlt: DecryptionBlt::<Identity, Impl, OFFSET>,
            GetSurfacePitch: GetSurfacePitch::<Identity, Impl, OFFSET>,
            StartSessionKeyRefresh: StartSessionKeyRefresh::<Identity, Impl, OFFSET>,
            FinishSessionKeyRefresh: FinishSessionKeyRefresh::<Identity, Impl, OFFSET>,
            GetEncryptionBltKey: GetEncryptionBltKey::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirect3DDevice9Video_Impl: ::windows_core::BaseImpl {
    fn GetContentProtectionCaps(this: &Self::This, pcryptotype: *const ::windows_core::GUID, pdecodeprofile: *const ::windows_core::GUID, pcaps: *mut D3DCONTENTPROTECTIONCAPS) -> ::windows_core::Result<()>;
    fn CreateAuthenticatedChannel(this: &Self::This, channeltype: super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE, ppauthenticatedchannel: *mut ::core::option::Option<IDirect3DAuthenticatedChannel9>, pchannelhandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn CreateCryptoSession(this: &Self::This, pcryptotype: *const ::windows_core::GUID, pdecodeprofile: *const ::windows_core::GUID, ppcryptosession: *mut ::core::option::Option<IDirect3DCryptoSession9>, pcryptohandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirect3DDevice9Video {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDevice9Video_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirect3DDevice9Video {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetContentProtectionCaps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDevice9Video_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcryptotype: *const ::windows_core::GUID, pdecodeprofile: *const ::windows_core::GUID, pcaps: *mut D3DCONTENTPROTECTIONCAPS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContentProtectionCaps(this, ::core::mem::transmute_copy(&pcryptotype), ::core::mem::transmute_copy(&pdecodeprofile), ::core::mem::transmute_copy(&pcaps)).into())
        }
        unsafe extern "system" fn CreateAuthenticatedChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDevice9Video_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channeltype: super::super::Graphics::Direct3D9::D3DAUTHENTICATEDCHANNELTYPE, ppauthenticatedchannel: *mut *mut ::core::ffi::c_void, pchannelhandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateAuthenticatedChannel(this, ::core::mem::transmute_copy(&channeltype), ::core::mem::transmute_copy(&ppauthenticatedchannel), ::core::mem::transmute_copy(&pchannelhandle)).into())
        }
        unsafe extern "system" fn CreateCryptoSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDevice9Video_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcryptotype: *const ::windows_core::GUID, pdecodeprofile: *const ::windows_core::GUID, ppcryptosession: *mut *mut ::core::ffi::c_void, pcryptohandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateCryptoSession(this, ::core::mem::transmute_copy(&pcryptotype), ::core::mem::transmute_copy(&pdecodeprofile), ::core::mem::transmute_copy(&ppcryptosession), ::core::mem::transmute_copy(&pcryptohandle)).into())
        }
        IDirect3DDevice9Video_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetContentProtectionCaps: GetContentProtectionCaps::<Identity, Impl, OFFSET>,
            CreateAuthenticatedChannel: CreateAuthenticatedChannel::<Identity, Impl, OFFSET>,
            CreateCryptoSession: CreateCryptoSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirect3DDeviceManager9_Impl: ::windows_core::BaseImpl {
    fn ResetDevice(this: &Self::This, pdevice: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DDevice9>, resettoken: u32) -> ::windows_core::Result<()>;
    fn OpenDeviceHandle(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HANDLE>;
    fn CloseDeviceHandle(this: &Self::This, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn TestDevice(this: &Self::This, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn LockDevice(this: &Self::This, hdevice: super::super::Foundation::HANDLE, ppdevice: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DDevice9>, fblock: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn UnlockDevice(this: &Self::This, hdevice: super::super::Foundation::HANDLE, fsavestate: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetVideoService(this: &Self::This, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows_core::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirect3DDeviceManager9 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirect3DDeviceManager9 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ResetDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdevice: *mut ::core::ffi::c_void, resettoken: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetDevice(this, ::windows_core::from_raw_borrowed(&pdevice), ::core::mem::transmute_copy(&resettoken)).into())
        }
        unsafe extern "system" fn OpenDeviceHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phdevice: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OpenDeviceHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phdevice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CloseDeviceHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseDeviceHandle(this, ::core::mem::transmute_copy(&hdevice)).into())
        }
        unsafe extern "system" fn TestDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TestDevice(this, ::core::mem::transmute_copy(&hdevice)).into())
        }
        unsafe extern "system" fn LockDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE, ppdevice: *mut *mut ::core::ffi::c_void, fblock: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockDevice(this, ::core::mem::transmute_copy(&hdevice), ::core::mem::transmute_copy(&ppdevice), ::core::mem::transmute_copy(&fblock)).into())
        }
        unsafe extern "system" fn UnlockDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE, fsavestate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockDevice(this, ::core::mem::transmute_copy(&hdevice), ::core::mem::transmute_copy(&fsavestate)).into())
        }
        unsafe extern "system" fn GetVideoService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirect3DDeviceManager9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows_core::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoService(this, ::core::mem::transmute_copy(&hdevice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppservice)).into())
        }
        IDirect3DDeviceManager9_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ResetDevice: ResetDevice::<Identity, Impl, OFFSET>,
            OpenDeviceHandle: OpenDeviceHandle::<Identity, Impl, OFFSET>,
            CloseDeviceHandle: CloseDeviceHandle::<Identity, Impl, OFFSET>,
            TestDevice: TestDevice::<Identity, Impl, OFFSET>,
            LockDevice: LockDevice::<Identity, Impl, OFFSET>,
            UnlockDevice: UnlockDevice::<Identity, Impl, OFFSET>,
            GetVideoService: GetVideoService::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirectXVideoAccelerationService_Impl: ::windows_core::BaseImpl {
    fn CreateSurface(this: &Self::This, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: &DXVA2_VideoRenderTargetType, ppsurface: *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirectXVideoAccelerationService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoAccelerationService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirectXVideoAccelerationService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateSurface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoAccelerationService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, width: u32, height: u32, backbuffers: u32, format: super::super::Graphics::Direct3D9::D3DFORMAT, pool: super::super::Graphics::Direct3D9::D3DPOOL, usage: u32, dxvatype: u32, ppsurface: *mut *mut ::core::ffi::c_void, psharedhandle: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateSurface(this, ::core::mem::transmute_copy(&width), ::core::mem::transmute_copy(&height), ::core::mem::transmute_copy(&backbuffers), ::core::mem::transmute_copy(&format), ::core::mem::transmute_copy(&pool), ::core::mem::transmute_copy(&usage), ::core::mem::transmute(&dxvatype), ::core::mem::transmute_copy(&ppsurface), ::core::mem::transmute_copy(&psharedhandle)).into())
        }
        IDirectXVideoAccelerationService_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateSurface: CreateSurface::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirectXVideoDecoder_Impl: ::windows_core::BaseImpl {
    fn GetVideoDecoderService(this: &Self::This) -> ::windows_core::Result<IDirectXVideoDecoderService>;
    fn GetCreationParameters(this: &Self::This, pdeviceguid: *mut ::windows_core::GUID, pvideodesc: *mut DXVA2_VideoDesc, pconfig: *mut DXVA2_ConfigPictureDecode, pdecoderrendertargets: *mut *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, pnumsurfaces: *mut u32) -> ::windows_core::Result<()>;
    fn GetBuffer(this: &Self::This, buffertype: &DXVA2_BufferfType, ppbuffer: *mut *mut ::core::ffi::c_void, pbuffersize: *mut u32) -> ::windows_core::Result<()>;
    fn ReleaseBuffer(this: &Self::This, buffertype: u32) -> ::windows_core::Result<()>;
    fn BeginFrame(this: &Self::This, prendertarget: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, pvpvpdata: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn EndFrame(this: &Self::This, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn Execute(this: &Self::This, pexecuteparams: *const DXVA2_DecodeExecuteParams) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirectXVideoDecoder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirectXVideoDecoder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetVideoDecoderService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoDecoderService(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppservice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCreationParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdeviceguid: *mut ::windows_core::GUID, pvideodesc: *mut DXVA2_VideoDesc, pconfig: *mut DXVA2_ConfigPictureDecode, pdecoderrendertargets: *mut *mut ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, pnumsurfaces: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCreationParameters(this, ::core::mem::transmute_copy(&pdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&pconfig), ::core::mem::transmute_copy(&pdecoderrendertargets), ::core::mem::transmute_copy(&pnumsurfaces)).into())
        }
        unsafe extern "system" fn GetBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffertype: u32, ppbuffer: *mut *mut ::core::ffi::c_void, pbuffersize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBuffer(this, ::core::mem::transmute(&buffertype), ::core::mem::transmute_copy(&ppbuffer), ::core::mem::transmute_copy(&pbuffersize)).into())
        }
        unsafe extern "system" fn ReleaseBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buffertype: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReleaseBuffer(this, ::core::mem::transmute_copy(&buffertype)).into())
        }
        unsafe extern "system" fn BeginFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prendertarget: *mut ::core::ffi::c_void, pvpvpdata: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginFrame(this, ::windows_core::from_raw_borrowed(&prendertarget), ::core::mem::transmute_copy(&pvpvpdata)).into())
        }
        unsafe extern "system" fn EndFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndFrame(this, ::core::mem::transmute_copy(&phandlecomplete)).into())
        }
        unsafe extern "system" fn Execute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pexecuteparams: *const DXVA2_DecodeExecuteParams) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Execute(this, ::core::mem::transmute_copy(&pexecuteparams)).into())
        }
        IDirectXVideoDecoder_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetVideoDecoderService: GetVideoDecoderService::<Identity, Impl, OFFSET>,
            GetCreationParameters: GetCreationParameters::<Identity, Impl, OFFSET>,
            GetBuffer: GetBuffer::<Identity, Impl, OFFSET>,
            ReleaseBuffer: ReleaseBuffer::<Identity, Impl, OFFSET>,
            BeginFrame: BeginFrame::<Identity, Impl, OFFSET>,
            EndFrame: EndFrame::<Identity, Impl, OFFSET>,
            Execute: Execute::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirectXVideoDecoderService_Impl: ::windows_core::BaseImpl + IDirectXVideoAccelerationService_Impl {
    fn GetDecoderDeviceGuids(this: &Self::This, pcount: *mut u32, pguids: *mut *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetDecoderRenderTargets(this: &Self::This, guid: *const ::windows_core::GUID, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::Result<()>;
    fn GetDecoderConfigurations(this: &Self::This, guid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, preserved: *const ::core::ffi::c_void, pcount: *mut u32, ppconfigs: *mut *mut DXVA2_ConfigPictureDecode) -> ::windows_core::Result<()>;
    fn CreateVideoDecoder(this: &Self::This, guid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, pconfig: *const DXVA2_ConfigPictureDecode, ppdecoderrendertargets: *const ::core::option::Option<super::super::Graphics::Direct3D9::IDirect3DSurface9>, numrendertargets: u32) -> ::windows_core::Result<IDirectXVideoDecoder>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirectXVideoDecoderService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDirectXVideoAccelerationService);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoderService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirectXVideoDecoderService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDecoderDeviceGuids<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoderService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut u32, pguids: *mut *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDecoderDeviceGuids(this, ::core::mem::transmute_copy(&pcount), ::core::mem::transmute_copy(&pguids)).into())
        }
        unsafe extern "system" fn GetDecoderRenderTargets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoderService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDecoderRenderTargets(this, ::core::mem::transmute_copy(&guid), ::core::mem::transmute_copy(&pcount), ::core::mem::transmute_copy(&pformats)).into())
        }
        unsafe extern "system" fn GetDecoderConfigurations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoderService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, preserved: *const ::core::ffi::c_void, pcount: *mut u32, ppconfigs: *mut *mut DXVA2_ConfigPictureDecode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDecoderConfigurations(this, ::core::mem::transmute_copy(&guid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&preserved), ::core::mem::transmute_copy(&pcount), ::core::mem::transmute_copy(&ppconfigs)).into())
        }
        unsafe extern "system" fn CreateVideoDecoder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoDecoderService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, pconfig: *const DXVA2_ConfigPictureDecode, ppdecoderrendertargets: *const *mut ::core::ffi::c_void, numrendertargets: u32, ppdecode: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateVideoDecoder(this, ::core::mem::transmute_copy(&guid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&pconfig), ::core::mem::transmute_copy(&ppdecoderrendertargets), ::core::mem::transmute_copy(&numrendertargets)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdecode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDirectXVideoDecoderService_Vtbl {
            base__: <IDirectXVideoAccelerationService as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDecoderDeviceGuids: GetDecoderDeviceGuids::<Identity, Impl, OFFSET>,
            GetDecoderRenderTargets: GetDecoderRenderTargets::<Identity, Impl, OFFSET>,
            GetDecoderConfigurations: GetDecoderConfigurations::<Identity, Impl, OFFSET>,
            CreateVideoDecoder: CreateVideoDecoder::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IDirectXVideoMemoryConfiguration_Impl: ::windows_core::BaseImpl {
    fn GetAvailableSurfaceTypeByIndex(this: &Self::This, dwtypeindex: u32) -> ::windows_core::Result<DXVA2_SurfaceType>;
    fn SetSurfaceType(this: &Self::This, dwtype: DXVA2_SurfaceType) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDirectXVideoMemoryConfiguration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoMemoryConfiguration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirectXVideoMemoryConfiguration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAvailableSurfaceTypeByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoMemoryConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtypeindex: u32, pdwtype: *mut DXVA2_SurfaceType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAvailableSurfaceTypeByIndex(this, ::core::mem::transmute_copy(&dwtypeindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSurfaceType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoMemoryConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtype: DXVA2_SurfaceType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSurfaceType(this, ::core::mem::transmute_copy(&dwtype)).into())
        }
        IDirectXVideoMemoryConfiguration_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAvailableSurfaceTypeByIndex: GetAvailableSurfaceTypeByIndex::<Identity, Impl, OFFSET>,
            SetSurfaceType: SetSurfaceType::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirectXVideoProcessor_Impl: ::windows_core::BaseImpl {
    fn GetVideoProcessorService(this: &Self::This) -> ::windows_core::Result<IDirectXVideoProcessorService>;
    fn GetCreationParameters(this: &Self::This, pdeviceguid: *mut ::windows_core::GUID, pvideodesc: *mut DXVA2_VideoDesc, prendertargetformat: *mut super::super::Graphics::Direct3D9::D3DFORMAT, pmaxnumsubstreams: *mut u32) -> ::windows_core::Result<()>;
    fn GetVideoProcessorCaps(this: &Self::This, pcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows_core::Result<()>;
    fn GetProcAmpRange(this: &Self::This, procampcap: u32) -> ::windows_core::Result<DXVA2_ValueRange>;
    fn GetFilterPropertyRange(this: &Self::This, filtersetting: u32) -> ::windows_core::Result<DXVA2_ValueRange>;
    fn VideoProcessBlt(this: &Self::This, prendertarget: ::core::option::Option<&super::super::Graphics::Direct3D9::IDirect3DSurface9>, pbltparams: *const DXVA2_VideoProcessBltParams, psamples: *const DXVA2_VideoSample, numsamples: u32, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirectXVideoProcessor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirectXVideoProcessor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetVideoProcessorService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoProcessorService(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppservice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCreationParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdeviceguid: *mut ::windows_core::GUID, pvideodesc: *mut DXVA2_VideoDesc, prendertargetformat: *mut super::super::Graphics::Direct3D9::D3DFORMAT, pmaxnumsubstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCreationParameters(this, ::core::mem::transmute_copy(&pdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&prendertargetformat), ::core::mem::transmute_copy(&pmaxnumsubstreams)).into())
        }
        unsafe extern "system" fn GetVideoProcessorCaps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorCaps(this, ::core::mem::transmute_copy(&pcaps)).into())
        }
        unsafe extern "system" fn GetProcAmpRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, procampcap: u32, prange: *mut DXVA2_ValueRange) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcAmpRange(this, ::core::mem::transmute_copy(&procampcap)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFilterPropertyRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filtersetting: u32, prange: *mut DXVA2_ValueRange) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFilterPropertyRange(this, ::core::mem::transmute_copy(&filtersetting)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VideoProcessBlt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prendertarget: *mut ::core::ffi::c_void, pbltparams: *const DXVA2_VideoProcessBltParams, psamples: *const DXVA2_VideoSample, numsamples: u32, phandlecomplete: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::VideoProcessBlt(this, ::windows_core::from_raw_borrowed(&prendertarget), ::core::mem::transmute_copy(&pbltparams), ::core::mem::transmute_copy(&psamples), ::core::mem::transmute_copy(&numsamples), ::core::mem::transmute_copy(&phandlecomplete)).into())
        }
        IDirectXVideoProcessor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetVideoProcessorService: GetVideoProcessorService::<Identity, Impl, OFFSET>,
            GetCreationParameters: GetCreationParameters::<Identity, Impl, OFFSET>,
            GetVideoProcessorCaps: GetVideoProcessorCaps::<Identity, Impl, OFFSET>,
            GetProcAmpRange: GetProcAmpRange::<Identity, Impl, OFFSET>,
            GetFilterPropertyRange: GetFilterPropertyRange::<Identity, Impl, OFFSET>,
            VideoProcessBlt: VideoProcessBlt::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IDirectXVideoProcessorService_Impl: ::windows_core::BaseImpl + IDirectXVideoAccelerationService_Impl {
    fn RegisterVideoProcessorSoftwareDevice(this: &Self::This, pcallbacks: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetVideoProcessorDeviceGuids(this: &Self::This, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pguids: *mut *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetVideoProcessorRenderTargets(this: &Self::This, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::Result<()>;
    fn GetVideoProcessorSubStreamFormats(this: &Self::This, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::Result<()>;
    fn GetVideoProcessorCaps(this: &Self::This, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows_core::Result<()>;
    fn GetProcAmpRange(this: &Self::This, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, procampcap: u32) -> ::windows_core::Result<DXVA2_ValueRange>;
    fn GetFilterPropertyRange(this: &Self::This, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, filtersetting: u32) -> ::windows_core::Result<DXVA2_ValueRange>;
    fn CreateVideoProcessor(this: &Self::This, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, maxnumsubstreams: u32) -> ::windows_core::Result<IDirectXVideoProcessor>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IDirectXVideoProcessorService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDirectXVideoAccelerationService);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDirectXVideoProcessorService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterVideoProcessorSoftwareDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallbacks: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterVideoProcessorSoftwareDevice(this, ::core::mem::transmute_copy(&pcallbacks)).into())
        }
        unsafe extern "system" fn GetVideoProcessorDeviceGuids<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pguids: *mut *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorDeviceGuids(this, ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&pcount), ::core::mem::transmute_copy(&pguids)).into())
        }
        unsafe extern "system" fn GetVideoProcessorRenderTargets<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorRenderTargets(this, ::core::mem::transmute_copy(&videoprocdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&pcount), ::core::mem::transmute_copy(&pformats)).into())
        }
        unsafe extern "system" fn GetVideoProcessorSubStreamFormats<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcount: *mut u32, pformats: *mut *mut super::super::Graphics::Direct3D9::D3DFORMAT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorSubStreamFormats(this, ::core::mem::transmute_copy(&videoprocdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&rendertargetformat), ::core::mem::transmute_copy(&pcount), ::core::mem::transmute_copy(&pformats)).into())
        }
        unsafe extern "system" fn GetVideoProcessorCaps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, pcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorCaps(this, ::core::mem::transmute_copy(&videoprocdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&rendertargetformat), ::core::mem::transmute_copy(&pcaps)).into())
        }
        unsafe extern "system" fn GetProcAmpRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, procampcap: u32, prange: *mut DXVA2_ValueRange) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcAmpRange(this, ::core::mem::transmute_copy(&videoprocdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&rendertargetformat), ::core::mem::transmute_copy(&procampcap)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFilterPropertyRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, filtersetting: u32, prange: *mut DXVA2_ValueRange) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFilterPropertyRange(this, ::core::mem::transmute_copy(&videoprocdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&rendertargetformat), ::core::mem::transmute_copy(&filtersetting)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateVideoProcessor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDirectXVideoProcessorService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, videoprocdeviceguid: *const ::windows_core::GUID, pvideodesc: *const DXVA2_VideoDesc, rendertargetformat: super::super::Graphics::Direct3D9::D3DFORMAT, maxnumsubstreams: u32, ppvidprocess: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateVideoProcessor(this, ::core::mem::transmute_copy(&videoprocdeviceguid), ::core::mem::transmute_copy(&pvideodesc), ::core::mem::transmute_copy(&rendertargetformat), ::core::mem::transmute_copy(&maxnumsubstreams)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvidprocess, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDirectXVideoProcessorService_Vtbl {
            base__: <IDirectXVideoAccelerationService as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterVideoProcessorSoftwareDevice: RegisterVideoProcessorSoftwareDevice::<Identity, Impl, OFFSET>,
            GetVideoProcessorDeviceGuids: GetVideoProcessorDeviceGuids::<Identity, Impl, OFFSET>,
            GetVideoProcessorRenderTargets: GetVideoProcessorRenderTargets::<Identity, Impl, OFFSET>,
            GetVideoProcessorSubStreamFormats: GetVideoProcessorSubStreamFormats::<Identity, Impl, OFFSET>,
            GetVideoProcessorCaps: GetVideoProcessorCaps::<Identity, Impl, OFFSET>,
            GetProcAmpRange: GetProcAmpRange::<Identity, Impl, OFFSET>,
            GetFilterPropertyRange: GetFilterPropertyRange::<Identity, Impl, OFFSET>,
            CreateVideoProcessor: CreateVideoProcessor::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IEVRFilterConfig_Impl: ::windows_core::BaseImpl {
    fn SetNumberOfStreams(this: &Self::This, dwmaxstreams: u32) -> ::windows_core::Result<()>;
    fn GetNumberOfStreams(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IEVRFilterConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRFilterConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEVRFilterConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetNumberOfStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRFilterConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmaxstreams: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNumberOfStreams(this, ::core::mem::transmute_copy(&dwmaxstreams)).into())
        }
        unsafe extern "system" fn GetNumberOfStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRFilterConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmaxstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfStreams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwmaxstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEVRFilterConfig_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetNumberOfStreams: SetNumberOfStreams::<Identity, Impl, OFFSET>,
            GetNumberOfStreams: GetNumberOfStreams::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IEVRFilterConfigEx_Impl: ::windows_core::BaseImpl + IEVRFilterConfig_Impl {
    fn SetConfigPrefs(this: &Self::This, dwconfigflags: u32) -> ::windows_core::Result<()>;
    fn GetConfigPrefs(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IEVRFilterConfigEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IEVRFilterConfig);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRFilterConfigEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEVRFilterConfigEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetConfigPrefs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRFilterConfigEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwconfigflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConfigPrefs(this, ::core::mem::transmute_copy(&dwconfigflags)).into())
        }
        unsafe extern "system" fn GetConfigPrefs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRFilterConfigEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwconfigflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConfigPrefs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwconfigflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEVRFilterConfigEx_Vtbl {
            base__: <IEVRFilterConfig as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetConfigPrefs: SetConfigPrefs::<Identity, Impl, OFFSET>,
            GetConfigPrefs: GetConfigPrefs::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IEVRTrustedVideoPlugin_Impl: ::windows_core::BaseImpl {
    fn IsInTrustedVideoMode(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn CanConstrict(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetConstriction(this: &Self::This, dwkpix: u32) -> ::windows_core::Result<()>;
    fn DisableImageExport(this: &Self::This, bdisable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IEVRTrustedVideoPlugin {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRTrustedVideoPlugin_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEVRTrustedVideoPlugin {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsInTrustedVideoMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRTrustedVideoPlugin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pyes: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsInTrustedVideoMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pyes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CanConstrict<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRTrustedVideoPlugin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pyes: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CanConstrict(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pyes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetConstriction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRTrustedVideoPlugin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwkpix: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConstriction(this, ::core::mem::transmute_copy(&dwkpix)).into())
        }
        unsafe extern "system" fn DisableImageExport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRTrustedVideoPlugin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bdisable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisableImageExport(this, ::core::mem::transmute_copy(&bdisable)).into())
        }
        IEVRTrustedVideoPlugin_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsInTrustedVideoMode: IsInTrustedVideoMode::<Identity, Impl, OFFSET>,
            CanConstrict: CanConstrict::<Identity, Impl, OFFSET>,
            SetConstriction: SetConstriction::<Identity, Impl, OFFSET>,
            DisableImageExport: DisableImageExport::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IEVRVideoStreamControl_Impl: ::windows_core::BaseImpl {
    fn SetStreamActiveState(this: &Self::This, factive: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetStreamActiveState(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IEVRVideoStreamControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRVideoStreamControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEVRVideoStreamControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetStreamActiveState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRVideoStreamControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, factive: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamActiveState(this, ::core::mem::transmute_copy(&factive)).into())
        }
        unsafe extern "system" fn GetStreamActiveState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEVRVideoStreamControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpfactive: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamActiveState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpfactive, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEVRVideoStreamControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetStreamActiveState: SetStreamActiveState::<Identity, Impl, OFFSET>,
            GetStreamActiveState: GetStreamActiveState::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IFileClient_Impl: ::windows_core::BaseImpl {
    fn GetObjectDiskSize(this: &Self::This, pqwsize: *mut u64) -> ::windows_core::Result<()>;
    fn Write(this: &Self::This, pfio: ::core::option::Option<&IFileIo>) -> ::windows_core::Result<()>;
    fn Read(this: &Self::This, pfio: ::core::option::Option<&IFileIo>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IFileClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetObjectDiskSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwsize: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetObjectDiskSize(this, ::core::mem::transmute_copy(&pqwsize)).into())
        }
        unsafe extern "system" fn Write<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfio: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Write(this, ::windows_core::from_raw_borrowed(&pfio)).into())
        }
        unsafe extern "system" fn Read<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfio: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Read(this, ::windows_core::from_raw_borrowed(&pfio)).into())
        }
        IFileClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetObjectDiskSize: GetObjectDiskSize::<Identity, Impl, OFFSET>,
            Write: Write::<Identity, Impl, OFFSET>,
            Read: Read::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IFileIo_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, eaccessmode: FILE_ACCESSMODE, eopenmode: FILE_OPENMODE, pwszfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLength(this: &Self::This, pqwlength: *mut u64) -> ::windows_core::Result<()>;
    fn SetLength(this: &Self::This, qwlength: u64) -> ::windows_core::Result<()>;
    fn GetCurrentPosition(this: &Self::This, pqwposition: *mut u64) -> ::windows_core::Result<()>;
    fn SetCurrentPosition(this: &Self::This, qwposition: u64) -> ::windows_core::Result<()>;
    fn IsEndOfStream(this: &Self::This, pbendofstream: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Read(this: &Self::This, pbt: *mut u8, ul: u32, pulread: *mut u32) -> ::windows_core::Result<()>;
    fn Write(this: &Self::This, pbt: *mut u8, ul: u32, pulwritten: *mut u32) -> ::windows_core::Result<()>;
    fn Seek(this: &Self::This, eseekorigin: SEEK_ORIGIN, qwseekoffset: u64, dwseekflags: u32, pqwcurrentposition: *mut u64) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IFileIo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IFileIo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eaccessmode: FILE_ACCESSMODE, eopenmode: FILE_OPENMODE, pwszfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&eaccessmode), ::core::mem::transmute_copy(&eopenmode), ::core::mem::transmute(&pwszfilename)).into())
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwlength: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLength(this, ::core::mem::transmute_copy(&pqwlength)).into())
        }
        unsafe extern "system" fn SetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwlength: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLength(this, ::core::mem::transmute_copy(&qwlength)).into())
        }
        unsafe extern "system" fn GetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwposition: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentPosition(this, ::core::mem::transmute_copy(&pqwposition)).into())
        }
        unsafe extern "system" fn SetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwposition: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentPosition(this, ::core::mem::transmute_copy(&qwposition)).into())
        }
        unsafe extern "system" fn IsEndOfStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbendofstream: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsEndOfStream(this, ::core::mem::transmute_copy(&pbendofstream)).into())
        }
        unsafe extern "system" fn Read<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbt: *mut u8, ul: u32, pulread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Read(this, ::core::mem::transmute_copy(&pbt), ::core::mem::transmute_copy(&ul), ::core::mem::transmute_copy(&pulread)).into())
        }
        unsafe extern "system" fn Write<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbt: *mut u8, ul: u32, pulwritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Write(this, ::core::mem::transmute_copy(&pbt), ::core::mem::transmute_copy(&ul), ::core::mem::transmute_copy(&pulwritten)).into())
        }
        unsafe extern "system" fn Seek<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, eseekorigin: SEEK_ORIGIN, qwseekoffset: u64, dwseekflags: u32, pqwcurrentposition: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Seek(this, ::core::mem::transmute_copy(&eseekorigin), ::core::mem::transmute_copy(&qwseekoffset), ::core::mem::transmute_copy(&dwseekflags), ::core::mem::transmute_copy(&pqwcurrentposition)).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IFileIo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IFileIo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            SetLength: SetLength::<Identity, Impl, OFFSET>,
            GetCurrentPosition: GetCurrentPosition::<Identity, Impl, OFFSET>,
            SetCurrentPosition: SetCurrentPosition::<Identity, Impl, OFFSET>,
            IsEndOfStream: IsEndOfStream::<Identity, Impl, OFFSET>,
            Read: Read::<Identity, Impl, OFFSET>,
            Write: Write::<Identity, Impl, OFFSET>,
            Seek: Seek::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMF2DBuffer_Impl: ::windows_core::BaseImpl {
    fn Lock2D(this: &Self::This, ppbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows_core::Result<()>;
    fn Unlock2D(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetScanline0AndPitch(this: &Self::This, pbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows_core::Result<()>;
    fn IsContiguousFormat(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetContiguousLength(this: &Self::This) -> ::windows_core::Result<u32>;
    fn ContiguousCopyTo(this: &Self::This, pbdestbuffer: *mut u8, cbdestbuffer: u32) -> ::windows_core::Result<()>;
    fn ContiguousCopyFrom(this: &Self::This, pbsrcbuffer: *const u8, cbsrcbuffer: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMF2DBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMF2DBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Lock2D<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Lock2D(this, ::core::mem::transmute_copy(&ppbscanline0), ::core::mem::transmute_copy(&plpitch)).into())
        }
        unsafe extern "system" fn Unlock2D<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unlock2D(this).into())
        }
        unsafe extern "system" fn GetScanline0AndPitch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbscanline0: *mut *mut u8, plpitch: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetScanline0AndPitch(this, ::core::mem::transmute_copy(&pbscanline0), ::core::mem::transmute_copy(&plpitch)).into())
        }
        unsafe extern "system" fn IsContiguousFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfiscontiguous: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsContiguousFormat(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfiscontiguous, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContiguousLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcblength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContiguousLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcblength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ContiguousCopyTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdestbuffer: *mut u8, cbdestbuffer: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContiguousCopyTo(this, ::core::mem::transmute_copy(&pbdestbuffer), ::core::mem::transmute_copy(&cbdestbuffer)).into())
        }
        unsafe extern "system" fn ContiguousCopyFrom<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbsrcbuffer: *const u8, cbsrcbuffer: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContiguousCopyFrom(this, ::core::mem::transmute_copy(&pbsrcbuffer), ::core::mem::transmute_copy(&cbsrcbuffer)).into())
        }
        IMF2DBuffer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Lock2D: Lock2D::<Identity, Impl, OFFSET>,
            Unlock2D: Unlock2D::<Identity, Impl, OFFSET>,
            GetScanline0AndPitch: GetScanline0AndPitch::<Identity, Impl, OFFSET>,
            IsContiguousFormat: IsContiguousFormat::<Identity, Impl, OFFSET>,
            GetContiguousLength: GetContiguousLength::<Identity, Impl, OFFSET>,
            ContiguousCopyTo: ContiguousCopyTo::<Identity, Impl, OFFSET>,
            ContiguousCopyFrom: ContiguousCopyFrom::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMF2DBuffer2_Impl: ::windows_core::BaseImpl + IMF2DBuffer_Impl {
    fn Lock2DSize(this: &Self::This, lockflags: MF2DBuffer_LockFlags, ppbscanline0: *mut *mut u8, plpitch: *mut i32, ppbbufferstart: *mut *mut u8, pcbbufferlength: *mut u32) -> ::windows_core::Result<()>;
    fn Copy2DTo(this: &Self::This, pdestbuffer: ::core::option::Option<&IMF2DBuffer2>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMF2DBuffer2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMF2DBuffer);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMF2DBuffer2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Lock2DSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lockflags: MF2DBuffer_LockFlags, ppbscanline0: *mut *mut u8, plpitch: *mut i32, ppbbufferstart: *mut *mut u8, pcbbufferlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Lock2DSize(this, ::core::mem::transmute_copy(&lockflags), ::core::mem::transmute_copy(&ppbscanline0), ::core::mem::transmute_copy(&plpitch), ::core::mem::transmute_copy(&ppbbufferstart), ::core::mem::transmute_copy(&pcbbufferlength)).into())
        }
        unsafe extern "system" fn Copy2DTo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMF2DBuffer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdestbuffer: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Copy2DTo(this, ::windows_core::from_raw_borrowed(&pdestbuffer)).into())
        }
        IMF2DBuffer2_Vtbl {
            base__: <IMF2DBuffer as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Lock2DSize: Lock2DSize::<Identity, Impl, OFFSET>,
            Copy2DTo: Copy2DTo::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFASFContentInfo_Impl: ::windows_core::BaseImpl {
    fn GetHeaderSize(this: &Self::This, pistartofcontent: ::core::option::Option<&IMFMediaBuffer>) -> ::windows_core::Result<u64>;
    fn ParseHeader(this: &Self::This, piheaderbuffer: ::core::option::Option<&IMFMediaBuffer>, cboffsetwithinheader: u64) -> ::windows_core::Result<()>;
    fn GenerateHeader(this: &Self::This, piheader: ::core::option::Option<&IMFMediaBuffer>) -> ::windows_core::Result<u32>;
    fn GetProfile(this: &Self::This) -> ::windows_core::Result<IMFASFProfile>;
    fn SetProfile(this: &Self::This, piprofile: ::core::option::Option<&IMFASFProfile>) -> ::windows_core::Result<()>;
    fn GeneratePresentationDescriptor(this: &Self::This) -> ::windows_core::Result<IMFPresentationDescriptor>;
    fn GetEncodingConfigurationPropertyStore(this: &Self::This, wstreamnumber: u16) -> ::windows_core::Result<super::super::UI::Shell::PropertiesSystem::IPropertyStore>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFASFContentInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFContentInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetHeaderSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pistartofcontent: *mut ::core::ffi::c_void, cbheadersize: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHeaderSize(this, ::windows_core::from_raw_borrowed(&pistartofcontent)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cbheadersize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ParseHeader<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piheaderbuffer: *mut ::core::ffi::c_void, cboffsetwithinheader: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ParseHeader(this, ::windows_core::from_raw_borrowed(&piheaderbuffer), ::core::mem::transmute_copy(&cboffsetwithinheader)).into())
        }
        unsafe extern "system" fn GenerateHeader<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piheader: *mut ::core::ffi::c_void, pcbheader: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GenerateHeader(this, ::windows_core::from_raw_borrowed(&piheader)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbheader, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppiprofile: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProfile(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiprofile, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piprofile: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProfile(this, ::windows_core::from_raw_borrowed(&piprofile)).into())
        }
        unsafe extern "system" fn GeneratePresentationDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppipresentationdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GeneratePresentationDescriptor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppipresentationdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEncodingConfigurationPropertyStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFContentInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnumber: u16, ppistore: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEncodingConfigurationPropertyStore(this, ::core::mem::transmute_copy(&wstreamnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistore, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFASFContentInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetHeaderSize: GetHeaderSize::<Identity, Impl, OFFSET>,
            ParseHeader: ParseHeader::<Identity, Impl, OFFSET>,
            GenerateHeader: GenerateHeader::<Identity, Impl, OFFSET>,
            GetProfile: GetProfile::<Identity, Impl, OFFSET>,
            SetProfile: SetProfile::<Identity, Impl, OFFSET>,
            GeneratePresentationDescriptor: GeneratePresentationDescriptor::<Identity, Impl, OFFSET>,
            GetEncodingConfigurationPropertyStore: GetEncodingConfigurationPropertyStore::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFASFIndexer_Impl: ::windows_core::BaseImpl {
    fn SetFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Initialize(this: &Self::This, picontentinfo: ::core::option::Option<&IMFASFContentInfo>) -> ::windows_core::Result<()>;
    fn GetIndexPosition(this: &Self::This, picontentinfo: ::core::option::Option<&IMFASFContentInfo>) -> ::windows_core::Result<u64>;
    fn SetIndexByteStreams(this: &Self::This, ppibytestreams: *const ::core::option::Option<IMFByteStream>, cbytestreams: u32) -> ::windows_core::Result<()>;
    fn GetIndexByteStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetIndexStatus(this: &Self::This, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pfisindexed: *mut super::super::Foundation::BOOL, pbindexdescriptor: *mut u8, pcbindexdescriptor: *mut u32) -> ::windows_core::Result<()>;
    fn SetIndexStatus(this: &Self::This, pbindexdescriptor: *const u8, cbindexdescriptor: u32, fgenerateindex: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetSeekPositionForValue(this: &Self::This, pvarvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pcboffsetwithindata: *mut u64, phnsapproxtime: *mut i64, pdwpayloadnumberofstreamwithinpacket: *mut u32) -> ::windows_core::Result<()>;
    fn GenerateIndexEntries(this: &Self::This, piasfpacketsample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
    fn CommitIndex(this: &Self::This, picontentinfo: ::core::option::Option<&IMFASFContentInfo>) -> ::windows_core::Result<()>;
    fn GetIndexWriteSpace(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetCompletedIndex(this: &Self::This, piindexbuffer: ::core::option::Option<&IMFMediaBuffer>, cboffsetwithinindex: u64) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFASFIndexer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFIndexer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, picontentinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&picontentinfo)).into())
        }
        unsafe extern "system" fn GetIndexPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, picontentinfo: *mut ::core::ffi::c_void, pcbindexoffset: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIndexPosition(this, ::windows_core::from_raw_borrowed(&picontentinfo)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbindexoffset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIndexByteStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppibytestreams: *const *mut ::core::ffi::c_void, cbytestreams: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIndexByteStreams(this, ::core::mem::transmute_copy(&ppibytestreams), ::core::mem::transmute_copy(&cbytestreams)).into())
        }
        unsafe extern "system" fn GetIndexByteStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbytestreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIndexByteStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbytestreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIndexStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pfisindexed: *mut super::super::Foundation::BOOL, pbindexdescriptor: *mut u8, pcbindexdescriptor: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIndexStatus(this, ::core::mem::transmute_copy(&pindexidentifier), ::core::mem::transmute_copy(&pfisindexed), ::core::mem::transmute_copy(&pbindexdescriptor), ::core::mem::transmute_copy(&pcbindexdescriptor)).into())
        }
        unsafe extern "system" fn SetIndexStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbindexdescriptor: *const u8, cbindexdescriptor: u32, fgenerateindex: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIndexStatus(this, ::core::mem::transmute_copy(&pbindexdescriptor), ::core::mem::transmute_copy(&cbindexdescriptor), ::core::mem::transmute_copy(&fgenerateindex)).into())
        }
        unsafe extern "system" fn GetSeekPositionForValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pindexidentifier: *const ASF_INDEX_IDENTIFIER, pcboffsetwithindata: *mut u64, phnsapproxtime: *mut i64, pdwpayloadnumberofstreamwithinpacket: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSeekPositionForValue(this, ::core::mem::transmute_copy(&pvarvalue), ::core::mem::transmute_copy(&pindexidentifier), ::core::mem::transmute_copy(&pcboffsetwithindata), ::core::mem::transmute_copy(&phnsapproxtime), ::core::mem::transmute_copy(&pdwpayloadnumberofstreamwithinpacket)).into())
        }
        unsafe extern "system" fn GenerateIndexEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piasfpacketsample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GenerateIndexEntries(this, ::windows_core::from_raw_borrowed(&piasfpacketsample)).into())
        }
        unsafe extern "system" fn CommitIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, picontentinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CommitIndex(this, ::windows_core::from_raw_borrowed(&picontentinfo)).into())
        }
        unsafe extern "system" fn GetIndexWriteSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbindexwritespace: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIndexWriteSpace(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbindexwritespace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCompletedIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFIndexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piindexbuffer: *mut ::core::ffi::c_void, cboffsetwithinindex: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCompletedIndex(this, ::windows_core::from_raw_borrowed(&piindexbuffer), ::core::mem::transmute_copy(&cboffsetwithinindex)).into())
        }
        IMFASFIndexer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetIndexPosition: GetIndexPosition::<Identity, Impl, OFFSET>,
            SetIndexByteStreams: SetIndexByteStreams::<Identity, Impl, OFFSET>,
            GetIndexByteStreamCount: GetIndexByteStreamCount::<Identity, Impl, OFFSET>,
            GetIndexStatus: GetIndexStatus::<Identity, Impl, OFFSET>,
            SetIndexStatus: SetIndexStatus::<Identity, Impl, OFFSET>,
            GetSeekPositionForValue: GetSeekPositionForValue::<Identity, Impl, OFFSET>,
            GenerateIndexEntries: GenerateIndexEntries::<Identity, Impl, OFFSET>,
            CommitIndex: CommitIndex::<Identity, Impl, OFFSET>,
            GetIndexWriteSpace: GetIndexWriteSpace::<Identity, Impl, OFFSET>,
            GetCompletedIndex: GetCompletedIndex::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFASFMultiplexer_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, picontentinfo: ::core::option::Option<&IMFASFContentInfo>) -> ::windows_core::Result<()>;
    fn SetFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn ProcessSample(this: &Self::This, wstreamnumber: u16, pisample: ::core::option::Option<&IMFSample>, hnstimestampadjust: i64) -> ::windows_core::Result<()>;
    fn GetNextPacket(this: &Self::This, pdwstatusflags: *mut u32, ppipacket: *mut ::core::option::Option<IMFSample>) -> ::windows_core::Result<()>;
    fn Flush(this: &Self::This) -> ::windows_core::Result<()>;
    fn End(this: &Self::This, picontentinfo: ::core::option::Option<&IMFASFContentInfo>) -> ::windows_core::Result<()>;
    fn GetStatistics(this: &Self::This, wstreamnumber: u16) -> ::windows_core::Result<ASF_MUX_STATISTICS>;
    fn SetSyncTolerance(this: &Self::This, mssynctolerance: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFASFMultiplexer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFMultiplexer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, picontentinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&picontentinfo)).into())
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProcessSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnumber: u16, pisample: *mut ::core::ffi::c_void, hnstimestampadjust: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessSample(this, ::core::mem::transmute_copy(&wstreamnumber), ::windows_core::from_raw_borrowed(&pisample), ::core::mem::transmute_copy(&hnstimestampadjust)).into())
        }
        unsafe extern "system" fn GetNextPacket<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstatusflags: *mut u32, ppipacket: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextPacket(this, ::core::mem::transmute_copy(&pdwstatusflags), ::core::mem::transmute_copy(&ppipacket)).into())
        }
        unsafe extern "system" fn Flush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Flush(this).into())
        }
        unsafe extern "system" fn End<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, picontentinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::End(this, ::windows_core::from_raw_borrowed(&picontentinfo)).into())
        }
        unsafe extern "system" fn GetStatistics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnumber: u16, pmuxstats: *mut ASF_MUX_STATISTICS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStatistics(this, ::core::mem::transmute_copy(&wstreamnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmuxstats, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSyncTolerance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMultiplexer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mssynctolerance: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSyncTolerance(this, ::core::mem::transmute_copy(&mssynctolerance)).into())
        }
        IMFASFMultiplexer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            ProcessSample: ProcessSample::<Identity, Impl, OFFSET>,
            GetNextPacket: GetNextPacket::<Identity, Impl, OFFSET>,
            Flush: Flush::<Identity, Impl, OFFSET>,
            End: End::<Identity, Impl, OFFSET>,
            GetStatistics: GetStatistics::<Identity, Impl, OFFSET>,
            SetSyncTolerance: SetSyncTolerance::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFASFMutualExclusion_Impl: ::windows_core::BaseImpl {
    fn GetType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetType(this: &Self::This, guidtype: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetRecordCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStreamsForRecord(this: &Self::This, dwrecordnumber: u32, pwstreamnumarray: *mut u16, pcstreams: *mut u32) -> ::windows_core::Result<()>;
    fn AddStreamForRecord(this: &Self::This, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows_core::Result<()>;
    fn RemoveStreamFromRecord(this: &Self::This, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows_core::Result<()>;
    fn RemoveRecord(this: &Self::This, dwrecordnumber: u32) -> ::windows_core::Result<()>;
    fn AddRecord(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IMFASFMutualExclusion>;
}
impl ::windows_core::Iids for IMFASFMutualExclusion {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFMutualExclusion {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidtype: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetType(this, ::core::mem::transmute_copy(&guidtype)).into())
        }
        unsafe extern "system" fn GetRecordCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwrecordcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwrecordcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamsForRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordnumber: u32, pwstreamnumarray: *mut u16, pcstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamsForRecord(this, ::core::mem::transmute_copy(&dwrecordnumber), ::core::mem::transmute_copy(&pwstreamnumarray), ::core::mem::transmute_copy(&pcstreams)).into())
        }
        unsafe extern "system" fn AddStreamForRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStreamForRecord(this, ::core::mem::transmute_copy(&dwrecordnumber), ::core::mem::transmute_copy(&wstreamnumber)).into())
        }
        unsafe extern "system" fn RemoveStreamFromRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordnumber: u32, wstreamnumber: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveStreamFromRecord(this, ::core::mem::transmute_copy(&dwrecordnumber), ::core::mem::transmute_copy(&wstreamnumber)).into())
        }
        unsafe extern "system" fn RemoveRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordnumber: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveRecord(this, ::core::mem::transmute_copy(&dwrecordnumber)).into())
        }
        unsafe extern "system" fn AddRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwrecordnumber: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddRecord(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwrecordnumber, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFMutualExclusion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppimutex: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimutex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFASFMutualExclusion_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetType: GetType::<Identity, Impl, OFFSET>,
            SetType: SetType::<Identity, Impl, OFFSET>,
            GetRecordCount: GetRecordCount::<Identity, Impl, OFFSET>,
            GetStreamsForRecord: GetStreamsForRecord::<Identity, Impl, OFFSET>,
            AddStreamForRecord: AddStreamForRecord::<Identity, Impl, OFFSET>,
            RemoveStreamFromRecord: RemoveStreamFromRecord::<Identity, Impl, OFFSET>,
            RemoveRecord: RemoveRecord::<Identity, Impl, OFFSET>,
            AddRecord: AddRecord::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFASFProfile_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStream(this: &Self::This, dwstreamindex: u32, pwstreamnumber: *mut u16, ppistream: *mut ::core::option::Option<IMFASFStreamConfig>) -> ::windows_core::Result<()>;
    fn GetStreamByNumber(this: &Self::This, wstreamnumber: u16) -> ::windows_core::Result<IMFASFStreamConfig>;
    fn SetStream(this: &Self::This, pistream: ::core::option::Option<&IMFASFStreamConfig>) -> ::windows_core::Result<()>;
    fn RemoveStream(this: &Self::This, wstreamnumber: u16) -> ::windows_core::Result<()>;
    fn CreateStream(this: &Self::This, pimediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<IMFASFStreamConfig>;
    fn GetMutualExclusionCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMutualExclusion(this: &Self::This, dwmutexindex: u32) -> ::windows_core::Result<IMFASFMutualExclusion>;
    fn AddMutualExclusion(this: &Self::This, pimutex: ::core::option::Option<&IMFASFMutualExclusion>) -> ::windows_core::Result<()>;
    fn RemoveMutualExclusion(this: &Self::This, dwmutexindex: u32) -> ::windows_core::Result<()>;
    fn CreateMutualExclusion(this: &Self::This) -> ::windows_core::Result<IMFASFMutualExclusion>;
    fn GetStreamPrioritization(this: &Self::This) -> ::windows_core::Result<IMFASFStreamPrioritization>;
    fn AddStreamPrioritization(this: &Self::This, pistreamprioritization: ::core::option::Option<&IMFASFStreamPrioritization>) -> ::windows_core::Result<()>;
    fn RemoveStreamPrioritization(this: &Self::This) -> ::windows_core::Result<()>;
    fn CreateStreamPrioritization(this: &Self::This) -> ::windows_core::Result<IMFASFStreamPrioritization>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IMFASFProfile>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFASFProfile {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFProfile {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pwstreamnumber: *mut u16, ppistream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&pwstreamnumber), ::core::mem::transmute_copy(&ppistream)).into())
        }
        unsafe extern "system" fn GetStreamByNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnumber: u16, ppistream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamByNumber(this, ::core::mem::transmute_copy(&wstreamnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pistream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStream(this, ::windows_core::from_raw_borrowed(&pistream)).into())
        }
        unsafe extern "system" fn RemoveStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnumber: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveStream(this, ::core::mem::transmute_copy(&wstreamnumber)).into())
        }
        unsafe extern "system" fn CreateStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimediatype: *mut ::core::ffi::c_void, ppistream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateStream(this, ::windows_core::from_raw_borrowed(&pimediatype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMutualExclusionCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcmutexs: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMutualExclusionCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcmutexs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMutualExclusion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmutexindex: u32, ppimutex: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMutualExclusion(this, ::core::mem::transmute_copy(&dwmutexindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimutex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddMutualExclusion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimutex: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddMutualExclusion(this, ::windows_core::from_raw_borrowed(&pimutex)).into())
        }
        unsafe extern "system" fn RemoveMutualExclusion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmutexindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveMutualExclusion(this, ::core::mem::transmute_copy(&dwmutexindex)).into())
        }
        unsafe extern "system" fn CreateMutualExclusion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppimutex: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMutualExclusion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimutex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamPrioritization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppistreamprioritization: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamPrioritization(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistreamprioritization, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddStreamPrioritization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pistreamprioritization: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStreamPrioritization(this, ::windows_core::from_raw_borrowed(&pistreamprioritization)).into())
        }
        unsafe extern "system" fn RemoveStreamPrioritization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveStreamPrioritization(this).into())
        }
        unsafe extern "system" fn CreateStreamPrioritization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppistreamprioritization: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateStreamPrioritization(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistreamprioritization, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppiprofile: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiprofile, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFASFProfile_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetStream: GetStream::<Identity, Impl, OFFSET>,
            GetStreamByNumber: GetStreamByNumber::<Identity, Impl, OFFSET>,
            SetStream: SetStream::<Identity, Impl, OFFSET>,
            RemoveStream: RemoveStream::<Identity, Impl, OFFSET>,
            CreateStream: CreateStream::<Identity, Impl, OFFSET>,
            GetMutualExclusionCount: GetMutualExclusionCount::<Identity, Impl, OFFSET>,
            GetMutualExclusion: GetMutualExclusion::<Identity, Impl, OFFSET>,
            AddMutualExclusion: AddMutualExclusion::<Identity, Impl, OFFSET>,
            RemoveMutualExclusion: RemoveMutualExclusion::<Identity, Impl, OFFSET>,
            CreateMutualExclusion: CreateMutualExclusion::<Identity, Impl, OFFSET>,
            GetStreamPrioritization: GetStreamPrioritization::<Identity, Impl, OFFSET>,
            AddStreamPrioritization: AddStreamPrioritization::<Identity, Impl, OFFSET>,
            RemoveStreamPrioritization: RemoveStreamPrioritization::<Identity, Impl, OFFSET>,
            CreateStreamPrioritization: CreateStreamPrioritization::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFASFSplitter_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, picontentinfo: ::core::option::Option<&IMFASFContentInfo>) -> ::windows_core::Result<()>;
    fn SetFlags(this: &Self::This, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SelectStreams(this: &Self::This, pwstreamnumbers: *const u16, wnumstreams: u16) -> ::windows_core::Result<()>;
    fn GetSelectedStreams(this: &Self::This, pwstreamnumbers: *mut u16, pwnumstreams: *mut u16) -> ::windows_core::Result<()>;
    fn ParseData(this: &Self::This, pibuffer: ::core::option::Option<&IMFMediaBuffer>, cbbufferoffset: u32, cblength: u32) -> ::windows_core::Result<()>;
    fn GetNextSample(this: &Self::This, pdwstatusflags: *mut ASF_STATUSFLAGS, pwstreamnumber: *mut u16, ppisample: *mut ::core::option::Option<IMFSample>) -> ::windows_core::Result<()>;
    fn Flush(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetLastSendTime(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFASFSplitter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFSplitter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, picontentinfo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&picontentinfo)).into())
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SelectStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwstreamnumbers: *const u16, wnumstreams: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectStreams(this, ::core::mem::transmute_copy(&pwstreamnumbers), ::core::mem::transmute_copy(&wnumstreams)).into())
        }
        unsafe extern "system" fn GetSelectedStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwstreamnumbers: *mut u16, pwnumstreams: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSelectedStreams(this, ::core::mem::transmute_copy(&pwstreamnumbers), ::core::mem::transmute_copy(&pwnumstreams)).into())
        }
        unsafe extern "system" fn ParseData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pibuffer: *mut ::core::ffi::c_void, cbbufferoffset: u32, cblength: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ParseData(this, ::windows_core::from_raw_borrowed(&pibuffer), ::core::mem::transmute_copy(&cbbufferoffset), ::core::mem::transmute_copy(&cblength)).into())
        }
        unsafe extern "system" fn GetNextSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstatusflags: *mut ASF_STATUSFLAGS, pwstreamnumber: *mut u16, ppisample: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextSample(this, ::core::mem::transmute_copy(&pdwstatusflags), ::core::mem::transmute_copy(&pwstreamnumber), ::core::mem::transmute_copy(&ppisample)).into())
        }
        unsafe extern "system" fn Flush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Flush(this).into())
        }
        unsafe extern "system" fn GetLastSendTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFSplitter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwlastsendtime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastSendTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwlastsendtime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFASFSplitter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            SelectStreams: SelectStreams::<Identity, Impl, OFFSET>,
            GetSelectedStreams: GetSelectedStreams::<Identity, Impl, OFFSET>,
            ParseData: ParseData::<Identity, Impl, OFFSET>,
            GetNextSample: GetNextSample::<Identity, Impl, OFFSET>,
            Flush: Flush::<Identity, Impl, OFFSET>,
            GetLastSendTime: GetLastSendTime::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFASFStreamConfig_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetStreamType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetStreamNumber(this: &Self::This) -> u16;
    fn SetStreamNumber(this: &Self::This, wstreamnum: u16) -> ::windows_core::Result<()>;
    fn GetMediaType(this: &Self::This) -> ::windows_core::Result<IMFMediaType>;
    fn SetMediaType(this: &Self::This, pimediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetPayloadExtensionCount(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetPayloadExtension(this: &Self::This, wpayloadextensionnumber: u16, pguidextensionsystemid: *mut ::windows_core::GUID, pcbextensiondatasize: *mut u16, pbextensionsysteminfo: *mut u8, pcbextensionsysteminfo: *mut u32) -> ::windows_core::Result<()>;
    fn AddPayloadExtension(this: &Self::This, guidextensionsystemid: &::windows_core::GUID, cbextensiondatasize: u16, pbextensionsysteminfo: *const u8, cbextensionsysteminfo: u32) -> ::windows_core::Result<()>;
    fn RemoveAllPayloadExtensions(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IMFASFStreamConfig>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFASFStreamConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFStreamConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidstreamtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidstreamtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u16 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamNumber(this))
        }
        unsafe extern "system" fn SetStreamNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnum: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamNumber(this, ::core::mem::transmute_copy(&wstreamnum)).into())
        }
        unsafe extern "system" fn GetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppimediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaType(this, ::windows_core::from_raw_borrowed(&pimediatype)).into())
        }
        unsafe extern "system" fn GetPayloadExtensionCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpayloadextensions: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPayloadExtensionCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcpayloadextensions, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPayloadExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wpayloadextensionnumber: u16, pguidextensionsystemid: *mut ::windows_core::GUID, pcbextensiondatasize: *mut u16, pbextensionsysteminfo: *mut u8, pcbextensionsysteminfo: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPayloadExtension(this, ::core::mem::transmute_copy(&wpayloadextensionnumber), ::core::mem::transmute_copy(&pguidextensionsystemid), ::core::mem::transmute_copy(&pcbextensiondatasize), ::core::mem::transmute_copy(&pbextensionsysteminfo), ::core::mem::transmute_copy(&pcbextensionsysteminfo)).into())
        }
        unsafe extern "system" fn AddPayloadExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidextensionsystemid: ::windows_core::GUID, cbextensiondatasize: u16, pbextensionsysteminfo: *const u8, cbextensionsysteminfo: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPayloadExtension(this, ::core::mem::transmute(&guidextensionsystemid), ::core::mem::transmute_copy(&cbextensiondatasize), ::core::mem::transmute_copy(&pbextensionsysteminfo), ::core::mem::transmute_copy(&cbextensionsysteminfo)).into())
        }
        unsafe extern "system" fn RemoveAllPayloadExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllPayloadExtensions(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppistreamconfig: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistreamconfig, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFASFStreamConfig_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamType: GetStreamType::<Identity, Impl, OFFSET>,
            GetStreamNumber: GetStreamNumber::<Identity, Impl, OFFSET>,
            SetStreamNumber: SetStreamNumber::<Identity, Impl, OFFSET>,
            GetMediaType: GetMediaType::<Identity, Impl, OFFSET>,
            SetMediaType: SetMediaType::<Identity, Impl, OFFSET>,
            GetPayloadExtensionCount: GetPayloadExtensionCount::<Identity, Impl, OFFSET>,
            GetPayloadExtension: GetPayloadExtension::<Identity, Impl, OFFSET>,
            AddPayloadExtension: AddPayloadExtension::<Identity, Impl, OFFSET>,
            RemoveAllPayloadExtensions: RemoveAllPayloadExtensions::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFASFStreamPrioritization_Impl: ::windows_core::BaseImpl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStream(this: &Self::This, dwstreamindex: u32, pwstreamnumber: *mut u16, pwstreamflags: *mut u16) -> ::windows_core::Result<()>;
    fn AddStream(this: &Self::This, wstreamnumber: u16, wstreamflags: u16) -> ::windows_core::Result<()>;
    fn RemoveStream(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IMFASFStreamPrioritization>;
}
impl ::windows_core::Iids for IMFASFStreamPrioritization {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamPrioritization_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFStreamPrioritization {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamPrioritization_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamPrioritization_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pwstreamnumber: *mut u16, pwstreamflags: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&pwstreamnumber), ::core::mem::transmute_copy(&pwstreamflags)).into())
        }
        unsafe extern "system" fn AddStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamPrioritization_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnumber: u16, wstreamflags: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStream(this, ::core::mem::transmute_copy(&wstreamnumber), ::core::mem::transmute_copy(&wstreamflags)).into())
        }
        unsafe extern "system" fn RemoveStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamPrioritization_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveStream(this, ::core::mem::transmute_copy(&dwstreamindex)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamPrioritization_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppistreamprioritization: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppistreamprioritization, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFASFStreamPrioritization_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetStream: GetStream::<Identity, Impl, OFFSET>,
            AddStream: AddStream::<Identity, Impl, OFFSET>,
            RemoveStream: RemoveStream::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFASFStreamSelector_Impl: ::windows_core::BaseImpl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOutputCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOutputStreamCount(this: &Self::This, dwoutputnum: u32) -> ::windows_core::Result<u32>;
    fn GetOutputStreamNumbers(this: &Self::This, dwoutputnum: u32) -> ::windows_core::Result<u16>;
    fn GetOutputFromStream(this: &Self::This, wstreamnum: u16) -> ::windows_core::Result<u32>;
    fn GetOutputOverride(this: &Self::This, dwoutputnum: u32) -> ::windows_core::Result<ASF_SELECTION_STATUS>;
    fn SetOutputOverride(this: &Self::This, dwoutputnum: u32, selection: ASF_SELECTION_STATUS) -> ::windows_core::Result<()>;
    fn GetOutputMutexCount(this: &Self::This, dwoutputnum: u32) -> ::windows_core::Result<u32>;
    fn GetOutputMutex(this: &Self::This, dwoutputnum: u32, dwmutexnum: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn SetOutputMutexSelection(this: &Self::This, dwoutputnum: u32, dwmutexnum: u32, wselectedrecord: u16) -> ::windows_core::Result<()>;
    fn GetBandwidthStepCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBandwidthStep(this: &Self::This, dwstepnum: u32, pdwbitrate: *mut u32, rgwstreamnumbers: *mut u16, rgselections: *mut ASF_SELECTION_STATUS) -> ::windows_core::Result<()>;
    fn BitrateToStepNumber(this: &Self::This, dwbitrate: u32) -> ::windows_core::Result<u32>;
    fn SetStreamSelectorFlags(this: &Self::This, dwstreamselectorflags: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFASFStreamSelector {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFASFStreamSelector {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcoutputs: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcoutputs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, pcstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStreamCount(this, ::core::mem::transmute_copy(&dwoutputnum)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputStreamNumbers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, rgwstreamnumbers: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStreamNumbers(this, ::core::mem::transmute_copy(&dwoutputnum)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rgwstreamnumbers, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputFromStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wstreamnum: u16, pdwoutput: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputFromStream(this, ::core::mem::transmute_copy(&wstreamnum)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwoutput, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, pselection: *mut ASF_SELECTION_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputOverride(this, ::core::mem::transmute_copy(&dwoutputnum)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pselection, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, selection: ASF_SELECTION_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputOverride(this, ::core::mem::transmute_copy(&dwoutputnum), ::core::mem::transmute_copy(&selection)).into())
        }
        unsafe extern "system" fn GetOutputMutexCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, pcmutexes: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMutexCount(this, ::core::mem::transmute_copy(&dwoutputnum)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcmutexes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputMutex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, dwmutexnum: u32, ppmutex: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputMutex(this, ::core::mem::transmute_copy(&dwoutputnum), ::core::mem::transmute_copy(&dwmutexnum)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmutex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputMutexSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputnum: u32, dwmutexnum: u32, wselectedrecord: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMutexSelection(this, ::core::mem::transmute_copy(&dwoutputnum), ::core::mem::transmute_copy(&dwmutexnum), ::core::mem::transmute_copy(&wselectedrecord)).into())
        }
        unsafe extern "system" fn GetBandwidthStepCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcstepcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBandwidthStepCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcstepcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBandwidthStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstepnum: u32, pdwbitrate: *mut u32, rgwstreamnumbers: *mut u16, rgselections: *mut ASF_SELECTION_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBandwidthStep(this, ::core::mem::transmute_copy(&dwstepnum), ::core::mem::transmute_copy(&pdwbitrate), ::core::mem::transmute_copy(&rgwstreamnumbers), ::core::mem::transmute_copy(&rgselections)).into())
        }
        unsafe extern "system" fn BitrateToStepNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwbitrate: u32, pdwstepnum: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BitrateToStepNumber(this, ::core::mem::transmute_copy(&dwbitrate)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstepnum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamSelectorFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFASFStreamSelector_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamselectorflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamSelectorFlags(this, ::core::mem::transmute_copy(&dwstreamselectorflags)).into())
        }
        IMFASFStreamSelector_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetOutputCount: GetOutputCount::<Identity, Impl, OFFSET>,
            GetOutputStreamCount: GetOutputStreamCount::<Identity, Impl, OFFSET>,
            GetOutputStreamNumbers: GetOutputStreamNumbers::<Identity, Impl, OFFSET>,
            GetOutputFromStream: GetOutputFromStream::<Identity, Impl, OFFSET>,
            GetOutputOverride: GetOutputOverride::<Identity, Impl, OFFSET>,
            SetOutputOverride: SetOutputOverride::<Identity, Impl, OFFSET>,
            GetOutputMutexCount: GetOutputMutexCount::<Identity, Impl, OFFSET>,
            GetOutputMutex: GetOutputMutex::<Identity, Impl, OFFSET>,
            SetOutputMutexSelection: SetOutputMutexSelection::<Identity, Impl, OFFSET>,
            GetBandwidthStepCount: GetBandwidthStepCount::<Identity, Impl, OFFSET>,
            GetBandwidthStep: GetBandwidthStep::<Identity, Impl, OFFSET>,
            BitrateToStepNumber: BitrateToStepNumber::<Identity, Impl, OFFSET>,
            SetStreamSelectorFlags: SetStreamSelectorFlags::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFActivate_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn ActivateObject(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn ShutdownObject(this: &Self::This) -> ::windows_core::Result<()>;
    fn DetachObject(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFActivate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFActivate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFActivate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ActivateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFActivate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateObject(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn ShutdownObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFActivate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShutdownObject(this).into())
        }
        unsafe extern "system" fn DetachObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFActivate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachObject(this).into())
        }
        IMFActivate_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ActivateObject: ActivateObject::<Identity, Impl, OFFSET>,
            ShutdownObject: ShutdownObject::<Identity, Impl, OFFSET>,
            DetachObject: DetachObject::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFAsyncCallback_Impl: ::windows_core::BaseImpl {
    fn GetParameters(this: &Self::This, pdwflags: *mut u32, pdwqueue: *mut u32) -> ::windows_core::Result<()>;
    fn Invoke(this: &Self::This, pasyncresult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFAsyncCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAsyncCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32, pdwqueue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetParameters(this, ::core::mem::transmute_copy(&pdwflags), ::core::mem::transmute_copy(&pdwqueue)).into())
        }
        unsafe extern "system" fn Invoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pasyncresult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Invoke(this, ::windows_core::from_raw_borrowed(&pasyncresult)).into())
        }
        IMFAsyncCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetParameters: GetParameters::<Identity, Impl, OFFSET>,
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFAsyncCallbackLogging_Impl: ::windows_core::BaseImpl + IMFAsyncCallback_Impl {
    fn GetObjectPointer(this: &Self::This) -> *mut ::core::ffi::c_void;
    fn GetObjectTag(this: &Self::This) -> u32;
}
impl ::windows_core::Iids for IMFAsyncCallbackLogging {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAsyncCallback);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncCallbackLogging_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAsyncCallbackLogging {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetObjectPointer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncCallbackLogging_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetObjectPointer(this))
        }
        unsafe extern "system" fn GetObjectTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncCallbackLogging_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetObjectTag(this))
        }
        IMFAsyncCallbackLogging_Vtbl {
            base__: <IMFAsyncCallback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetObjectPointer: GetObjectPointer::<Identity, Impl, OFFSET>,
            GetObjectTag: GetObjectTag::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFAsyncResult_Impl: ::windows_core::BaseImpl {
    fn GetState(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetStatus(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetStatus(this: &Self::This, hrstatus: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn GetObject(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetStateNoAddRef(this: &Self::This) -> ::core::option::Option<::windows_core::IUnknown>;
}
impl ::windows_core::Iids for IMFAsyncResult {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncResult_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAsyncResult {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncResult_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkstate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncResult_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStatus(this).into())
        }
        unsafe extern "system" fn SetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncResult_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrstatus: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatus(this, ::core::mem::transmute_copy(&hrstatus)).into())
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncResult_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStateNoAddRef<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAsyncResult_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::core::option::Option<::windows_core::IUnknown> {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStateNoAddRef(this))
        }
        IMFAsyncResult_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetState: GetState::<Identity, Impl, OFFSET>,
            GetStatus: GetStatus::<Identity, Impl, OFFSET>,
            SetStatus: SetStatus::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            GetStateNoAddRef: GetStateNoAddRef::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFAttributes_Impl: ::windows_core::BaseImpl {
    fn GetItem(this: &Self::This, guidkey: *const ::windows_core::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn GetItemType(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<MF_ATTRIBUTE_TYPE>;
    fn CompareItem(this: &Self::This, guidkey: *const ::windows_core::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn Compare(this: &Self::This, ptheirs: ::core::option::Option<&IMFAttributes>, matchtype: MF_ATTRIBUTES_MATCH_TYPE) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetUINT32(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<u32>;
    fn GetUINT64(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<u64>;
    fn GetDouble(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<f64>;
    fn GetGUID(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetStringLength(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<u32>;
    fn GetString(this: &Self::This, guidkey: *const ::windows_core::GUID, pwszvalue: ::windows_core::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows_core::Result<()>;
    fn GetAllocatedString(this: &Self::This, guidkey: *const ::windows_core::GUID, ppwszvalue: *mut ::windows_core::PWSTR, pcchlength: *mut u32) -> ::windows_core::Result<()>;
    fn GetBlobSize(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<u32>;
    fn GetBlob(this: &Self::This, guidkey: *const ::windows_core::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetAllocatedBlob(this: &Self::This, guidkey: *const ::windows_core::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetUnknown(this: &Self::This, guidkey: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetItem(this: &Self::This, guidkey: *const ::windows_core::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn DeleteItem(this: &Self::This, guidkey: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn DeleteAllItems(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetUINT32(this: &Self::This, guidkey: *const ::windows_core::GUID, unvalue: u32) -> ::windows_core::Result<()>;
    fn SetUINT64(this: &Self::This, guidkey: *const ::windows_core::GUID, unvalue: u64) -> ::windows_core::Result<()>;
    fn SetDouble(this: &Self::This, guidkey: *const ::windows_core::GUID, fvalue: f64) -> ::windows_core::Result<()>;
    fn SetGUID(this: &Self::This, guidkey: *const ::windows_core::GUID, guidvalue: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetString(this: &Self::This, guidkey: *const ::windows_core::GUID, wszvalue: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetBlob(this: &Self::This, guidkey: *const ::windows_core::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows_core::Result<()>;
    fn SetUnknown(this: &Self::This, guidkey: *const ::windows_core::GUID, punknown: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn LockStore(this: &Self::This) -> ::windows_core::Result<()>;
    fn UnlockStore(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetItemByIndex(this: &Self::This, unindex: u32, pguidkey: *mut ::windows_core::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn CopyAllItems(this: &Self::This, pdest: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFAttributes {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAttributes {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItem(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&pvalue)).into())
        }
        unsafe extern "system" fn GetItemType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, ptype: *mut MF_ATTRIBUTE_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetItemType(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CompareItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pbresult: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CompareItem(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&value)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Compare<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptheirs: *mut ::core::ffi::c_void, matchtype: MF_ATTRIBUTES_MATCH_TYPE, pbresult: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Compare(this, ::windows_core::from_raw_borrowed(&ptheirs), ::core::mem::transmute_copy(&matchtype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUINT32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, punvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUINT32(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(punvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUINT64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, punvalue: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUINT64(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(punvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDouble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pfvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDouble(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGUID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pguidvalue: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGUID(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStringLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pcchlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStringLength(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcchlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pwszvalue: ::windows_core::PWSTR, cchbufsize: u32, pcchlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetString(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&pwszvalue), ::core::mem::transmute_copy(&cchbufsize), ::core::mem::transmute_copy(&pcchlength)).into())
        }
        unsafe extern "system" fn GetAllocatedString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, ppwszvalue: *mut ::windows_core::PWSTR, pcchlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAllocatedString(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&ppwszvalue), ::core::mem::transmute_copy(&pcchlength)).into())
        }
        unsafe extern "system" fn GetBlobSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pcbblobsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBlobSize(this, ::core::mem::transmute_copy(&guidkey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbblobsize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pbuf: *mut u8, cbbufsize: u32, pcbblobsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBlob(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&pbuf), ::core::mem::transmute_copy(&cbbufsize), ::core::mem::transmute_copy(&pcbblobsize)).into())
        }
        unsafe extern "system" fn GetAllocatedBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, ppbuf: *mut *mut u8, pcbsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAllocatedBlob(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&ppbuf), ::core::mem::transmute_copy(&pcbsize)).into())
        }
        unsafe extern "system" fn GetUnknown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUnknown(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn SetItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, value: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetItem(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn DeleteItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteItem(this, ::core::mem::transmute_copy(&guidkey)).into())
        }
        unsafe extern "system" fn DeleteAllItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteAllItems(this).into())
        }
        unsafe extern "system" fn SetUINT32<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, unvalue: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUINT32(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&unvalue)).into())
        }
        unsafe extern "system" fn SetUINT64<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, unvalue: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUINT64(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&unvalue)).into())
        }
        unsafe extern "system" fn SetDouble<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, fvalue: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDouble(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&fvalue)).into())
        }
        unsafe extern "system" fn SetGUID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, guidvalue: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGUID(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&guidvalue)).into())
        }
        unsafe extern "system" fn SetString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, wszvalue: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetString(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute(&wszvalue)).into())
        }
        unsafe extern "system" fn SetBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, pbuf: *const u8, cbbufsize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBlob(this, ::core::mem::transmute_copy(&guidkey), ::core::mem::transmute_copy(&pbuf), ::core::mem::transmute_copy(&cbbufsize)).into())
        }
        unsafe extern "system" fn SetUnknown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidkey: *const ::windows_core::GUID, punknown: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUnknown(this, ::core::mem::transmute_copy(&guidkey), ::windows_core::from_raw_borrowed(&punknown)).into())
        }
        unsafe extern "system" fn LockStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockStore(this).into())
        }
        unsafe extern "system" fn UnlockStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockStore(this).into())
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcitems: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, unindex: u32, pguidkey: *mut ::windows_core::GUID, pvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetItemByIndex(this, ::core::mem::transmute_copy(&unindex), ::core::mem::transmute_copy(&pguidkey), ::core::mem::transmute_copy(&pvalue)).into())
        }
        unsafe extern "system" fn CopyAllItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyAllItems(this, ::windows_core::from_raw_borrowed(&pdest)).into())
        }
        IMFAttributes_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetItem: GetItem::<Identity, Impl, OFFSET>,
            GetItemType: GetItemType::<Identity, Impl, OFFSET>,
            CompareItem: CompareItem::<Identity, Impl, OFFSET>,
            Compare: Compare::<Identity, Impl, OFFSET>,
            GetUINT32: GetUINT32::<Identity, Impl, OFFSET>,
            GetUINT64: GetUINT64::<Identity, Impl, OFFSET>,
            GetDouble: GetDouble::<Identity, Impl, OFFSET>,
            GetGUID: GetGUID::<Identity, Impl, OFFSET>,
            GetStringLength: GetStringLength::<Identity, Impl, OFFSET>,
            GetString: GetString::<Identity, Impl, OFFSET>,
            GetAllocatedString: GetAllocatedString::<Identity, Impl, OFFSET>,
            GetBlobSize: GetBlobSize::<Identity, Impl, OFFSET>,
            GetBlob: GetBlob::<Identity, Impl, OFFSET>,
            GetAllocatedBlob: GetAllocatedBlob::<Identity, Impl, OFFSET>,
            GetUnknown: GetUnknown::<Identity, Impl, OFFSET>,
            SetItem: SetItem::<Identity, Impl, OFFSET>,
            DeleteItem: DeleteItem::<Identity, Impl, OFFSET>,
            DeleteAllItems: DeleteAllItems::<Identity, Impl, OFFSET>,
            SetUINT32: SetUINT32::<Identity, Impl, OFFSET>,
            SetUINT64: SetUINT64::<Identity, Impl, OFFSET>,
            SetDouble: SetDouble::<Identity, Impl, OFFSET>,
            SetGUID: SetGUID::<Identity, Impl, OFFSET>,
            SetString: SetString::<Identity, Impl, OFFSET>,
            SetBlob: SetBlob::<Identity, Impl, OFFSET>,
            SetUnknown: SetUnknown::<Identity, Impl, OFFSET>,
            LockStore: LockStore::<Identity, Impl, OFFSET>,
            UnlockStore: UnlockStore::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetItemByIndex: GetItemByIndex::<Identity, Impl, OFFSET>,
            CopyAllItems: CopyAllItems::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_Audio\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_Audio", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFAudioMediaType_Impl: ::windows_core::BaseImpl + IMFMediaType_Impl {
    fn GetAudioFormat(this: &Self::This) -> *mut super::Audio::WAVEFORMATEX;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_Audio", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFAudioMediaType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaType);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_Audio", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioMediaType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAudioMediaType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAudioFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> *mut super::Audio::WAVEFORMATEX {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAudioFormat(this))
        }
        IMFAudioMediaType_Vtbl { base__: <IMFMediaType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetAudioFormat: GetAudioFormat::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFAudioPolicy_Impl: ::windows_core::BaseImpl {
    fn SetGroupingParam(this: &Self::This, rguidclass: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetGroupingParam(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetDisplayName(this: &Self::This, pszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetDisplayName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetIconPath(this: &Self::This, pszpath: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetIconPath(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IMFAudioPolicy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAudioPolicy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetGroupingParam<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidclass: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGroupingParam(this, ::core::mem::transmute_copy(&rguidclass)).into())
        }
        unsafe extern "system" fn GetGroupingParam<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidclass: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGroupingParam(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidclass, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDisplayName(this, ::core::mem::transmute(&pszname)).into())
        }
        unsafe extern "system" fn GetDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisplayName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIconPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIconPath(this, ::core::mem::transmute(&pszpath)).into())
        }
        unsafe extern "system" fn GetIconPath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszpath: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIconPath(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszpath, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFAudioPolicy_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetGroupingParam: SetGroupingParam::<Identity, Impl, OFFSET>,
            GetGroupingParam: GetGroupingParam::<Identity, Impl, OFFSET>,
            SetDisplayName: SetDisplayName::<Identity, Impl, OFFSET>,
            GetDisplayName: GetDisplayName::<Identity, Impl, OFFSET>,
            SetIconPath: SetIconPath::<Identity, Impl, OFFSET>,
            GetIconPath: GetIconPath::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFAudioStreamVolume_Impl: ::windows_core::BaseImpl {
    fn GetChannelCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetChannelVolume(this: &Self::This, dwindex: u32, flevel: f32) -> ::windows_core::Result<()>;
    fn GetChannelVolume(this: &Self::This, dwindex: u32) -> ::windows_core::Result<f32>;
    fn SetAllVolumes(this: &Self::This, dwcount: u32, pfvolumes: *const f32) -> ::windows_core::Result<()>;
    fn GetAllVolumes(this: &Self::This, dwcount: u32, pfvolumes: *mut f32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFAudioStreamVolume {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioStreamVolume_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFAudioStreamVolume {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetChannelCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioStreamVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetChannelCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetChannelVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioStreamVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, flevel: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetChannelVolume(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&flevel)).into())
        }
        unsafe extern "system" fn GetChannelVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioStreamVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, pflevel: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetChannelVolume(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAllVolumes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioStreamVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcount: u32, pfvolumes: *const f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllVolumes(this, ::core::mem::transmute_copy(&dwcount), ::core::mem::transmute_copy(&pfvolumes)).into())
        }
        unsafe extern "system" fn GetAllVolumes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFAudioStreamVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcount: u32, pfvolumes: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAllVolumes(this, ::core::mem::transmute_copy(&dwcount), ::core::mem::transmute_copy(&pfvolumes)).into())
        }
        IMFAudioStreamVolume_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetChannelCount: GetChannelCount::<Identity, Impl, OFFSET>,
            SetChannelVolume: SetChannelVolume::<Identity, Impl, OFFSET>,
            GetChannelVolume: GetChannelVolume::<Identity, Impl, OFFSET>,
            SetAllVolumes: SetAllVolumes::<Identity, Impl, OFFSET>,
            GetAllVolumes: GetAllVolumes::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFBufferListNotify_Impl: ::windows_core::BaseImpl {
    fn OnAddSourceBuffer(this: &Self::This);
    fn OnRemoveSourceBuffer(this: &Self::This);
}
impl ::windows_core::Iids for IMFBufferListNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFBufferListNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFBufferListNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnAddSourceBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFBufferListNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnAddSourceBuffer(this))
        }
        unsafe extern "system" fn OnRemoveSourceBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFBufferListNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnRemoveSourceBuffer(this))
        }
        IMFBufferListNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnAddSourceBuffer: OnAddSourceBuffer::<Identity, Impl, OFFSET>,
            OnRemoveSourceBuffer: OnRemoveSourceBuffer::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFByteStream_Impl: ::windows_core::BaseImpl {
    fn GetCapabilities(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetLength(this: &Self::This, qwlength: u64) -> ::windows_core::Result<()>;
    fn GetCurrentPosition(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetCurrentPosition(this: &Self::This, qwposition: u64) -> ::windows_core::Result<()>;
    fn IsEndOfStream(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn Read(this: &Self::This, pb: *mut u8, cb: u32, pcbread: *mut u32) -> ::windows_core::Result<()>;
    fn BeginRead(this: &Self::This, pb: *mut u8, cb: u32, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndRead(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<u32>;
    fn Write(this: &Self::This, pb: *const u8, cb: u32) -> ::windows_core::Result<u32>;
    fn BeginWrite(this: &Self::This, pb: *const u8, cb: u32, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndWrite(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<u32>;
    fn Seek(this: &Self::This, seekorigin: MFBYTESTREAM_SEEK_ORIGIN, llseekoffset: i64, dwseekflags: u32) -> ::windows_core::Result<u64>;
    fn Flush(this: &Self::This) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFByteStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcapabilities: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcapabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwlength: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwlength: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLength(this, ::core::mem::transmute_copy(&qwlength)).into())
        }
        unsafe extern "system" fn GetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwposition: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwposition: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentPosition(this, ::core::mem::transmute_copy(&qwposition)).into())
        }
        unsafe extern "system" fn IsEndOfStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfendofstream: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsEndOfStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfendofstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Read<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut u8, cb: u32, pcbread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Read(this, ::core::mem::transmute_copy(&pb), ::core::mem::transmute_copy(&cb), ::core::mem::transmute_copy(&pcbread)).into())
        }
        unsafe extern "system" fn BeginRead<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut u8, cb: u32, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginRead(this, ::core::mem::transmute_copy(&pb), ::core::mem::transmute_copy(&cb), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndRead<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pcbread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndRead(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbread, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Write<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *const u8, cb: u32, pcbwritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Write(this, ::core::mem::transmute_copy(&pb), ::core::mem::transmute_copy(&cb)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbwritten, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginWrite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *const u8, cb: u32, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginWrite(this, ::core::mem::transmute_copy(&pb), ::core::mem::transmute_copy(&cb), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndWrite<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pcbwritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndWrite(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbwritten, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Seek<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seekorigin: MFBYTESTREAM_SEEK_ORIGIN, llseekoffset: i64, dwseekflags: u32, pqwcurrentposition: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Seek(this, ::core::mem::transmute_copy(&seekorigin), ::core::mem::transmute_copy(&llseekoffset), ::core::mem::transmute_copy(&dwseekflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwcurrentposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Flush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Flush(this).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IMFByteStream_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCapabilities: GetCapabilities::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            SetLength: SetLength::<Identity, Impl, OFFSET>,
            GetCurrentPosition: GetCurrentPosition::<Identity, Impl, OFFSET>,
            SetCurrentPosition: SetCurrentPosition::<Identity, Impl, OFFSET>,
            IsEndOfStream: IsEndOfStream::<Identity, Impl, OFFSET>,
            Read: Read::<Identity, Impl, OFFSET>,
            BeginRead: BeginRead::<Identity, Impl, OFFSET>,
            EndRead: EndRead::<Identity, Impl, OFFSET>,
            Write: Write::<Identity, Impl, OFFSET>,
            BeginWrite: BeginWrite::<Identity, Impl, OFFSET>,
            EndWrite: EndWrite::<Identity, Impl, OFFSET>,
            Seek: Seek::<Identity, Impl, OFFSET>,
            Flush: Flush::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFByteStreamBuffering_Impl: ::windows_core::BaseImpl {
    fn SetBufferingParams(this: &Self::This, pparams: *const MFBYTESTREAM_BUFFERING_PARAMS) -> ::windows_core::Result<()>;
    fn EnableBuffering(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn StopBuffering(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFByteStreamBuffering {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamBuffering_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStreamBuffering {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBufferingParams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamBuffering_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparams: *const MFBYTESTREAM_BUFFERING_PARAMS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBufferingParams(this, ::core::mem::transmute_copy(&pparams)).into())
        }
        unsafe extern "system" fn EnableBuffering<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamBuffering_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableBuffering(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn StopBuffering<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamBuffering_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopBuffering(this).into())
        }
        IMFByteStreamBuffering_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBufferingParams: SetBufferingParams::<Identity, Impl, OFFSET>,
            EnableBuffering: EnableBuffering::<Identity, Impl, OFFSET>,
            StopBuffering: StopBuffering::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFByteStreamCacheControl_Impl: ::windows_core::BaseImpl {
    fn StopBackgroundTransfer(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFByteStreamCacheControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamCacheControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStreamCacheControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StopBackgroundTransfer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamCacheControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopBackgroundTransfer(this).into())
        }
        IMFByteStreamCacheControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StopBackgroundTransfer: StopBackgroundTransfer::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFByteStreamCacheControl2_Impl: ::windows_core::BaseImpl + IMFByteStreamCacheControl_Impl {
    fn GetByteRanges(this: &Self::This, pcranges: *mut u32, ppranges: *mut *mut MF_BYTE_STREAM_CACHE_RANGE) -> ::windows_core::Result<()>;
    fn SetCacheLimit(this: &Self::This, qwbytes: u64) -> ::windows_core::Result<()>;
    fn IsBackgroundTransferActive(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFByteStreamCacheControl2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFByteStreamCacheControl);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamCacheControl2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStreamCacheControl2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetByteRanges<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamCacheControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcranges: *mut u32, ppranges: *mut *mut MF_BYTE_STREAM_CACHE_RANGE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetByteRanges(this, ::core::mem::transmute_copy(&pcranges), ::core::mem::transmute_copy(&ppranges)).into())
        }
        unsafe extern "system" fn SetCacheLimit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamCacheControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwbytes: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCacheLimit(this, ::core::mem::transmute_copy(&qwbytes)).into())
        }
        unsafe extern "system" fn IsBackgroundTransferActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamCacheControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfactive: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsBackgroundTransferActive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfactive, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFByteStreamCacheControl2_Vtbl {
            base__: <IMFByteStreamCacheControl as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetByteRanges: GetByteRanges::<Identity, Impl, OFFSET>,
            SetCacheLimit: SetCacheLimit::<Identity, Impl, OFFSET>,
            IsBackgroundTransferActive: IsBackgroundTransferActive::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFByteStreamHandler_Impl: ::windows_core::BaseImpl {
    fn BeginCreateObject(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, pwszurl: &::windows_core::PCWSTR, dwflags: u32, pprops: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>, ppiunknowncancelcookie: *mut ::core::option::Option<::windows_core::IUnknown>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndCreateObject(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn CancelObjectCreation(this: &Self::This, piunknowncancelcookie: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetMaxNumberOfBytesRequiredForResolution(this: &Self::This) -> ::windows_core::Result<u64>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFByteStreamHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStreamHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, dwflags: u32, pprops: *mut ::core::ffi::c_void, ppiunknowncancelcookie: *mut *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginCreateObject(this, ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pprops), ::core::mem::transmute_copy(&ppiunknowncancelcookie), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndCreateObject(this, ::windows_core::from_raw_borrowed(&presult), ::core::mem::transmute_copy(&pobjecttype), ::core::mem::transmute_copy(&ppobject)).into())
        }
        unsafe extern "system" fn CancelObjectCreation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piunknowncancelcookie: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelObjectCreation(this, ::windows_core::from_raw_borrowed(&piunknowncancelcookie)).into())
        }
        unsafe extern "system" fn GetMaxNumberOfBytesRequiredForResolution<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwbytes: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMaxNumberOfBytesRequiredForResolution(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwbytes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFByteStreamHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginCreateObject: BeginCreateObject::<Identity, Impl, OFFSET>,
            EndCreateObject: EndCreateObject::<Identity, Impl, OFFSET>,
            CancelObjectCreation: CancelObjectCreation::<Identity, Impl, OFFSET>,
            GetMaxNumberOfBytesRequiredForResolution: GetMaxNumberOfBytesRequiredForResolution::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFByteStreamProxyClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateByteStreamProxy(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, pattributes: ::core::option::Option<&IMFAttributes>, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFByteStreamProxyClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamProxyClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStreamProxyClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateByteStreamProxy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamProxyClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateByteStreamProxy(this, ::windows_core::from_raw_borrowed(&pbytestream), ::windows_core::from_raw_borrowed(&pattributes), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        IMFByteStreamProxyClassFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateByteStreamProxy: CreateByteStreamProxy::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFByteStreamTimeSeek_Impl: ::windows_core::BaseImpl {
    fn IsTimeSeekSupported(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn TimeSeek(this: &Self::This, qwtimeposition: u64) -> ::windows_core::Result<()>;
    fn GetTimeSeekResult(this: &Self::This, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFByteStreamTimeSeek {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamTimeSeek_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFByteStreamTimeSeek {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsTimeSeekSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamTimeSeek_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pftimeseekissupported: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsTimeSeekSupported(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pftimeseekissupported, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TimeSeek<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamTimeSeek_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwtimeposition: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TimeSeek(this, ::core::mem::transmute_copy(&qwtimeposition)).into())
        }
        unsafe extern "system" fn GetTimeSeekResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFByteStreamTimeSeek_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTimeSeekResult(this, ::core::mem::transmute_copy(&pqwstarttime), ::core::mem::transmute_copy(&pqwstoptime), ::core::mem::transmute_copy(&pqwduration)).into())
        }
        IMFByteStreamTimeSeek_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsTimeSeekSupported: IsTimeSeekSupported::<Identity, Impl, OFFSET>,
            TimeSeek: TimeSeek::<Identity, Impl, OFFSET>,
            GetTimeSeekResult: GetTimeSeekResult::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraConfigurationManager_Impl: ::windows_core::BaseImpl {
    fn LoadDefaults(this: &Self::This, cameraattributes: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<IMFCameraControlDefaultsCollection>;
    fn SaveDefaults(this: &Self::This, configurations: ::core::option::Option<&IMFCameraControlDefaultsCollection>) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This);
}
impl ::windows_core::Iids for IMFCameraConfigurationManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraConfigurationManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraConfigurationManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LoadDefaults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cameraattributes: *mut ::core::ffi::c_void, configurations: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LoadDefaults(this, ::windows_core::from_raw_borrowed(&cameraattributes)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(configurations, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SaveDefaults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, configurations: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveDefaults(this, ::windows_core::from_raw_borrowed(&configurations)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraConfigurationManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this))
        }
        IMFCameraConfigurationManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LoadDefaults: LoadDefaults::<Identity, Impl, OFFSET>,
            SaveDefaults: SaveDefaults::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraControlDefaults_Impl: ::windows_core::BaseImpl {
    fn GetType(this: &Self::This) -> MF_CAMERA_CONTROL_CONFIGURATION_TYPE;
    fn GetRangeInfo(this: &Self::This) -> ::windows_core::Result<MF_CAMERA_CONTROL_RANGE_INFO>;
    fn LockControlData(this: &Self::This, control: *mut *mut ::core::ffi::c_void, controlsize: *mut u32, data: *mut *mut ::core::ffi::c_void, datasize: *mut u32) -> ::windows_core::Result<()>;
    fn UnlockControlData(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCameraControlDefaults {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaults_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraControlDefaults {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaults_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_CAMERA_CONTROL_CONFIGURATION_TYPE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetType(this))
        }
        unsafe extern "system" fn GetRangeInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaults_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rangeinfo: *mut MF_CAMERA_CONTROL_RANGE_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRangeInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rangeinfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LockControlData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaults_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, control: *mut *mut ::core::ffi::c_void, controlsize: *mut u32, data: *mut *mut ::core::ffi::c_void, datasize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockControlData(this, ::core::mem::transmute_copy(&control), ::core::mem::transmute_copy(&controlsize), ::core::mem::transmute_copy(&data), ::core::mem::transmute_copy(&datasize)).into())
        }
        unsafe extern "system" fn UnlockControlData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaults_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockControlData(this).into())
        }
        IMFCameraControlDefaults_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetRangeInfo: GetRangeInfo::<Identity, Impl, OFFSET>,
            LockControlData: LockControlData::<Identity, Impl, OFFSET>,
            UnlockControlData: UnlockControlData::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFCameraControlDefaultsCollection_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetControlCount(this: &Self::This) -> u32;
    fn GetControl(this: &Self::This, index: u32) -> ::windows_core::Result<IMFCameraControlDefaults>;
    fn GetOrAddExtendedControl(this: &Self::This, configtype: MF_CAMERA_CONTROL_CONFIGURATION_TYPE, constrolid: u32, streamid: u32, datasize: u32) -> ::windows_core::Result<IMFCameraControlDefaults>;
    fn GetOrAddControl(this: &Self::This, configtype: MF_CAMERA_CONTROL_CONFIGURATION_TYPE, controlset: *const ::windows_core::GUID, constrolid: u32, controlsize: u32, datasize: u32) -> ::windows_core::Result<IMFCameraControlDefaults>;
    fn RemoveControl(this: &Self::This, controlset: *const ::windows_core::GUID, constrolid: u32) -> ::windows_core::Result<()>;
    fn RemoveAllControls(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFCameraControlDefaultsCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraControlDefaultsCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetControlCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetControlCount(this))
        }
        unsafe extern "system" fn GetControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, configuration: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetControl(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(configuration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOrAddExtendedControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, configtype: MF_CAMERA_CONTROL_CONFIGURATION_TYPE, constrolid: u32, streamid: u32, datasize: u32, defaults: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOrAddExtendedControl(this, ::core::mem::transmute_copy(&configtype), ::core::mem::transmute_copy(&constrolid), ::core::mem::transmute_copy(&streamid), ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(defaults, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOrAddControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, configtype: MF_CAMERA_CONTROL_CONFIGURATION_TYPE, controlset: *const ::windows_core::GUID, constrolid: u32, controlsize: u32, datasize: u32, defaults: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOrAddControl(this, ::core::mem::transmute_copy(&configtype), ::core::mem::transmute_copy(&controlset), ::core::mem::transmute_copy(&constrolid), ::core::mem::transmute_copy(&controlsize), ::core::mem::transmute_copy(&datasize)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(defaults, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, controlset: *const ::windows_core::GUID, constrolid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveControl(this, ::core::mem::transmute_copy(&controlset), ::core::mem::transmute_copy(&constrolid)).into())
        }
        unsafe extern "system" fn RemoveAllControls<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlDefaultsCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllControls(this).into())
        }
        IMFCameraControlDefaultsCollection_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetControlCount: GetControlCount::<Identity, Impl, OFFSET>,
            GetControl: GetControl::<Identity, Impl, OFFSET>,
            GetOrAddExtendedControl: GetOrAddExtendedControl::<Identity, Impl, OFFSET>,
            GetOrAddControl: GetOrAddControl::<Identity, Impl, OFFSET>,
            RemoveControl: RemoveControl::<Identity, Impl, OFFSET>,
            RemoveAllControls: RemoveAllControls::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraControlMonitor_Impl: ::windows_core::BaseImpl {
    fn Start(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddControlSubscription(this: &Self::This, controlset: &::windows_core::GUID, id: u32) -> ::windows_core::Result<()>;
    fn RemoveControlSubscription(this: &Self::This, controlset: &::windows_core::GUID, id: u32) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This);
}
impl ::windows_core::Iids for IMFCameraControlMonitor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlMonitor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraControlMonitor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn AddControlSubscription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, controlset: ::windows_core::GUID, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddControlSubscription(this, ::core::mem::transmute(&controlset), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn RemoveControlSubscription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, controlset: ::windows_core::GUID, id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveControlSubscription(this, ::core::mem::transmute(&controlset), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this))
        }
        IMFCameraControlMonitor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            AddControlSubscription: AddControlSubscription::<Identity, Impl, OFFSET>,
            RemoveControlSubscription: RemoveControlSubscription::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraControlNotify_Impl: ::windows_core::BaseImpl {
    fn OnChange(this: &Self::This, controlset: *const ::windows_core::GUID, id: u32);
    fn OnError(this: &Self::This, hrstatus: ::windows_core::HRESULT);
}
impl ::windows_core::Iids for IMFCameraControlNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraControlNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, controlset: *const ::windows_core::GUID, id: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnChange(this, ::core::mem::transmute_copy(&controlset), ::core::mem::transmute_copy(&id)))
        }
        unsafe extern "system" fn OnError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraControlNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrstatus: ::windows_core::HRESULT) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnError(this, ::core::mem::transmute_copy(&hrstatus)))
        }
        IMFCameraControlNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnChange: OnChange::<Identity, Impl, OFFSET>,
            OnError: OnError::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraOcclusionStateMonitor_Impl: ::windows_core::BaseImpl {
    fn Start(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetSupportedStates(this: &Self::This) -> u32;
}
impl ::windows_core::Iids for IMFCameraOcclusionStateMonitor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateMonitor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraOcclusionStateMonitor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn GetSupportedStates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedStates(this))
        }
        IMFCameraOcclusionStateMonitor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            GetSupportedStates: GetSupportedStates::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraOcclusionStateReport_Impl: ::windows_core::BaseImpl {
    fn GetOcclusionState(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFCameraOcclusionStateReport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateReport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraOcclusionStateReport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOcclusionState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, occlusionstate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOcclusionState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(occlusionstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFCameraOcclusionStateReport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetOcclusionState: GetOcclusionState::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraOcclusionStateReportCallback_Impl: ::windows_core::BaseImpl {
    fn OnOcclusionStateReport(this: &Self::This, occlusionstatereport: ::core::option::Option<&IMFCameraOcclusionStateReport>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCameraOcclusionStateReportCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateReportCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraOcclusionStateReportCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnOcclusionStateReport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraOcclusionStateReportCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, occlusionstatereport: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnOcclusionStateReport(this, ::windows_core::from_raw_borrowed(&occlusionstatereport)).into())
        }
        IMFCameraOcclusionStateReportCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnOcclusionStateReport: OnOcclusionStateReport::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCameraSyncObject_Impl: ::windows_core::BaseImpl {
    fn WaitOnSignal(this: &Self::This, timeoutinms: u32) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This);
}
impl ::windows_core::Iids for IMFCameraSyncObject {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraSyncObject_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCameraSyncObject {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn WaitOnSignal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraSyncObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timeoutinms: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitOnSignal(this, ::core::mem::transmute_copy(&timeoutinms)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCameraSyncObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this))
        }
        IMFCameraSyncObject_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            WaitOnSignal: WaitOnSignal::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFCaptureEngine_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, peventcallback: ::core::option::Option<&IMFCaptureEngineOnEventCallback>, pattributes: ::core::option::Option<&IMFAttributes>, paudiosource: ::core::option::Option<&::windows_core::IUnknown>, pvideosource: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn StartPreview(this: &Self::This) -> ::windows_core::Result<()>;
    fn StopPreview(this: &Self::This) -> ::windows_core::Result<()>;
    fn StartRecord(this: &Self::This) -> ::windows_core::Result<()>;
    fn StopRecord(this: &Self::This, bfinalize: super::super::Foundation::BOOL, bflushunprocessedsamples: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn TakePhoto(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetSink(this: &Self::This, mfcaptureenginesinktype: MF_CAPTURE_ENGINE_SINK_TYPE) -> ::windows_core::Result<IMFCaptureSink>;
    fn GetSource(this: &Self::This) -> ::windows_core::Result<IMFCaptureSource>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFCaptureEngine {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureEngine {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peventcallback: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void, paudiosource: *mut ::core::ffi::c_void, pvideosource: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&peventcallback), ::windows_core::from_raw_borrowed(&pattributes), ::windows_core::from_raw_borrowed(&paudiosource), ::windows_core::from_raw_borrowed(&pvideosource)).into())
        }
        unsafe extern "system" fn StartPreview<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartPreview(this).into())
        }
        unsafe extern "system" fn StopPreview<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopPreview(this).into())
        }
        unsafe extern "system" fn StartRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartRecord(this).into())
        }
        unsafe extern "system" fn StopRecord<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bfinalize: super::super::Foundation::BOOL, bflushunprocessedsamples: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopRecord(this, ::core::mem::transmute_copy(&bfinalize), ::core::mem::transmute_copy(&bflushunprocessedsamples)).into())
        }
        unsafe extern "system" fn TakePhoto<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TakePhoto(this).into())
        }
        unsafe extern "system" fn GetSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mfcaptureenginesinktype: MF_CAPTURE_ENGINE_SINK_TYPE, ppsink: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSink(this, ::core::mem::transmute_copy(&mfcaptureenginesinktype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsink, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFCaptureEngine_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            StartPreview: StartPreview::<Identity, Impl, OFFSET>,
            StopPreview: StopPreview::<Identity, Impl, OFFSET>,
            StartRecord: StartRecord::<Identity, Impl, OFFSET>,
            StopRecord: StopRecord::<Identity, Impl, OFFSET>,
            TakePhoto: TakePhoto::<Identity, Impl, OFFSET>,
            GetSink: GetSink::<Identity, Impl, OFFSET>,
            GetSource: GetSource::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCaptureEngineClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstance(this: &Self::This, clsid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureEngineClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureEngineClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateInstance(this, ::core::mem::transmute_copy(&clsid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        IMFCaptureEngineClassFactory_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateInstance: CreateInstance::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFCaptureEngineOnEventCallback_Impl: ::windows_core::BaseImpl {
    fn OnEvent(this: &Self::This, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureEngineOnEventCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineOnEventCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureEngineOnEventCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineOnEventCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnEvent(this, ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        IMFCaptureEngineOnEventCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnEvent: OnEvent::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFCaptureEngineOnSampleCallback_Impl: ::windows_core::BaseImpl {
    fn OnSample(this: &Self::This, psample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureEngineOnSampleCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineOnSampleCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureEngineOnSampleCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineOnSampleCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSample(this, ::windows_core::from_raw_borrowed(&psample)).into())
        }
        IMFCaptureEngineOnSampleCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnSample: OnSample::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFCaptureEngineOnSampleCallback2_Impl: ::windows_core::BaseImpl + IMFCaptureEngineOnSampleCallback_Impl {
    fn OnSynchronizedEvent(this: &Self::This, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureEngineOnSampleCallback2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFCaptureEngineOnSampleCallback);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineOnSampleCallback2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureEngineOnSampleCallback2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnSynchronizedEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureEngineOnSampleCallback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSynchronizedEvent(this, ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        IMFCaptureEngineOnSampleCallback2_Vtbl {
            base__: <IMFCaptureEngineOnSampleCallback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnSynchronizedEvent: OnSynchronizedEvent::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCapturePhotoConfirmation_Impl: ::windows_core::BaseImpl {
    fn SetPhotoConfirmationCallback(this: &Self::This, pnotificationcallback: ::core::option::Option<&IMFAsyncCallback>) -> ::windows_core::Result<()>;
    fn SetPixelFormat(this: &Self::This, subtype: &::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetPixelFormat(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
impl ::windows_core::Iids for IMFCapturePhotoConfirmation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoConfirmation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCapturePhotoConfirmation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPhotoConfirmationCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoConfirmation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnotificationcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPhotoConfirmationCallback(this, ::windows_core::from_raw_borrowed(&pnotificationcallback)).into())
        }
        unsafe extern "system" fn SetPixelFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoConfirmation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, subtype: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPixelFormat(this, ::core::mem::transmute(&subtype)).into())
        }
        unsafe extern "system" fn GetPixelFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoConfirmation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, subtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPixelFormat(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(subtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFCapturePhotoConfirmation_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetPhotoConfirmationCallback: SetPhotoConfirmationCallback::<Identity, Impl, OFFSET>,
            SetPixelFormat: SetPixelFormat::<Identity, Impl, OFFSET>,
            GetPixelFormat: GetPixelFormat::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCapturePhotoSink_Impl: ::windows_core::BaseImpl + IMFCaptureSink_Impl {
    fn SetOutputFileName(this: &Self::This, filename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetSampleCallback(this: &Self::This, pcallback: ::core::option::Option<&IMFCaptureEngineOnSampleCallback>) -> ::windows_core::Result<()>;
    fn SetOutputByteStream(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCapturePhotoSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFCaptureSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCapturePhotoSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOutputFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputFileName(this, ::core::mem::transmute(&filename)).into())
        }
        unsafe extern "system" fn SetSampleCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSampleCallback(this, ::windows_core::from_raw_borrowed(&pcallback)).into())
        }
        unsafe extern "system" fn SetOutputByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePhotoSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputByteStream(this, ::windows_core::from_raw_borrowed(&pbytestream)).into())
        }
        IMFCapturePhotoSink_Vtbl {
            base__: <IMFCaptureSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetOutputFileName: SetOutputFileName::<Identity, Impl, OFFSET>,
            SetSampleCallback: SetSampleCallback::<Identity, Impl, OFFSET>,
            SetOutputByteStream: SetOutputByteStream::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFCapturePreviewSink_Impl: ::windows_core::BaseImpl + IMFCaptureSink_Impl {
    fn SetRenderHandle(this: &Self::This, handle: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn SetRenderSurface(this: &Self::This, psurface: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn UpdateVideo(this: &Self::This, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
    fn SetSampleCallback(this: &Self::This, dwstreamsinkindex: u32, pcallback: ::core::option::Option<&IMFCaptureEngineOnSampleCallback>) -> ::windows_core::Result<()>;
    fn GetMirrorState(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetMirrorState(this: &Self::This, fmirrorstate: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetRotation(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<u32>;
    fn SetRotation(this: &Self::This, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows_core::Result<()>;
    fn SetCustomSink(this: &Self::This, pmediasink: ::core::option::Option<&IMFMediaSink>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFCapturePreviewSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFCaptureSink);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCapturePreviewSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetRenderHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, handle: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRenderHandle(this, ::core::mem::transmute_copy(&handle)).into())
        }
        unsafe extern "system" fn SetRenderSurface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psurface: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRenderSurface(this, ::windows_core::from_raw_borrowed(&psurface)).into())
        }
        unsafe extern "system" fn UpdateVideo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateVideo(this, ::core::mem::transmute_copy(&psrc), ::core::mem::transmute_copy(&pdst), ::core::mem::transmute_copy(&pborderclr)).into())
        }
        unsafe extern "system" fn SetSampleCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamsinkindex: u32, pcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSampleCallback(this, ::core::mem::transmute_copy(&dwstreamsinkindex), ::windows_core::from_raw_borrowed(&pcallback)).into())
        }
        unsafe extern "system" fn GetMirrorState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfmirrorstate: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMirrorState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfmirrorstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMirrorState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fmirrorstate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMirrorState(this, ::core::mem::transmute_copy(&fmirrorstate)).into())
        }
        unsafe extern "system" fn GetRotation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pdwrotationvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRotation(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwrotationvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRotation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRotation(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwrotationvalue)).into())
        }
        unsafe extern "system" fn SetCustomSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCapturePreviewSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmediasink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCustomSink(this, ::windows_core::from_raw_borrowed(&pmediasink)).into())
        }
        IMFCapturePreviewSink_Vtbl {
            base__: <IMFCaptureSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetRenderHandle: SetRenderHandle::<Identity, Impl, OFFSET>,
            SetRenderSurface: SetRenderSurface::<Identity, Impl, OFFSET>,
            UpdateVideo: UpdateVideo::<Identity, Impl, OFFSET>,
            SetSampleCallback: SetSampleCallback::<Identity, Impl, OFFSET>,
            GetMirrorState: GetMirrorState::<Identity, Impl, OFFSET>,
            SetMirrorState: SetMirrorState::<Identity, Impl, OFFSET>,
            GetRotation: GetRotation::<Identity, Impl, OFFSET>,
            SetRotation: SetRotation::<Identity, Impl, OFFSET>,
            SetCustomSink: SetCustomSink::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCaptureRecordSink_Impl: ::windows_core::BaseImpl + IMFCaptureSink_Impl {
    fn SetOutputByteStream(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, guidcontainertype: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetOutputFileName(this: &Self::This, filename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetSampleCallback(this: &Self::This, dwstreamsinkindex: u32, pcallback: ::core::option::Option<&IMFCaptureEngineOnSampleCallback>) -> ::windows_core::Result<()>;
    fn SetCustomSink(this: &Self::This, pmediasink: ::core::option::Option<&IMFMediaSink>) -> ::windows_core::Result<()>;
    fn GetRotation(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<u32>;
    fn SetRotation(this: &Self::This, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureRecordSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFCaptureSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureRecordSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOutputByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, guidcontainertype: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputByteStream(this, ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute_copy(&guidcontainertype)).into())
        }
        unsafe extern "system" fn SetOutputFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputFileName(this, ::core::mem::transmute(&filename)).into())
        }
        unsafe extern "system" fn SetSampleCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamsinkindex: u32, pcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSampleCallback(this, ::core::mem::transmute_copy(&dwstreamsinkindex), ::windows_core::from_raw_borrowed(&pcallback)).into())
        }
        unsafe extern "system" fn SetCustomSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmediasink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCustomSink(this, ::windows_core::from_raw_borrowed(&pmediasink)).into())
        }
        unsafe extern "system" fn GetRotation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pdwrotationvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRotation(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwrotationvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRotation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureRecordSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwrotationvalue: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRotation(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwrotationvalue)).into())
        }
        IMFCaptureRecordSink_Vtbl {
            base__: <IMFCaptureSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetOutputByteStream: SetOutputByteStream::<Identity, Impl, OFFSET>,
            SetOutputFileName: SetOutputFileName::<Identity, Impl, OFFSET>,
            SetSampleCallback: SetSampleCallback::<Identity, Impl, OFFSET>,
            SetCustomSink: SetCustomSink::<Identity, Impl, OFFSET>,
            GetRotation: GetRotation::<Identity, Impl, OFFSET>,
            SetRotation: SetRotation::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCaptureSink_Impl: ::windows_core::BaseImpl {
    fn GetOutputMediaType(this: &Self::This, dwsinkstreamindex: u32, ppmediatype: *mut ::core::option::Option<IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetService(this: &Self::This, dwsinkstreamindex: u32, rguidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppunknown: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn AddStream(this: &Self::This, dwsourcestreamindex: u32, pmediatype: ::core::option::Option<&IMFMediaType>, pattributes: ::core::option::Option<&IMFAttributes>, pdwsinkstreamindex: *mut u32) -> ::windows_core::Result<()>;
    fn Prepare(this: &Self::This) -> ::windows_core::Result<()>;
    fn RemoveAllStreams(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOutputMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsinkstreamindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutputMediaType(this, ::core::mem::transmute_copy(&dwsinkstreamindex), ::core::mem::transmute_copy(&ppmediatype)).into())
        }
        unsafe extern "system" fn GetService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsinkstreamindex: u32, rguidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetService(this, ::core::mem::transmute_copy(&dwsinkstreamindex), ::core::mem::transmute_copy(&rguidservice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppunknown)).into())
        }
        unsafe extern "system" fn AddStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, pmediatype: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void, pdwsinkstreamindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStream(this, ::core::mem::transmute_copy(&dwsourcestreamindex), ::windows_core::from_raw_borrowed(&pmediatype), ::windows_core::from_raw_borrowed(&pattributes), ::core::mem::transmute_copy(&pdwsinkstreamindex)).into())
        }
        unsafe extern "system" fn Prepare<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Prepare(this).into())
        }
        unsafe extern "system" fn RemoveAllStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllStreams(this).into())
        }
        IMFCaptureSink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetOutputMediaType: GetOutputMediaType::<Identity, Impl, OFFSET>,
            GetService: GetService::<Identity, Impl, OFFSET>,
            AddStream: AddStream::<Identity, Impl, OFFSET>,
            Prepare: Prepare::<Identity, Impl, OFFSET>,
            RemoveAllStreams: RemoveAllStreams::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCaptureSink2_Impl: ::windows_core::BaseImpl + IMFCaptureSink_Impl {
    fn SetOutputMediaType(this: &Self::This, dwstreamindex: u32, pmediatype: ::core::option::Option<&IMFMediaType>, pencodingattributes: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCaptureSink2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFCaptureSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureSink2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOutputMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSink2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pmediatype: *mut ::core::ffi::c_void, pencodingattributes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputMediaType(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&pmediatype), ::windows_core::from_raw_borrowed(&pencodingattributes)).into())
        }
        IMFCaptureSink2_Vtbl { base__: <IMFCaptureSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetOutputMediaType: SetOutputMediaType::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFCaptureSource_Impl: ::windows_core::BaseImpl {
    fn GetCaptureDeviceSource(this: &Self::This, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE, ppmediasource: *mut ::core::option::Option<IMFMediaSource>) -> ::windows_core::Result<()>;
    fn GetCaptureDeviceActivate(this: &Self::This, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE, ppactivate: *mut ::core::option::Option<IMFActivate>) -> ::windows_core::Result<()>;
    fn GetService(this: &Self::This, rguidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppunknown: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn AddEffect(this: &Self::This, dwsourcestreamindex: u32, punknown: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveEffect(this: &Self::This, dwsourcestreamindex: u32, punknown: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveAllEffects(this: &Self::This, dwsourcestreamindex: u32) -> ::windows_core::Result<()>;
    fn GetAvailableDeviceMediaType(this: &Self::This, dwsourcestreamindex: u32, dwmediatypeindex: u32, ppmediatype: *mut ::core::option::Option<IMFMediaType>) -> ::windows_core::Result<()>;
    fn SetCurrentDeviceMediaType(this: &Self::This, dwsourcestreamindex: u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetCurrentDeviceMediaType(this: &Self::This, dwsourcestreamindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetDeviceStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDeviceStreamCategory(this: &Self::This, dwsourcestreamindex: u32) -> ::windows_core::Result<MF_CAPTURE_ENGINE_STREAM_CATEGORY>;
    fn GetMirrorState(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetMirrorState(this: &Self::This, dwstreamindex: u32, fmirrorstate: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetStreamIndexFromFriendlyName(this: &Self::This, uifriendlyname: u32) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFCaptureSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCaptureSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCaptureDeviceSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE, ppmediasource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCaptureDeviceSource(this, ::core::mem::transmute_copy(&mfcaptureenginedevicetype), ::core::mem::transmute_copy(&ppmediasource)).into())
        }
        unsafe extern "system" fn GetCaptureDeviceActivate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mfcaptureenginedevicetype: MF_CAPTURE_ENGINE_DEVICE_TYPE, ppactivate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCaptureDeviceActivate(this, ::core::mem::transmute_copy(&mfcaptureenginedevicetype), ::core::mem::transmute_copy(&ppactivate)).into())
        }
        unsafe extern "system" fn GetService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rguidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetService(this, ::core::mem::transmute_copy(&rguidservice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppunknown)).into())
        }
        unsafe extern "system" fn AddEffect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, punknown: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEffect(this, ::core::mem::transmute_copy(&dwsourcestreamindex), ::windows_core::from_raw_borrowed(&punknown)).into())
        }
        unsafe extern "system" fn RemoveEffect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, punknown: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEffect(this, ::core::mem::transmute_copy(&dwsourcestreamindex), ::windows_core::from_raw_borrowed(&punknown)).into())
        }
        unsafe extern "system" fn RemoveAllEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllEffects(this, ::core::mem::transmute_copy(&dwsourcestreamindex)).into())
        }
        unsafe extern "system" fn GetAvailableDeviceMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, dwmediatypeindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAvailableDeviceMediaType(this, ::core::mem::transmute_copy(&dwsourcestreamindex), ::core::mem::transmute_copy(&dwmediatypeindex), ::core::mem::transmute_copy(&ppmediatype)).into())
        }
        unsafe extern "system" fn SetCurrentDeviceMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentDeviceMediaType(this, ::core::mem::transmute_copy(&dwsourcestreamindex), ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        unsafe extern "system" fn GetCurrentDeviceMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentDeviceMediaType(this, ::core::mem::transmute_copy(&dwsourcestreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDeviceStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDeviceStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDeviceStreamCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsourcestreamindex: u32, pstreamcategory: *mut MF_CAPTURE_ENGINE_STREAM_CATEGORY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDeviceStreamCategory(this, ::core::mem::transmute_copy(&dwsourcestreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstreamcategory, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMirrorState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pfmirrorstate: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMirrorState(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfmirrorstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMirrorState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, fmirrorstate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMirrorState(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&fmirrorstate)).into())
        }
        unsafe extern "system" fn GetStreamIndexFromFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCaptureSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uifriendlyname: u32, pdwactualstreamindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamIndexFromFriendlyName(this, ::core::mem::transmute_copy(&uifriendlyname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwactualstreamindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFCaptureSource_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCaptureDeviceSource: GetCaptureDeviceSource::<Identity, Impl, OFFSET>,
            GetCaptureDeviceActivate: GetCaptureDeviceActivate::<Identity, Impl, OFFSET>,
            GetService: GetService::<Identity, Impl, OFFSET>,
            AddEffect: AddEffect::<Identity, Impl, OFFSET>,
            RemoveEffect: RemoveEffect::<Identity, Impl, OFFSET>,
            RemoveAllEffects: RemoveAllEffects::<Identity, Impl, OFFSET>,
            GetAvailableDeviceMediaType: GetAvailableDeviceMediaType::<Identity, Impl, OFFSET>,
            SetCurrentDeviceMediaType: SetCurrentDeviceMediaType::<Identity, Impl, OFFSET>,
            GetCurrentDeviceMediaType: GetCurrentDeviceMediaType::<Identity, Impl, OFFSET>,
            GetDeviceStreamCount: GetDeviceStreamCount::<Identity, Impl, OFFSET>,
            GetDeviceStreamCategory: GetDeviceStreamCategory::<Identity, Impl, OFFSET>,
            GetMirrorState: GetMirrorState::<Identity, Impl, OFFSET>,
            SetMirrorState: SetMirrorState::<Identity, Impl, OFFSET>,
            GetStreamIndexFromFriendlyName: GetStreamIndexFromFriendlyName::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCdmSuspendNotify_Impl: ::windows_core::BaseImpl {
    fn Begin(this: &Self::This) -> ::windows_core::Result<()>;
    fn End(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCdmSuspendNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCdmSuspendNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCdmSuspendNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Begin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCdmSuspendNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Begin(this).into())
        }
        unsafe extern "system" fn End<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCdmSuspendNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::End(this).into())
        }
        IMFCdmSuspendNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Begin: Begin::<Identity, Impl, OFFSET>,
            End: End::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFClock_Impl: ::windows_core::BaseImpl {
    fn GetClockCharacteristics(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCorrelatedTime(this: &Self::This, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows_core::Result<()>;
    fn GetContinuityKey(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetState(this: &Self::This, dwreserved: u32) -> ::windows_core::Result<MFCLOCK_STATE>;
    fn GetProperties(this: &Self::This, pclockproperties: *mut MFCLOCK_PROPERTIES) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFClock {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClock_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFClock {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetClockCharacteristics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcharacteristics: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetClockCharacteristics(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcharacteristics, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCorrelatedTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreserved: u32, pllclocktime: *mut i64, phnssystemtime: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCorrelatedTime(this, ::core::mem::transmute_copy(&dwreserved), ::core::mem::transmute_copy(&pllclocktime), ::core::mem::transmute_copy(&phnssystemtime)).into())
        }
        unsafe extern "system" fn GetContinuityKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcontinuitykey: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContinuityKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcontinuitykey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwreserved: u32, peclockstate: *mut MFCLOCK_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetState(this, ::core::mem::transmute_copy(&dwreserved)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(peclockstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pclockproperties: *mut MFCLOCK_PROPERTIES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProperties(this, ::core::mem::transmute_copy(&pclockproperties)).into())
        }
        IMFClock_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetClockCharacteristics: GetClockCharacteristics::<Identity, Impl, OFFSET>,
            GetCorrelatedTime: GetCorrelatedTime::<Identity, Impl, OFFSET>,
            GetContinuityKey: GetContinuityKey::<Identity, Impl, OFFSET>,
            GetState: GetState::<Identity, Impl, OFFSET>,
            GetProperties: GetProperties::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFClockConsumer_Impl: ::windows_core::BaseImpl {
    fn SetPresentationClock(this: &Self::This, ppresentationclock: ::core::option::Option<&IMFPresentationClock>) -> ::windows_core::Result<()>;
    fn GetPresentationClock(this: &Self::This) -> ::windows_core::Result<IMFPresentationClock>;
}
impl ::windows_core::Iids for IMFClockConsumer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockConsumer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFClockConsumer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPresentationClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockConsumer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationclock: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPresentationClock(this, ::windows_core::from_raw_borrowed(&ppresentationclock)).into())
        }
        unsafe extern "system" fn GetPresentationClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockConsumer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppresentationclock: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPresentationClock(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppresentationclock, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFClockConsumer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetPresentationClock: SetPresentationClock::<Identity, Impl, OFFSET>,
            GetPresentationClock: GetPresentationClock::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFClockStateSink_Impl: ::windows_core::BaseImpl {
    fn OnClockStart(this: &Self::This, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows_core::Result<()>;
    fn OnClockStop(this: &Self::This, hnssystemtime: i64) -> ::windows_core::Result<()>;
    fn OnClockPause(this: &Self::This, hnssystemtime: i64) -> ::windows_core::Result<()>;
    fn OnClockRestart(this: &Self::This, hnssystemtime: i64) -> ::windows_core::Result<()>;
    fn OnClockSetRate(this: &Self::This, hnssystemtime: i64, flrate: f32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFClockStateSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockStateSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFClockStateSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnClockStart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockStateSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssystemtime: i64, llclockstartoffset: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnClockStart(this, ::core::mem::transmute_copy(&hnssystemtime), ::core::mem::transmute_copy(&llclockstartoffset)).into())
        }
        unsafe extern "system" fn OnClockStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockStateSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssystemtime: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnClockStop(this, ::core::mem::transmute_copy(&hnssystemtime)).into())
        }
        unsafe extern "system" fn OnClockPause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockStateSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssystemtime: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnClockPause(this, ::core::mem::transmute_copy(&hnssystemtime)).into())
        }
        unsafe extern "system" fn OnClockRestart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockStateSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssystemtime: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnClockRestart(this, ::core::mem::transmute_copy(&hnssystemtime)).into())
        }
        unsafe extern "system" fn OnClockSetRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFClockStateSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssystemtime: i64, flrate: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnClockSetRate(this, ::core::mem::transmute_copy(&hnssystemtime), ::core::mem::transmute_copy(&flrate)).into())
        }
        IMFClockStateSink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnClockStart: OnClockStart::<Identity, Impl, OFFSET>,
            OnClockStop: OnClockStop::<Identity, Impl, OFFSET>,
            OnClockPause: OnClockPause::<Identity, Impl, OFFSET>,
            OnClockRestart: OnClockRestart::<Identity, Impl, OFFSET>,
            OnClockSetRate: OnClockSetRate::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFCollection_Impl: ::windows_core::BaseImpl {
    fn GetElementCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetElement(this: &Self::This, dwelementindex: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn AddElement(this: &Self::This, punkelement: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveElement(this: &Self::This, dwelementindex: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn InsertElementAt(this: &Self::This, dwindex: u32, punknown: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveAllElements(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetElementCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcelements: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetElementCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcelements, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwelementindex: u32, ppunkelement: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetElement(this, ::core::mem::transmute_copy(&dwelementindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkelement, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkelement: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddElement(this, ::windows_core::from_raw_borrowed(&punkelement)).into())
        }
        unsafe extern "system" fn RemoveElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwelementindex: u32, ppunkelement: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RemoveElement(this, ::core::mem::transmute_copy(&dwelementindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkelement, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InsertElementAt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, punknown: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertElementAt(this, ::core::mem::transmute_copy(&dwindex), ::windows_core::from_raw_borrowed(&punknown)).into())
        }
        unsafe extern "system" fn RemoveAllElements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllElements(this).into())
        }
        IMFCollection_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetElementCount: GetElementCount::<Identity, Impl, OFFSET>,
            GetElement: GetElement::<Identity, Impl, OFFSET>,
            AddElement: AddElement::<Identity, Impl, OFFSET>,
            RemoveElement: RemoveElement::<Identity, Impl, OFFSET>,
            InsertElementAt: InsertElementAt::<Identity, Impl, OFFSET>,
            RemoveAllElements: RemoveAllElements::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFContentDecryptionModule_Impl: ::windows_core::BaseImpl {
    fn SetContentEnabler(this: &Self::This, contentenabler: ::core::option::Option<&IMFContentEnabler>, result: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn GetSuspendNotify(this: &Self::This) -> ::windows_core::Result<IMFCdmSuspendNotify>;
    fn SetPMPHostApp(this: &Self::This, pmphostapp: ::core::option::Option<&IMFPMPHostApp>) -> ::windows_core::Result<()>;
    fn CreateSession(this: &Self::This, sessiontype: MF_MEDIAKEYSESSION_TYPE, callbacks: ::core::option::Option<&IMFContentDecryptionModuleSessionCallbacks>) -> ::windows_core::Result<IMFContentDecryptionModuleSession>;
    fn SetServerCertificate(this: &Self::This, certificate: *const u8, certificatesize: u32) -> ::windows_core::Result<()>;
    fn CreateTrustedInput(this: &Self::This, contentinitdata: *const u8, contentinitdatasize: u32) -> ::windows_core::Result<IMFTrustedInput>;
    fn GetProtectionSystemIds(this: &Self::This, systemids: *mut *mut ::windows_core::GUID, count: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFContentDecryptionModule {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentDecryptionModule {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetContentEnabler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentenabler: *mut ::core::ffi::c_void, result: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContentEnabler(this, ::windows_core::from_raw_borrowed(&contentenabler), ::windows_core::from_raw_borrowed(&result)).into())
        }
        unsafe extern "system" fn GetSuspendNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, notify: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSuspendNotify(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(notify, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPMPHostApp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmphostapp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPMPHostApp(this, ::windows_core::from_raw_borrowed(&pmphostapp)).into())
        }
        unsafe extern "system" fn CreateSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sessiontype: MF_MEDIAKEYSESSION_TYPE, callbacks: *mut ::core::ffi::c_void, session: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSession(this, ::core::mem::transmute_copy(&sessiontype), ::windows_core::from_raw_borrowed(&callbacks)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(session, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetServerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, certificate: *const u8, certificatesize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetServerCertificate(this, ::core::mem::transmute_copy(&certificate), ::core::mem::transmute_copy(&certificatesize)).into())
        }
        unsafe extern "system" fn CreateTrustedInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentinitdata: *const u8, contentinitdatasize: u32, trustedinput: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTrustedInput(this, ::core::mem::transmute_copy(&contentinitdata), ::core::mem::transmute_copy(&contentinitdatasize)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(trustedinput, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtectionSystemIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, systemids: *mut *mut ::windows_core::GUID, count: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectionSystemIds(this, ::core::mem::transmute_copy(&systemids), ::core::mem::transmute_copy(&count)).into())
        }
        IMFContentDecryptionModule_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetContentEnabler: SetContentEnabler::<Identity, Impl, OFFSET>,
            GetSuspendNotify: GetSuspendNotify::<Identity, Impl, OFFSET>,
            SetPMPHostApp: SetPMPHostApp::<Identity, Impl, OFFSET>,
            CreateSession: CreateSession::<Identity, Impl, OFFSET>,
            SetServerCertificate: SetServerCertificate::<Identity, Impl, OFFSET>,
            CreateTrustedInput: CreateTrustedInput::<Identity, Impl, OFFSET>,
            GetProtectionSystemIds: GetProtectionSystemIds::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFContentDecryptionModuleAccess_Impl: ::windows_core::BaseImpl {
    fn CreateContentDecryptionModule(this: &Self::This, contentdecryptionmoduleproperties: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>) -> ::windows_core::Result<IMFContentDecryptionModule>;
    fn GetConfiguration(this: &Self::This) -> ::windows_core::Result<super::super::UI::Shell::PropertiesSystem::IPropertyStore>;
    fn GetKeySystem(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFContentDecryptionModuleAccess {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleAccess_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentDecryptionModuleAccess {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateContentDecryptionModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, contentdecryptionmoduleproperties: *mut ::core::ffi::c_void, contentdecryptionmodule: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateContentDecryptionModule(this, ::windows_core::from_raw_borrowed(&contentdecryptionmoduleproperties)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(contentdecryptionmodule, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, configuration: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConfiguration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(configuration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKeySystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeySystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(keysystem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFContentDecryptionModuleAccess_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateContentDecryptionModule: CreateContentDecryptionModule::<Identity, Impl, OFFSET>,
            GetConfiguration: GetConfiguration::<Identity, Impl, OFFSET>,
            GetKeySystem: GetKeySystem::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IMFContentDecryptionModuleFactory_Impl: ::windows_core::BaseImpl {
    fn IsTypeSupported(this: &Self::This, keysystem: &::windows_core::PCWSTR, contenttype: &::windows_core::PCWSTR) -> super::super::Foundation::BOOL;
    fn CreateContentDecryptionModuleAccess(this: &Self::This, keysystem: &::windows_core::PCWSTR, configurations: *const ::core::option::Option<super::super::UI::Shell::PropertiesSystem::IPropertyStore>, numconfigurations: u32) -> ::windows_core::Result<IMFContentDecryptionModuleAccess>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IMFContentDecryptionModuleFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentDecryptionModuleFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsTypeSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: ::windows_core::PCWSTR, contenttype: ::windows_core::PCWSTR) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsTypeSupported(this, ::core::mem::transmute(&keysystem), ::core::mem::transmute(&contenttype)))
        }
        unsafe extern "system" fn CreateContentDecryptionModuleAccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: ::windows_core::PCWSTR, configurations: *const *mut ::core::ffi::c_void, numconfigurations: u32, contentdecryptionmoduleaccess: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateContentDecryptionModuleAccess(this, ::core::mem::transmute(&keysystem), ::core::mem::transmute_copy(&configurations), ::core::mem::transmute_copy(&numconfigurations)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(contentdecryptionmoduleaccess, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFContentDecryptionModuleFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsTypeSupported: IsTypeSupported::<Identity, Impl, OFFSET>,
            CreateContentDecryptionModuleAccess: CreateContentDecryptionModuleAccess::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFContentDecryptionModuleSession_Impl: ::windows_core::BaseImpl {
    fn GetSessionId(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetExpiration(this: &Self::This) -> ::windows_core::Result<f64>;
    fn GetKeyStatuses(this: &Self::This, keystatuses: *mut *mut MFMediaKeyStatus, numkeystatuses: *mut u32) -> ::windows_core::Result<()>;
    fn Load(this: &Self::This, sessionid: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GenerateRequest(this: &Self::This, initdatatype: &::windows_core::PCWSTR, initdata: *const u8, initdatasize: u32) -> ::windows_core::Result<()>;
    fn Update(this: &Self::This, response: *const u8, responsesize: u32) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFContentDecryptionModuleSession {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentDecryptionModuleSession {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSessionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sessionid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSessionId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sessionid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpiration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, expiration: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpiration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(expiration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKeyStatuses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keystatuses: *mut *mut MFMediaKeyStatus, numkeystatuses: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyStatuses(this, ::core::mem::transmute_copy(&keystatuses), ::core::mem::transmute_copy(&numkeystatuses)).into())
        }
        unsafe extern "system" fn Load<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sessionid: ::windows_core::PCWSTR, loaded: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Load(this, ::core::mem::transmute(&sessionid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(loaded, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GenerateRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, initdatatype: ::windows_core::PCWSTR, initdata: *const u8, initdatasize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GenerateRequest(this, ::core::mem::transmute(&initdatatype), ::core::mem::transmute_copy(&initdata), ::core::mem::transmute_copy(&initdatasize)).into())
        }
        unsafe extern "system" fn Update<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, response: *const u8, responsesize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Update(this, ::core::mem::transmute_copy(&response), ::core::mem::transmute_copy(&responsesize)).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this).into())
        }
        IMFContentDecryptionModuleSession_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSessionId: GetSessionId::<Identity, Impl, OFFSET>,
            GetExpiration: GetExpiration::<Identity, Impl, OFFSET>,
            GetKeyStatuses: GetKeyStatuses::<Identity, Impl, OFFSET>,
            Load: Load::<Identity, Impl, OFFSET>,
            GenerateRequest: GenerateRequest::<Identity, Impl, OFFSET>,
            Update: Update::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFContentDecryptionModuleSessionCallbacks_Impl: ::windows_core::BaseImpl {
    fn KeyMessage(this: &Self::This, messagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, message: *const u8, messagesize: u32, destinationurl: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn KeyStatusChanged(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFContentDecryptionModuleSessionCallbacks {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSessionCallbacks_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentDecryptionModuleSessionCallbacks {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn KeyMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSessionCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, messagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, message: *const u8, messagesize: u32, destinationurl: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyMessage(this, ::core::mem::transmute_copy(&messagetype), ::core::mem::transmute_copy(&message), ::core::mem::transmute_copy(&messagesize), ::core::mem::transmute(&destinationurl)).into())
        }
        unsafe extern "system" fn KeyStatusChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptionModuleSessionCallbacks_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyStatusChanged(this).into())
        }
        IMFContentDecryptionModuleSessionCallbacks_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            KeyMessage: KeyMessage::<Identity, Impl, OFFSET>,
            KeyStatusChanged: KeyStatusChanged::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFContentDecryptorContext_Impl: ::windows_core::BaseImpl {
    fn InitializeHardwareKey(this: &Self::This, inputprivatedatabytecount: u32, inputprivatedata: *const ::core::ffi::c_void) -> ::windows_core::Result<u64>;
}
impl ::windows_core::Iids for IMFContentDecryptorContext {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptorContext_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentDecryptorContext {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeHardwareKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentDecryptorContext_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputprivatedatabytecount: u32, inputprivatedata: *const ::core::ffi::c_void, outputprivatedata: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InitializeHardwareKey(this, ::core::mem::transmute_copy(&inputprivatedatabytecount), ::core::mem::transmute_copy(&inputprivatedata)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(outputprivatedata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFContentDecryptorContext_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeHardwareKey: InitializeHardwareKey::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFContentEnabler_Impl: ::windows_core::BaseImpl {
    fn GetEnableType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetEnableURL(this: &Self::This, ppwszurl: *mut ::windows_core::PWSTR, pcchurl: *mut u32, ptruststatus: *mut MF_URL_TRUST_STATUS) -> ::windows_core::Result<()>;
    fn GetEnableData(this: &Self::This, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows_core::Result<()>;
    fn IsAutomaticSupported(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn AutomaticEnable(this: &Self::This) -> ::windows_core::Result<()>;
    fn MonitorEnable(this: &Self::This) -> ::windows_core::Result<()>;
    fn Cancel(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFContentEnabler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentEnabler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEnableType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEnableType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEnableURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwszurl: *mut ::windows_core::PWSTR, pcchurl: *mut u32, ptruststatus: *mut MF_URL_TRUST_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEnableURL(this, ::core::mem::transmute_copy(&ppwszurl), ::core::mem::transmute_copy(&pcchurl), ::core::mem::transmute_copy(&ptruststatus)).into())
        }
        unsafe extern "system" fn GetEnableData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEnableData(this, ::core::mem::transmute_copy(&ppbdata), ::core::mem::transmute_copy(&pcbdata)).into())
        }
        unsafe extern "system" fn IsAutomaticSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfautomatic: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsAutomaticSupported(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfautomatic, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AutomaticEnable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AutomaticEnable(this).into())
        }
        unsafe extern "system" fn MonitorEnable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MonitorEnable(this).into())
        }
        unsafe extern "system" fn Cancel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentEnabler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Cancel(this).into())
        }
        IMFContentEnabler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEnableType: GetEnableType::<Identity, Impl, OFFSET>,
            GetEnableURL: GetEnableURL::<Identity, Impl, OFFSET>,
            GetEnableData: GetEnableData::<Identity, Impl, OFFSET>,
            IsAutomaticSupported: IsAutomaticSupported::<Identity, Impl, OFFSET>,
            AutomaticEnable: AutomaticEnable::<Identity, Impl, OFFSET>,
            MonitorEnable: MonitorEnable::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFContentProtectionDevice_Impl: ::windows_core::BaseImpl {
    fn InvokeFunction(this: &Self::This, functionid: u32, inputbufferbytecount: u32, inputbuffer: *const u8, outputbufferbytecount: *mut u32, outputbuffer: *mut u8) -> ::windows_core::Result<()>;
    fn GetPrivateDataByteCount(this: &Self::This, privateinputbytecount: *mut u32, privateoutputbytecount: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFContentProtectionDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentProtectionDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentProtectionDevice {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InvokeFunction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentProtectionDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, functionid: u32, inputbufferbytecount: u32, inputbuffer: *const u8, outputbufferbytecount: *mut u32, outputbuffer: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InvokeFunction(this, ::core::mem::transmute_copy(&functionid), ::core::mem::transmute_copy(&inputbufferbytecount), ::core::mem::transmute_copy(&inputbuffer), ::core::mem::transmute_copy(&outputbufferbytecount), ::core::mem::transmute_copy(&outputbuffer)).into())
        }
        unsafe extern "system" fn GetPrivateDataByteCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentProtectionDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, privateinputbytecount: *mut u32, privateoutputbytecount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPrivateDataByteCount(this, ::core::mem::transmute_copy(&privateinputbytecount), ::core::mem::transmute_copy(&privateoutputbytecount)).into())
        }
        IMFContentProtectionDevice_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InvokeFunction: InvokeFunction::<Identity, Impl, OFFSET>,
            GetPrivateDataByteCount: GetPrivateDataByteCount::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFContentProtectionManager_Impl: ::windows_core::BaseImpl {
    fn BeginEnableContent(this: &Self::This, penableractivate: ::core::option::Option<&IMFActivate>, ptopo: ::core::option::Option<&IMFTopology>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndEnableContent(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFContentProtectionManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentProtectionManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFContentProtectionManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginEnableContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentProtectionManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, penableractivate: *mut ::core::ffi::c_void, ptopo: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginEnableContent(this, ::windows_core::from_raw_borrowed(&penableractivate), ::windows_core::from_raw_borrowed(&ptopo), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndEnableContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFContentProtectionManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndEnableContent(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        IMFContentProtectionManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginEnableContent: BeginEnableContent::<Identity, Impl, OFFSET>,
            EndEnableContent: EndEnableContent::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFD3D12SynchronizationObject_Impl: ::windows_core::BaseImpl {
    fn SignalEventOnFinalResourceRelease(this: &Self::This, hevent: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFD3D12SynchronizationObject {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObject_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFD3D12SynchronizationObject {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SignalEventOnFinalResourceRelease<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hevent: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SignalEventOnFinalResourceRelease(this, ::core::mem::transmute_copy(&hevent)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObject_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        IMFD3D12SynchronizationObject_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SignalEventOnFinalResourceRelease: SignalEventOnFinalResourceRelease::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D12\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
pub trait IMFD3D12SynchronizationObjectCommands_Impl: ::windows_core::BaseImpl {
    fn EnqueueResourceReady(this: &Self::This, pproducercommandqueue: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12CommandQueue>) -> ::windows_core::Result<()>;
    fn EnqueueResourceReadyWait(this: &Self::This, pconsumercommandqueue: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12CommandQueue>) -> ::windows_core::Result<()>;
    fn SignalEventOnResourceReady(this: &Self::This, hevent: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn EnqueueResourceRelease(this: &Self::This, pconsumercommandqueue: ::core::option::Option<&super::super::Graphics::Direct3D12::ID3D12CommandQueue>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl ::windows_core::Iids for IMFD3D12SynchronizationObjectCommands {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D12"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObjectCommands_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFD3D12SynchronizationObjectCommands {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnqueueResourceReady<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObjectCommands_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pproducercommandqueue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnqueueResourceReady(this, ::windows_core::from_raw_borrowed(&pproducercommandqueue)).into())
        }
        unsafe extern "system" fn EnqueueResourceReadyWait<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObjectCommands_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconsumercommandqueue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnqueueResourceReadyWait(this, ::windows_core::from_raw_borrowed(&pconsumercommandqueue)).into())
        }
        unsafe extern "system" fn SignalEventOnResourceReady<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObjectCommands_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hevent: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SignalEventOnResourceReady(this, ::core::mem::transmute_copy(&hevent)).into())
        }
        unsafe extern "system" fn EnqueueResourceRelease<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFD3D12SynchronizationObjectCommands_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconsumercommandqueue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnqueueResourceRelease(this, ::windows_core::from_raw_borrowed(&pconsumercommandqueue)).into())
        }
        IMFD3D12SynchronizationObjectCommands_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnqueueResourceReady: EnqueueResourceReady::<Identity, Impl, OFFSET>,
            EnqueueResourceReadyWait: EnqueueResourceReadyWait::<Identity, Impl, OFFSET>,
            SignalEventOnResourceReady: SignalEventOnResourceReady::<Identity, Impl, OFFSET>,
            EnqueueResourceRelease: EnqueueResourceRelease::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFDLNASinkInit_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, fpal: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFDLNASinkInit {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDLNASinkInit_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDLNASinkInit {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDLNASinkInit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, fpal: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute_copy(&fpal)).into())
        }
        IMFDLNASinkInit_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Initialize: Initialize::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFDRMNetHelper_Impl: ::windows_core::BaseImpl {
    fn ProcessLicenseRequest(this: &Self::This, plicenserequest: *const u8, cblicenserequest: u32, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32, pbstrkid: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetChainedLicenseResponse(this: &Self::This, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFDRMNetHelper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDRMNetHelper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDRMNetHelper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProcessLicenseRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDRMNetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plicenserequest: *const u8, cblicenserequest: u32, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32, pbstrkid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessLicenseRequest(this, ::core::mem::transmute_copy(&plicenserequest), ::core::mem::transmute_copy(&cblicenserequest), ::core::mem::transmute_copy(&pplicenseresponse), ::core::mem::transmute_copy(&pcblicenseresponse), ::core::mem::transmute_copy(&pbstrkid)).into())
        }
        unsafe extern "system" fn GetChainedLicenseResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDRMNetHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pplicenseresponse: *mut *mut u8, pcblicenseresponse: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetChainedLicenseResponse(this, ::core::mem::transmute_copy(&pplicenseresponse), ::core::mem::transmute_copy(&pcblicenseresponse)).into())
        }
        IMFDRMNetHelper_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ProcessLicenseRequest: ProcessLicenseRequest::<Identity, Impl, OFFSET>,
            GetChainedLicenseResponse: GetChainedLicenseResponse::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFDXGIBuffer_Impl: ::windows_core::BaseImpl {
    fn GetResource(this: &Self::This, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetSubresourceIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetUnknown(this: &Self::This, guid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn SetUnknown(this: &Self::This, guid: *const ::windows_core::GUID, punkdata: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFDXGIBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDXGIBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetResource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetResource(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        unsafe extern "system" fn GetSubresourceIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pusubresource: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSubresourceIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pusubresource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUnknown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUnknown(this, ::core::mem::transmute_copy(&guid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        unsafe extern "system" fn SetUnknown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *const ::windows_core::GUID, punkdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUnknown(this, ::core::mem::transmute_copy(&guid), ::windows_core::from_raw_borrowed(&punkdata)).into())
        }
        IMFDXGIBuffer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetResource: GetResource::<Identity, Impl, OFFSET>,
            GetSubresourceIndex: GetSubresourceIndex::<Identity, Impl, OFFSET>,
            GetUnknown: GetUnknown::<Identity, Impl, OFFSET>,
            SetUnknown: SetUnknown::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFDXGIDeviceManager_Impl: ::windows_core::BaseImpl {
    fn CloseDeviceHandle(this: &Self::This, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetVideoService(this: &Self::This, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows_core::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn LockDevice(this: &Self::This, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows_core::GUID, ppunkdevice: *mut *mut ::core::ffi::c_void, fblock: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OpenDeviceHandle(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HANDLE>;
    fn ResetDevice(this: &Self::This, punkdevice: ::core::option::Option<&::windows_core::IUnknown>, resettoken: u32) -> ::windows_core::Result<()>;
    fn TestDevice(this: &Self::This, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn UnlockDevice(this: &Self::This, hdevice: super::super::Foundation::HANDLE, fsavestate: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFDXGIDeviceManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDXGIDeviceManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CloseDeviceHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloseDeviceHandle(this, ::core::mem::transmute_copy(&hdevice)).into())
        }
        unsafe extern "system" fn GetVideoService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows_core::GUID, ppservice: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoService(this, ::core::mem::transmute_copy(&hdevice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppservice)).into())
        }
        unsafe extern "system" fn LockDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE, riid: *const ::windows_core::GUID, ppunkdevice: *mut *mut ::core::ffi::c_void, fblock: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockDevice(this, ::core::mem::transmute_copy(&hdevice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppunkdevice), ::core::mem::transmute_copy(&fblock)).into())
        }
        unsafe extern "system" fn OpenDeviceHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phdevice: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OpenDeviceHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phdevice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResetDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkdevice: *mut ::core::ffi::c_void, resettoken: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetDevice(this, ::windows_core::from_raw_borrowed(&punkdevice), ::core::mem::transmute_copy(&resettoken)).into())
        }
        unsafe extern "system" fn TestDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TestDevice(this, ::core::mem::transmute_copy(&hdevice)).into())
        }
        unsafe extern "system" fn UnlockDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdevice: super::super::Foundation::HANDLE, fsavestate: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockDevice(this, ::core::mem::transmute_copy(&hdevice), ::core::mem::transmute_copy(&fsavestate)).into())
        }
        IMFDXGIDeviceManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CloseDeviceHandle: CloseDeviceHandle::<Identity, Impl, OFFSET>,
            GetVideoService: GetVideoService::<Identity, Impl, OFFSET>,
            LockDevice: LockDevice::<Identity, Impl, OFFSET>,
            OpenDeviceHandle: OpenDeviceHandle::<Identity, Impl, OFFSET>,
            ResetDevice: ResetDevice::<Identity, Impl, OFFSET>,
            TestDevice: TestDevice::<Identity, Impl, OFFSET>,
            UnlockDevice: UnlockDevice::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFDXGIDeviceManagerSource_Impl: ::windows_core::BaseImpl {
    fn GetManager(this: &Self::This) -> ::windows_core::Result<IMFDXGIDeviceManager>;
}
impl ::windows_core::Iids for IMFDXGIDeviceManagerSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManagerSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDXGIDeviceManagerSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDXGIDeviceManagerSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmanager: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetManager(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmanager, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFDXGIDeviceManagerSource_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetManager: GetManager::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFDesiredSample_Impl: ::windows_core::BaseImpl {
    fn GetDesiredSampleTimeAndDuration(this: &Self::This, phnssampletime: *mut i64, phnssampleduration: *mut i64) -> ::windows_core::Result<()>;
    fn SetDesiredSampleTimeAndDuration(this: &Self::This, hnssampletime: i64, hnssampleduration: i64);
    fn Clear(this: &Self::This);
}
impl ::windows_core::Iids for IMFDesiredSample {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDesiredSample_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDesiredSample {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDesiredSampleTimeAndDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDesiredSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phnssampletime: *mut i64, phnssampleduration: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDesiredSampleTimeAndDuration(this, ::core::mem::transmute_copy(&phnssampletime), ::core::mem::transmute_copy(&phnssampleduration)).into())
        }
        unsafe extern "system" fn SetDesiredSampleTimeAndDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDesiredSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssampletime: i64, hnssampleduration: i64) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDesiredSampleTimeAndDuration(this, ::core::mem::transmute_copy(&hnssampletime), ::core::mem::transmute_copy(&hnssampleduration)))
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDesiredSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this))
        }
        IMFDesiredSample_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDesiredSampleTimeAndDuration: GetDesiredSampleTimeAndDuration::<Identity, Impl, OFFSET>,
            SetDesiredSampleTimeAndDuration: SetDesiredSampleTimeAndDuration::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFDeviceTransform_Impl: ::windows_core::BaseImpl {
    fn InitializeTransform(this: &Self::This, pattributes: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn GetInputAvailableType(this: &Self::This, dwinputstreamid: u32, dwtypeindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetInputCurrentType(this: &Self::This, dwinputstreamid: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetInputStreamAttributes(this: &Self::This, dwinputstreamid: u32) -> ::windows_core::Result<IMFAttributes>;
    fn GetOutputAvailableType(this: &Self::This, dwoutputstreamid: u32, dwtypeindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetOutputCurrentType(this: &Self::This, dwoutputstreamid: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetOutputStreamAttributes(this: &Self::This, dwoutputstreamid: u32) -> ::windows_core::Result<IMFAttributes>;
    fn GetStreamCount(this: &Self::This, pcinputstreams: *mut u32, pcoutputstreams: *mut u32) -> ::windows_core::Result<()>;
    fn GetStreamIDs(this: &Self::This, dwinputidarraysize: u32, pdwinputstreamids: *mut u32, dwoutputidarraysize: u32, pdwoutputstreamids: *mut u32) -> ::windows_core::Result<()>;
    fn ProcessEvent(this: &Self::This, dwinputstreamid: u32, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
    fn ProcessInput(this: &Self::This, dwinputstreamid: u32, psample: ::core::option::Option<&IMFSample>, dwflags: u32) -> ::windows_core::Result<()>;
    fn ProcessMessage(this: &Self::This, emessage: MFT_MESSAGE_TYPE, ulparam: usize) -> ::windows_core::Result<()>;
    fn ProcessOutput(this: &Self::This, dwflags: u32, coutputbuffercount: u32, poutputsample: *mut MFT_OUTPUT_DATA_BUFFER, pdwstatus: *mut u32) -> ::windows_core::Result<()>;
    fn SetInputStreamState(this: &Self::This, dwstreamid: u32, pmediatype: ::core::option::Option<&IMFMediaType>, value: DeviceStreamState, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetInputStreamState(this: &Self::This, dwstreamid: u32) -> ::windows_core::Result<DeviceStreamState>;
    fn SetOutputStreamState(this: &Self::This, dwstreamid: u32, pmediatype: ::core::option::Option<&IMFMediaType>, value: DeviceStreamState, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetOutputStreamState(this: &Self::This, dwstreamid: u32) -> ::windows_core::Result<DeviceStreamState>;
    fn GetInputStreamPreferredState(this: &Self::This, dwstreamid: u32, value: *mut DeviceStreamState, ppmediatype: *mut ::core::option::Option<IMFMediaType>) -> ::windows_core::Result<()>;
    fn FlushInputStream(this: &Self::This, dwstreamindex: u32, dwflags: u32) -> ::windows_core::Result<()>;
    fn FlushOutputStream(this: &Self::This, dwstreamindex: u32, dwflags: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFDeviceTransform {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDeviceTransform {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeTransform<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeTransform(this, ::windows_core::from_raw_borrowed(&pattributes)).into())
        }
        unsafe extern "system" fn GetInputAvailableType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, dwtypeindex: u32, pmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputAvailableType(this, ::core::mem::transmute_copy(&dwinputstreamid), ::core::mem::transmute_copy(&dwtypeindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputCurrentType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCurrentType(this, ::core::mem::transmute_copy(&dwinputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputStreamAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputStreamAttributes(this, ::core::mem::transmute_copy(&dwinputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputAvailableType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, dwtypeindex: u32, pmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputAvailableType(this, ::core::mem::transmute_copy(&dwoutputstreamid), ::core::mem::transmute_copy(&dwtypeindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputCurrentType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, pmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCurrentType(this, ::core::mem::transmute_copy(&dwoutputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputStreamAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStreamAttributes(this, ::core::mem::transmute_copy(&dwoutputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcinputstreams: *mut u32, pcoutputstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamCount(this, ::core::mem::transmute_copy(&pcinputstreams), ::core::mem::transmute_copy(&pcoutputstreams)).into())
        }
        unsafe extern "system" fn GetStreamIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputidarraysize: u32, pdwinputstreamids: *mut u32, dwoutputidarraysize: u32, pdwoutputstreamids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamIDs(this, ::core::mem::transmute_copy(&dwinputidarraysize), ::core::mem::transmute_copy(&pdwinputstreamids), ::core::mem::transmute_copy(&dwoutputidarraysize), ::core::mem::transmute_copy(&pdwoutputstreamids)).into())
        }
        unsafe extern "system" fn ProcessEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessEvent(this, ::core::mem::transmute_copy(&dwinputstreamid), ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        unsafe extern "system" fn ProcessInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, psample: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessInput(this, ::core::mem::transmute_copy(&dwinputstreamid), ::windows_core::from_raw_borrowed(&psample), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn ProcessMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emessage: MFT_MESSAGE_TYPE, ulparam: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessMessage(this, ::core::mem::transmute_copy(&emessage), ::core::mem::transmute_copy(&ulparam)).into())
        }
        unsafe extern "system" fn ProcessOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, coutputbuffercount: u32, poutputsample: *mut MFT_OUTPUT_DATA_BUFFER, pdwstatus: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessOutput(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&coutputbuffercount), ::core::mem::transmute_copy(&poutputsample), ::core::mem::transmute_copy(&pdwstatus)).into())
        }
        unsafe extern "system" fn SetInputStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pmediatype: *mut ::core::ffi::c_void, value: DeviceStreamState, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputStreamState(this, ::core::mem::transmute_copy(&dwstreamid), ::windows_core::from_raw_borrowed(&pmediatype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetInputStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, value: *mut DeviceStreamState) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputStreamState(this, ::core::mem::transmute_copy(&dwstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pmediatype: *mut ::core::ffi::c_void, value: DeviceStreamState, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputStreamState(this, ::core::mem::transmute_copy(&dwstreamid), ::windows_core::from_raw_borrowed(&pmediatype), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetOutputStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, value: *mut DeviceStreamState) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStreamState(this, ::core::mem::transmute_copy(&dwstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputStreamPreferredState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, value: *mut DeviceStreamState, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInputStreamPreferredState(this, ::core::mem::transmute_copy(&dwstreamid), ::core::mem::transmute_copy(&value), ::core::mem::transmute_copy(&ppmediatype)).into())
        }
        unsafe extern "system" fn FlushInputStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushInputStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn FlushOutputStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FlushOutputStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwflags)).into())
        }
        IMFDeviceTransform_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeTransform: InitializeTransform::<Identity, Impl, OFFSET>,
            GetInputAvailableType: GetInputAvailableType::<Identity, Impl, OFFSET>,
            GetInputCurrentType: GetInputCurrentType::<Identity, Impl, OFFSET>,
            GetInputStreamAttributes: GetInputStreamAttributes::<Identity, Impl, OFFSET>,
            GetOutputAvailableType: GetOutputAvailableType::<Identity, Impl, OFFSET>,
            GetOutputCurrentType: GetOutputCurrentType::<Identity, Impl, OFFSET>,
            GetOutputStreamAttributes: GetOutputStreamAttributes::<Identity, Impl, OFFSET>,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetStreamIDs: GetStreamIDs::<Identity, Impl, OFFSET>,
            ProcessEvent: ProcessEvent::<Identity, Impl, OFFSET>,
            ProcessInput: ProcessInput::<Identity, Impl, OFFSET>,
            ProcessMessage: ProcessMessage::<Identity, Impl, OFFSET>,
            ProcessOutput: ProcessOutput::<Identity, Impl, OFFSET>,
            SetInputStreamState: SetInputStreamState::<Identity, Impl, OFFSET>,
            GetInputStreamState: GetInputStreamState::<Identity, Impl, OFFSET>,
            SetOutputStreamState: SetOutputStreamState::<Identity, Impl, OFFSET>,
            GetOutputStreamState: GetOutputStreamState::<Identity, Impl, OFFSET>,
            GetInputStreamPreferredState: GetInputStreamPreferredState::<Identity, Impl, OFFSET>,
            FlushInputStream: FlushInputStream::<Identity, Impl, OFFSET>,
            FlushOutputStream: FlushOutputStream::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFDeviceTransformCallback_Impl: ::windows_core::BaseImpl {
    fn OnBufferSent(this: &Self::This, pcallbackattributes: ::core::option::Option<&IMFAttributes>, pinid: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFDeviceTransformCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransformCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFDeviceTransformCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnBufferSent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFDeviceTransformCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallbackattributes: *mut ::core::ffi::c_void, pinid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnBufferSent(this, ::windows_core::from_raw_borrowed(&pcallbackattributes), ::core::mem::transmute_copy(&pinid)).into())
        }
        IMFDeviceTransformCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnBufferSent: OnBufferSent::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFExtendedCameraControl_Impl: ::windows_core::BaseImpl {
    fn GetCapabilities(this: &Self::This) -> u64;
    fn SetFlags(this: &Self::This, ulflags: u64) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> u64;
    fn LockPayload(this: &Self::This, pppayload: *mut *mut u8, pulpayload: *mut u32) -> ::windows_core::Result<()>;
    fn UnlockPayload(this: &Self::This) -> ::windows_core::Result<()>;
    fn CommitSettings(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFExtendedCameraControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedCameraControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCapabilities(this))
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulflags: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&ulflags)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFlags(this))
        }
        unsafe extern "system" fn LockPayload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppayload: *mut *mut u8, pulpayload: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockPayload(this, ::core::mem::transmute_copy(&pppayload), ::core::mem::transmute_copy(&pulpayload)).into())
        }
        unsafe extern "system" fn UnlockPayload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockPayload(this).into())
        }
        unsafe extern "system" fn CommitSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CommitSettings(this).into())
        }
        IMFExtendedCameraControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCapabilities: GetCapabilities::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            LockPayload: LockPayload::<Identity, Impl, OFFSET>,
            UnlockPayload: UnlockPayload::<Identity, Impl, OFFSET>,
            CommitSettings: CommitSettings::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFExtendedCameraController_Impl: ::windows_core::BaseImpl {
    fn GetExtendedCameraControl(this: &Self::This, dwstreamindex: u32, ulpropertyid: u32) -> ::windows_core::Result<IMFExtendedCameraControl>;
}
impl ::windows_core::Iids for IMFExtendedCameraController {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraController_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedCameraController {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetExtendedCameraControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraController_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, ulpropertyid: u32, ppcontrol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtendedCameraControl(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&ulpropertyid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcontrol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFExtendedCameraController_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetExtendedCameraControl: GetExtendedCameraControl::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFExtendedCameraIntrinsicModel_Impl: ::windows_core::BaseImpl {
    fn GetModel(this: &Self::This, pintrinsicmodel: *mut MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows_core::Result<()>;
    fn SetModel(this: &Self::This, pintrinsicmodel: *const MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows_core::Result<()>;
    fn GetDistortionModelType(this: &Self::This) -> ::windows_core::Result<MFCameraIntrinsic_DistortionModelType>;
}
impl ::windows_core::Iids for IMFExtendedCameraIntrinsicModel {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicModel_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedCameraIntrinsicModel {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicModel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pintrinsicmodel: *mut MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetModel(this, ::core::mem::transmute_copy(&pintrinsicmodel)).into())
        }
        unsafe extern "system" fn SetModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicModel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pintrinsicmodel: *const MFExtendedCameraIntrinsic_IntrinsicModel) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetModel(this, ::core::mem::transmute_copy(&pintrinsicmodel)).into())
        }
        unsafe extern "system" fn GetDistortionModelType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicModel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdistortionmodeltype: *mut MFCameraIntrinsic_DistortionModelType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDistortionModelType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdistortionmodeltype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFExtendedCameraIntrinsicModel_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetModel: GetModel::<Identity, Impl, OFFSET>,
            SetModel: SetModel::<Identity, Impl, OFFSET>,
            GetDistortionModelType: GetDistortionModelType::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFExtendedCameraIntrinsics_Impl: ::windows_core::BaseImpl {
    fn InitializeFromBuffer(this: &Self::This, pbbuffer: *const u8, dwbuffersize: u32) -> ::windows_core::Result<()>;
    fn GetBufferSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SerializeToBuffer(this: &Self::This, pbbuffer: *mut u8, pdwbuffersize: *mut u32) -> ::windows_core::Result<()>;
    fn GetIntrinsicModelCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetIntrinsicModelByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFExtendedCameraIntrinsicModel>;
    fn AddIntrinsicModel(this: &Self::This, pintrinsicmodel: ::core::option::Option<&IMFExtendedCameraIntrinsicModel>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFExtendedCameraIntrinsics {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedCameraIntrinsics {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbbuffer: *const u8, dwbuffersize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromBuffer(this, ::core::mem::transmute_copy(&pbbuffer), ::core::mem::transmute_copy(&dwbuffersize)).into())
        }
        unsafe extern "system" fn GetBufferSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwbuffersize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBufferSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwbuffersize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SerializeToBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbbuffer: *mut u8, pdwbuffersize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SerializeToBuffer(this, ::core::mem::transmute_copy(&pbbuffer), ::core::mem::transmute_copy(&pdwbuffersize)).into())
        }
        unsafe extern "system" fn GetIntrinsicModelCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIntrinsicModelCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIntrinsicModelByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppintrinsicmodel: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIntrinsicModelByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppintrinsicmodel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddIntrinsicModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsics_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pintrinsicmodel: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddIntrinsicModel(this, ::windows_core::from_raw_borrowed(&pintrinsicmodel)).into())
        }
        IMFExtendedCameraIntrinsics_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromBuffer: InitializeFromBuffer::<Identity, Impl, OFFSET>,
            GetBufferSize: GetBufferSize::<Identity, Impl, OFFSET>,
            SerializeToBuffer: SerializeToBuffer::<Identity, Impl, OFFSET>,
            GetIntrinsicModelCount: GetIntrinsicModelCount::<Identity, Impl, OFFSET>,
            GetIntrinsicModelByIndex: GetIntrinsicModelByIndex::<Identity, Impl, OFFSET>,
            AddIntrinsicModel: AddIntrinsicModel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFExtendedCameraIntrinsicsDistortionModel6KT_Impl: ::windows_core::BaseImpl {
    fn GetDistortionModel(this: &Self::This, pdistortionmodel: *mut MFCameraIntrinsic_DistortionModel6KT) -> ::windows_core::Result<()>;
    fn SetDistortionModel(this: &Self::This, pdistortionmodel: *const MFCameraIntrinsic_DistortionModel6KT) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFExtendedCameraIntrinsicsDistortionModel6KT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicsDistortionModel6KT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedCameraIntrinsicsDistortionModel6KT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDistortionModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicsDistortionModel6KT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdistortionmodel: *mut MFCameraIntrinsic_DistortionModel6KT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDistortionModel(this, ::core::mem::transmute_copy(&pdistortionmodel)).into())
        }
        unsafe extern "system" fn SetDistortionModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicsDistortionModel6KT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdistortionmodel: *const MFCameraIntrinsic_DistortionModel6KT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDistortionModel(this, ::core::mem::transmute_copy(&pdistortionmodel)).into())
        }
        IMFExtendedCameraIntrinsicsDistortionModel6KT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDistortionModel: GetDistortionModel::<Identity, Impl, OFFSET>,
            SetDistortionModel: SetDistortionModel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFExtendedCameraIntrinsicsDistortionModelArcTan_Impl: ::windows_core::BaseImpl {
    fn GetDistortionModel(this: &Self::This, pdistortionmodel: *mut MFCameraIntrinsic_DistortionModelArcTan) -> ::windows_core::Result<()>;
    fn SetDistortionModel(this: &Self::This, pdistortionmodel: *const MFCameraIntrinsic_DistortionModelArcTan) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFExtendedCameraIntrinsicsDistortionModelArcTan {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicsDistortionModelArcTan_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedCameraIntrinsicsDistortionModelArcTan {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDistortionModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicsDistortionModelArcTan_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdistortionmodel: *mut MFCameraIntrinsic_DistortionModelArcTan) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDistortionModel(this, ::core::mem::transmute_copy(&pdistortionmodel)).into())
        }
        unsafe extern "system" fn SetDistortionModel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedCameraIntrinsicsDistortionModelArcTan_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdistortionmodel: *const MFCameraIntrinsic_DistortionModelArcTan) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDistortionModel(this, ::core::mem::transmute_copy(&pdistortionmodel)).into())
        }
        IMFExtendedCameraIntrinsicsDistortionModelArcTan_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDistortionModel: GetDistortionModel::<Identity, Impl, OFFSET>,
            SetDistortionModel: SetDistortionModel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFExtendedDRMTypeSupport_Impl: ::windows_core::BaseImpl {
    fn IsTypeSupportedEx(this: &Self::This, r#type: &::windows_core::BSTR, keysystem: &::windows_core::BSTR) -> ::windows_core::Result<MF_MEDIA_ENGINE_CANPLAY>;
}
impl ::windows_core::Iids for IMFExtendedDRMTypeSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedDRMTypeSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFExtendedDRMTypeSupport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsTypeSupportedEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFExtendedDRMTypeSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>, keysystem: ::std::mem::MaybeUninit<::windows_core::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsTypeSupportedEx(this, ::core::mem::transmute(&r#type), ::core::mem::transmute(&keysystem)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(panswer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFExtendedDRMTypeSupport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsTypeSupportedEx: IsTypeSupportedEx::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFFieldOfUseMFTUnlock_Impl: ::windows_core::BaseImpl {
    fn Unlock(this: &Self::This, punkmft: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFFieldOfUseMFTUnlock {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFFieldOfUseMFTUnlock_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFFieldOfUseMFTUnlock {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Unlock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFFieldOfUseMFTUnlock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkmft: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unlock(this, ::windows_core::from_raw_borrowed(&punkmft)).into())
        }
        IMFFieldOfUseMFTUnlock_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Unlock: Unlock::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFFinalizableMediaSink_Impl: ::windows_core::BaseImpl + IMFMediaSink_Impl {
    fn BeginFinalize(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndFinalize(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFFinalizableMediaSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFFinalizableMediaSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFFinalizableMediaSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginFinalize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFFinalizableMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginFinalize(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndFinalize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFFinalizableMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndFinalize(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        IMFFinalizableMediaSink_Vtbl {
            base__: <IMFMediaSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginFinalize: BeginFinalize::<Identity, Impl, OFFSET>,
            EndFinalize: EndFinalize::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFGetService_Impl: ::windows_core::BaseImpl {
    fn GetService(this: &Self::This, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFGetService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFGetService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFGetService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFGetService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetService(this, ::core::mem::transmute_copy(&guidservice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        IMFGetService_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetService: GetService::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFHDCPStatus_Impl: ::windows_core::BaseImpl {
    fn Query(this: &Self::This, pstatus: *mut MF_HDCP_STATUS, pfstatus: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Set(this: &Self::This, status: MF_HDCP_STATUS) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFHDCPStatus {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHDCPStatus_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFHDCPStatus {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Query<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHDCPStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatus: *mut MF_HDCP_STATUS, pfstatus: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Query(this, ::core::mem::transmute_copy(&pstatus), ::core::mem::transmute_copy(&pfstatus)).into())
        }
        unsafe extern "system" fn Set<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHDCPStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: MF_HDCP_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set(this, ::core::mem::transmute_copy(&status)).into())
        }
        IMFHDCPStatus_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Query: Query::<Identity, Impl, OFFSET>,
            Set: Set::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFHttpDownloadRequest_Impl: ::windows_core::BaseImpl {
    fn AddHeader(this: &Self::This, szheader: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn BeginSendRequest(this: &Self::This, pbpayload: *const u8, cbpayload: u32, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndSendRequest(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn BeginReceiveResponse(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndReceiveResponse(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn BeginReadPayload(this: &Self::This, pb: *mut u8, cb: u32, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndReadPayload(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>, pqwoffset: *mut u64, pcbread: *mut u32) -> ::windows_core::Result<()>;
    fn QueryHeader(this: &Self::This, szheadername: &::windows_core::PCWSTR, dwindex: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetURL(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn HasNullSourceOrigin(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetTimeSeekResult(this: &Self::This, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows_core::Result<()>;
    fn GetHttpStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetAtEndOfPayload(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetTotalLength(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetRangeEndOffset(this: &Self::This) -> ::windows_core::Result<u64>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFHttpDownloadRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFHttpDownloadRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddHeader<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szheader: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddHeader(this, ::core::mem::transmute(&szheader)).into())
        }
        unsafe extern "system" fn BeginSendRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbpayload: *const u8, cbpayload: u32, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginSendRequest(this, ::core::mem::transmute_copy(&pbpayload), ::core::mem::transmute_copy(&cbpayload), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndSendRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSendRequest(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn BeginReceiveResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginReceiveResponse(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndReceiveResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndReceiveResponse(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn BeginReadPayload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pb: *mut u8, cb: u32, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginReadPayload(this, ::core::mem::transmute_copy(&pb), ::core::mem::transmute_copy(&cb), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndReadPayload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pqwoffset: *mut u64, pcbread: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndReadPayload(this, ::windows_core::from_raw_borrowed(&presult), ::core::mem::transmute_copy(&pqwoffset), ::core::mem::transmute_copy(&pcbread)).into())
        }
        unsafe extern "system" fn QueryHeader<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szheadername: ::windows_core::PCWSTR, dwindex: u32, ppszheadervalue: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryHeader(this, ::core::mem::transmute(&szheadername), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszheadervalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszurl: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetURL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HasNullSourceOrigin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfnullsourceorigin: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HasNullSourceOrigin(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfnullsourceorigin, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTimeSeekResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwstarttime: *mut u64, pqwstoptime: *mut u64, pqwduration: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTimeSeekResult(this, ::core::mem::transmute_copy(&pqwstarttime), ::core::mem::transmute_copy(&pqwstoptime), ::core::mem::transmute_copy(&pqwduration)).into())
        }
        unsafe extern "system" fn GetHttpStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwhttpstatus: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHttpStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwhttpstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAtEndOfPayload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfatendofpayload: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAtEndOfPayload(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfatendofpayload, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTotalLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwtotallength: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTotalLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwtotallength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRangeEndOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwrangeend: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRangeEndOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwrangeend, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IMFHttpDownloadRequest_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddHeader: AddHeader::<Identity, Impl, OFFSET>,
            BeginSendRequest: BeginSendRequest::<Identity, Impl, OFFSET>,
            EndSendRequest: EndSendRequest::<Identity, Impl, OFFSET>,
            BeginReceiveResponse: BeginReceiveResponse::<Identity, Impl, OFFSET>,
            EndReceiveResponse: EndReceiveResponse::<Identity, Impl, OFFSET>,
            BeginReadPayload: BeginReadPayload::<Identity, Impl, OFFSET>,
            EndReadPayload: EndReadPayload::<Identity, Impl, OFFSET>,
            QueryHeader: QueryHeader::<Identity, Impl, OFFSET>,
            GetURL: GetURL::<Identity, Impl, OFFSET>,
            HasNullSourceOrigin: HasNullSourceOrigin::<Identity, Impl, OFFSET>,
            GetTimeSeekResult: GetTimeSeekResult::<Identity, Impl, OFFSET>,
            GetHttpStatus: GetHttpStatus::<Identity, Impl, OFFSET>,
            GetAtEndOfPayload: GetAtEndOfPayload::<Identity, Impl, OFFSET>,
            GetTotalLength: GetTotalLength::<Identity, Impl, OFFSET>,
            GetRangeEndOffset: GetRangeEndOffset::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFHttpDownloadSession_Impl: ::windows_core::BaseImpl {
    fn SetServer(this: &Self::This, szservername: &::windows_core::PCWSTR, nport: u32) -> ::windows_core::Result<()>;
    fn CreateRequest(this: &Self::This, szobjectname: &::windows_core::PCWSTR, fbypassproxycache: super::super::Foundation::BOOL, fsecure: super::super::Foundation::BOOL, szverb: &::windows_core::PCWSTR, szreferrer: &::windows_core::PCWSTR) -> ::windows_core::Result<IMFHttpDownloadRequest>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFHttpDownloadSession {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadSession_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFHttpDownloadSession {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szservername: ::windows_core::PCWSTR, nport: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetServer(this, ::core::mem::transmute(&szservername), ::core::mem::transmute_copy(&nport)).into())
        }
        unsafe extern "system" fn CreateRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szobjectname: ::windows_core::PCWSTR, fbypassproxycache: super::super::Foundation::BOOL, fsecure: super::super::Foundation::BOOL, szverb: ::windows_core::PCWSTR, szreferrer: ::windows_core::PCWSTR, pprequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateRequest(this, ::core::mem::transmute(&szobjectname), ::core::mem::transmute_copy(&fbypassproxycache), ::core::mem::transmute_copy(&fsecure), ::core::mem::transmute(&szverb), ::core::mem::transmute(&szreferrer)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IMFHttpDownloadSession_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetServer: SetServer::<Identity, Impl, OFFSET>,
            CreateRequest: CreateRequest::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFHttpDownloadSessionProvider_Impl: ::windows_core::BaseImpl {
    fn CreateHttpDownloadSession(this: &Self::This, wszscheme: &::windows_core::PCWSTR) -> ::windows_core::Result<IMFHttpDownloadSession>;
}
impl ::windows_core::Iids for IMFHttpDownloadSessionProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadSessionProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFHttpDownloadSessionProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateHttpDownloadSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFHttpDownloadSessionProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszscheme: ::windows_core::PCWSTR, ppdownloadsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateHttpDownloadSession(this, ::core::mem::transmute(&wszscheme)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdownloadsession, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFHttpDownloadSessionProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateHttpDownloadSession: CreateHttpDownloadSession::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFImageSharingEngine_Impl: ::windows_core::BaseImpl {
    fn SetSource(this: &Self::This, pstream: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetDevice(this: &Self::This, pdevice: *mut DEVICE_INFO) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFImageSharingEngine {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFImageSharingEngine_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFImageSharingEngine {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFImageSharingEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSource(this, ::windows_core::from_raw_borrowed(&pstream)).into())
        }
        unsafe extern "system" fn GetDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFImageSharingEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdevice: *mut DEVICE_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDevice(this, ::core::mem::transmute_copy(&pdevice)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFImageSharingEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFImageSharingEngine_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetSource: SetSource::<Identity, Impl, OFFSET>,
            GetDevice: GetDevice::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFImageSharingEngineClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstanceFromUDN(this: &Self::This, puniquedevicename: &::windows_core::BSTR) -> ::windows_core::Result<IMFImageSharingEngine>;
}
impl ::windows_core::Iids for IMFImageSharingEngineClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFImageSharingEngineClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFImageSharingEngineClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstanceFromUDN<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFImageSharingEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puniquedevicename: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppengine: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateInstanceFromUDN(this, ::core::mem::transmute(&puniquedevicename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppengine, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFImageSharingEngineClassFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateInstanceFromUDN: CreateInstanceFromUDN::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFInputTrustAuthority_Impl: ::windows_core::BaseImpl {
    fn GetDecrypter(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn RequestAccess(this: &Self::This, action: MFPOLICYMANAGER_ACTION) -> ::windows_core::Result<IMFActivate>;
    fn GetPolicy(this: &Self::This, action: MFPOLICYMANAGER_ACTION) -> ::windows_core::Result<IMFOutputPolicy>;
    fn BindAccess(this: &Self::This, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows_core::Result<()>;
    fn UpdateAccess(this: &Self::This, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFInputTrustAuthority {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFInputTrustAuthority {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDecrypter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDecrypter(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn RequestAccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, action: MFPOLICYMANAGER_ACTION, ppcontentenableractivate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestAccess(this, ::core::mem::transmute_copy(&action)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcontentenableractivate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, action: MFPOLICYMANAGER_ACTION, pppolicy: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicy(this, ::core::mem::transmute_copy(&action)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppolicy, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BindAccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BindAccess(this, ::core::mem::transmute_copy(&pparam)).into())
        }
        unsafe extern "system" fn UpdateAccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparam: *const MFINPUTTRUSTAUTHORITY_ACCESS_PARAMS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateAccess(this, ::core::mem::transmute_copy(&pparam)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFInputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        IMFInputTrustAuthority_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDecrypter: GetDecrypter::<Identity, Impl, OFFSET>,
            RequestAccess: RequestAccess::<Identity, Impl, OFFSET>,
            GetPolicy: GetPolicy::<Identity, Impl, OFFSET>,
            BindAccess: BindAccess::<Identity, Impl, OFFSET>,
            UpdateAccess: UpdateAccess::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFLocalMFTRegistration_Impl: ::windows_core::BaseImpl {
    fn RegisterMFTs(this: &Self::This, pmfts: *const MFT_REGISTRATION_INFO, cmfts: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFLocalMFTRegistration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFLocalMFTRegistration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFLocalMFTRegistration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterMFTs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFLocalMFTRegistration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmfts: *const MFT_REGISTRATION_INFO, cmfts: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterMFTs(this, ::core::mem::transmute_copy(&pmfts), ::core::mem::transmute_copy(&cmfts)).into())
        }
        IMFLocalMFTRegistration_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, RegisterMFTs: RegisterMFTs::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFMediaBuffer_Impl: ::windows_core::BaseImpl {
    fn Lock(this: &Self::This, ppbbuffer: *mut *mut u8, pcbmaxlength: *mut u32, pcbcurrentlength: *mut u32) -> ::windows_core::Result<()>;
    fn Unlock(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCurrentLength(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCurrentLength(this: &Self::This, cbcurrentlength: u32) -> ::windows_core::Result<()>;
    fn GetMaxLength(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFMediaBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Lock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbbuffer: *mut *mut u8, pcbmaxlength: *mut u32, pcbcurrentlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Lock(this, ::core::mem::transmute_copy(&ppbbuffer), ::core::mem::transmute_copy(&pcbmaxlength), ::core::mem::transmute_copy(&pcbcurrentlength)).into())
        }
        unsafe extern "system" fn Unlock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unlock(this).into())
        }
        unsafe extern "system" fn GetCurrentLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbcurrentlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbcurrentlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cbcurrentlength: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentLength(this, ::core::mem::transmute_copy(&cbcurrentlength)).into())
        }
        unsafe extern "system" fn GetMaxLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbmaxlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMaxLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbmaxlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaBuffer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Lock: Lock::<Identity, Impl, OFFSET>,
            Unlock: Unlock::<Identity, Impl, OFFSET>,
            GetCurrentLength: GetCurrentLength::<Identity, Impl, OFFSET>,
            SetCurrentLength: SetCurrentLength::<Identity, Impl, OFFSET>,
            GetMaxLength: GetMaxLength::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngine_Impl: ::windows_core::BaseImpl {
    fn GetError(this: &Self::This) -> ::windows_core::Result<IMFMediaError>;
    fn SetErrorCode(this: &Self::This, error: MF_MEDIA_ENGINE_ERR) -> ::windows_core::Result<()>;
    fn SetSourceElements(this: &Self::This, psrcelements: ::core::option::Option<&IMFMediaEngineSrcElements>) -> ::windows_core::Result<()>;
    fn SetSource(this: &Self::This, purl: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetCurrentSource(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetNetworkState(this: &Self::This) -> u16;
    fn GetPreload(this: &Self::This) -> MF_MEDIA_ENGINE_PRELOAD;
    fn SetPreload(this: &Self::This, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows_core::Result<()>;
    fn GetBuffered(this: &Self::This) -> ::windows_core::Result<IMFMediaTimeRange>;
    fn Load(this: &Self::This) -> ::windows_core::Result<()>;
    fn CanPlayType(this: &Self::This, r#type: &::windows_core::BSTR) -> ::windows_core::Result<MF_MEDIA_ENGINE_CANPLAY>;
    fn GetReadyState(this: &Self::This) -> u16;
    fn IsSeeking(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetCurrentTime(this: &Self::This) -> f64;
    fn SetCurrentTime(this: &Self::This, seektime: f64) -> ::windows_core::Result<()>;
    fn GetStartTime(this: &Self::This) -> f64;
    fn GetDuration(this: &Self::This) -> f64;
    fn IsPaused(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetDefaultPlaybackRate(this: &Self::This) -> f64;
    fn SetDefaultPlaybackRate(this: &Self::This, rate: f64) -> ::windows_core::Result<()>;
    fn GetPlaybackRate(this: &Self::This) -> f64;
    fn SetPlaybackRate(this: &Self::This, rate: f64) -> ::windows_core::Result<()>;
    fn GetPlayed(this: &Self::This) -> ::windows_core::Result<IMFMediaTimeRange>;
    fn GetSeekable(this: &Self::This) -> ::windows_core::Result<IMFMediaTimeRange>;
    fn IsEnded(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetAutoPlay(this: &Self::This) -> super::super::Foundation::BOOL;
    fn SetAutoPlay(this: &Self::This, autoplay: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetLoop(this: &Self::This) -> super::super::Foundation::BOOL;
    fn SetLoop(this: &Self::This, r#loop: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Play(this: &Self::This) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetMuted(this: &Self::This) -> super::super::Foundation::BOOL;
    fn SetMuted(this: &Self::This, muted: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetVolume(this: &Self::This) -> f64;
    fn SetVolume(this: &Self::This, volume: f64) -> ::windows_core::Result<()>;
    fn HasVideo(this: &Self::This) -> super::super::Foundation::BOOL;
    fn HasAudio(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetNativeVideoSize(this: &Self::This, cx: *mut u32, cy: *mut u32) -> ::windows_core::Result<()>;
    fn GetVideoAspectRatio(this: &Self::This, cx: *mut u32, cy: *mut u32) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
    fn TransferVideoFrame(this: &Self::This, pdstsurf: ::core::option::Option<&::windows_core::IUnknown>, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows_core::Result<()>;
    fn OnVideoStreamTick(this: &Self::This) -> ::windows_core::Result<i64>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngine {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngine {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pperror: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetError(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pperror, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: MF_MEDIA_ENGINE_ERR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetErrorCode(this, ::core::mem::transmute_copy(&error)).into())
        }
        unsafe extern "system" fn SetSourceElements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrcelements: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourceElements(this, ::windows_core::from_raw_borrowed(&psrcelements)).into())
        }
        unsafe extern "system" fn SetSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, purl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSource(this, ::core::mem::transmute(&purl)).into())
        }
        unsafe extern "system" fn GetCurrentSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNetworkState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u16 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNetworkState(this))
        }
        unsafe extern "system" fn GetPreload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_MEDIA_ENGINE_PRELOAD {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPreload(this))
        }
        unsafe extern "system" fn SetPreload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, preload: MF_MEDIA_ENGINE_PRELOAD) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPreload(this, ::core::mem::transmute_copy(&preload)).into())
        }
        unsafe extern "system" fn GetBuffered<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbuffered: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBuffered(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbuffered, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Load<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Load(this).into())
        }
        unsafe extern "system" fn CanPlayType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CanPlayType(this, ::core::mem::transmute(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(panswer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReadyState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u16 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReadyState(this))
        }
        unsafe extern "system" fn IsSeeking<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsSeeking(this))
        }
        unsafe extern "system" fn GetCurrentTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentTime(this))
        }
        unsafe extern "system" fn SetCurrentTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seektime: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentTime(this, ::core::mem::transmute_copy(&seektime)).into())
        }
        unsafe extern "system" fn GetStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStartTime(this))
        }
        unsafe extern "system" fn GetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDuration(this))
        }
        unsafe extern "system" fn IsPaused<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPaused(this))
        }
        unsafe extern "system" fn GetDefaultPlaybackRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDefaultPlaybackRate(this))
        }
        unsafe extern "system" fn SetDefaultPlaybackRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rate: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultPlaybackRate(this, ::core::mem::transmute_copy(&rate)).into())
        }
        unsafe extern "system" fn GetPlaybackRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPlaybackRate(this))
        }
        unsafe extern "system" fn SetPlaybackRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rate: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPlaybackRate(this, ::core::mem::transmute_copy(&rate)).into())
        }
        unsafe extern "system" fn GetPlayed<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppplayed: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPlayed(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppplayed, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSeekable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppseekable: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSeekable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppseekable, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsEnded<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsEnded(this))
        }
        unsafe extern "system" fn GetAutoPlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAutoPlay(this))
        }
        unsafe extern "system" fn SetAutoPlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, autoplay: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAutoPlay(this, ::core::mem::transmute_copy(&autoplay)).into())
        }
        unsafe extern "system" fn GetLoop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLoop(this))
        }
        unsafe extern "system" fn SetLoop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#loop: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLoop(this, ::core::mem::transmute_copy(&r#loop)).into())
        }
        unsafe extern "system" fn Play<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Play(this).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        unsafe extern "system" fn GetMuted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMuted(this))
        }
        unsafe extern "system" fn SetMuted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, muted: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMuted(this, ::core::mem::transmute_copy(&muted)).into())
        }
        unsafe extern "system" fn GetVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVolume(this))
        }
        unsafe extern "system" fn SetVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, volume: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVolume(this, ::core::mem::transmute_copy(&volume)).into())
        }
        unsafe extern "system" fn HasVideo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HasVideo(this))
        }
        unsafe extern "system" fn HasAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HasAudio(this))
        }
        unsafe extern "system" fn GetNativeVideoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cx: *mut u32, cy: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNativeVideoSize(this, ::core::mem::transmute_copy(&cx), ::core::mem::transmute_copy(&cy)).into())
        }
        unsafe extern "system" fn GetVideoAspectRatio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cx: *mut u32, cy: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoAspectRatio(this, ::core::mem::transmute_copy(&cx), ::core::mem::transmute_copy(&cy)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        unsafe extern "system" fn TransferVideoFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdstsurf: *mut ::core::ffi::c_void, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TransferVideoFrame(this, ::windows_core::from_raw_borrowed(&pdstsurf), ::core::mem::transmute_copy(&psrc), ::core::mem::transmute_copy(&pdst), ::core::mem::transmute_copy(&pborderclr)).into())
        }
        unsafe extern "system" fn OnVideoStreamTick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppts: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnVideoStreamTick(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppts, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngine_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetError: GetError::<Identity, Impl, OFFSET>,
            SetErrorCode: SetErrorCode::<Identity, Impl, OFFSET>,
            SetSourceElements: SetSourceElements::<Identity, Impl, OFFSET>,
            SetSource: SetSource::<Identity, Impl, OFFSET>,
            GetCurrentSource: GetCurrentSource::<Identity, Impl, OFFSET>,
            GetNetworkState: GetNetworkState::<Identity, Impl, OFFSET>,
            GetPreload: GetPreload::<Identity, Impl, OFFSET>,
            SetPreload: SetPreload::<Identity, Impl, OFFSET>,
            GetBuffered: GetBuffered::<Identity, Impl, OFFSET>,
            Load: Load::<Identity, Impl, OFFSET>,
            CanPlayType: CanPlayType::<Identity, Impl, OFFSET>,
            GetReadyState: GetReadyState::<Identity, Impl, OFFSET>,
            IsSeeking: IsSeeking::<Identity, Impl, OFFSET>,
            GetCurrentTime: GetCurrentTime::<Identity, Impl, OFFSET>,
            SetCurrentTime: SetCurrentTime::<Identity, Impl, OFFSET>,
            GetStartTime: GetStartTime::<Identity, Impl, OFFSET>,
            GetDuration: GetDuration::<Identity, Impl, OFFSET>,
            IsPaused: IsPaused::<Identity, Impl, OFFSET>,
            GetDefaultPlaybackRate: GetDefaultPlaybackRate::<Identity, Impl, OFFSET>,
            SetDefaultPlaybackRate: SetDefaultPlaybackRate::<Identity, Impl, OFFSET>,
            GetPlaybackRate: GetPlaybackRate::<Identity, Impl, OFFSET>,
            SetPlaybackRate: SetPlaybackRate::<Identity, Impl, OFFSET>,
            GetPlayed: GetPlayed::<Identity, Impl, OFFSET>,
            GetSeekable: GetSeekable::<Identity, Impl, OFFSET>,
            IsEnded: IsEnded::<Identity, Impl, OFFSET>,
            GetAutoPlay: GetAutoPlay::<Identity, Impl, OFFSET>,
            SetAutoPlay: SetAutoPlay::<Identity, Impl, OFFSET>,
            GetLoop: GetLoop::<Identity, Impl, OFFSET>,
            SetLoop: SetLoop::<Identity, Impl, OFFSET>,
            Play: Play::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            GetMuted: GetMuted::<Identity, Impl, OFFSET>,
            SetMuted: SetMuted::<Identity, Impl, OFFSET>,
            GetVolume: GetVolume::<Identity, Impl, OFFSET>,
            SetVolume: SetVolume::<Identity, Impl, OFFSET>,
            HasVideo: HasVideo::<Identity, Impl, OFFSET>,
            HasAudio: HasAudio::<Identity, Impl, OFFSET>,
            GetNativeVideoSize: GetNativeVideoSize::<Identity, Impl, OFFSET>,
            GetVideoAspectRatio: GetVideoAspectRatio::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
            TransferVideoFrame: TransferVideoFrame::<Identity, Impl, OFFSET>,
            OnVideoStreamTick: OnVideoStreamTick::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineAudioEndpointId_Impl: ::windows_core::BaseImpl {
    fn SetAudioEndpointId(this: &Self::This, pszendpointid: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetAudioEndpointId(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
impl ::windows_core::Iids for IMFMediaEngineAudioEndpointId {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineAudioEndpointId_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineAudioEndpointId {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAudioEndpointId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineAudioEndpointId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszendpointid: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAudioEndpointId(this, ::core::mem::transmute(&pszendpointid)).into())
        }
        unsafe extern "system" fn GetAudioEndpointId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineAudioEndpointId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszendpointid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAudioEndpointId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszendpointid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineAudioEndpointId_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAudioEndpointId: SetAudioEndpointId::<Identity, Impl, OFFSET>,
            GetAudioEndpointId: GetAudioEndpointId::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstance(this: &Self::This, dwflags: u32, pattr: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<IMFMediaEngine>;
    fn CreateTimeRange(this: &Self::This) -> ::windows_core::Result<IMFMediaTimeRange>;
    fn CreateError(this: &Self::This) -> ::windows_core::Result<IMFMediaError>;
}
impl ::windows_core::Iids for IMFMediaEngineClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pattr: *mut ::core::ffi::c_void, ppplayer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateInstance(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pattr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppplayer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateTimeRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptimerange: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTimeRange(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptimerange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pperror: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateError(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pperror, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineClassFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateInstance: CreateInstance::<Identity, Impl, OFFSET>,
            CreateTimeRange: CreateTimeRange::<Identity, Impl, OFFSET>,
            CreateError: CreateError::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineClassFactory2_Impl: ::windows_core::BaseImpl {
    fn CreateMediaKeys2(this: &Self::This, keysystem: &::windows_core::BSTR, defaultcdmstorepath: &::windows_core::BSTR, inprivatecdmstorepath: &::windows_core::BSTR) -> ::windows_core::Result<IMFMediaKeys>;
}
impl ::windows_core::Iids for IMFMediaEngineClassFactory2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineClassFactory2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateMediaKeys2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: ::std::mem::MaybeUninit<::windows_core::BSTR>, defaultcdmstorepath: ::std::mem::MaybeUninit<::windows_core::BSTR>, inprivatecdmstorepath: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppkeys: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMediaKeys2(this, ::core::mem::transmute(&keysystem), ::core::mem::transmute(&defaultcdmstorepath), ::core::mem::transmute(&inprivatecdmstorepath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkeys, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineClassFactory2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateMediaKeys2: CreateMediaKeys2::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFMediaEngineClassFactory3_Impl: ::windows_core::BaseImpl {
    fn CreateMediaKeySystemAccess(this: &Self::This, keysystem: &::windows_core::BSTR, ppsupportedconfigurationsarray: *const ::core::option::Option<super::super::UI::Shell::PropertiesSystem::IPropertyStore>, usize: u32) -> ::windows_core::Result<IMFMediaKeySystemAccess>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFMediaEngineClassFactory3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineClassFactory3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateMediaKeySystemAccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppsupportedconfigurationsarray: *const *mut ::core::ffi::c_void, usize: u32, ppkeyaccess: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMediaKeySystemAccess(this, ::core::mem::transmute(&keysystem), ::core::mem::transmute_copy(&ppsupportedconfigurationsarray), ::core::mem::transmute_copy(&usize)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkeyaccess, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineClassFactory3_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateMediaKeySystemAccess: CreateMediaKeySystemAccess::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineClassFactory4_Impl: ::windows_core::BaseImpl {
    fn CreateContentDecryptionModuleFactory(this: &Self::This, keysystem: &::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaEngineClassFactory4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineClassFactory4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateContentDecryptionModuleFactory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactory4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: ::windows_core::PCWSTR, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateContentDecryptionModuleFactory(this, ::core::mem::transmute(&keysystem), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        IMFMediaEngineClassFactory4_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateContentDecryptionModuleFactory: CreateContentDecryptionModuleFactory::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngineClassFactoryEx_Impl: ::windows_core::BaseImpl + IMFMediaEngineClassFactory_Impl {
    fn CreateMediaSourceExtension(this: &Self::This, dwflags: u32, pattr: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<IMFMediaSourceExtension>;
    fn CreateMediaKeys(this: &Self::This, keysystem: &::windows_core::BSTR, cdmstorepath: &::windows_core::BSTR) -> ::windows_core::Result<IMFMediaKeys>;
    fn IsTypeSupported(this: &Self::This, r#type: &::windows_core::BSTR, keysystem: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngineClassFactoryEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEngineClassFactory);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactoryEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineClassFactoryEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateMediaSourceExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactoryEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pattr: *mut ::core::ffi::c_void, ppmse: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMediaSourceExtension(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pattr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmse, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateMediaKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactoryEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: ::std::mem::MaybeUninit<::windows_core::BSTR>, cdmstorepath: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppkeys: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMediaKeys(this, ::core::mem::transmute(&keysystem), ::core::mem::transmute(&cdmstorepath)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkeys, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsTypeSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineClassFactoryEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>, keysystem: ::std::mem::MaybeUninit<::windows_core::BSTR>, issupported: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsTypeSupported(this, ::core::mem::transmute(&r#type), ::core::mem::transmute(&keysystem)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(issupported, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineClassFactoryEx_Vtbl {
            base__: <IMFMediaEngineClassFactory as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateMediaSourceExtension: CreateMediaSourceExtension::<Identity, Impl, OFFSET>,
            CreateMediaKeys: CreateMediaKeys::<Identity, Impl, OFFSET>,
            IsTypeSupported: IsTypeSupported::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineEME_Impl: ::windows_core::BaseImpl {
    fn Keys(this: &Self::This) -> ::windows_core::Result<IMFMediaKeys>;
    fn SetMediaKeys(this: &Self::This, keys: ::core::option::Option<&IMFMediaKeys>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaEngineEME {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEME_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineEME {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Keys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEME_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keys: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Keys(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(keys, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMediaKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEME_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keys: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaKeys(this, ::windows_core::from_raw_borrowed(&keys)).into())
        }
        IMFMediaEngineEME_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Keys: Keys::<Identity, Impl, OFFSET>,
            SetMediaKeys: SetMediaKeys::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineEMENotify_Impl: ::windows_core::BaseImpl {
    fn Encrypted(this: &Self::This, pbinitdata: *const u8, cb: u32, bstrinitdatatype: &::windows_core::BSTR);
    fn WaitingForKey(this: &Self::This);
}
impl ::windows_core::Iids for IMFMediaEngineEMENotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEMENotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineEMENotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Encrypted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEMENotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbinitdata: *const u8, cb: u32, bstrinitdatatype: ::std::mem::MaybeUninit<::windows_core::BSTR>) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Encrypted(this, ::core::mem::transmute_copy(&pbinitdata), ::core::mem::transmute_copy(&cb), ::core::mem::transmute(&bstrinitdatatype)))
        }
        unsafe extern "system" fn WaitingForKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEMENotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WaitingForKey(this))
        }
        IMFMediaEngineEMENotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Encrypted: Encrypted::<Identity, Impl, OFFSET>,
            WaitingForKey: WaitingForKey::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaEngineEx_Impl: ::windows_core::BaseImpl + IMFMediaEngine_Impl {
    fn SetSourceFromByteStream(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, purl: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetStatistics(this: &Self::This, statisticid: MF_MEDIA_ENGINE_STATISTIC) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn UpdateVideoStream(this: &Self::This, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows_core::Result<()>;
    fn GetBalance(this: &Self::This) -> f64;
    fn SetBalance(this: &Self::This, balance: f64) -> ::windows_core::Result<()>;
    fn IsPlaybackRateSupported(this: &Self::This, rate: f64) -> super::super::Foundation::BOOL;
    fn FrameStep(this: &Self::This, forward: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetResourceCharacteristics(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPresentationAttribute(this: &Self::This, guidmfattribute: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetNumberOfStreams(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStreamAttribute(this: &Self::This, dwstreamindex: u32, guidmfattribute: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetStreamSelection(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetStreamSelection(this: &Self::This, dwstreamindex: u32, enabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn ApplyStreamSelections(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsProtected(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn InsertVideoEffect(this: &Self::This, peffect: ::core::option::Option<&::windows_core::IUnknown>, foptional: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn InsertAudioEffect(this: &Self::This, peffect: ::core::option::Option<&::windows_core::IUnknown>, foptional: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn RemoveAllEffects(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetTimelineMarkerTimer(this: &Self::This, timetofire: f64) -> ::windows_core::Result<()>;
    fn GetTimelineMarkerTimer(this: &Self::This) -> ::windows_core::Result<f64>;
    fn CancelTimelineMarkerTimer(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsStereo3D(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetStereo3DFramePackingMode(this: &Self::This) -> ::windows_core::Result<MF_MEDIA_ENGINE_S3D_PACKING_MODE>;
    fn SetStereo3DFramePackingMode(this: &Self::This, packmode: MF_MEDIA_ENGINE_S3D_PACKING_MODE) -> ::windows_core::Result<()>;
    fn GetStereo3DRenderMode(this: &Self::This) -> ::windows_core::Result<MF3DVideoOutputType>;
    fn SetStereo3DRenderMode(this: &Self::This, outputtype: MF3DVideoOutputType) -> ::windows_core::Result<()>;
    fn EnableWindowlessSwapchainMode(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetVideoSwapchainHandle(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HANDLE>;
    fn EnableHorizontalMirrorMode(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetAudioStreamCategory(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetAudioStreamCategory(this: &Self::This, category: u32) -> ::windows_core::Result<()>;
    fn GetAudioEndpointRole(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetAudioEndpointRole(this: &Self::This, role: u32) -> ::windows_core::Result<()>;
    fn GetRealTimeMode(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetRealTimeMode(this: &Self::This, fenable: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetCurrentTimeEx(this: &Self::This, seektime: f64, seekmode: MF_MEDIA_ENGINE_SEEK_MODE) -> ::windows_core::Result<()>;
    fn EnableTimeUpdateTimer(this: &Self::This, fenabletimer: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaEngineEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEngine);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSourceFromByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, purl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourceFromByteStream(this, ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute(&purl)).into())
        }
        unsafe extern "system" fn GetStatistics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, statisticid: MF_MEDIA_ENGINE_STATISTIC, pstatistic: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStatistics(this, ::core::mem::transmute_copy(&statisticid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstatistic, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UpdateVideoStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateVideoStream(this, ::core::mem::transmute_copy(&psrc), ::core::mem::transmute_copy(&pdst), ::core::mem::transmute_copy(&pborderclr)).into())
        }
        unsafe extern "system" fn GetBalance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBalance(this))
        }
        unsafe extern "system" fn SetBalance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, balance: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalance(this, ::core::mem::transmute_copy(&balance)).into())
        }
        unsafe extern "system" fn IsPlaybackRateSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rate: f64) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsPlaybackRateSupported(this, ::core::mem::transmute_copy(&rate)))
        }
        unsafe extern "system" fn FrameStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, forward: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FrameStep(this, ::core::mem::transmute_copy(&forward)).into())
        }
        unsafe extern "system" fn GetResourceCharacteristics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcharacteristics: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetResourceCharacteristics(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcharacteristics, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPresentationAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidmfattribute: *const ::windows_core::GUID, pvvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPresentationAttribute(this, ::core::mem::transmute_copy(&guidmfattribute)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOfStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfStreams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, guidmfattribute: *const ::windows_core::GUID, pvvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamAttribute(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&guidmfattribute)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, penabled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamSelection(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(penabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, enabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamSelection(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&enabled)).into())
        }
        unsafe extern "system" fn ApplyStreamSelections<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ApplyStreamSelections(this).into())
        }
        unsafe extern "system" fn IsProtected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprotected: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsProtected(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprotected, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InsertVideoEffect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peffect: *mut ::core::ffi::c_void, foptional: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertVideoEffect(this, ::windows_core::from_raw_borrowed(&peffect), ::core::mem::transmute_copy(&foptional)).into())
        }
        unsafe extern "system" fn InsertAudioEffect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peffect: *mut ::core::ffi::c_void, foptional: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertAudioEffect(this, ::windows_core::from_raw_borrowed(&peffect), ::core::mem::transmute_copy(&foptional)).into())
        }
        unsafe extern "system" fn RemoveAllEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllEffects(this).into())
        }
        unsafe extern "system" fn SetTimelineMarkerTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timetofire: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTimelineMarkerTimer(this, ::core::mem::transmute_copy(&timetofire)).into())
        }
        unsafe extern "system" fn GetTimelineMarkerTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptimetofire: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTimelineMarkerTimer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptimetofire, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CancelTimelineMarkerTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelTimelineMarkerTimer(this).into())
        }
        unsafe extern "system" fn IsStereo3D<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsStereo3D(this))
        }
        unsafe extern "system" fn GetStereo3DFramePackingMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packmode: *mut MF_MEDIA_ENGINE_S3D_PACKING_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStereo3DFramePackingMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(packmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStereo3DFramePackingMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, packmode: MF_MEDIA_ENGINE_S3D_PACKING_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStereo3DFramePackingMode(this, ::core::mem::transmute_copy(&packmode)).into())
        }
        unsafe extern "system" fn GetStereo3DRenderMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputtype: *mut MF3DVideoOutputType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStereo3DRenderMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(outputtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStereo3DRenderMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputtype: MF3DVideoOutputType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStereo3DRenderMode(this, ::core::mem::transmute_copy(&outputtype)).into())
        }
        unsafe extern "system" fn EnableWindowlessSwapchainMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableWindowlessSwapchainMode(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn GetVideoSwapchainHandle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phswapchain: *mut super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoSwapchainHandle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phswapchain, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnableHorizontalMirrorMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableHorizontalMirrorMode(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn GetAudioStreamCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcategory: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAudioStreamCategory(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcategory, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAudioStreamCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, category: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAudioStreamCategory(this, ::core::mem::transmute_copy(&category)).into())
        }
        unsafe extern "system" fn GetAudioEndpointRole<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prole: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAudioEndpointRole(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prole, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAudioEndpointRole<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, role: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAudioEndpointRole(this, ::core::mem::transmute_copy(&role)).into())
        }
        unsafe extern "system" fn GetRealTimeMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenabled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRealTimeMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRealTimeMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRealTimeMode(this, ::core::mem::transmute_copy(&fenable)).into())
        }
        unsafe extern "system" fn SetCurrentTimeEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, seektime: f64, seekmode: MF_MEDIA_ENGINE_SEEK_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentTimeEx(this, ::core::mem::transmute_copy(&seektime), ::core::mem::transmute_copy(&seekmode)).into())
        }
        unsafe extern "system" fn EnableTimeUpdateTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenabletimer: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableTimeUpdateTimer(this, ::core::mem::transmute_copy(&fenabletimer)).into())
        }
        IMFMediaEngineEx_Vtbl {
            base__: <IMFMediaEngine as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetSourceFromByteStream: SetSourceFromByteStream::<Identity, Impl, OFFSET>,
            GetStatistics: GetStatistics::<Identity, Impl, OFFSET>,
            UpdateVideoStream: UpdateVideoStream::<Identity, Impl, OFFSET>,
            GetBalance: GetBalance::<Identity, Impl, OFFSET>,
            SetBalance: SetBalance::<Identity, Impl, OFFSET>,
            IsPlaybackRateSupported: IsPlaybackRateSupported::<Identity, Impl, OFFSET>,
            FrameStep: FrameStep::<Identity, Impl, OFFSET>,
            GetResourceCharacteristics: GetResourceCharacteristics::<Identity, Impl, OFFSET>,
            GetPresentationAttribute: GetPresentationAttribute::<Identity, Impl, OFFSET>,
            GetNumberOfStreams: GetNumberOfStreams::<Identity, Impl, OFFSET>,
            GetStreamAttribute: GetStreamAttribute::<Identity, Impl, OFFSET>,
            GetStreamSelection: GetStreamSelection::<Identity, Impl, OFFSET>,
            SetStreamSelection: SetStreamSelection::<Identity, Impl, OFFSET>,
            ApplyStreamSelections: ApplyStreamSelections::<Identity, Impl, OFFSET>,
            IsProtected: IsProtected::<Identity, Impl, OFFSET>,
            InsertVideoEffect: InsertVideoEffect::<Identity, Impl, OFFSET>,
            InsertAudioEffect: InsertAudioEffect::<Identity, Impl, OFFSET>,
            RemoveAllEffects: RemoveAllEffects::<Identity, Impl, OFFSET>,
            SetTimelineMarkerTimer: SetTimelineMarkerTimer::<Identity, Impl, OFFSET>,
            GetTimelineMarkerTimer: GetTimelineMarkerTimer::<Identity, Impl, OFFSET>,
            CancelTimelineMarkerTimer: CancelTimelineMarkerTimer::<Identity, Impl, OFFSET>,
            IsStereo3D: IsStereo3D::<Identity, Impl, OFFSET>,
            GetStereo3DFramePackingMode: GetStereo3DFramePackingMode::<Identity, Impl, OFFSET>,
            SetStereo3DFramePackingMode: SetStereo3DFramePackingMode::<Identity, Impl, OFFSET>,
            GetStereo3DRenderMode: GetStereo3DRenderMode::<Identity, Impl, OFFSET>,
            SetStereo3DRenderMode: SetStereo3DRenderMode::<Identity, Impl, OFFSET>,
            EnableWindowlessSwapchainMode: EnableWindowlessSwapchainMode::<Identity, Impl, OFFSET>,
            GetVideoSwapchainHandle: GetVideoSwapchainHandle::<Identity, Impl, OFFSET>,
            EnableHorizontalMirrorMode: EnableHorizontalMirrorMode::<Identity, Impl, OFFSET>,
            GetAudioStreamCategory: GetAudioStreamCategory::<Identity, Impl, OFFSET>,
            SetAudioStreamCategory: SetAudioStreamCategory::<Identity, Impl, OFFSET>,
            GetAudioEndpointRole: GetAudioEndpointRole::<Identity, Impl, OFFSET>,
            SetAudioEndpointRole: SetAudioEndpointRole::<Identity, Impl, OFFSET>,
            GetRealTimeMode: GetRealTimeMode::<Identity, Impl, OFFSET>,
            SetRealTimeMode: SetRealTimeMode::<Identity, Impl, OFFSET>,
            SetCurrentTimeEx: SetCurrentTimeEx::<Identity, Impl, OFFSET>,
            EnableTimeUpdateTimer: EnableTimeUpdateTimer::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngineExtension_Impl: ::windows_core::BaseImpl {
    fn CanPlayType(this: &Self::This, audioonly: super::super::Foundation::BOOL, mimetype: &::windows_core::BSTR) -> ::windows_core::Result<MF_MEDIA_ENGINE_CANPLAY>;
    fn BeginCreateObject(this: &Self::This, bstrurl: &::windows_core::BSTR, pbytestream: ::core::option::Option<&IMFByteStream>, r#type: MF_OBJECT_TYPE, ppiunknowncancelcookie: *mut ::core::option::Option<::windows_core::IUnknown>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn CancelObjectCreation(this: &Self::This, piunknowncancelcookie: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndCreateObject(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngineExtension {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineExtension_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineExtension {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CanPlayType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, audioonly: super::super::Foundation::BOOL, mimetype: ::std::mem::MaybeUninit<::windows_core::BSTR>, panswer: *mut MF_MEDIA_ENGINE_CANPLAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CanPlayType(this, ::core::mem::transmute_copy(&audioonly), ::core::mem::transmute(&mimetype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(panswer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbytestream: *mut ::core::ffi::c_void, r#type: MF_OBJECT_TYPE, ppiunknowncancelcookie: *mut *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginCreateObject(this, ::core::mem::transmute(&bstrurl), ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&ppiunknowncancelcookie), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn CancelObjectCreation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piunknowncancelcookie: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelObjectCreation(this, ::windows_core::from_raw_borrowed(&piunknowncancelcookie)).into())
        }
        unsafe extern "system" fn EndCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndCreateObject(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineExtension_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CanPlayType: CanPlayType::<Identity, Impl, OFFSET>,
            BeginCreateObject: BeginCreateObject::<Identity, Impl, OFFSET>,
            CancelObjectCreation: CancelObjectCreation::<Identity, Impl, OFFSET>,
            EndCreateObject: EndCreateObject::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineNeedKeyNotify_Impl: ::windows_core::BaseImpl {
    fn NeedKey(this: &Self::This, initdata: *const u8, cb: u32);
}
impl ::windows_core::Iids for IMFMediaEngineNeedKeyNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineNeedKeyNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineNeedKeyNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NeedKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineNeedKeyNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, initdata: *const u8, cb: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NeedKey(this, ::core::mem::transmute_copy(&initdata), ::core::mem::transmute_copy(&cb)))
        }
        IMFMediaEngineNeedKeyNotify_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, NeedKey: NeedKey::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFMediaEngineNotify_Impl: ::windows_core::BaseImpl {
    fn EventNotify(this: &Self::This, event: u32, param1: usize, param2: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaEngineNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EventNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, event: u32, param1: usize, param2: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EventNotify(this, ::core::mem::transmute_copy(&event), ::core::mem::transmute_copy(&param1), ::core::mem::transmute_copy(&param2)).into())
        }
        IMFMediaEngineNotify_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, EventNotify: EventNotify::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngineOPMInfo_Impl: ::windows_core::BaseImpl {
    fn GetOPMInfo(this: &Self::This, pstatus: *mut MF_MEDIA_ENGINE_OPM_STATUS, pconstricted: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngineOPMInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineOPMInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineOPMInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOPMInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineOPMInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatus: *mut MF_MEDIA_ENGINE_OPM_STATUS, pconstricted: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOPMInfo(this, ::core::mem::transmute_copy(&pstatus), ::core::mem::transmute_copy(&pconstricted)).into())
        }
        IMFMediaEngineOPMInfo_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetOPMInfo: GetOPMInfo::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngineProtectedContent_Impl: ::windows_core::BaseImpl {
    fn ShareResources(this: &Self::This, punkdevicecontext: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetRequiredProtections(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOPMWindow(this: &Self::This, hwnd: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn TransferVideoFrame(this: &Self::This, pdstsurf: ::core::option::Option<&::windows_core::IUnknown>, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB) -> ::windows_core::Result<u32>;
    fn SetContentProtectionManager(this: &Self::This, pcpm: ::core::option::Option<&IMFContentProtectionManager>) -> ::windows_core::Result<()>;
    fn SetApplicationCertificate(this: &Self::This, pbblob: *const u8, cbblob: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngineProtectedContent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineProtectedContent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShareResources<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkdevicecontext: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShareResources(this, ::windows_core::from_raw_borrowed(&punkdevicecontext)).into())
        }
        unsafe extern "system" fn GetRequiredProtections<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pframeprotectionflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequiredProtections(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pframeprotectionflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOPMWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOPMWindow(this, ::core::mem::transmute_copy(&hwnd)).into())
        }
        unsafe extern "system" fn TransferVideoFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdstsurf: *mut ::core::ffi::c_void, psrc: *const MFVideoNormalizedRect, pdst: *const super::super::Foundation::RECT, pborderclr: *const MFARGB, pframeprotectionflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TransferVideoFrame(this, ::windows_core::from_raw_borrowed(&pdstsurf), ::core::mem::transmute_copy(&psrc), ::core::mem::transmute_copy(&pdst), ::core::mem::transmute_copy(&pborderclr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pframeprotectionflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContentProtectionManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcpm: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContentProtectionManager(this, ::windows_core::from_raw_borrowed(&pcpm)).into())
        }
        unsafe extern "system" fn SetApplicationCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineProtectedContent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbblob: *const u8, cbblob: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetApplicationCertificate(this, ::core::mem::transmute_copy(&pbblob), ::core::mem::transmute_copy(&cbblob)).into())
        }
        IMFMediaEngineProtectedContent_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShareResources: ShareResources::<Identity, Impl, OFFSET>,
            GetRequiredProtections: GetRequiredProtections::<Identity, Impl, OFFSET>,
            SetOPMWindow: SetOPMWindow::<Identity, Impl, OFFSET>,
            TransferVideoFrame: TransferVideoFrame::<Identity, Impl, OFFSET>,
            SetContentProtectionManager: SetContentProtectionManager::<Identity, Impl, OFFSET>,
            SetApplicationCertificate: SetApplicationCertificate::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineSrcElements_Impl: ::windows_core::BaseImpl {
    fn GetLength(this: &Self::This) -> u32;
    fn GetURL(this: &Self::This, index: u32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetType(this: &Self::This, index: u32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetMedia(this: &Self::This, index: u32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn AddElement(this: &Self::This, purl: &::windows_core::BSTR, ptype: &::windows_core::BSTR, pmedia: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RemoveAllElements(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaEngineSrcElements {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineSrcElements {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLength(this))
        }
        unsafe extern "system" fn GetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, purl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetURL(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(purl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, ptype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetType(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMedia<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, pmedia: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMedia(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmedia, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddElement<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, purl: ::std::mem::MaybeUninit<::windows_core::BSTR>, ptype: ::std::mem::MaybeUninit<::windows_core::BSTR>, pmedia: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddElement(this, ::core::mem::transmute(&purl), ::core::mem::transmute(&ptype), ::core::mem::transmute(&pmedia)).into())
        }
        unsafe extern "system" fn RemoveAllElements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElements_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllElements(this).into())
        }
        IMFMediaEngineSrcElements_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetURL: GetURL::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetMedia: GetMedia::<Identity, Impl, OFFSET>,
            AddElement: AddElement::<Identity, Impl, OFFSET>,
            RemoveAllElements: RemoveAllElements::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineSrcElementsEx_Impl: ::windows_core::BaseImpl + IMFMediaEngineSrcElements_Impl {
    fn AddElementEx(this: &Self::This, purl: &::windows_core::BSTR, ptype: &::windows_core::BSTR, pmedia: &::windows_core::BSTR, keysystem: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetKeySystem(this: &Self::This, index: u32) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IMFMediaEngineSrcElementsEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEngineSrcElements);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElementsEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineSrcElementsEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddElementEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElementsEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, purl: ::std::mem::MaybeUninit<::windows_core::BSTR>, ptype: ::std::mem::MaybeUninit<::windows_core::BSTR>, pmedia: ::std::mem::MaybeUninit<::windows_core::BSTR>, keysystem: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddElementEx(this, ::core::mem::transmute(&purl), ::core::mem::transmute(&ptype), ::core::mem::transmute(&pmedia), ::core::mem::transmute(&keysystem)).into())
        }
        unsafe extern "system" fn GetKeySystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSrcElementsEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, ptype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeySystem(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEngineSrcElementsEx_Vtbl {
            base__: <IMFMediaEngineSrcElements as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddElementEx: AddElementEx::<Identity, Impl, OFFSET>,
            GetKeySystem: GetKeySystem::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngineSupportsSourceTransfer_Impl: ::windows_core::BaseImpl {
    fn ShouldTransferSource(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn DetachMediaSource(this: &Self::This, ppbytestream: *mut ::core::option::Option<IMFByteStream>, ppmediasource: *mut ::core::option::Option<IMFMediaSource>, ppmse: *mut ::core::option::Option<IMFMediaSourceExtension>) -> ::windows_core::Result<()>;
    fn AttachMediaSource(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, pmediasource: ::core::option::Option<&IMFMediaSource>, pmse: ::core::option::Option<&IMFMediaSourceExtension>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngineSupportsSourceTransfer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSupportsSourceTransfer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineSupportsSourceTransfer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShouldTransferSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSupportsSourceTransfer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfshouldtransfer: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ShouldTransferSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfshouldtransfer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DetachMediaSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSupportsSourceTransfer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbytestream: *mut *mut ::core::ffi::c_void, ppmediasource: *mut *mut ::core::ffi::c_void, ppmse: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DetachMediaSource(this, ::core::mem::transmute_copy(&ppbytestream), ::core::mem::transmute_copy(&ppmediasource), ::core::mem::transmute_copy(&ppmse)).into())
        }
        unsafe extern "system" fn AttachMediaSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineSupportsSourceTransfer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, pmediasource: *mut ::core::ffi::c_void, pmse: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AttachMediaSource(this, ::windows_core::from_raw_borrowed(&pbytestream), ::windows_core::from_raw_borrowed(&pmediasource), ::windows_core::from_raw_borrowed(&pmse)).into())
        }
        IMFMediaEngineSupportsSourceTransfer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShouldTransferSource: ShouldTransferSource::<Identity, Impl, OFFSET>,
            DetachMediaSource: DetachMediaSource::<Identity, Impl, OFFSET>,
            AttachMediaSource: AttachMediaSource::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaEngineTransferSource_Impl: ::windows_core::BaseImpl {
    fn TransferSourceToMediaEngine(this: &Self::This, destination: ::core::option::Option<&IMFMediaEngine>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaEngineTransferSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineTransferSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineTransferSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TransferSourceToMediaEngine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineTransferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, destination: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TransferSourceToMediaEngine(this, ::windows_core::from_raw_borrowed(&destination)).into())
        }
        IMFMediaEngineTransferSource_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TransferSourceToMediaEngine: TransferSourceToMediaEngine::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaEngineWebSupport_Impl: ::windows_core::BaseImpl {
    fn ShouldDelayTheLoadEvent(this: &Self::This) -> super::super::Foundation::BOOL;
    fn ConnectWebAudio(this: &Self::This, dwsamplerate: u32) -> ::windows_core::Result<IAudioSourceProvider>;
    fn DisconnectWebAudio(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaEngineWebSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineWebSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEngineWebSupport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ShouldDelayTheLoadEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineWebSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShouldDelayTheLoadEvent(this))
        }
        unsafe extern "system" fn ConnectWebAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineWebSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsamplerate: u32, ppsourceprovider: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConnectWebAudio(this, ::core::mem::transmute_copy(&dwsamplerate)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsourceprovider, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisconnectWebAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEngineWebSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectWebAudio(this).into())
        }
        IMFMediaEngineWebSupport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ShouldDelayTheLoadEvent: ShouldDelayTheLoadEvent::<Identity, Impl, OFFSET>,
            ConnectWebAudio: ConnectWebAudio::<Identity, Impl, OFFSET>,
            DisconnectWebAudio: DisconnectWebAudio::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaError_Impl: ::windows_core::BaseImpl {
    fn GetErrorCode(this: &Self::This) -> u16;
    fn GetExtendedErrorCode(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetErrorCode(this: &Self::This, error: MF_MEDIA_ENGINE_ERR) -> ::windows_core::Result<()>;
    fn SetExtendedErrorCode(this: &Self::This, error: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaError {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaError_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaError {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaError_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u16 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetErrorCode(this))
        }
        unsafe extern "system" fn GetExtendedErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaError_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtendedErrorCode(this).into())
        }
        unsafe extern "system" fn SetErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaError_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: MF_MEDIA_ENGINE_ERR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetErrorCode(this, ::core::mem::transmute_copy(&error)).into())
        }
        unsafe extern "system" fn SetExtendedErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaError_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExtendedErrorCode(this, ::core::mem::transmute_copy(&error)).into())
        }
        IMFMediaError_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetErrorCode: GetErrorCode::<Identity, Impl, OFFSET>,
            GetExtendedErrorCode: GetExtendedErrorCode::<Identity, Impl, OFFSET>,
            SetErrorCode: SetErrorCode::<Identity, Impl, OFFSET>,
            SetExtendedErrorCode: SetExtendedErrorCode::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaEvent_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetType(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExtendedType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetStatus(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
    fn GetValue(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmet: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmet, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtendedType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidextendedtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExtendedType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidextendedtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrstatus: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phrstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaEvent_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetExtendedType: GetExtendedType::<Identity, Impl, OFFSET>,
            GetStatus: GetStatus::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaEventGenerator_Impl: ::windows_core::BaseImpl {
    fn GetEvent(this: &Self::This, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS) -> ::windows_core::Result<IMFMediaEvent>;
    fn BeginGetEvent(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndGetEvent(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<IMFMediaEvent>;
    fn QueueEvent(this: &Self::This, met: u32, guidextendedtype: *const ::windows_core::GUID, hrstatus: ::windows_core::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaEventGenerator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventGenerator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEventGenerator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventGenerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: MEDIA_EVENT_GENERATOR_GET_EVENT_FLAGS, ppevent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEvent(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginGetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventGenerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginGetEvent(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndGetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventGenerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, ppevent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndGetEvent(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueueEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventGenerator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, met: u32, guidextendedtype: *const ::windows_core::GUID, hrstatus: ::windows_core::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueueEvent(this, ::core::mem::transmute_copy(&met), ::core::mem::transmute_copy(&guidextendedtype), ::core::mem::transmute_copy(&hrstatus), ::core::mem::transmute_copy(&pvvalue)).into())
        }
        IMFMediaEventGenerator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEvent: GetEvent::<Identity, Impl, OFFSET>,
            BeginGetEvent: BeginGetEvent::<Identity, Impl, OFFSET>,
            EndGetEvent: EndGetEvent::<Identity, Impl, OFFSET>,
            QueueEvent: QueueEvent::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaEventQueue_Impl: ::windows_core::BaseImpl {
    fn GetEvent(this: &Self::This, dwflags: u32) -> ::windows_core::Result<IMFMediaEvent>;
    fn BeginGetEvent(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndGetEvent(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<IMFMediaEvent>;
    fn QueueEvent(this: &Self::This, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
    fn QueueEventParamVar(this: &Self::This, met: u32, guidextendedtype: *const ::windows_core::GUID, hrstatus: ::windows_core::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn QueueEventParamUnk(this: &Self::This, met: u32, guidextendedtype: *const ::windows_core::GUID, hrstatus: ::windows_core::HRESULT, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaEventQueue {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaEventQueue {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, ppevent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEvent(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginGetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginGetEvent(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndGetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, ppevent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndGetEvent(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn QueueEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueueEvent(this, ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        unsafe extern "system" fn QueueEventParamVar<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, met: u32, guidextendedtype: *const ::windows_core::GUID, hrstatus: ::windows_core::HRESULT, pvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueueEventParamVar(this, ::core::mem::transmute_copy(&met), ::core::mem::transmute_copy(&guidextendedtype), ::core::mem::transmute_copy(&hrstatus), ::core::mem::transmute_copy(&pvvalue)).into())
        }
        unsafe extern "system" fn QueueEventParamUnk<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, met: u32, guidextendedtype: *const ::windows_core::GUID, hrstatus: ::windows_core::HRESULT, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueueEventParamUnk(this, ::core::mem::transmute_copy(&met), ::core::mem::transmute_copy(&guidextendedtype), ::core::mem::transmute_copy(&hrstatus), ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaEventQueue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFMediaEventQueue_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEvent: GetEvent::<Identity, Impl, OFFSET>,
            BeginGetEvent: BeginGetEvent::<Identity, Impl, OFFSET>,
            EndGetEvent: EndGetEvent::<Identity, Impl, OFFSET>,
            QueueEvent: QueueEvent::<Identity, Impl, OFFSET>,
            QueueEventParamVar: QueueEventParamVar::<Identity, Impl, OFFSET>,
            QueueEventParamUnk: QueueEventParamUnk::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaKeySession_Impl: ::windows_core::BaseImpl {
    fn GetError(this: &Self::This, code: *mut u16, systemcode: *mut u32) -> ::windows_core::Result<()>;
    fn KeySystem(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SessionId(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Update(this: &Self::This, key: *const u8, cb: u32) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaKeySession {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeySession {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: *mut u16, systemcode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetError(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&systemcode)).into())
        }
        unsafe extern "system" fn KeySystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(keysystem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SessionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sessionid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SessionId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sessionid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Update<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, key: *const u8, cb: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Update(this, ::core::mem::transmute_copy(&key), ::core::mem::transmute_copy(&cb)).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IMFMediaKeySession_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetError: GetError::<Identity, Impl, OFFSET>,
            KeySystem: KeySystem::<Identity, Impl, OFFSET>,
            SessionId: SessionId::<Identity, Impl, OFFSET>,
            Update: Update::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaKeySession2_Impl: ::windows_core::BaseImpl + IMFMediaKeySession_Impl {
    fn get_KeyStatuses(this: &Self::This, pkeystatusesarray: *mut *mut MFMediaKeyStatus, pusize: *mut u32) -> ::windows_core::Result<()>;
    fn Load(this: &Self::This, bstrsessionid: &::windows_core::BSTR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GenerateRequest(this: &Self::This, initdatatype: &::windows_core::BSTR, pbinitdata: *const u8, cb: u32) -> ::windows_core::Result<()>;
    fn Expiration(this: &Self::This) -> ::windows_core::Result<f64>;
    fn Remove(this: &Self::This) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaKeySession2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaKeySession);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeySession2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_KeyStatuses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkeystatusesarray: *mut *mut MFMediaKeyStatus, pusize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::get_KeyStatuses(this, ::core::mem::transmute_copy(&pkeystatusesarray), ::core::mem::transmute_copy(&pusize)).into())
        }
        unsafe extern "system" fn Load<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrsessionid: ::std::mem::MaybeUninit<::windows_core::BSTR>, pfloaded: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Load(this, ::core::mem::transmute(&bstrsessionid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfloaded, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GenerateRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, initdatatype: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbinitdata: *const u8, cb: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GenerateRequest(this, ::core::mem::transmute(&initdatatype), ::core::mem::transmute_copy(&pbinitdata), ::core::mem::transmute_copy(&cb)).into())
        }
        unsafe extern "system" fn Expiration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dblexpiration: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Expiration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dblexpiration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySession2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFMediaKeySession2_Vtbl {
            base__: <IMFMediaKeySession as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_KeyStatuses: get_KeyStatuses::<Identity, Impl, OFFSET>,
            Load: Load::<Identity, Impl, OFFSET>,
            GenerateRequest: GenerateRequest::<Identity, Impl, OFFSET>,
            Expiration: Expiration::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaKeySessionNotify_Impl: ::windows_core::BaseImpl {
    fn KeyMessage(this: &Self::This, destinationurl: &::windows_core::BSTR, message: *const u8, cb: u32);
    fn KeyAdded(this: &Self::This);
    fn KeyError(this: &Self::This, code: u16, systemcode: u32);
}
impl ::windows_core::Iids for IMFMediaKeySessionNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeySessionNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn KeyMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, destinationurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, message: *const u8, cb: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyMessage(this, ::core::mem::transmute(&destinationurl), ::core::mem::transmute_copy(&message), ::core::mem::transmute_copy(&cb)))
        }
        unsafe extern "system" fn KeyAdded<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyAdded(this))
        }
        unsafe extern "system" fn KeyError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, code: u16, systemcode: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyError(this, ::core::mem::transmute_copy(&code), ::core::mem::transmute_copy(&systemcode)))
        }
        IMFMediaKeySessionNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            KeyMessage: KeyMessage::<Identity, Impl, OFFSET>,
            KeyAdded: KeyAdded::<Identity, Impl, OFFSET>,
            KeyError: KeyError::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaKeySessionNotify2_Impl: ::windows_core::BaseImpl + IMFMediaKeySessionNotify_Impl {
    fn KeyMessage2(this: &Self::This, emessagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, destinationurl: &::windows_core::BSTR, pbmessage: *const u8, cbmessage: u32);
    fn KeyStatusChange(this: &Self::This);
}
impl ::windows_core::Iids for IMFMediaKeySessionNotify2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaKeySessionNotify);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeySessionNotify2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn KeyMessage2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emessagetype: MF_MEDIAKEYSESSION_MESSAGETYPE, destinationurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbmessage: *const u8, cbmessage: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyMessage2(this, ::core::mem::transmute_copy(&emessagetype), ::core::mem::transmute(&destinationurl), ::core::mem::transmute_copy(&pbmessage), ::core::mem::transmute_copy(&cbmessage)))
        }
        unsafe extern "system" fn KeyStatusChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySessionNotify2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyStatusChange(this))
        }
        IMFMediaKeySessionNotify2_Vtbl {
            base__: <IMFMediaKeySessionNotify as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            KeyMessage2: KeyMessage2::<Identity, Impl, OFFSET>,
            KeyStatusChange: KeyStatusChange::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFMediaKeySystemAccess_Impl: ::windows_core::BaseImpl {
    fn CreateMediaKeys(this: &Self::This, pcdmcustomconfig: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>) -> ::windows_core::Result<IMFMediaKeys2>;
    fn SupportedConfiguration(this: &Self::This) -> ::windows_core::Result<super::super::UI::Shell::PropertiesSystem::IPropertyStore>;
    fn KeySystem(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFMediaKeySystemAccess {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySystemAccess_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeySystemAccess {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateMediaKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySystemAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcdmcustomconfig: *mut ::core::ffi::c_void, ppkeys: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMediaKeys(this, ::windows_core::from_raw_borrowed(&pcdmcustomconfig)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkeys, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SupportedConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySystemAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsupportedconfiguration: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SupportedConfiguration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsupportedconfiguration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeySystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeySystemAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkeysystem: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pkeysystem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaKeySystemAccess_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateMediaKeys: CreateMediaKeys::<Identity, Impl, OFFSET>,
            SupportedConfiguration: SupportedConfiguration::<Identity, Impl, OFFSET>,
            KeySystem: KeySystem::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaKeys_Impl: ::windows_core::BaseImpl {
    fn CreateSession(this: &Self::This, mimetype: &::windows_core::BSTR, initdata: *const u8, cb: u32, customdata: *const u8, cbcustomdata: u32, notify: ::core::option::Option<&IMFMediaKeySessionNotify>) -> ::windows_core::Result<IMFMediaKeySession>;
    fn KeySystem(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetSuspendNotify(this: &Self::This) -> ::windows_core::Result<IMFCdmSuspendNotify>;
}
impl ::windows_core::Iids for IMFMediaKeys {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeys {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mimetype: ::std::mem::MaybeUninit<::windows_core::BSTR>, initdata: *const u8, cb: u32, customdata: *const u8, cbcustomdata: u32, notify: *mut ::core::ffi::c_void, ppsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSession(this, ::core::mem::transmute(&mimetype), ::core::mem::transmute_copy(&initdata), ::core::mem::transmute_copy(&cb), ::core::mem::transmute_copy(&customdata), ::core::mem::transmute_copy(&cbcustomdata), ::windows_core::from_raw_borrowed(&notify)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsession, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeySystem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keysystem: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySystem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(keysystem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        unsafe extern "system" fn GetSuspendNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, notify: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSuspendNotify(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(notify, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaKeys_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateSession: CreateSession::<Identity, Impl, OFFSET>,
            KeySystem: KeySystem::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
            GetSuspendNotify: GetSuspendNotify::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaKeys2_Impl: ::windows_core::BaseImpl + IMFMediaKeys_Impl {
    fn CreateSession2(this: &Self::This, esessiontype: MF_MEDIAKEYSESSION_TYPE, pmfmediakeysessionnotify2: ::core::option::Option<&IMFMediaKeySessionNotify2>) -> ::windows_core::Result<IMFMediaKeySession2>;
    fn SetServerCertificate(this: &Self::This, pbservercertificate: *const u8, cb: u32) -> ::windows_core::Result<()>;
    fn GetDOMException(this: &Self::This, systemcode: ::windows_core::HRESULT) -> ::windows_core::Result<::windows_core::HRESULT>;
}
impl ::windows_core::Iids for IMFMediaKeys2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaKeys);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaKeys2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateSession2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, esessiontype: MF_MEDIAKEYSESSION_TYPE, pmfmediakeysessionnotify2: *mut ::core::ffi::c_void, ppsession: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSession2(this, ::core::mem::transmute_copy(&esessiontype), ::windows_core::from_raw_borrowed(&pmfmediakeysessionnotify2)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsession, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetServerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbservercertificate: *const u8, cb: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetServerCertificate(this, ::core::mem::transmute_copy(&pbservercertificate), ::core::mem::transmute_copy(&cb)).into())
        }
        unsafe extern "system" fn GetDOMException<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaKeys2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, systemcode: ::windows_core::HRESULT, code: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDOMException(this, ::core::mem::transmute_copy(&systemcode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(code, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaKeys2_Vtbl {
            base__: <IMFMediaKeys as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateSession2: CreateSession2::<Identity, Impl, OFFSET>,
            SetServerCertificate: SetServerCertificate::<Identity, Impl, OFFSET>,
            GetDOMException: GetDOMException::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaSession_Impl: ::windows_core::BaseImpl + IMFMediaEventGenerator_Impl {
    fn SetTopology(this: &Self::This, dwsettopologyflags: u32, ptopology: ::core::option::Option<&IMFTopology>) -> ::windows_core::Result<()>;
    fn ClearTopologies(this: &Self::This) -> ::windows_core::Result<()>;
    fn Start(this: &Self::This, pguidtimeformat: *const ::windows_core::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetClock(this: &Self::This) -> ::windows_core::Result<IMFClock>;
    fn GetSessionCapabilities(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFullTopology(this: &Self::This, dwgetfulltopologyflags: u32, topoid: u64) -> ::windows_core::Result<IMFTopology>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaSession {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEventGenerator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSession {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsettopologyflags: u32, ptopology: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTopology(this, ::core::mem::transmute_copy(&dwsettopologyflags), ::windows_core::from_raw_borrowed(&ptopology)).into())
        }
        unsafe extern "system" fn ClearTopologies<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearTopologies(this).into())
        }
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidtimeformat: *const ::windows_core::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this, ::core::mem::transmute_copy(&pguidtimeformat), ::core::mem::transmute_copy(&pvarstartposition)).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        unsafe extern "system" fn GetClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppclock: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetClock(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppclock, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSessionCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcaps: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSessionCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcaps, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFullTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSession_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwgetfulltopologyflags: u32, topoid: u64, ppfulltopology: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFullTopology(this, ::core::mem::transmute_copy(&dwgetfulltopologyflags), ::core::mem::transmute_copy(&topoid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppfulltopology, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaSession_Vtbl {
            base__: <IMFMediaEventGenerator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetTopology: SetTopology::<Identity, Impl, OFFSET>,
            ClearTopologies: ClearTopologies::<Identity, Impl, OFFSET>,
            Start: Start::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
            GetClock: GetClock::<Identity, Impl, OFFSET>,
            GetSessionCapabilities: GetSessionCapabilities::<Identity, Impl, OFFSET>,
            GetFullTopology: GetFullTopology::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaSharingEngine_Impl: ::windows_core::BaseImpl + IMFMediaEngine_Impl {
    fn GetDevice(this: &Self::This, pdevice: *mut DEVICE_INFO) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaSharingEngine {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEngine);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSharingEngine_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSharingEngine {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSharingEngine_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdevice: *mut DEVICE_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDevice(this, ::core::mem::transmute_copy(&pdevice)).into())
        }
        IMFMediaSharingEngine_Vtbl { base__: <IMFMediaEngine as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetDevice: GetDevice::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFMediaSharingEngineClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstance(this: &Self::This, dwflags: u32, pattr: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<IMFMediaSharingEngine>;
}
impl ::windows_core::Iids for IMFMediaSharingEngineClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSharingEngineClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSharingEngineClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSharingEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pattr: *mut ::core::ffi::c_void, ppengine: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateInstance(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pattr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppengine, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaSharingEngineClassFactory_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateInstance: CreateInstance::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFMediaSink_Impl: ::windows_core::BaseImpl {
    fn GetCharacteristics(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddStreamSink(this: &Self::This, dwstreamsinkidentifier: u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<IMFStreamSink>;
    fn RemoveStreamSink(this: &Self::This, dwstreamsinkidentifier: u32) -> ::windows_core::Result<()>;
    fn GetStreamSinkCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStreamSinkByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFStreamSink>;
    fn GetStreamSinkById(this: &Self::This, dwstreamsinkidentifier: u32) -> ::windows_core::Result<IMFStreamSink>;
    fn SetPresentationClock(this: &Self::This, ppresentationclock: ::core::option::Option<&IMFPresentationClock>) -> ::windows_core::Result<()>;
    fn GetPresentationClock(this: &Self::This) -> ::windows_core::Result<IMFPresentationClock>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCharacteristics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcharacteristics: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCharacteristics(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcharacteristics, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddStreamSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamsinkidentifier: u32, pmediatype: *mut ::core::ffi::c_void, ppstreamsink: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddStreamSink(this, ::core::mem::transmute_copy(&dwstreamsinkidentifier), ::windows_core::from_raw_borrowed(&pmediatype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreamsink, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveStreamSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamsinkidentifier: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveStreamSink(this, ::core::mem::transmute_copy(&dwstreamsinkidentifier)).into())
        }
        unsafe extern "system" fn GetStreamSinkCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcstreamsinkcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamSinkCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcstreamsinkcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamSinkByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppstreamsink: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamSinkByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreamsink, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamSinkById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamsinkidentifier: u32, ppstreamsink: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamSinkById(this, ::core::mem::transmute_copy(&dwstreamsinkidentifier)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreamsink, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPresentationClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationclock: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPresentationClock(this, ::windows_core::from_raw_borrowed(&ppresentationclock)).into())
        }
        unsafe extern "system" fn GetPresentationClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppresentationclock: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPresentationClock(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppresentationclock, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFMediaSink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCharacteristics: GetCharacteristics::<Identity, Impl, OFFSET>,
            AddStreamSink: AddStreamSink::<Identity, Impl, OFFSET>,
            RemoveStreamSink: RemoveStreamSink::<Identity, Impl, OFFSET>,
            GetStreamSinkCount: GetStreamSinkCount::<Identity, Impl, OFFSET>,
            GetStreamSinkByIndex: GetStreamSinkByIndex::<Identity, Impl, OFFSET>,
            GetStreamSinkById: GetStreamSinkById::<Identity, Impl, OFFSET>,
            SetPresentationClock: SetPresentationClock::<Identity, Impl, OFFSET>,
            GetPresentationClock: GetPresentationClock::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaSinkPreroll_Impl: ::windows_core::BaseImpl {
    fn NotifyPreroll(this: &Self::This, hnsupcomingstarttime: i64) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaSinkPreroll {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSinkPreroll_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSinkPreroll {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyPreroll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSinkPreroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnsupcomingstarttime: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyPreroll(this, ::core::mem::transmute_copy(&hnsupcomingstarttime)).into())
        }
        IMFMediaSinkPreroll_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, NotifyPreroll: NotifyPreroll::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaSource_Impl: ::windows_core::BaseImpl + IMFMediaEventGenerator_Impl {
    fn GetCharacteristics(this: &Self::This) -> ::windows_core::Result<u32>;
    fn CreatePresentationDescriptor(this: &Self::This) -> ::windows_core::Result<IMFPresentationDescriptor>;
    fn Start(this: &Self::This, ppresentationdescriptor: ::core::option::Option<&IMFPresentationDescriptor>, pguidtimeformat: *const ::windows_core::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEventGenerator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCharacteristics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcharacteristics: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCharacteristics(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcharacteristics, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreatePresentationDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppresentationdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreatePresentationDescriptor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppresentationdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationdescriptor: *mut ::core::ffi::c_void, pguidtimeformat: *const ::windows_core::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this, ::windows_core::from_raw_borrowed(&ppresentationdescriptor), ::core::mem::transmute_copy(&pguidtimeformat), ::core::mem::transmute_copy(&pvarstartposition)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFMediaSource_Vtbl {
            base__: <IMFMediaEventGenerator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCharacteristics: GetCharacteristics::<Identity, Impl, OFFSET>,
            CreatePresentationDescriptor: CreatePresentationDescriptor::<Identity, Impl, OFFSET>,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaSource2_Impl: ::windows_core::BaseImpl + IMFMediaSourceEx_Impl {
    fn SetMediaType(this: &Self::This, dwstreamid: u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaSource2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaSourceEx);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSource2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSource2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaType(this, ::core::mem::transmute_copy(&dwstreamid), ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        IMFMediaSource2_Vtbl { base__: <IMFMediaSourceEx as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetMediaType: SetMediaType::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaSourceEx_Impl: ::windows_core::BaseImpl + IMFMediaSource_Impl {
    fn GetSourceAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn GetStreamAttributes(this: &Self::This, dwstreamidentifier: u32) -> ::windows_core::Result<IMFAttributes>;
    fn SetD3DManager(this: &Self::This, pmanager: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaSourceEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaSource);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSourceEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSourceAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSourceAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamidentifier: u32, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamAttributes(this, ::core::mem::transmute_copy(&dwstreamidentifier)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetD3DManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmanager: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetD3DManager(this, ::windows_core::from_raw_borrowed(&pmanager)).into())
        }
        IMFMediaSourceEx_Vtbl {
            base__: <IMFMediaSource as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSourceAttributes: GetSourceAttributes::<Identity, Impl, OFFSET>,
            GetStreamAttributes: GetStreamAttributes::<Identity, Impl, OFFSET>,
            SetD3DManager: SetD3DManager::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaSourceExtension_Impl: ::windows_core::BaseImpl {
    fn GetSourceBuffers(this: &Self::This) -> ::core::option::Option<IMFSourceBufferList>;
    fn GetActiveSourceBuffers(this: &Self::This) -> ::core::option::Option<IMFSourceBufferList>;
    fn GetReadyState(this: &Self::This) -> MF_MSE_READY;
    fn GetDuration(this: &Self::This) -> f64;
    fn SetDuration(this: &Self::This, duration: f64) -> ::windows_core::Result<()>;
    fn AddSourceBuffer(this: &Self::This, r#type: &::windows_core::BSTR, pnotify: ::core::option::Option<&IMFSourceBufferNotify>) -> ::windows_core::Result<IMFSourceBuffer>;
    fn RemoveSourceBuffer(this: &Self::This, psourcebuffer: ::core::option::Option<&IMFSourceBuffer>) -> ::windows_core::Result<()>;
    fn SetEndOfStream(this: &Self::This, error: MF_MSE_ERROR) -> ::windows_core::Result<()>;
    fn IsTypeSupported(this: &Self::This, r#type: &::windows_core::BSTR) -> super::super::Foundation::BOOL;
    fn GetSourceBuffer(this: &Self::This, dwstreamindex: u32) -> ::core::option::Option<IMFSourceBuffer>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaSourceExtension {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSourceExtension {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSourceBuffers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::core::option::Option<IMFSourceBufferList> {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceBuffers(this))
        }
        unsafe extern "system" fn GetActiveSourceBuffers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::core::option::Option<IMFSourceBufferList> {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetActiveSourceBuffers(this))
        }
        unsafe extern "system" fn GetReadyState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_MSE_READY {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReadyState(this))
        }
        unsafe extern "system" fn GetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDuration(this))
        }
        unsafe extern "system" fn SetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, duration: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDuration(this, ::core::mem::transmute_copy(&duration)).into())
        }
        unsafe extern "system" fn AddSourceBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>, pnotify: *mut ::core::ffi::c_void, ppsourcebuffer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddSourceBuffer(this, ::core::mem::transmute(&r#type), ::windows_core::from_raw_borrowed(&pnotify)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsourcebuffer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveSourceBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psourcebuffer: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveSourceBuffer(this, ::windows_core::from_raw_borrowed(&psourcebuffer)).into())
        }
        unsafe extern "system" fn SetEndOfStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, error: MF_MSE_ERROR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEndOfStream(this, ::core::mem::transmute_copy(&error)).into())
        }
        unsafe extern "system" fn IsTypeSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsTypeSupported(this, ::core::mem::transmute(&r#type)))
        }
        unsafe extern "system" fn GetSourceBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::core::option::Option<IMFSourceBuffer> {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceBuffer(this, ::core::mem::transmute_copy(&dwstreamindex)))
        }
        IMFMediaSourceExtension_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSourceBuffers: GetSourceBuffers::<Identity, Impl, OFFSET>,
            GetActiveSourceBuffers: GetActiveSourceBuffers::<Identity, Impl, OFFSET>,
            GetReadyState: GetReadyState::<Identity, Impl, OFFSET>,
            GetDuration: GetDuration::<Identity, Impl, OFFSET>,
            SetDuration: SetDuration::<Identity, Impl, OFFSET>,
            AddSourceBuffer: AddSourceBuffer::<Identity, Impl, OFFSET>,
            RemoveSourceBuffer: RemoveSourceBuffer::<Identity, Impl, OFFSET>,
            SetEndOfStream: SetEndOfStream::<Identity, Impl, OFFSET>,
            IsTypeSupported: IsTypeSupported::<Identity, Impl, OFFSET>,
            GetSourceBuffer: GetSourceBuffer::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaSourceExtensionLiveSeekableRange_Impl: ::windows_core::BaseImpl {
    fn SetLiveSeekableRange(this: &Self::This, start: f64, end: f64) -> ::windows_core::Result<()>;
    fn ClearLiveSeekableRange(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaSourceExtensionLiveSeekableRange {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionLiveSeekableRange_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSourceExtensionLiveSeekableRange {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetLiveSeekableRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionLiveSeekableRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: f64, end: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLiveSeekableRange(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&end)).into())
        }
        unsafe extern "system" fn ClearLiveSeekableRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionLiveSeekableRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearLiveSeekableRange(this).into())
        }
        IMFMediaSourceExtensionLiveSeekableRange_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetLiveSeekableRange: SetLiveSeekableRange::<Identity, Impl, OFFSET>,
            ClearLiveSeekableRange: ClearLiveSeekableRange::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaSourceExtensionNotify_Impl: ::windows_core::BaseImpl {
    fn OnSourceOpen(this: &Self::This);
    fn OnSourceEnded(this: &Self::This);
    fn OnSourceClose(this: &Self::This);
}
impl ::windows_core::Iids for IMFMediaSourceExtensionNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSourceExtensionNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnSourceOpen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSourceOpen(this))
        }
        unsafe extern "system" fn OnSourceEnded<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSourceEnded(this))
        }
        unsafe extern "system" fn OnSourceClose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceExtensionNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSourceClose(this))
        }
        IMFMediaSourceExtensionNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnSourceOpen: OnSourceOpen::<Identity, Impl, OFFSET>,
            OnSourceEnded: OnSourceEnded::<Identity, Impl, OFFSET>,
            OnSourceClose: OnSourceClose::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaSourcePresentationProvider_Impl: ::windows_core::BaseImpl {
    fn ForceEndOfPresentation(this: &Self::This, ppresentationdescriptor: ::core::option::Option<&IMFPresentationDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaSourcePresentationProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourcePresentationProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSourcePresentationProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ForceEndOfPresentation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourcePresentationProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationdescriptor: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ForceEndOfPresentation(this, ::windows_core::from_raw_borrowed(&ppresentationdescriptor)).into())
        }
        IMFMediaSourcePresentationProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ForceEndOfPresentation: ForceEndOfPresentation::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaSourceTopologyProvider_Impl: ::windows_core::BaseImpl {
    fn GetMediaSourceTopology(this: &Self::This, ppresentationdescriptor: ::core::option::Option<&IMFPresentationDescriptor>) -> ::windows_core::Result<IMFTopology>;
}
impl ::windows_core::Iids for IMFMediaSourceTopologyProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceTopologyProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaSourceTopologyProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMediaSourceTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaSourceTopologyProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationdescriptor: *mut ::core::ffi::c_void, pptopology: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaSourceTopology(this, ::windows_core::from_raw_borrowed(&ppresentationdescriptor)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptopology, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaSourceTopologyProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMediaSourceTopology: GetMediaSourceTopology::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaStream_Impl: ::windows_core::BaseImpl + IMFMediaEventGenerator_Impl {
    fn GetMediaSource(this: &Self::This) -> ::windows_core::Result<IMFMediaSource>;
    fn GetStreamDescriptor(this: &Self::This) -> ::windows_core::Result<IMFStreamDescriptor>;
    fn RequestSample(this: &Self::This, ptoken: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEventGenerator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMediaSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediasource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediasource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstreamdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamDescriptor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreamdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RequestSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptoken: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RequestSample(this, ::windows_core::from_raw_borrowed(&ptoken)).into())
        }
        IMFMediaStream_Vtbl {
            base__: <IMFMediaEventGenerator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMediaSource: GetMediaSource::<Identity, Impl, OFFSET>,
            GetStreamDescriptor: GetStreamDescriptor::<Identity, Impl, OFFSET>,
            RequestSample: RequestSample::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaStream2_Impl: ::windows_core::BaseImpl + IMFMediaStream_Impl {
    fn SetStreamState(this: &Self::This, value: MF_STREAM_STATE) -> ::windows_core::Result<()>;
    fn GetStreamState(this: &Self::This) -> ::windows_core::Result<MF_STREAM_STATE>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaStream2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaStream);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaStream2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: MF_STREAM_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamState(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn GetStreamState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStream2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MF_STREAM_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaStream2_Vtbl {
            base__: <IMFMediaStream as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetStreamState: SetStreamState::<Identity, Impl, OFFSET>,
            GetStreamState: GetStreamState::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaStreamSourceSampleRequest_Impl: ::windows_core::BaseImpl {
    fn SetSample(this: &Self::This, value: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFMediaStreamSourceSampleRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStreamSourceSampleRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaStreamSourceSampleRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaStreamSourceSampleRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSample(this, ::windows_core::from_raw_borrowed(&value)).into())
        }
        IMFMediaStreamSourceSampleRequest_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetSample: SetSample::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFMediaTimeRange_Impl: ::windows_core::BaseImpl {
    fn GetLength(this: &Self::This) -> u32;
    fn GetStart(this: &Self::This, index: u32) -> ::windows_core::Result<f64>;
    fn GetEnd(this: &Self::This, index: u32) -> ::windows_core::Result<f64>;
    fn ContainsTime(this: &Self::This, time: f64) -> super::super::Foundation::BOOL;
    fn AddRange(this: &Self::This, starttime: f64, endtime: f64) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFMediaTimeRange {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaTimeRange {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLength(this))
        }
        unsafe extern "system" fn GetStart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, pstart: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStart(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstart, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, pend: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEnd(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pend, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ContainsTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, time: f64) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContainsTime(this, ::core::mem::transmute_copy(&time)))
        }
        unsafe extern "system" fn AddRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, starttime: f64, endtime: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRange(this, ::core::mem::transmute_copy(&starttime), ::core::mem::transmute_copy(&endtime)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTimeRange_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        IMFMediaTimeRange_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetStart: GetStart::<Identity, Impl, OFFSET>,
            GetEnd: GetEnd::<Identity, Impl, OFFSET>,
            ContainsTime: ContainsTime::<Identity, Impl, OFFSET>,
            AddRange: AddRange::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMediaType_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetMajorType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn IsCompressedFormat(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn IsEqual(this: &Self::This, pimediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<u32>;
    fn GetRepresentation(this: &Self::This, guidrepresentation: &::windows_core::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn FreeRepresentation(this: &Self::This, guidrepresentation: &::windows_core::GUID, pvrepresentation: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMediaType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMajorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidmajortype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMajorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidmajortype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsCompressedFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcompressed: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsCompressedFormat(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcompressed, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsEqual<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimediatype: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsEqual(this, ::windows_core::from_raw_borrowed(&pimediatype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRepresentation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidrepresentation: ::windows_core::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRepresentation(this, ::core::mem::transmute(&guidrepresentation), ::core::mem::transmute_copy(&ppvrepresentation)).into())
        }
        unsafe extern "system" fn FreeRepresentation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidrepresentation: ::windows_core::GUID, pvrepresentation: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FreeRepresentation(this, ::core::mem::transmute(&guidrepresentation), ::core::mem::transmute_copy(&pvrepresentation)).into())
        }
        IMFMediaType_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMajorType: GetMajorType::<Identity, Impl, OFFSET>,
            IsCompressedFormat: IsCompressedFormat::<Identity, Impl, OFFSET>,
            IsEqual: IsEqual::<Identity, Impl, OFFSET>,
            GetRepresentation: GetRepresentation::<Identity, Impl, OFFSET>,
            FreeRepresentation: FreeRepresentation::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMediaTypeHandler_Impl: ::windows_core::BaseImpl {
    fn IsMediaTypeSupported(this: &Self::This, pmediatype: ::core::option::Option<&IMFMediaType>, ppmediatype: *mut ::core::option::Option<IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetMediaTypeCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMediaTypeByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn SetCurrentMediaType(this: &Self::This, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetCurrentMediaType(this: &Self::This) -> ::windows_core::Result<IMFMediaType>;
    fn GetMajorType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
impl ::windows_core::Iids for IMFMediaTypeHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMediaTypeHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsMediaTypeSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmediatype: *mut ::core::ffi::c_void, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsMediaTypeSupported(this, ::windows_core::from_raw_borrowed(&pmediatype), ::core::mem::transmute_copy(&ppmediatype)).into())
        }
        unsafe extern "system" fn GetMediaTypeCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwtypecount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaTypeCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwtypecount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMediaTypeByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaTypeByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentMediaType(this, ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        unsafe extern "system" fn GetCurrentMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentMediaType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMajorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMediaTypeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidmajortype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMajorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidmajortype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMediaTypeHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsMediaTypeSupported: IsMediaTypeSupported::<Identity, Impl, OFFSET>,
            GetMediaTypeCount: GetMediaTypeCount::<Identity, Impl, OFFSET>,
            GetMediaTypeByIndex: GetMediaTypeByIndex::<Identity, Impl, OFFSET>,
            SetCurrentMediaType: SetCurrentMediaType::<Identity, Impl, OFFSET>,
            GetCurrentMediaType: GetCurrentMediaType::<Identity, Impl, OFFSET>,
            GetMajorType: GetMajorType::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFMetadata_Impl: ::windows_core::BaseImpl {
    fn SetLanguage(this: &Self::This, pwszrfc1766: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLanguage(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetAllLanguages(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn SetProperty(this: &Self::This, pwszname: &::windows_core::PCWSTR, ppvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn GetProperty(this: &Self::This, pwszname: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn DeleteProperty(this: &Self::This, pwszname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetAllPropertyNames(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFMetadata {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMetadata {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszrfc1766: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLanguage(this, ::core::mem::transmute(&pwszrfc1766)).into())
        }
        unsafe extern "system" fn GetLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwszrfc1766: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLanguage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwszrfc1766, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAllLanguages<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvlanguages: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAllLanguages(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvlanguages, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszname: ::windows_core::PCWSTR, ppvvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProperty(this, ::core::mem::transmute(&pwszname), ::core::mem::transmute_copy(&ppvvalue)).into())
        }
        unsafe extern "system" fn GetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszname: ::windows_core::PCWSTR, ppvvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperty(this, ::core::mem::transmute(&pwszname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteProperty(this, ::core::mem::transmute(&pwszname)).into())
        }
        unsafe extern "system" fn GetAllPropertyNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadata_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvnames: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAllPropertyNames(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvnames, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMetadata_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetLanguage: SetLanguage::<Identity, Impl, OFFSET>,
            GetLanguage: GetLanguage::<Identity, Impl, OFFSET>,
            GetAllLanguages: GetAllLanguages::<Identity, Impl, OFFSET>,
            SetProperty: SetProperty::<Identity, Impl, OFFSET>,
            GetProperty: GetProperty::<Identity, Impl, OFFSET>,
            DeleteProperty: DeleteProperty::<Identity, Impl, OFFSET>,
            GetAllPropertyNames: GetAllPropertyNames::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMetadataProvider_Impl: ::windows_core::BaseImpl {
    fn GetMFMetadata(this: &Self::This, ppresentationdescriptor: ::core::option::Option<&IMFPresentationDescriptor>, dwstreamidentifier: u32, dwflags: u32) -> ::windows_core::Result<IMFMetadata>;
}
impl ::windows_core::Iids for IMFMetadataProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadataProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMetadataProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMFMetadata<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMetadataProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationdescriptor: *mut ::core::ffi::c_void, dwstreamidentifier: u32, dwflags: u32, ppmfmetadata: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMFMetadata(this, ::windows_core::from_raw_borrowed(&ppresentationdescriptor), ::core::mem::transmute_copy(&dwstreamidentifier), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmfmetadata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMetadataProvider_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetMFMetadata: GetMFMetadata::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFMuxStreamAttributesManager_Impl: ::windows_core::BaseImpl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetAttributes(this: &Self::This, dwmuxstreamindex: u32) -> ::windows_core::Result<IMFAttributes>;
}
impl ::windows_core::Iids for IMFMuxStreamAttributesManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamAttributesManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMuxStreamAttributesManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamAttributesManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmuxstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwmuxstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamAttributesManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmuxstreamindex: u32, ppstreamattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAttributes(this, ::core::mem::transmute_copy(&dwmuxstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreamattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMuxStreamAttributesManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetAttributes: GetAttributes::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMuxStreamMediaTypeManager_Impl: ::windows_core::BaseImpl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMediaType(this: &Self::This, dwmuxstreamindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetStreamConfigurationCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddStreamConfiguration(this: &Self::This, ullstreammask: u64) -> ::windows_core::Result<()>;
    fn RemoveStreamConfiguration(this: &Self::This, ullstreammask: u64) -> ::windows_core::Result<()>;
    fn GetStreamConfiguration(this: &Self::This, ulindex: u32) -> ::windows_core::Result<u64>;
}
impl ::windows_core::Iids for IMFMuxStreamMediaTypeManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMuxStreamMediaTypeManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmuxstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwmuxstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmuxstreamindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaType(this, ::core::mem::transmute_copy(&dwmuxstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamConfigurationCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamConfigurationCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddStreamConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ullstreammask: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStreamConfiguration(this, ::core::mem::transmute_copy(&ullstreammask)).into())
        }
        unsafe extern "system" fn RemoveStreamConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ullstreammask: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveStreamConfiguration(this, ::core::mem::transmute_copy(&ullstreammask)).into())
        }
        unsafe extern "system" fn GetStreamConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamMediaTypeManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulindex: u32, pullstreammask: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamConfiguration(this, ::core::mem::transmute_copy(&ulindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pullstreammask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFMuxStreamMediaTypeManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetMediaType: GetMediaType::<Identity, Impl, OFFSET>,
            GetStreamConfigurationCount: GetStreamConfigurationCount::<Identity, Impl, OFFSET>,
            AddStreamConfiguration: AddStreamConfiguration::<Identity, Impl, OFFSET>,
            RemoveStreamConfiguration: RemoveStreamConfiguration::<Identity, Impl, OFFSET>,
            GetStreamConfiguration: GetStreamConfiguration::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFMuxStreamSampleManager_Impl: ::windows_core::BaseImpl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSample(this: &Self::This, dwmuxstreamindex: u32) -> ::windows_core::Result<IMFSample>;
    fn GetStreamConfiguration(this: &Self::This) -> u64;
}
impl ::windows_core::Iids for IMFMuxStreamSampleManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamSampleManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFMuxStreamSampleManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamSampleManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmuxstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwmuxstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamSampleManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmuxstreamindex: u32, ppsample: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSample(this, ::core::mem::transmute_copy(&dwmuxstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsample, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFMuxStreamSampleManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamConfiguration(this))
        }
        IMFMuxStreamSampleManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetSample: GetSample::<Identity, Impl, OFFSET>,
            GetStreamConfiguration: GetStreamConfiguration::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFNetCredential_Impl: ::windows_core::BaseImpl {
    fn SetUser(this: &Self::This, pbdata: *const u8, cbdata: u32, fdataisencrypted: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetPassword(this: &Self::This, pbdata: *const u8, cbdata: u32, fdataisencrypted: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetUser(this: &Self::This, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetPassword(this: &Self::This, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn LoggedOnUser(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFNetCredential {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredential_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetCredential {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetUser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *const u8, cbdata: u32, fdataisencrypted: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUser(this, ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&cbdata), ::core::mem::transmute_copy(&fdataisencrypted)).into())
        }
        unsafe extern "system" fn SetPassword<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *const u8, cbdata: u32, fdataisencrypted: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPassword(this, ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&cbdata), ::core::mem::transmute_copy(&fdataisencrypted)).into())
        }
        unsafe extern "system" fn GetUser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUser(this, ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&pcbdata), ::core::mem::transmute_copy(&fencryptdata)).into())
        }
        unsafe extern "system" fn GetPassword<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut u8, pcbdata: *mut u32, fencryptdata: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPassword(this, ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&pcbdata), ::core::mem::transmute_copy(&fencryptdata)).into())
        }
        unsafe extern "system" fn LoggedOnUser<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredential_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfloggedonuser: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LoggedOnUser(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfloggedonuser, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFNetCredential_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetUser: SetUser::<Identity, Impl, OFFSET>,
            SetPassword: SetPassword::<Identity, Impl, OFFSET>,
            GetUser: GetUser::<Identity, Impl, OFFSET>,
            GetPassword: GetPassword::<Identity, Impl, OFFSET>,
            LoggedOnUser: LoggedOnUser::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFNetCredentialCache_Impl: ::windows_core::BaseImpl {
    fn GetCredential(this: &Self::This, pszurl: &::windows_core::PCWSTR, pszrealm: &::windows_core::PCWSTR, dwauthenticationflags: u32, ppcred: *mut ::core::option::Option<IMFNetCredential>, pdwrequirementsflags: *mut u32) -> ::windows_core::Result<()>;
    fn SetGood(this: &Self::This, pcred: ::core::option::Option<&IMFNetCredential>, fgood: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetUserOptions(this: &Self::This, pcred: ::core::option::Option<&IMFNetCredential>, dwoptionsflags: u32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFNetCredentialCache {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialCache_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetCredentialCache {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCredential<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pszrealm: ::windows_core::PCWSTR, dwauthenticationflags: u32, ppcred: *mut *mut ::core::ffi::c_void, pdwrequirementsflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCredential(this, ::core::mem::transmute(&pszurl), ::core::mem::transmute(&pszrealm), ::core::mem::transmute_copy(&dwauthenticationflags), ::core::mem::transmute_copy(&ppcred), ::core::mem::transmute_copy(&pdwrequirementsflags)).into())
        }
        unsafe extern "system" fn SetGood<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcred: *mut ::core::ffi::c_void, fgood: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGood(this, ::windows_core::from_raw_borrowed(&pcred), ::core::mem::transmute_copy(&fgood)).into())
        }
        unsafe extern "system" fn SetUserOptions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialCache_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcred: *mut ::core::ffi::c_void, dwoptionsflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUserOptions(this, ::windows_core::from_raw_borrowed(&pcred), ::core::mem::transmute_copy(&dwoptionsflags)).into())
        }
        IMFNetCredentialCache_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCredential: GetCredential::<Identity, Impl, OFFSET>,
            SetGood: SetGood::<Identity, Impl, OFFSET>,
            SetUserOptions: SetUserOptions::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFNetCredentialManager_Impl: ::windows_core::BaseImpl {
    fn BeginGetCredentials(this: &Self::This, pparam: *const MFNetCredentialManagerGetParam, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndGetCredentials(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<IMFNetCredential>;
    fn SetGood(this: &Self::This, pcred: ::core::option::Option<&IMFNetCredential>, fgood: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFNetCredentialManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetCredentialManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginGetCredentials<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparam: *const MFNetCredentialManagerGetParam, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginGetCredentials(this, ::core::mem::transmute_copy(&pparam), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndGetCredentials<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, ppcred: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndGetCredentials(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcred, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetGood<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCredentialManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcred: *mut ::core::ffi::c_void, fgood: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGood(this, ::windows_core::from_raw_borrowed(&pcred), ::core::mem::transmute_copy(&fgood)).into())
        }
        IMFNetCredentialManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginGetCredentials: BeginGetCredentials::<Identity, Impl, OFFSET>,
            EndGetCredentials: EndGetCredentials::<Identity, Impl, OFFSET>,
            SetGood: SetGood::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFNetCrossOriginSupport_Impl: ::windows_core::BaseImpl {
    fn GetCrossOriginPolicy(this: &Self::This) -> ::windows_core::Result<MF_CROSS_ORIGIN_POLICY>;
    fn GetSourceOrigin(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn IsSameOrigin(this: &Self::This, wszurl: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFNetCrossOriginSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCrossOriginSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetCrossOriginSupport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCrossOriginPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCrossOriginSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppolicy: *mut MF_CROSS_ORIGIN_POLICY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCrossOriginPolicy(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppolicy, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceOrigin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCrossOriginSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszsourceorigin: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSourceOrigin(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(wszsourceorigin, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsSameOrigin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetCrossOriginSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszurl: ::windows_core::PCWSTR, pfissameorigin: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSameOrigin(this, ::core::mem::transmute(&wszurl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfissameorigin, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFNetCrossOriginSupport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCrossOriginPolicy: GetCrossOriginPolicy::<Identity, Impl, OFFSET>,
            GetSourceOrigin: GetSourceOrigin::<Identity, Impl, OFFSET>,
            IsSameOrigin: IsSameOrigin::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFNetProxyLocator_Impl: ::windows_core::BaseImpl {
    fn FindFirstProxy(this: &Self::This, pszhost: &::windows_core::PCWSTR, pszurl: &::windows_core::PCWSTR, freserved: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn FindNextProxy(this: &Self::This) -> ::windows_core::Result<()>;
    fn RegisterProxyResult(this: &Self::This, hrop: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn GetCurrentProxy(this: &Self::This, pszstr: ::windows_core::PWSTR, pcchstr: *mut u32) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IMFNetProxyLocator>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFNetProxyLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetProxyLocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FindFirstProxy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszhost: ::windows_core::PCWSTR, pszurl: ::windows_core::PCWSTR, freserved: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindFirstProxy(this, ::core::mem::transmute(&pszhost), ::core::mem::transmute(&pszurl), ::core::mem::transmute_copy(&freserved)).into())
        }
        unsafe extern "system" fn FindNextProxy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FindNextProxy(this).into())
        }
        unsafe extern "system" fn RegisterProxyResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrop: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterProxyResult(this, ::core::mem::transmute_copy(&hrop)).into())
        }
        unsafe extern "system" fn GetCurrentProxy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszstr: ::windows_core::PWSTR, pcchstr: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentProxy(this, ::core::mem::transmute_copy(&pszstr), ::core::mem::transmute_copy(&pcchstr)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppproxylocator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppproxylocator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFNetProxyLocator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FindFirstProxy: FindFirstProxy::<Identity, Impl, OFFSET>,
            FindNextProxy: FindNextProxy::<Identity, Impl, OFFSET>,
            RegisterProxyResult: RegisterProxyResult::<Identity, Impl, OFFSET>,
            GetCurrentProxy: GetCurrentProxy::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFNetProxyLocatorFactory_Impl: ::windows_core::BaseImpl {
    fn CreateProxyLocator(this: &Self::This, pszprotocol: &::windows_core::PCWSTR) -> ::windows_core::Result<IMFNetProxyLocator>;
}
impl ::windows_core::Iids for IMFNetProxyLocatorFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocatorFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetProxyLocatorFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateProxyLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetProxyLocatorFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszprotocol: ::windows_core::PCWSTR, ppproxylocator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateProxyLocator(this, ::core::mem::transmute(&pszprotocol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppproxylocator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFNetProxyLocatorFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateProxyLocator: CreateProxyLocator::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFNetResourceFilter_Impl: ::windows_core::BaseImpl {
    fn OnRedirect(this: &Self::This, pszurl: &::windows_core::PCWSTR) -> ::windows_core::Result<super::super::Foundation::VARIANT_BOOL>;
    fn OnSendingRequest(this: &Self::This, pszurl: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFNetResourceFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetResourceFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetResourceFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnRedirect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetResourceFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pvbcancel: *mut super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnRedirect(this, ::core::mem::transmute(&pszurl)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvbcancel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OnSendingRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetResourceFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSendingRequest(this, ::core::mem::transmute(&pszurl)).into())
        }
        IMFNetResourceFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnRedirect: OnRedirect::<Identity, Impl, OFFSET>,
            OnSendingRequest: OnSendingRequest::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFNetSchemeHandlerConfig_Impl: ::windows_core::BaseImpl {
    fn GetNumberOfSupportedProtocols(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSupportedProtocolType(this: &Self::This, nprotocolindex: u32) -> ::windows_core::Result<MFNETSOURCE_PROTOCOL_TYPE>;
    fn ResetProtocolRolloverSettings(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFNetSchemeHandlerConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetSchemeHandlerConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFNetSchemeHandlerConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberOfSupportedProtocols<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetSchemeHandlerConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcprotocols: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfSupportedProtocols(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcprotocols, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedProtocolType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetSchemeHandlerConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nprotocolindex: u32, pnprotocoltype: *mut MFNETSOURCE_PROTOCOL_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSupportedProtocolType(this, ::core::mem::transmute_copy(&nprotocolindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnprotocoltype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResetProtocolRolloverSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFNetSchemeHandlerConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetProtocolRolloverSettings(this).into())
        }
        IMFNetSchemeHandlerConfig_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberOfSupportedProtocols: GetNumberOfSupportedProtocols::<Identity, Impl, OFFSET>,
            GetSupportedProtocolType: GetSupportedProtocolType::<Identity, Impl, OFFSET>,
            ResetProtocolRolloverSettings: ResetProtocolRolloverSettings::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFObjectReferenceStream_Impl: ::windows_core::BaseImpl {
    fn SaveReference(this: &Self::This, riid: *const ::windows_core::GUID, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn LoadReference(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFObjectReferenceStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFObjectReferenceStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFObjectReferenceStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SaveReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFObjectReferenceStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveReference(this, ::core::mem::transmute_copy(&riid), ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn LoadReference<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFObjectReferenceStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadReference(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IMFObjectReferenceStream_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SaveReference: SaveReference::<Identity, Impl, OFFSET>,
            LoadReference: LoadReference::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFOutputPolicy_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GenerateRequiredSchemas(this: &Self::This, dwattributes: u32, guidoutputsubtype: &::windows_core::GUID, rgguidprotectionschemassupported: *const ::windows_core::GUID, cprotectionschemassupported: u32) -> ::windows_core::Result<IMFCollection>;
    fn GetOriginatorID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetMinimumGRLVersion(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFOutputPolicy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputPolicy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFOutputPolicy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GenerateRequiredSchemas<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwattributes: u32, guidoutputsubtype: ::windows_core::GUID, rgguidprotectionschemassupported: *const ::windows_core::GUID, cprotectionschemassupported: u32, pprequiredprotectionschemas: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GenerateRequiredSchemas(this, ::core::mem::transmute_copy(&dwattributes), ::core::mem::transmute(&guidoutputsubtype), ::core::mem::transmute_copy(&rgguidprotectionschemassupported), ::core::mem::transmute_copy(&cprotectionschemassupported)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprequiredprotectionschemas, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginatorID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidoriginatorid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginatorID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidoriginatorid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMinimumGRLVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwminimumgrlversion: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMinimumGRLVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwminimumgrlversion, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFOutputPolicy_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GenerateRequiredSchemas: GenerateRequiredSchemas::<Identity, Impl, OFFSET>,
            GetOriginatorID: GetOriginatorID::<Identity, Impl, OFFSET>,
            GetMinimumGRLVersion: GetMinimumGRLVersion::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFOutputSchema_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetSchemaType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetConfigurationData(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOriginatorID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFOutputSchema {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputSchema_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFOutputSchema {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSchemaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputSchema_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidschematype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSchemaType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidschematype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConfigurationData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputSchema_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConfigurationData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginatorID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputSchema_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidoriginatorid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginatorID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidoriginatorid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFOutputSchema_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSchemaType: GetSchemaType::<Identity, Impl, OFFSET>,
            GetConfigurationData: GetConfigurationData::<Identity, Impl, OFFSET>,
            GetOriginatorID: GetOriginatorID::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFOutputTrustAuthority_Impl: ::windows_core::BaseImpl {
    fn GetAction(this: &Self::This) -> ::windows_core::Result<MFPOLICYMANAGER_ACTION>;
    fn SetPolicy(this: &Self::This, pppolicy: *const ::core::option::Option<IMFOutputPolicy>, npolicy: u32, ppbticket: *mut *mut u8, pcbticket: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFOutputTrustAuthority {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputTrustAuthority_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFOutputTrustAuthority {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, paction: *mut MFPOLICYMANAGER_ACTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAction(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(paction, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFOutputTrustAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppolicy: *const *mut ::core::ffi::c_void, npolicy: u32, ppbticket: *mut *mut u8, pcbticket: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPolicy(this, ::core::mem::transmute_copy(&pppolicy), ::core::mem::transmute_copy(&npolicy), ::core::mem::transmute_copy(&ppbticket), ::core::mem::transmute_copy(&pcbticket)).into())
        }
        IMFOutputTrustAuthority_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAction: GetAction::<Identity, Impl, OFFSET>,
            SetPolicy: SetPolicy::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFPMPClient_Impl: ::windows_core::BaseImpl {
    fn SetPMPHost(this: &Self::This, ppmphost: ::core::option::Option<&IMFPMPHost>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFPMPClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMPClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPMPHost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmphost: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPMPHost(this, ::windows_core::from_raw_borrowed(&ppmphost)).into())
        }
        IMFPMPClient_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetPMPHost: SetPMPHost::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFPMPClientApp_Impl: ::windows_core::BaseImpl {
    fn SetPMPHost(this: &Self::This, ppmphost: ::core::option::Option<&IMFPMPHostApp>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFPMPClientApp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPClientApp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMPClientApp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPMPHost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPClientApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmphost: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPMPHost(this, ::windows_core::from_raw_borrowed(&ppmphost)).into())
        }
        IMFPMPClientApp_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetPMPHost: SetPMPHost::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IMFPMPHost_Impl: ::windows_core::BaseImpl {
    fn LockProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn UnlockProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn CreateObjectByCLSID(this: &Self::This, clsid: *const ::windows_core::GUID, pstream: ::core::option::Option<&super::super::System::Com::IStream>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IMFPMPHost {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHost_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMPHost {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LockProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockProcess(this).into())
        }
        unsafe extern "system" fn UnlockProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockProcess(this).into())
        }
        unsafe extern "system" fn CreateObjectByCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHost_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID, pstream: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateObjectByCLSID(this, ::core::mem::transmute_copy(&clsid), ::windows_core::from_raw_borrowed(&pstream), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IMFPMPHost_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LockProcess: LockProcess::<Identity, Impl, OFFSET>,
            UnlockProcess: UnlockProcess::<Identity, Impl, OFFSET>,
            CreateObjectByCLSID: CreateObjectByCLSID::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IMFPMPHostApp_Impl: ::windows_core::BaseImpl {
    fn LockProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn UnlockProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn ActivateClassById(this: &Self::This, id: &::windows_core::PCWSTR, pstream: ::core::option::Option<&super::super::System::Com::IStream>, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IMFPMPHostApp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHostApp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMPHostApp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LockProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHostApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockProcess(this).into())
        }
        unsafe extern "system" fn UnlockProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHostApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockProcess(this).into())
        }
        unsafe extern "system" fn ActivateClassById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPHostApp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: ::windows_core::PCWSTR, pstream: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateClassById(this, ::core::mem::transmute(&id), ::windows_core::from_raw_borrowed(&pstream), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IMFPMPHostApp_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LockProcess: LockProcess::<Identity, Impl, OFFSET>,
            UnlockProcess: UnlockProcess::<Identity, Impl, OFFSET>,
            ActivateClassById: ActivateClassById::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFPMPServer_Impl: ::windows_core::BaseImpl {
    fn LockProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn UnlockProcess(this: &Self::This) -> ::windows_core::Result<()>;
    fn CreateObjectByCLSID(this: &Self::This, clsid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFPMPServer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPServer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMPServer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LockProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockProcess(this).into())
        }
        unsafe extern "system" fn UnlockProcess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockProcess(this).into())
        }
        unsafe extern "system" fn CreateObjectByCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMPServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateObjectByCLSID(this, ::core::mem::transmute_copy(&clsid), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppobject)).into())
        }
        IMFPMPServer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LockProcess: LockProcess::<Identity, Impl, OFFSET>,
            UnlockProcess: UnlockProcess::<Identity, Impl, OFFSET>,
            CreateObjectByCLSID: CreateObjectByCLSID::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`, `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
pub trait IMFPMediaItem_Impl: ::windows_core::BaseImpl {
    fn GetMediaPlayer(this: &Self::This) -> ::windows_core::Result<IMFPMediaPlayer>;
    fn GetURL(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetObject(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetUserData(this: &Self::This) -> ::windows_core::Result<usize>;
    fn SetUserData(this: &Self::This, dwuserdata: usize) -> ::windows_core::Result<()>;
    fn GetStartStopPosition(this: &Self::This, pguidstartpositiontype: *mut ::windows_core::GUID, pvstartvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT, pguidstoppositiontype: *mut ::windows_core::GUID, pvstopvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn SetStartStopPosition(this: &Self::This, pguidstartpositiontype: *const ::windows_core::GUID, pvstartvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pguidstoppositiontype: *const ::windows_core::GUID, pvstopvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn HasVideo(this: &Self::This, pfhasvideo: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn HasAudio(this: &Self::This, pfhasaudio: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn IsProtected(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetDuration(this: &Self::This, guidpositiontype: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetNumberOfStreams(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStreamSelection(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetStreamSelection(this: &Self::This, dwstreamindex: u32, fenabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetStreamAttribute(this: &Self::This, dwstreamindex: u32, guidmfattribute: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetPresentationAttribute(this: &Self::This, guidmfattribute: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetCharacteristics(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetStreamSink(this: &Self::This, dwstreamindex: u32, pmediasink: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetMetadata(this: &Self::This) -> ::windows_core::Result<super::super::UI::Shell::PropertiesSystem::IPropertyStore>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl ::windows_core::Iids for IMFPMediaItem {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant", feature = "Win32_UI_Shell_PropertiesSystem"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMediaItem {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMediaPlayer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediaplayer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaPlayer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediaplayer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwszurl: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetURL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwszurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppiunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiunknown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUserData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwuserdata: *mut usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUserData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwuserdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUserData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwuserdata: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUserData(this, ::core::mem::transmute_copy(&dwuserdata)).into())
        }
        unsafe extern "system" fn GetStartStopPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidstartpositiontype: *mut ::windows_core::GUID, pvstartvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT, pguidstoppositiontype: *mut ::windows_core::GUID, pvstopvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStartStopPosition(this, ::core::mem::transmute_copy(&pguidstartpositiontype), ::core::mem::transmute_copy(&pvstartvalue), ::core::mem::transmute_copy(&pguidstoppositiontype), ::core::mem::transmute_copy(&pvstopvalue)).into())
        }
        unsafe extern "system" fn SetStartStopPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidstartpositiontype: *const ::windows_core::GUID, pvstartvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pguidstoppositiontype: *const ::windows_core::GUID, pvstopvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStartStopPosition(this, ::core::mem::transmute_copy(&pguidstartpositiontype), ::core::mem::transmute_copy(&pvstartvalue), ::core::mem::transmute_copy(&pguidstoppositiontype), ::core::mem::transmute_copy(&pvstopvalue)).into())
        }
        unsafe extern "system" fn HasVideo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfhasvideo: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HasVideo(this, ::core::mem::transmute_copy(&pfhasvideo), ::core::mem::transmute_copy(&pfselected)).into())
        }
        unsafe extern "system" fn HasAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfhasaudio: *mut super::super::Foundation::BOOL, pfselected: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HasAudio(this, ::core::mem::transmute_copy(&pfhasaudio), ::core::mem::transmute_copy(&pfselected)).into())
        }
        unsafe extern "system" fn IsProtected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfprotected: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsProtected(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfprotected, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidpositiontype: *const ::windows_core::GUID, pvdurationvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDuration(this, ::core::mem::transmute_copy(&guidpositiontype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvdurationvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOfStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstreamcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfStreams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pfenabled: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamSelection(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, fenabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamSelection(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&fenabled)).into())
        }
        unsafe extern "system" fn GetStreamAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, guidmfattribute: *const ::windows_core::GUID, pvvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamAttribute(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&guidmfattribute)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPresentationAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidmfattribute: *const ::windows_core::GUID, pvvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPresentationAttribute(this, ::core::mem::transmute_copy(&guidmfattribute)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCharacteristics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcharacteristics: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCharacteristics(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcharacteristics, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pmediasink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamSink(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&pmediasink)).into())
        }
        unsafe extern "system" fn GetMetadata<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaItem_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmetadatastore: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMetadata(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmetadatastore, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFPMediaItem_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMediaPlayer: GetMediaPlayer::<Identity, Impl, OFFSET>,
            GetURL: GetURL::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            GetUserData: GetUserData::<Identity, Impl, OFFSET>,
            SetUserData: SetUserData::<Identity, Impl, OFFSET>,
            GetStartStopPosition: GetStartStopPosition::<Identity, Impl, OFFSET>,
            SetStartStopPosition: SetStartStopPosition::<Identity, Impl, OFFSET>,
            HasVideo: HasVideo::<Identity, Impl, OFFSET>,
            HasAudio: HasAudio::<Identity, Impl, OFFSET>,
            IsProtected: IsProtected::<Identity, Impl, OFFSET>,
            GetDuration: GetDuration::<Identity, Impl, OFFSET>,
            GetNumberOfStreams: GetNumberOfStreams::<Identity, Impl, OFFSET>,
            GetStreamSelection: GetStreamSelection::<Identity, Impl, OFFSET>,
            SetStreamSelection: SetStreamSelection::<Identity, Impl, OFFSET>,
            GetStreamAttribute: GetStreamAttribute::<Identity, Impl, OFFSET>,
            GetPresentationAttribute: GetPresentationAttribute::<Identity, Impl, OFFSET>,
            GetCharacteristics: GetCharacteristics::<Identity, Impl, OFFSET>,
            SetStreamSink: SetStreamSink::<Identity, Impl, OFFSET>,
            GetMetadata: GetMetadata::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFPMediaPlayer_Impl: ::windows_core::BaseImpl {
    fn Play(this: &Self::This) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn FrameStep(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetPosition(this: &Self::This, guidpositiontype: *const ::windows_core::GUID, pvpositionvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn GetPosition(this: &Self::This, guidpositiontype: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn GetDuration(this: &Self::This, guidpositiontype: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn SetRate(this: &Self::This, flrate: f32) -> ::windows_core::Result<()>;
    fn GetRate(this: &Self::This) -> ::windows_core::Result<f32>;
    fn GetSupportedRates(this: &Self::This, fforwarddirection: super::super::Foundation::BOOL, pflslowestrate: *mut f32, pflfastestrate: *mut f32) -> ::windows_core::Result<()>;
    fn GetState(this: &Self::This) -> ::windows_core::Result<MFP_MEDIAPLAYER_STATE>;
    fn CreateMediaItemFromURL(this: &Self::This, pwszurl: &::windows_core::PCWSTR, fsync: super::super::Foundation::BOOL, dwuserdata: usize, ppmediaitem: *mut ::core::option::Option<IMFPMediaItem>) -> ::windows_core::Result<()>;
    fn CreateMediaItemFromObject(this: &Self::This, piunknownobj: ::core::option::Option<&::windows_core::IUnknown>, fsync: super::super::Foundation::BOOL, dwuserdata: usize, ppmediaitem: *mut ::core::option::Option<IMFPMediaItem>) -> ::windows_core::Result<()>;
    fn SetMediaItem(this: &Self::This, pimfpmediaitem: ::core::option::Option<&IMFPMediaItem>) -> ::windows_core::Result<()>;
    fn ClearMediaItem(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetMediaItem(this: &Self::This) -> ::windows_core::Result<IMFPMediaItem>;
    fn GetVolume(this: &Self::This) -> ::windows_core::Result<f32>;
    fn SetVolume(this: &Self::This, flvolume: f32) -> ::windows_core::Result<()>;
    fn GetBalance(this: &Self::This) -> ::windows_core::Result<f32>;
    fn SetBalance(this: &Self::This, flbalance: f32) -> ::windows_core::Result<()>;
    fn GetMute(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetMute(this: &Self::This, fmute: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetNativeVideoSize(this: &Self::This, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn GetIdealVideoSize(this: &Self::This, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn SetVideoSourceRect(this: &Self::This, pnrcsource: *const MFVideoNormalizedRect) -> ::windows_core::Result<()>;
    fn GetVideoSourceRect(this: &Self::This) -> ::windows_core::Result<MFVideoNormalizedRect>;
    fn SetAspectRatioMode(this: &Self::This, dwaspectratiomode: u32) -> ::windows_core::Result<()>;
    fn GetAspectRatioMode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetVideoWindow(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn UpdateVideo(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetBorderColor(this: &Self::This, clr: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
    fn GetBorderColor(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::COLORREF>;
    fn InsertEffect(this: &Self::This, peffect: ::core::option::Option<&::windows_core::IUnknown>, foptional: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn RemoveEffect(this: &Self::This, peffect: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveAllEffects(this: &Self::This) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFPMediaPlayer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMediaPlayer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Play<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Play(this).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn FrameStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FrameStep(this).into())
        }
        unsafe extern "system" fn SetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidpositiontype: *const ::windows_core::GUID, pvpositionvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPosition(this, ::core::mem::transmute_copy(&guidpositiontype), ::core::mem::transmute_copy(&pvpositionvalue)).into())
        }
        unsafe extern "system" fn GetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidpositiontype: *const ::windows_core::GUID, pvpositionvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPosition(this, ::core::mem::transmute_copy(&guidpositiontype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvpositionvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidpositiontype: *const ::windows_core::GUID, pvdurationvalue: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDuration(this, ::core::mem::transmute_copy(&guidpositiontype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvdurationvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flrate: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRate(this, ::core::mem::transmute_copy(&flrate)).into())
        }
        unsafe extern "system" fn GetRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflrate: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflrate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSupportedRates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fforwarddirection: super::super::Foundation::BOOL, pflslowestrate: *mut f32, pflfastestrate: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedRates(this, ::core::mem::transmute_copy(&fforwarddirection), ::core::mem::transmute_copy(&pflslowestrate), ::core::mem::transmute_copy(&pflfastestrate)).into())
        }
        unsafe extern "system" fn GetState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pestate: *mut MFP_MEDIAPLAYER_STATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pestate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateMediaItemFromURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, fsync: super::super::Foundation::BOOL, dwuserdata: usize, ppmediaitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateMediaItemFromURL(this, ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&fsync), ::core::mem::transmute_copy(&dwuserdata), ::core::mem::transmute_copy(&ppmediaitem)).into())
        }
        unsafe extern "system" fn CreateMediaItemFromObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piunknownobj: *mut ::core::ffi::c_void, fsync: super::super::Foundation::BOOL, dwuserdata: usize, ppmediaitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateMediaItemFromObject(this, ::windows_core::from_raw_borrowed(&piunknownobj), ::core::mem::transmute_copy(&fsync), ::core::mem::transmute_copy(&dwuserdata), ::core::mem::transmute_copy(&ppmediaitem)).into())
        }
        unsafe extern "system" fn SetMediaItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pimfpmediaitem: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaItem(this, ::windows_core::from_raw_borrowed(&pimfpmediaitem)).into())
        }
        unsafe extern "system" fn ClearMediaItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearMediaItem(this).into())
        }
        unsafe extern "system" fn GetMediaItem<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppimfpmediaitem: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaItem(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppimfpmediaitem, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflvolume: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVolume(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflvolume, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flvolume: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVolume(this, ::core::mem::transmute_copy(&flvolume)).into())
        }
        unsafe extern "system" fn GetBalance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflbalance: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBalance(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflbalance, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBalance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flbalance: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalance(this, ::core::mem::transmute_copy(&flbalance)).into())
        }
        unsafe extern "system" fn GetMute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfmute: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMute(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfmute, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fmute: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMute(this, ::core::mem::transmute_copy(&fmute)).into())
        }
        unsafe extern "system" fn GetNativeVideoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNativeVideoSize(this, ::core::mem::transmute_copy(&pszvideo), ::core::mem::transmute_copy(&pszarvideo)).into())
        }
        unsafe extern "system" fn GetIdealVideoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdealVideoSize(this, ::core::mem::transmute_copy(&pszmin), ::core::mem::transmute_copy(&pszmax)).into())
        }
        unsafe extern "system" fn SetVideoSourceRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnrcsource: *const MFVideoNormalizedRect) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoSourceRect(this, ::core::mem::transmute_copy(&pnrcsource)).into())
        }
        unsafe extern "system" fn GetVideoSourceRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnrcsource: *mut MFVideoNormalizedRect) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoSourceRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnrcsource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAspectRatioMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwaspectratiomode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAspectRatioMode(this, ::core::mem::transmute_copy(&dwaspectratiomode)).into())
        }
        unsafe extern "system" fn GetAspectRatioMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwaspectratiomode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAspectRatioMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwaspectratiomode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVideoWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwndvideo: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwndvideo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UpdateVideo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateVideo(this).into())
        }
        unsafe extern "system" fn SetBorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clr: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBorderColor(this, ::core::mem::transmute_copy(&clr)).into())
        }
        unsafe extern "system" fn GetBorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pclr: *mut super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBorderColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pclr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InsertEffect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peffect: *mut ::core::ffi::c_void, foptional: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InsertEffect(this, ::windows_core::from_raw_borrowed(&peffect), ::core::mem::transmute_copy(&foptional)).into())
        }
        unsafe extern "system" fn RemoveEffect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peffect: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEffect(this, ::windows_core::from_raw_borrowed(&peffect)).into())
        }
        unsafe extern "system" fn RemoveAllEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllEffects(this).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFPMediaPlayer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Play: Play::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            FrameStep: FrameStep::<Identity, Impl, OFFSET>,
            SetPosition: SetPosition::<Identity, Impl, OFFSET>,
            GetPosition: GetPosition::<Identity, Impl, OFFSET>,
            GetDuration: GetDuration::<Identity, Impl, OFFSET>,
            SetRate: SetRate::<Identity, Impl, OFFSET>,
            GetRate: GetRate::<Identity, Impl, OFFSET>,
            GetSupportedRates: GetSupportedRates::<Identity, Impl, OFFSET>,
            GetState: GetState::<Identity, Impl, OFFSET>,
            CreateMediaItemFromURL: CreateMediaItemFromURL::<Identity, Impl, OFFSET>,
            CreateMediaItemFromObject: CreateMediaItemFromObject::<Identity, Impl, OFFSET>,
            SetMediaItem: SetMediaItem::<Identity, Impl, OFFSET>,
            ClearMediaItem: ClearMediaItem::<Identity, Impl, OFFSET>,
            GetMediaItem: GetMediaItem::<Identity, Impl, OFFSET>,
            GetVolume: GetVolume::<Identity, Impl, OFFSET>,
            SetVolume: SetVolume::<Identity, Impl, OFFSET>,
            GetBalance: GetBalance::<Identity, Impl, OFFSET>,
            SetBalance: SetBalance::<Identity, Impl, OFFSET>,
            GetMute: GetMute::<Identity, Impl, OFFSET>,
            SetMute: SetMute::<Identity, Impl, OFFSET>,
            GetNativeVideoSize: GetNativeVideoSize::<Identity, Impl, OFFSET>,
            GetIdealVideoSize: GetIdealVideoSize::<Identity, Impl, OFFSET>,
            SetVideoSourceRect: SetVideoSourceRect::<Identity, Impl, OFFSET>,
            GetVideoSourceRect: GetVideoSourceRect::<Identity, Impl, OFFSET>,
            SetAspectRatioMode: SetAspectRatioMode::<Identity, Impl, OFFSET>,
            GetAspectRatioMode: GetAspectRatioMode::<Identity, Impl, OFFSET>,
            GetVideoWindow: GetVideoWindow::<Identity, Impl, OFFSET>,
            UpdateVideo: UpdateVideo::<Identity, Impl, OFFSET>,
            SetBorderColor: SetBorderColor::<Identity, Impl, OFFSET>,
            GetBorderColor: GetBorderColor::<Identity, Impl, OFFSET>,
            InsertEffect: InsertEffect::<Identity, Impl, OFFSET>,
            RemoveEffect: RemoveEffect::<Identity, Impl, OFFSET>,
            RemoveAllEffects: RemoveAllEffects::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFPMediaPlayerCallback_Impl: ::windows_core::BaseImpl {
    fn OnMediaPlayerEvent(this: &Self::This, peventheader: *const MFP_EVENT_HEADER);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFPMediaPlayerCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayerCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPMediaPlayerCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnMediaPlayerEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPMediaPlayerCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peventheader: *const MFP_EVENT_HEADER) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnMediaPlayerEvent(this, ::core::mem::transmute_copy(&peventheader)))
        }
        IMFPMediaPlayerCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnMediaPlayerEvent: OnMediaPlayerEvent::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFPluginControl_Impl: ::windows_core::BaseImpl {
    fn GetPreferredClsid(this: &Self::This, plugintype: u32, selector: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetPreferredClsidByIndex(this: &Self::This, plugintype: u32, index: u32, selector: *mut ::windows_core::PWSTR, clsid: *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn SetPreferredClsid(this: &Self::This, plugintype: u32, selector: &::windows_core::PCWSTR, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn IsDisabled(this: &Self::This, plugintype: u32, clsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetDisabledByIndex(this: &Self::This, plugintype: u32, index: u32) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetDisabled(this: &Self::This, plugintype: u32, clsid: *const ::windows_core::GUID, disabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFPluginControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPluginControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPreferredClsid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plugintype: u32, selector: ::windows_core::PCWSTR, clsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPreferredClsid(this, ::core::mem::transmute_copy(&plugintype), ::core::mem::transmute(&selector)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(clsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPreferredClsidByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plugintype: u32, index: u32, selector: *mut ::windows_core::PWSTR, clsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPreferredClsidByIndex(this, ::core::mem::transmute_copy(&plugintype), ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&selector), ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn SetPreferredClsid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plugintype: u32, selector: ::windows_core::PCWSTR, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPreferredClsid(this, ::core::mem::transmute_copy(&plugintype), ::core::mem::transmute(&selector), ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn IsDisabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plugintype: u32, clsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsDisabled(this, ::core::mem::transmute_copy(&plugintype), ::core::mem::transmute_copy(&clsid)).into())
        }
        unsafe extern "system" fn GetDisabledByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plugintype: u32, index: u32, clsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisabledByIndex(this, ::core::mem::transmute_copy(&plugintype), ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(clsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDisabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plugintype: u32, clsid: *const ::windows_core::GUID, disabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDisabled(this, ::core::mem::transmute_copy(&plugintype), ::core::mem::transmute_copy(&clsid), ::core::mem::transmute_copy(&disabled)).into())
        }
        IMFPluginControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPreferredClsid: GetPreferredClsid::<Identity, Impl, OFFSET>,
            GetPreferredClsidByIndex: GetPreferredClsidByIndex::<Identity, Impl, OFFSET>,
            SetPreferredClsid: SetPreferredClsid::<Identity, Impl, OFFSET>,
            IsDisabled: IsDisabled::<Identity, Impl, OFFSET>,
            GetDisabledByIndex: GetDisabledByIndex::<Identity, Impl, OFFSET>,
            SetDisabled: SetDisabled::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFPluginControl2_Impl: ::windows_core::BaseImpl + IMFPluginControl_Impl {
    fn SetPolicy(this: &Self::This, policy: MF_PLUGIN_CONTROL_POLICY) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFPluginControl2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFPluginControl);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPluginControl2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPluginControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, policy: MF_PLUGIN_CONTROL_POLICY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPolicy(this, ::core::mem::transmute_copy(&policy)).into())
        }
        IMFPluginControl2_Vtbl { base__: <IMFPluginControl as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetPolicy: SetPolicy::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFPresentationClock_Impl: ::windows_core::BaseImpl + IMFClock_Impl {
    fn SetTimeSource(this: &Self::This, ptimesource: ::core::option::Option<&IMFPresentationTimeSource>) -> ::windows_core::Result<()>;
    fn GetTimeSource(this: &Self::This) -> ::windows_core::Result<IMFPresentationTimeSource>;
    fn GetTime(this: &Self::This) -> ::windows_core::Result<i64>;
    fn AddClockStateSink(this: &Self::This, pstatesink: ::core::option::Option<&IMFClockStateSink>) -> ::windows_core::Result<()>;
    fn RemoveClockStateSink(this: &Self::This, pstatesink: ::core::option::Option<&IMFClockStateSink>) -> ::windows_core::Result<()>;
    fn Start(this: &Self::This, llclockstartoffset: i64) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFPresentationClock {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFClock);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPresentationClock {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTimeSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptimesource: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTimeSource(this, ::windows_core::from_raw_borrowed(&ptimesource)).into())
        }
        unsafe extern "system" fn GetTimeSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptimesource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTimeSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptimesource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phnsclocktime: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phnsclocktime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddClockStateSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatesink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddClockStateSink(this, ::windows_core::from_raw_borrowed(&pstatesink)).into())
        }
        unsafe extern "system" fn RemoveClockStateSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatesink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveClockStateSink(this, ::windows_core::from_raw_borrowed(&pstatesink)).into())
        }
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llclockstartoffset: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this, ::core::mem::transmute_copy(&llclockstartoffset)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationClock_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        IMFPresentationClock_Vtbl {
            base__: <IMFClock as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetTimeSource: SetTimeSource::<Identity, Impl, OFFSET>,
            GetTimeSource: GetTimeSource::<Identity, Impl, OFFSET>,
            GetTime: GetTime::<Identity, Impl, OFFSET>,
            AddClockStateSink: AddClockStateSink::<Identity, Impl, OFFSET>,
            RemoveClockStateSink: RemoveClockStateSink::<Identity, Impl, OFFSET>,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFPresentationDescriptor_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetStreamDescriptorCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStreamDescriptorByIndex(this: &Self::This, dwindex: u32, pfselected: *mut super::super::Foundation::BOOL, ppdescriptor: *mut ::core::option::Option<IMFStreamDescriptor>) -> ::windows_core::Result<()>;
    fn SelectStream(this: &Self::This, dwdescriptorindex: u32) -> ::windows_core::Result<()>;
    fn DeselectStream(this: &Self::This, dwdescriptorindex: u32) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IMFPresentationDescriptor>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFPresentationDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPresentationDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamDescriptorCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwdescriptorcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamDescriptorCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwdescriptorcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, pfselected: *mut super::super::Foundation::BOOL, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&pfselected), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn SelectStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwdescriptorindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectStream(this, ::core::mem::transmute_copy(&dwdescriptorindex)).into())
        }
        unsafe extern "system" fn DeselectStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwdescriptorindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeselectStream(this, ::core::mem::transmute_copy(&dwdescriptorindex)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppresentationdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppresentationdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFPresentationDescriptor_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamDescriptorCount: GetStreamDescriptorCount::<Identity, Impl, OFFSET>,
            GetStreamDescriptorByIndex: GetStreamDescriptorByIndex::<Identity, Impl, OFFSET>,
            SelectStream: SelectStream::<Identity, Impl, OFFSET>,
            DeselectStream: DeselectStream::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFPresentationTimeSource_Impl: ::windows_core::BaseImpl + IMFClock_Impl {
    fn GetUnderlyingClock(this: &Self::This) -> ::windows_core::Result<IMFClock>;
}
impl ::windows_core::Iids for IMFPresentationTimeSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFClock);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationTimeSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFPresentationTimeSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetUnderlyingClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFPresentationTimeSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppclock: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUnderlyingClock(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppclock, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFPresentationTimeSource_Vtbl { base__: <IMFClock as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetUnderlyingClock: GetUnderlyingClock::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFProtectedEnvironmentAccess_Impl: ::windows_core::BaseImpl {
    fn Call(this: &Self::This, inputlength: u32, input: *const u8, outputlength: u32, output: *mut u8) -> ::windows_core::Result<()>;
    fn ReadGRL(this: &Self::This, outputlength: *mut u32, output: *mut *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFProtectedEnvironmentAccess {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFProtectedEnvironmentAccess_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFProtectedEnvironmentAccess {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Call<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFProtectedEnvironmentAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputlength: u32, input: *const u8, outputlength: u32, output: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Call(this, ::core::mem::transmute_copy(&inputlength), ::core::mem::transmute_copy(&input), ::core::mem::transmute_copy(&outputlength), ::core::mem::transmute_copy(&output)).into())
        }
        unsafe extern "system" fn ReadGRL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFProtectedEnvironmentAccess_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, outputlength: *mut u32, output: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadGRL(this, ::core::mem::transmute_copy(&outputlength), ::core::mem::transmute_copy(&output)).into())
        }
        IMFProtectedEnvironmentAccess_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Call: Call::<Identity, Impl, OFFSET>,
            ReadGRL: ReadGRL::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFQualityAdvise_Impl: ::windows_core::BaseImpl {
    fn SetDropMode(this: &Self::This, edropmode: MF_QUALITY_DROP_MODE) -> ::windows_core::Result<()>;
    fn SetQualityLevel(this: &Self::This, equalitylevel: MF_QUALITY_LEVEL) -> ::windows_core::Result<()>;
    fn GetDropMode(this: &Self::This) -> ::windows_core::Result<MF_QUALITY_DROP_MODE>;
    fn GetQualityLevel(this: &Self::This) -> ::windows_core::Result<MF_QUALITY_LEVEL>;
    fn DropTime(this: &Self::This, hnsamounttodrop: i64) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFQualityAdvise {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFQualityAdvise {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDropMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, edropmode: MF_QUALITY_DROP_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDropMode(this, ::core::mem::transmute_copy(&edropmode)).into())
        }
        unsafe extern "system" fn SetQualityLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, equalitylevel: MF_QUALITY_LEVEL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetQualityLevel(this, ::core::mem::transmute_copy(&equalitylevel)).into())
        }
        unsafe extern "system" fn GetDropMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pedropmode: *mut MF_QUALITY_DROP_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDropMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pedropmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQualityLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pequalitylevel: *mut MF_QUALITY_LEVEL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetQualityLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pequalitylevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DropTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnsamounttodrop: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DropTime(this, ::core::mem::transmute_copy(&hnsamounttodrop)).into())
        }
        IMFQualityAdvise_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDropMode: SetDropMode::<Identity, Impl, OFFSET>,
            SetQualityLevel: SetQualityLevel::<Identity, Impl, OFFSET>,
            GetDropMode: GetDropMode::<Identity, Impl, OFFSET>,
            GetQualityLevel: GetQualityLevel::<Identity, Impl, OFFSET>,
            DropTime: DropTime::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFQualityAdvise2_Impl: ::windows_core::BaseImpl + IMFQualityAdvise_Impl {
    fn NotifyQualityEvent(this: &Self::This, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFQualityAdvise2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFQualityAdvise);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFQualityAdvise2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyQualityEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdvise2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pevent: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NotifyQualityEvent(this, ::windows_core::from_raw_borrowed(&pevent)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFQualityAdvise2_Vtbl { base__: <IMFQualityAdvise as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, NotifyQualityEvent: NotifyQualityEvent::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFQualityAdviseLimits_Impl: ::windows_core::BaseImpl {
    fn GetMaximumDropMode(this: &Self::This) -> ::windows_core::Result<MF_QUALITY_DROP_MODE>;
    fn GetMinimumQualityLevel(this: &Self::This) -> ::windows_core::Result<MF_QUALITY_LEVEL>;
}
impl ::windows_core::Iids for IMFQualityAdviseLimits {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdviseLimits_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFQualityAdviseLimits {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMaximumDropMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdviseLimits_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pedropmode: *mut MF_QUALITY_DROP_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMaximumDropMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pedropmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMinimumQualityLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityAdviseLimits_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pequalitylevel: *mut MF_QUALITY_LEVEL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMinimumQualityLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pequalitylevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFQualityAdviseLimits_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMaximumDropMode: GetMaximumDropMode::<Identity, Impl, OFFSET>,
            GetMinimumQualityLevel: GetMinimumQualityLevel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFQualityManager_Impl: ::windows_core::BaseImpl {
    fn NotifyTopology(this: &Self::This, ptopology: ::core::option::Option<&IMFTopology>) -> ::windows_core::Result<()>;
    fn NotifyPresentationClock(this: &Self::This, pclock: ::core::option::Option<&IMFPresentationClock>) -> ::windows_core::Result<()>;
    fn NotifyProcessInput(this: &Self::This, pnode: ::core::option::Option<&IMFTopologyNode>, linputindex: i32, psample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
    fn NotifyProcessOutput(this: &Self::This, pnode: ::core::option::Option<&IMFTopologyNode>, loutputindex: i32, psample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
    fn NotifyQualityEvent(this: &Self::This, pobject: ::core::option::Option<&::windows_core::IUnknown>, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFQualityManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFQualityManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptopology: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyTopology(this, ::windows_core::from_raw_borrowed(&ptopology)).into())
        }
        unsafe extern "system" fn NotifyPresentationClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pclock: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyPresentationClock(this, ::windows_core::from_raw_borrowed(&pclock)).into())
        }
        unsafe extern "system" fn NotifyProcessInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnode: *mut ::core::ffi::c_void, linputindex: i32, psample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyProcessInput(this, ::windows_core::from_raw_borrowed(&pnode), ::core::mem::transmute_copy(&linputindex), ::windows_core::from_raw_borrowed(&psample)).into())
        }
        unsafe extern "system" fn NotifyProcessOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnode: *mut ::core::ffi::c_void, loutputindex: i32, psample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyProcessOutput(this, ::windows_core::from_raw_borrowed(&pnode), ::core::mem::transmute_copy(&loutputindex), ::windows_core::from_raw_borrowed(&psample)).into())
        }
        unsafe extern "system" fn NotifyQualityEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobject: *mut ::core::ffi::c_void, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyQualityEvent(this, ::windows_core::from_raw_borrowed(&pobject), ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFQualityManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFQualityManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            NotifyTopology: NotifyTopology::<Identity, Impl, OFFSET>,
            NotifyPresentationClock: NotifyPresentationClock::<Identity, Impl, OFFSET>,
            NotifyProcessInput: NotifyProcessInput::<Identity, Impl, OFFSET>,
            NotifyProcessOutput: NotifyProcessOutput::<Identity, Impl, OFFSET>,
            NotifyQualityEvent: NotifyQualityEvent::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFRateControl_Impl: ::windows_core::BaseImpl {
    fn SetRate(this: &Self::This, fthin: super::super::Foundation::BOOL, flrate: f32) -> ::windows_core::Result<()>;
    fn GetRate(this: &Self::This, pfthin: *mut super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFRateControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRateControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fthin: super::super::Foundation::BOOL, flrate: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRate(this, ::core::mem::transmute_copy(&fthin), ::core::mem::transmute_copy(&flrate)).into())
        }
        unsafe extern "system" fn GetRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfthin: *mut super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRate(this, ::core::mem::transmute_copy(&pfthin), ::core::mem::transmute_copy(&pflrate)).into())
        }
        IMFRateControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetRate: SetRate::<Identity, Impl, OFFSET>,
            GetRate: GetRate::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFRateSupport_Impl: ::windows_core::BaseImpl {
    fn GetSlowestRate(this: &Self::This, edirection: MFRATE_DIRECTION, fthin: super::super::Foundation::BOOL) -> ::windows_core::Result<f32>;
    fn GetFastestRate(this: &Self::This, edirection: MFRATE_DIRECTION, fthin: super::super::Foundation::BOOL) -> ::windows_core::Result<f32>;
    fn IsRateSupported(this: &Self::This, fthin: super::super::Foundation::BOOL, flrate: f32, pflnearestsupportedrate: *mut f32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFRateSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRateSupport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSlowestRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, edirection: MFRATE_DIRECTION, fthin: super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSlowestRate(this, ::core::mem::transmute_copy(&edirection), ::core::mem::transmute_copy(&fthin)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflrate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFastestRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, edirection: MFRATE_DIRECTION, fthin: super::super::Foundation::BOOL, pflrate: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFastestRate(this, ::core::mem::transmute_copy(&edirection), ::core::mem::transmute_copy(&fthin)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflrate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsRateSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRateSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fthin: super::super::Foundation::BOOL, flrate: f32, pflnearestsupportedrate: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsRateSupported(this, ::core::mem::transmute_copy(&fthin), ::core::mem::transmute_copy(&flrate), ::core::mem::transmute_copy(&pflnearestsupportedrate)).into())
        }
        IMFRateSupport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSlowestRate: GetSlowestRate::<Identity, Impl, OFFSET>,
            GetFastestRate: GetFastestRate::<Identity, Impl, OFFSET>,
            IsRateSupported: IsRateSupported::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFReadWriteClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstanceFromURL(this: &Self::This, clsid: *const ::windows_core::GUID, pwszurl: &::windows_core::PCWSTR, pattributes: ::core::option::Option<&IMFAttributes>, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn CreateInstanceFromObject(this: &Self::This, clsid: *const ::windows_core::GUID, punkobject: ::core::option::Option<&::windows_core::IUnknown>, pattributes: ::core::option::Option<&IMFAttributes>, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFReadWriteClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFReadWriteClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFReadWriteClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstanceFromURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFReadWriteClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID, pwszurl: ::windows_core::PCWSTR, pattributes: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateInstanceFromURL(this, ::core::mem::transmute_copy(&clsid), ::core::mem::transmute(&pwszurl), ::windows_core::from_raw_borrowed(&pattributes), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        unsafe extern "system" fn CreateInstanceFromObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFReadWriteClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *const ::windows_core::GUID, punkobject: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateInstanceFromObject(this, ::core::mem::transmute_copy(&clsid), ::windows_core::from_raw_borrowed(&punkobject), ::windows_core::from_raw_borrowed(&pattributes), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        IMFReadWriteClassFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateInstanceFromURL: CreateInstanceFromURL::<Identity, Impl, OFFSET>,
            CreateInstanceFromObject: CreateInstanceFromObject::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFRealTimeClient_Impl: ::windows_core::BaseImpl {
    fn RegisterThreads(this: &Self::This, dwtaskindex: u32, wszclass: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn UnregisterThreads(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetWorkQueue(this: &Self::This, dwworkqueueid: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFRealTimeClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRealTimeClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtaskindex: u32, wszclass: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterThreads(this, ::core::mem::transmute_copy(&dwtaskindex), ::core::mem::transmute(&wszclass)).into())
        }
        unsafe extern "system" fn UnregisterThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterThreads(this).into())
        }
        unsafe extern "system" fn SetWorkQueue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwworkqueueid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWorkQueue(this, ::core::mem::transmute_copy(&dwworkqueueid)).into())
        }
        IMFRealTimeClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterThreads: RegisterThreads::<Identity, Impl, OFFSET>,
            UnregisterThreads: UnregisterThreads::<Identity, Impl, OFFSET>,
            SetWorkQueue: SetWorkQueue::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFRealTimeClientEx_Impl: ::windows_core::BaseImpl {
    fn RegisterThreadsEx(this: &Self::This, pdwtaskindex: *mut u32, wszclassname: &::windows_core::PCWSTR, lbasepriority: i32) -> ::windows_core::Result<()>;
    fn UnregisterThreads(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetWorkQueueEx(this: &Self::This, dwmultithreadedworkqueueid: u32, lworkitembasepriority: i32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFRealTimeClientEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClientEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRealTimeClientEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterThreadsEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClientEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwtaskindex: *mut u32, wszclassname: ::windows_core::PCWSTR, lbasepriority: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterThreadsEx(this, ::core::mem::transmute_copy(&pdwtaskindex), ::core::mem::transmute(&wszclassname), ::core::mem::transmute_copy(&lbasepriority)).into())
        }
        unsafe extern "system" fn UnregisterThreads<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClientEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterThreads(this).into())
        }
        unsafe extern "system" fn SetWorkQueueEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRealTimeClientEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmultithreadedworkqueueid: u32, lworkitembasepriority: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWorkQueueEx(this, ::core::mem::transmute_copy(&dwmultithreadedworkqueueid), ::core::mem::transmute_copy(&lworkitembasepriority)).into())
        }
        IMFRealTimeClientEx_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterThreadsEx: RegisterThreadsEx::<Identity, Impl, OFFSET>,
            UnregisterThreads: UnregisterThreads::<Identity, Impl, OFFSET>,
            SetWorkQueueEx: SetWorkQueueEx::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFRelativePanelReport_Impl: ::windows_core::BaseImpl {
    fn GetRelativePanel(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFRelativePanelReport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRelativePanelReport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRelativePanelReport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRelativePanel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRelativePanelReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, panel: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRelativePanel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(panel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFRelativePanelReport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRelativePanel: GetRelativePanel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFRelativePanelWatcher_Impl: ::windows_core::BaseImpl + IMFShutdown_Impl {
    fn BeginGetReport(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndGetReport(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<IMFRelativePanelReport>;
    fn GetReport(this: &Self::This) -> ::windows_core::Result<IMFRelativePanelReport>;
}
impl ::windows_core::Iids for IMFRelativePanelWatcher {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFShutdown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRelativePanelWatcher_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRelativePanelWatcher {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginGetReport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRelativePanelWatcher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginGetReport(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndGetReport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRelativePanelWatcher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pprelativepanelreport: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndGetReport(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprelativepanelreport, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRelativePanelWatcher_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprelativepanelreport: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReport(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprelativepanelreport, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFRelativePanelWatcher_Vtbl {
            base__: <IMFShutdown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginGetReport: BeginGetReport::<Identity, Impl, OFFSET>,
            EndGetReport: EndGetReport::<Identity, Impl, OFFSET>,
            GetReport: GetReport::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFRemoteAsyncCallback_Impl: ::windows_core::BaseImpl {
    fn Invoke(this: &Self::This, hr: ::windows_core::HRESULT, premoteresult: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFRemoteAsyncCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteAsyncCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRemoteAsyncCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Invoke<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteAsyncCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT, premoteresult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Invoke(this, ::core::mem::transmute_copy(&hr), ::windows_core::from_raw_borrowed(&premoteresult)).into())
        }
        IMFRemoteAsyncCallback_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Invoke: Invoke::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFRemoteDesktopPlugin_Impl: ::windows_core::BaseImpl {
    fn UpdateTopology(this: &Self::This, ptopology: ::core::option::Option<&IMFTopology>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFRemoteDesktopPlugin {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteDesktopPlugin_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRemoteDesktopPlugin {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UpdateTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteDesktopPlugin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptopology: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateTopology(this, ::windows_core::from_raw_borrowed(&ptopology)).into())
        }
        IMFRemoteDesktopPlugin_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, UpdateTopology: UpdateTopology::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFRemoteProxy_Impl: ::windows_core::BaseImpl {
    fn GetRemoteObject(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetRemoteHost(this: &Self::This, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFRemoteProxy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteProxy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFRemoteProxy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRemoteObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteProxy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRemoteObject(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        unsafe extern "system" fn GetRemoteHost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFRemoteProxy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, riid: *const ::windows_core::GUID, ppv: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRemoteHost(this, ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppv)).into())
        }
        IMFRemoteProxy_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRemoteObject: GetRemoteObject::<Identity, Impl, OFFSET>,
            GetRemoteHost: GetRemoteHost::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSAMIStyle_Impl: ::windows_core::BaseImpl {
    fn GetStyleCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStyles(this: &Self::This) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
    fn SetSelectedStyle(this: &Self::This, pwszstyle: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetSelectedStyle(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSAMIStyle {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSAMIStyle_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSAMIStyle {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStyleCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSAMIStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStyleCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStyles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSAMIStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppropvarstylearray: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStyles(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropvarstylearray, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSelectedStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSAMIStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszstyle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSelectedStyle(this, ::core::mem::transmute(&pwszstyle)).into())
        }
        unsafe extern "system" fn GetSelectedStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSAMIStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwszstyle: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectedStyle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwszstyle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSAMIStyle_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStyleCount: GetStyleCount::<Identity, Impl, OFFSET>,
            GetStyles: GetStyles::<Identity, Impl, OFFSET>,
            SetSelectedStyle: SetSelectedStyle::<Identity, Impl, OFFSET>,
            GetSelectedStyle: GetSelectedStyle::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFSSLCertificateManager_Impl: ::windows_core::BaseImpl {
    fn GetClientCertificate(this: &Self::This, pszurl: &::windows_core::PCWSTR, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows_core::Result<()>;
    fn BeginGetClientCertificate(this: &Self::This, pszurl: &::windows_core::PCWSTR, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndGetClientCertificate(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows_core::Result<()>;
    fn GetCertificatePolicy(this: &Self::This, pszurl: &::windows_core::PCWSTR, pfoverrideautomaticcheck: *mut super::super::Foundation::BOOL, pfclientcertificateavailable: *mut super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn OnServerCertificate(this: &Self::This, pszurl: &::windows_core::PCWSTR, pbdata: *const u8, cbdata: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFSSLCertificateManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSSLCertificateManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSSLCertificateManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetClientCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSSLCertificateManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetClientCertificate(this, ::core::mem::transmute(&pszurl), ::core::mem::transmute_copy(&ppbdata), ::core::mem::transmute_copy(&pcbdata)).into())
        }
        unsafe extern "system" fn BeginGetClientCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSSLCertificateManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginGetClientCertificate(this, ::core::mem::transmute(&pszurl), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndGetClientCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSSLCertificateManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, ppbdata: *mut *mut u8, pcbdata: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndGetClientCertificate(this, ::windows_core::from_raw_borrowed(&presult), ::core::mem::transmute_copy(&ppbdata), ::core::mem::transmute_copy(&pcbdata)).into())
        }
        unsafe extern "system" fn GetCertificatePolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSSLCertificateManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pfoverrideautomaticcheck: *mut super::super::Foundation::BOOL, pfclientcertificateavailable: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCertificatePolicy(this, ::core::mem::transmute(&pszurl), ::core::mem::transmute_copy(&pfoverrideautomaticcheck), ::core::mem::transmute_copy(&pfclientcertificateavailable)).into())
        }
        unsafe extern "system" fn OnServerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSSLCertificateManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszurl: ::windows_core::PCWSTR, pbdata: *const u8, cbdata: u32, pfisgood: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OnServerCertificate(this, ::core::mem::transmute(&pszurl), ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&cbdata)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfisgood, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSSLCertificateManager_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetClientCertificate: GetClientCertificate::<Identity, Impl, OFFSET>,
            BeginGetClientCertificate: BeginGetClientCertificate::<Identity, Impl, OFFSET>,
            EndGetClientCertificate: EndGetClientCertificate::<Identity, Impl, OFFSET>,
            GetCertificatePolicy: GetCertificatePolicy::<Identity, Impl, OFFSET>,
            OnServerCertificate: OnServerCertificate::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSample_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetSampleFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetSampleFlags(this: &Self::This, dwsampleflags: u32) -> ::windows_core::Result<()>;
    fn GetSampleTime(this: &Self::This) -> ::windows_core::Result<i64>;
    fn SetSampleTime(this: &Self::This, hnssampletime: i64) -> ::windows_core::Result<()>;
    fn GetSampleDuration(this: &Self::This) -> ::windows_core::Result<i64>;
    fn SetSampleDuration(this: &Self::This, hnssampleduration: i64) -> ::windows_core::Result<()>;
    fn GetBufferCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBufferByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFMediaBuffer>;
    fn ConvertToContiguousBuffer(this: &Self::This) -> ::windows_core::Result<IMFMediaBuffer>;
    fn AddBuffer(this: &Self::This, pbuffer: ::core::option::Option<&IMFMediaBuffer>) -> ::windows_core::Result<()>;
    fn RemoveBufferByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<()>;
    fn RemoveAllBuffers(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetTotalLength(this: &Self::This) -> ::windows_core::Result<u32>;
    fn CopyToBuffer(this: &Self::This, pbuffer: ::core::option::Option<&IMFMediaBuffer>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSample {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSample {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSampleFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwsampleflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSampleFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwsampleflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSampleFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsampleflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSampleFlags(this, ::core::mem::transmute_copy(&dwsampleflags)).into())
        }
        unsafe extern "system" fn GetSampleTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phnssampletime: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSampleTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phnssampletime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSampleTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssampletime: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSampleTime(this, ::core::mem::transmute_copy(&hnssampletime)).into())
        }
        unsafe extern "system" fn GetSampleDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phnssampleduration: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSampleDuration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phnssampleduration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSampleDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnssampleduration: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSampleDuration(this, ::core::mem::transmute_copy(&hnssampleduration)).into())
        }
        unsafe extern "system" fn GetBufferCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwbuffercount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBufferCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwbuffercount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBufferByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppbuffer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBufferByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbuffer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ConvertToContiguousBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbuffer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConvertToContiguousBuffer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbuffer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuffer: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddBuffer(this, ::windows_core::from_raw_borrowed(&pbuffer)).into())
        }
        unsafe extern "system" fn RemoveBufferByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveBufferByIndex(this, ::core::mem::transmute_copy(&dwindex)).into())
        }
        unsafe extern "system" fn RemoveAllBuffers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllBuffers(this).into())
        }
        unsafe extern "system" fn GetTotalLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbtotallength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTotalLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbtotallength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CopyToBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuffer: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CopyToBuffer(this, ::windows_core::from_raw_borrowed(&pbuffer)).into())
        }
        IMFSample_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSampleFlags: GetSampleFlags::<Identity, Impl, OFFSET>,
            SetSampleFlags: SetSampleFlags::<Identity, Impl, OFFSET>,
            GetSampleTime: GetSampleTime::<Identity, Impl, OFFSET>,
            SetSampleTime: SetSampleTime::<Identity, Impl, OFFSET>,
            GetSampleDuration: GetSampleDuration::<Identity, Impl, OFFSET>,
            SetSampleDuration: SetSampleDuration::<Identity, Impl, OFFSET>,
            GetBufferCount: GetBufferCount::<Identity, Impl, OFFSET>,
            GetBufferByIndex: GetBufferByIndex::<Identity, Impl, OFFSET>,
            ConvertToContiguousBuffer: ConvertToContiguousBuffer::<Identity, Impl, OFFSET>,
            AddBuffer: AddBuffer::<Identity, Impl, OFFSET>,
            RemoveBufferByIndex: RemoveBufferByIndex::<Identity, Impl, OFFSET>,
            RemoveAllBuffers: RemoveAllBuffers::<Identity, Impl, OFFSET>,
            GetTotalLength: GetTotalLength::<Identity, Impl, OFFSET>,
            CopyToBuffer: CopyToBuffer::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSampleAllocatorControl_Impl: ::windows_core::BaseImpl {
    fn SetDefaultAllocator(this: &Self::This, dwoutputstreamid: u32, pallocator: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetAllocatorUsage(this: &Self::This, dwoutputstreamid: u32, pdwinputstreamid: *mut u32, peusage: *mut MFSampleAllocatorUsage) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSampleAllocatorControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleAllocatorControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSampleAllocatorControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDefaultAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleAllocatorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, pallocator: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultAllocator(this, ::core::mem::transmute_copy(&dwoutputstreamid), ::windows_core::from_raw_borrowed(&pallocator)).into())
        }
        unsafe extern "system" fn GetAllocatorUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleAllocatorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, pdwinputstreamid: *mut u32, peusage: *mut MFSampleAllocatorUsage) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAllocatorUsage(this, ::core::mem::transmute_copy(&dwoutputstreamid), ::core::mem::transmute_copy(&pdwinputstreamid), ::core::mem::transmute_copy(&peusage)).into())
        }
        IMFSampleAllocatorControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDefaultAllocator: SetDefaultAllocator::<Identity, Impl, OFFSET>,
            GetAllocatorUsage: GetAllocatorUsage::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSampleGrabberSinkCallback_Impl: ::windows_core::BaseImpl + IMFClockStateSink_Impl {
    fn OnSetPresentationClock(this: &Self::This, ppresentationclock: ::core::option::Option<&IMFPresentationClock>) -> ::windows_core::Result<()>;
    fn OnProcessSample(this: &Self::This, guidmajormediatype: *const ::windows_core::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32) -> ::windows_core::Result<()>;
    fn OnShutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSampleGrabberSinkCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFClockStateSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleGrabberSinkCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSampleGrabberSinkCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnSetPresentationClock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleGrabberSinkCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppresentationclock: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSetPresentationClock(this, ::windows_core::from_raw_borrowed(&ppresentationclock)).into())
        }
        unsafe extern "system" fn OnProcessSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleGrabberSinkCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidmajormediatype: *const ::windows_core::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnProcessSample(this, ::core::mem::transmute_copy(&guidmajormediatype), ::core::mem::transmute_copy(&dwsampleflags), ::core::mem::transmute_copy(&llsampletime), ::core::mem::transmute_copy(&llsampleduration), ::core::mem::transmute_copy(&psamplebuffer), ::core::mem::transmute_copy(&dwsamplesize)).into())
        }
        unsafe extern "system" fn OnShutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleGrabberSinkCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnShutdown(this).into())
        }
        IMFSampleGrabberSinkCallback_Vtbl {
            base__: <IMFClockStateSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnSetPresentationClock: OnSetPresentationClock::<Identity, Impl, OFFSET>,
            OnProcessSample: OnProcessSample::<Identity, Impl, OFFSET>,
            OnShutdown: OnShutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSampleGrabberSinkCallback2_Impl: ::windows_core::BaseImpl + IMFSampleGrabberSinkCallback_Impl {
    fn OnProcessSampleEx(this: &Self::This, guidmajormediatype: *const ::windows_core::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32, pattributes: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSampleGrabberSinkCallback2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFSampleGrabberSinkCallback);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleGrabberSinkCallback2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSampleGrabberSinkCallback2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnProcessSampleEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleGrabberSinkCallback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidmajormediatype: *const ::windows_core::GUID, dwsampleflags: u32, llsampletime: i64, llsampleduration: i64, psamplebuffer: *const u8, dwsamplesize: u32, pattributes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnProcessSampleEx(this, ::core::mem::transmute_copy(&guidmajormediatype), ::core::mem::transmute_copy(&dwsampleflags), ::core::mem::transmute_copy(&llsampletime), ::core::mem::transmute_copy(&llsampleduration), ::core::mem::transmute_copy(&psamplebuffer), ::core::mem::transmute_copy(&dwsamplesize), ::windows_core::from_raw_borrowed(&pattributes)).into())
        }
        IMFSampleGrabberSinkCallback2_Vtbl {
            base__: <IMFSampleGrabberSinkCallback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnProcessSampleEx: OnProcessSampleEx::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSampleOutputStream_Impl: ::windows_core::BaseImpl {
    fn BeginWriteSample(this: &Self::This, psample: ::core::option::Option<&IMFSample>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndWriteSample(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSampleOutputStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleOutputStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSampleOutputStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginWriteSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleOutputStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psample: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginWriteSample(this, ::windows_core::from_raw_borrowed(&psample), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndWriteSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleOutputStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndWriteSample(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleOutputStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IMFSampleOutputStream_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginWriteSample: BeginWriteSample::<Identity, Impl, OFFSET>,
            EndWriteSample: EndWriteSample::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSampleProtection_Impl: ::windows_core::BaseImpl {
    fn GetInputProtectionVersion(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOutputProtectionVersion(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProtectionCertificate(this: &Self::This, dwversion: u32, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows_core::Result<()>;
    fn InitOutputProtection(this: &Self::This, dwversion: u32, dwoutputid: u32, pbcert: *const u8, cbcert: u32, ppbseed: *mut *mut u8, pcbseed: *mut u32) -> ::windows_core::Result<()>;
    fn InitInputProtection(this: &Self::This, dwversion: u32, dwinputid: u32, pbseed: *const u8, cbseed: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSampleProtection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleProtection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSampleProtection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInputProtectionVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleProtection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversion: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputProtectionVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversion, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputProtectionVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleProtection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversion: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputProtectionVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversion, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtectionCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleProtection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwversion: u32, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProtectionCertificate(this, ::core::mem::transmute_copy(&dwversion), ::core::mem::transmute_copy(&ppcert), ::core::mem::transmute_copy(&pcbcert)).into())
        }
        unsafe extern "system" fn InitOutputProtection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleProtection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwversion: u32, dwoutputid: u32, pbcert: *const u8, cbcert: u32, ppbseed: *mut *mut u8, pcbseed: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitOutputProtection(this, ::core::mem::transmute_copy(&dwversion), ::core::mem::transmute_copy(&dwoutputid), ::core::mem::transmute_copy(&pbcert), ::core::mem::transmute_copy(&cbcert), ::core::mem::transmute_copy(&ppbseed), ::core::mem::transmute_copy(&pcbseed)).into())
        }
        unsafe extern "system" fn InitInputProtection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSampleProtection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwversion: u32, dwinputid: u32, pbseed: *const u8, cbseed: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitInputProtection(this, ::core::mem::transmute_copy(&dwversion), ::core::mem::transmute_copy(&dwinputid), ::core::mem::transmute_copy(&pbseed), ::core::mem::transmute_copy(&cbseed)).into())
        }
        IMFSampleProtection_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInputProtectionVersion: GetInputProtectionVersion::<Identity, Impl, OFFSET>,
            GetOutputProtectionVersion: GetOutputProtectionVersion::<Identity, Impl, OFFSET>,
            GetProtectionCertificate: GetProtectionCertificate::<Identity, Impl, OFFSET>,
            InitOutputProtection: InitOutputProtection::<Identity, Impl, OFFSET>,
            InitInputProtection: InitInputProtection::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSaveJob_Impl: ::windows_core::BaseImpl {
    fn BeginSave(this: &Self::This, pstream: ::core::option::Option<&IMFByteStream>, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndSave(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn CancelSave(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetProgress(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFSaveJob {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSaveJob_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSaveJob {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginSave<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSaveJob_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstream: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginSave(this, ::windows_core::from_raw_borrowed(&pstream), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndSave<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSaveJob_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndSave(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn CancelSave<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSaveJob_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelSave(this).into())
        }
        unsafe extern "system" fn GetProgress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSaveJob_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwpercentcomplete: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProgress(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwpercentcomplete, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSaveJob_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginSave: BeginSave::<Identity, Impl, OFFSET>,
            EndSave: EndSave::<Identity, Impl, OFFSET>,
            CancelSave: CancelSave::<Identity, Impl, OFFSET>,
            GetProgress: GetProgress::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFSchemeHandler_Impl: ::windows_core::BaseImpl {
    fn BeginCreateObject(this: &Self::This, pwszurl: &::windows_core::PCWSTR, dwflags: u32, pprops: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>, ppiunknowncancelcookie: *mut ::core::option::Option<::windows_core::IUnknown>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndCreateObject(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn CancelObjectCreation(this: &Self::This, piunknowncancelcookie: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFSchemeHandler {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSchemeHandler_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSchemeHandler {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSchemeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, dwflags: u32, pprops: *mut ::core::ffi::c_void, ppiunknowncancelcookie: *mut *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginCreateObject(this, ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pprops), ::core::mem::transmute_copy(&ppiunknowncancelcookie), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndCreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSchemeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndCreateObject(this, ::windows_core::from_raw_borrowed(&presult), ::core::mem::transmute_copy(&pobjecttype), ::core::mem::transmute_copy(&ppobject)).into())
        }
        unsafe extern "system" fn CancelObjectCreation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSchemeHandler_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piunknowncancelcookie: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelObjectCreation(this, ::windows_core::from_raw_borrowed(&piunknowncancelcookie)).into())
        }
        IMFSchemeHandler_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginCreateObject: BeginCreateObject::<Identity, Impl, OFFSET>,
            EndCreateObject: EndCreateObject::<Identity, Impl, OFFSET>,
            CancelObjectCreation: CancelObjectCreation::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSecureBuffer_Impl: ::windows_core::BaseImpl {
    fn GetIdentifier(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
impl ::windows_core::Iids for IMFSecureBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSecureBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSecureBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSecureBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguididentifier: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIdentifier(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguididentifier, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSecureBuffer_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetIdentifier: GetIdentifier::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFSecureChannel_Impl: ::windows_core::BaseImpl {
    fn GetCertificate(this: &Self::This, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows_core::Result<()>;
    fn SetupSession(this: &Self::This, pbencryptedsessionkey: *const u8, cbsessionkey: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSecureChannel {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSecureChannel_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSecureChannel {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSecureChannel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcert: *mut *mut u8, pcbcert: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCertificate(this, ::core::mem::transmute_copy(&ppcert), ::core::mem::transmute_copy(&pcbcert)).into())
        }
        unsafe extern "system" fn SetupSession<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSecureChannel_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbencryptedsessionkey: *const u8, cbsessionkey: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetupSession(this, ::core::mem::transmute_copy(&pbencryptedsessionkey), ::core::mem::transmute_copy(&cbsessionkey)).into())
        }
        IMFSecureChannel_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCertificate: GetCertificate::<Identity, Impl, OFFSET>,
            SetupSession: SetupSession::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSeekInfo_Impl: ::windows_core::BaseImpl {
    fn GetNearestKeyFrames(this: &Self::This, pguidtimeformat: *const ::windows_core::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pvarpreviouskeyframe: *mut super::super::System::Com::StructuredStorage::PROPVARIANT, pvarnextkeyframe: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSeekInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSeekInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSeekInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNearestKeyFrames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSeekInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidtimeformat: *const ::windows_core::GUID, pvarstartposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pvarpreviouskeyframe: *mut super::super::System::Com::StructuredStorage::PROPVARIANT, pvarnextkeyframe: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNearestKeyFrames(this, ::core::mem::transmute_copy(&pguidtimeformat), ::core::mem::transmute_copy(&pvarstartposition), ::core::mem::transmute_copy(&pvarpreviouskeyframe), ::core::mem::transmute_copy(&pvarnextkeyframe)).into())
        }
        IMFSeekInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNearestKeyFrames: GetNearestKeyFrames::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorActivitiesReport_Impl: ::windows_core::BaseImpl {
    fn GetCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetActivityReport(this: &Self::This, index: u32) -> ::windows_core::Result<IMFSensorActivityReport>;
    fn GetActivityReportByDeviceName(this: &Self::This, symbolicname: &::windows_core::PCWSTR) -> ::windows_core::Result<IMFSensorActivityReport>;
}
impl ::windows_core::Iids for IMFSensorActivitiesReport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivitiesReport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorActivitiesReport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivitiesReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pccount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pccount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetActivityReport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivitiesReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, sensoractivityreport: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActivityReport(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sensoractivityreport, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetActivityReportByDeviceName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivitiesReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symbolicname: ::windows_core::PCWSTR, sensoractivityreport: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActivityReportByDeviceName(this, ::core::mem::transmute(&symbolicname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sensoractivityreport, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorActivitiesReport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetActivityReport: GetActivityReport::<Identity, Impl, OFFSET>,
            GetActivityReportByDeviceName: GetActivityReportByDeviceName::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorActivitiesReportCallback_Impl: ::windows_core::BaseImpl {
    fn OnActivitiesReport(this: &Self::This, sensoractivitiesreport: ::core::option::Option<&IMFSensorActivitiesReport>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSensorActivitiesReportCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivitiesReportCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorActivitiesReportCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnActivitiesReport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivitiesReportCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sensoractivitiesreport: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnActivitiesReport(this, ::windows_core::from_raw_borrowed(&sensoractivitiesreport)).into())
        }
        IMFSensorActivitiesReportCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnActivitiesReport: OnActivitiesReport::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorActivityMonitor_Impl: ::windows_core::BaseImpl {
    fn Start(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSensorActivityMonitor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityMonitor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorActivityMonitor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        IMFSensorActivityMonitor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorActivityReport_Impl: ::windows_core::BaseImpl {
    fn GetFriendlyName(this: &Self::This, friendlyname: ::windows_core::PWSTR, cchfriendlyname: u32, pcchwritten: *mut u32) -> ::windows_core::Result<()>;
    fn GetSymbolicLink(this: &Self::This, symboliclink: ::windows_core::PWSTR, cchsymboliclink: u32, pcchwritten: *mut u32) -> ::windows_core::Result<()>;
    fn GetProcessCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetProcessActivity(this: &Self::This, index: u32) -> ::windows_core::Result<IMFSensorProcessActivity>;
}
impl ::windows_core::Iids for IMFSensorActivityReport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityReport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorActivityReport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, friendlyname: ::windows_core::PWSTR, cchfriendlyname: u32, pcchwritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFriendlyName(this, ::core::mem::transmute_copy(&friendlyname), ::core::mem::transmute_copy(&cchfriendlyname), ::core::mem::transmute_copy(&pcchwritten)).into())
        }
        unsafe extern "system" fn GetSymbolicLink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symboliclink: ::windows_core::PWSTR, cchsymboliclink: u32, pcchwritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolicLink(this, ::core::mem::transmute_copy(&symboliclink), ::core::mem::transmute_copy(&cchsymboliclink), ::core::mem::transmute_copy(&pcchwritten)).into())
        }
        unsafe extern "system" fn GetProcessCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pccount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pccount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessActivity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorActivityReport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, ppprocessactivity: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessActivity(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppprocessactivity, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorActivityReport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFriendlyName: GetFriendlyName::<Identity, Impl, OFFSET>,
            GetSymbolicLink: GetSymbolicLink::<Identity, Impl, OFFSET>,
            GetProcessCount: GetProcessCount::<Identity, Impl, OFFSET>,
            GetProcessActivity: GetProcessActivity::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorDevice_Impl: ::windows_core::BaseImpl {
    fn GetDeviceId(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetDeviceType(this: &Self::This) -> ::windows_core::Result<MFSensorDeviceType>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetSymbolicLink(this: &Self::This, symboliclink: ::windows_core::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows_core::Result<()>;
    fn GetDeviceAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn GetStreamAttributesCount(this: &Self::This, etype: MFSensorStreamType) -> ::windows_core::Result<u32>;
    fn GetStreamAttributes(this: &Self::This, etype: MFSensorStreamType, dwindex: u32) -> ::windows_core::Result<IMFAttributes>;
    fn SetSensorDeviceMode(this: &Self::This, emode: MFSensorDeviceMode) -> ::windows_core::Result<()>;
    fn GetSensorDeviceMode(this: &Self::This) -> ::windows_core::Result<MFSensorDeviceMode>;
}
impl ::windows_core::Iids for IMFSensorDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorDevice {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDeviceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdeviceid: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDeviceId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdeviceid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDeviceType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptype: *mut MFSensorDeviceType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDeviceType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflags: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolicLink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symboliclink: ::windows_core::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolicLink(this, ::core::mem::transmute_copy(&symboliclink), ::core::mem::transmute_copy(&cchsymboliclink), ::core::mem::transmute_copy(&pcchwritten)).into())
        }
        unsafe extern "system" fn GetDeviceAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDeviceAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamAttributesCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, etype: MFSensorStreamType, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamAttributesCount(this, ::core::mem::transmute_copy(&etype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, etype: MFSensorStreamType, dwindex: u32, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamAttributes(this, ::core::mem::transmute_copy(&etype), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSensorDeviceMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emode: MFSensorDeviceMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSensorDeviceMode(this, ::core::mem::transmute_copy(&emode)).into())
        }
        unsafe extern "system" fn GetSensorDeviceMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pemode: *mut MFSensorDeviceMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSensorDeviceMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pemode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorDevice_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDeviceId: GetDeviceId::<Identity, Impl, OFFSET>,
            GetDeviceType: GetDeviceType::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            GetSymbolicLink: GetSymbolicLink::<Identity, Impl, OFFSET>,
            GetDeviceAttributes: GetDeviceAttributes::<Identity, Impl, OFFSET>,
            GetStreamAttributesCount: GetStreamAttributesCount::<Identity, Impl, OFFSET>,
            GetStreamAttributes: GetStreamAttributes::<Identity, Impl, OFFSET>,
            SetSensorDeviceMode: SetSensorDeviceMode::<Identity, Impl, OFFSET>,
            GetSensorDeviceMode: GetSensorDeviceMode::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorGroup_Impl: ::windows_core::BaseImpl {
    fn GetSymbolicLink(this: &Self::This, symboliclink: ::windows_core::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetSensorGroupAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn GetSensorDeviceCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetSensorDevice(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFSensorDevice>;
    fn SetDefaultSensorDeviceIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<()>;
    fn GetDefaultSensorDeviceIndex(this: &Self::This) -> ::windows_core::Result<u32>;
    fn CreateMediaSource(this: &Self::This) -> ::windows_core::Result<IMFMediaSource>;
}
impl ::windows_core::Iids for IMFSensorGroup {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorGroup {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSymbolicLink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, symboliclink: ::windows_core::PWSTR, cchsymboliclink: i32, pcchwritten: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSymbolicLink(this, ::core::mem::transmute_copy(&symboliclink), ::core::mem::transmute_copy(&cchsymboliclink), ::core::mem::transmute_copy(&pcchwritten)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflags: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSensorGroupAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSensorGroupAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSensorDeviceCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSensorDeviceCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSensorDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdevice: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSensorDevice(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdevice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultSensorDeviceIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultSensorDeviceIndex(this, ::core::mem::transmute_copy(&dwindex)).into())
        }
        unsafe extern "system" fn GetDefaultSensorDeviceIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultSensorDeviceIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateMediaSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorGroup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateMediaSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorGroup_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSymbolicLink: GetSymbolicLink::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            GetSensorGroupAttributes: GetSensorGroupAttributes::<Identity, Impl, OFFSET>,
            GetSensorDeviceCount: GetSensorDeviceCount::<Identity, Impl, OFFSET>,
            GetSensorDevice: GetSensorDevice::<Identity, Impl, OFFSET>,
            SetDefaultSensorDeviceIndex: SetDefaultSensorDeviceIndex::<Identity, Impl, OFFSET>,
            GetDefaultSensorDeviceIndex: GetDefaultSensorDeviceIndex::<Identity, Impl, OFFSET>,
            CreateMediaSource: CreateMediaSource::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFSensorProcessActivity_Impl: ::windows_core::BaseImpl {
    fn GetProcessId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStreamingState(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetStreamingMode(this: &Self::This) -> ::windows_core::Result<MFSensorDeviceMode>;
    fn GetReportTime(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::FILETIME>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFSensorProcessActivity {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProcessActivity_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorProcessActivity {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProcessId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProcessActivity_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamingState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProcessActivity_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfstreaming: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamingState(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfstreaming, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamingMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProcessActivity_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmode: *mut MFSensorDeviceMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamingMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReportTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProcessActivity_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pft: *mut super::super::Foundation::FILETIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReportTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pft, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorProcessActivity_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProcessId: GetProcessId::<Identity, Impl, OFFSET>,
            GetStreamingState: GetStreamingState::<Identity, Impl, OFFSET>,
            GetStreamingMode: GetStreamingMode::<Identity, Impl, OFFSET>,
            GetReportTime: GetReportTime::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFSensorProfile_Impl: ::windows_core::BaseImpl {
    fn GetProfileId(this: &Self::This, pid: *mut SENSORPROFILEID) -> ::windows_core::Result<()>;
    fn AddProfileFilter(this: &Self::This, streamid: u32, wzfiltersetstring: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn IsMediaTypeSupported(this: &Self::This, streamid: u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn AddBlockedControl(this: &Self::This, wzblockedcontrol: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFSensorProfile {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfile_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorProfile {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProfileId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: *mut SENSORPROFILEID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProfileId(this, ::core::mem::transmute_copy(&pid)).into())
        }
        unsafe extern "system" fn AddProfileFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streamid: u32, wzfiltersetstring: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProfileFilter(this, ::core::mem::transmute_copy(&streamid), ::core::mem::transmute(&wzfiltersetstring)).into())
        }
        unsafe extern "system" fn IsMediaTypeSupported<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streamid: u32, pmediatype: *mut ::core::ffi::c_void, pfsupported: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsMediaTypeSupported(this, ::core::mem::transmute_copy(&streamid), ::windows_core::from_raw_borrowed(&pmediatype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfsupported, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddBlockedControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wzblockedcontrol: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddBlockedControl(this, ::core::mem::transmute(&wzblockedcontrol)).into())
        }
        IMFSensorProfile_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProfileId: GetProfileId::<Identity, Impl, OFFSET>,
            AddProfileFilter: AddProfileFilter::<Identity, Impl, OFFSET>,
            IsMediaTypeSupported: IsMediaTypeSupported::<Identity, Impl, OFFSET>,
            AddBlockedControl: AddBlockedControl::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorProfileCollection_Impl: ::windows_core::BaseImpl {
    fn GetProfileCount(this: &Self::This) -> u32;
    fn GetProfile(this: &Self::This, index: u32) -> ::windows_core::Result<IMFSensorProfile>;
    fn AddProfile(this: &Self::This, pprofile: ::core::option::Option<&IMFSensorProfile>) -> ::windows_core::Result<()>;
    fn FindProfile(this: &Self::This, profileid: *const SENSORPROFILEID) -> ::windows_core::Result<IMFSensorProfile>;
    fn RemoveProfileByIndex(this: &Self::This, index: u32);
    fn RemoveProfile(this: &Self::This, profileid: *const SENSORPROFILEID);
}
impl ::windows_core::Iids for IMFSensorProfileCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorProfileCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProfileCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProfileCount(this))
        }
        unsafe extern "system" fn GetProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, ppprofile: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProfile(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppprofile, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprofile: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProfile(this, ::windows_core::from_raw_borrowed(&pprofile)).into())
        }
        unsafe extern "system" fn FindProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, profileid: *const SENSORPROFILEID, ppprofile: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindProfile(this, ::core::mem::transmute_copy(&profileid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppprofile, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveProfileByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProfileByIndex(this, ::core::mem::transmute_copy(&index)))
        }
        unsafe extern "system" fn RemoveProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorProfileCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, profileid: *const SENSORPROFILEID) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveProfile(this, ::core::mem::transmute_copy(&profileid)))
        }
        IMFSensorProfileCollection_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProfileCount: GetProfileCount::<Identity, Impl, OFFSET>,
            GetProfile: GetProfile::<Identity, Impl, OFFSET>,
            AddProfile: AddProfile::<Identity, Impl, OFFSET>,
            FindProfile: FindProfile::<Identity, Impl, OFFSET>,
            RemoveProfileByIndex: RemoveProfileByIndex::<Identity, Impl, OFFSET>,
            RemoveProfile: RemoveProfile::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSensorStream_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetMediaTypeCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMediaType(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn CloneSensorStream(this: &Self::This) -> ::windows_core::Result<IMFSensorStream>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSensorStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMediaTypeCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaTypeCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaType(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CloneSensorStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CloneSensorStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorStream_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMediaTypeCount: GetMediaTypeCount::<Identity, Impl, OFFSET>,
            GetMediaType: GetMediaType::<Identity, Impl, OFFSET>,
            CloneSensorStream: CloneSensorStream::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSensorTransformFactory_Impl: ::windows_core::BaseImpl {
    fn GetFactoryAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn InitializeFactory(this: &Self::This, dwmaxtransformcount: u32, psensordevices: ::core::option::Option<&IMFCollection>, pattributes: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn GetTransformCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTransformInformation(this: &Self::This, transformindex: u32, pguidtransformid: *mut ::windows_core::GUID, ppattributes: *mut ::core::option::Option<IMFAttributes>, ppstreaminformation: *mut ::core::option::Option<IMFCollection>) -> ::windows_core::Result<()>;
    fn CreateTransform(this: &Self::This, guidsensortransformid: *const ::windows_core::GUID, pattributes: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<IMFDeviceTransform>;
}
impl ::windows_core::Iids for IMFSensorTransformFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorTransformFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSensorTransformFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFactoryAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorTransformFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFactoryAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InitializeFactory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorTransformFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmaxtransformcount: u32, psensordevices: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFactory(this, ::core::mem::transmute_copy(&dwmaxtransformcount), ::windows_core::from_raw_borrowed(&psensordevices), ::windows_core::from_raw_borrowed(&pattributes)).into())
        }
        unsafe extern "system" fn GetTransformCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorTransformFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransformCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransformInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorTransformFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, transformindex: u32, pguidtransformid: *mut ::windows_core::GUID, ppattributes: *mut *mut ::core::ffi::c_void, ppstreaminformation: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTransformInformation(this, ::core::mem::transmute_copy(&transformindex), ::core::mem::transmute_copy(&pguidtransformid), ::core::mem::transmute_copy(&ppattributes), ::core::mem::transmute_copy(&ppstreaminformation)).into())
        }
        unsafe extern "system" fn CreateTransform<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSensorTransformFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidsensortransformid: *const ::windows_core::GUID, pattributes: *mut ::core::ffi::c_void, ppdevicemft: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTransform(this, ::core::mem::transmute_copy(&guidsensortransformid), ::windows_core::from_raw_borrowed(&pattributes)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdevicemft, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSensorTransformFactory_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFactoryAttributes: GetFactoryAttributes::<Identity, Impl, OFFSET>,
            InitializeFactory: InitializeFactory::<Identity, Impl, OFFSET>,
            GetTransformCount: GetTransformCount::<Identity, Impl, OFFSET>,
            GetTransformInformation: GetTransformInformation::<Identity, Impl, OFFSET>,
            CreateTransform: CreateTransform::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSequencerSource_Impl: ::windows_core::BaseImpl {
    fn AppendTopology(this: &Self::This, ptopology: ::core::option::Option<&IMFTopology>, dwflags: u32) -> ::windows_core::Result<u32>;
    fn DeleteTopology(this: &Self::This, dwid: u32) -> ::windows_core::Result<()>;
    fn GetPresentationContext(this: &Self::This, ppd: ::core::option::Option<&IMFPresentationDescriptor>, pid: *mut u32, pptopology: *mut ::core::option::Option<IMFTopology>) -> ::windows_core::Result<()>;
    fn UpdateTopology(this: &Self::This, dwid: u32, ptopology: ::core::option::Option<&IMFTopology>) -> ::windows_core::Result<()>;
    fn UpdateTopologyFlags(this: &Self::This, dwid: u32, dwflags: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSequencerSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSequencerSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSequencerSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AppendTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSequencerSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptopology: *mut ::core::ffi::c_void, dwflags: u32, pdwid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AppendTopology(this, ::windows_core::from_raw_borrowed(&ptopology), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSequencerSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteTopology(this, ::core::mem::transmute_copy(&dwid)).into())
        }
        unsafe extern "system" fn GetPresentationContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSequencerSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppd: *mut ::core::ffi::c_void, pid: *mut u32, pptopology: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPresentationContext(this, ::windows_core::from_raw_borrowed(&ppd), ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&pptopology)).into())
        }
        unsafe extern "system" fn UpdateTopology<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSequencerSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwid: u32, ptopology: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateTopology(this, ::core::mem::transmute_copy(&dwid), ::windows_core::from_raw_borrowed(&ptopology)).into())
        }
        unsafe extern "system" fn UpdateTopologyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSequencerSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwid: u32, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateTopologyFlags(this, ::core::mem::transmute_copy(&dwid), ::core::mem::transmute_copy(&dwflags)).into())
        }
        IMFSequencerSource_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AppendTopology: AppendTopology::<Identity, Impl, OFFSET>,
            DeleteTopology: DeleteTopology::<Identity, Impl, OFFSET>,
            GetPresentationContext: GetPresentationContext::<Identity, Impl, OFFSET>,
            UpdateTopology: UpdateTopology::<Identity, Impl, OFFSET>,
            UpdateTopologyFlags: UpdateTopologyFlags::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSharingEngineClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstance(this: &Self::This, dwflags: u32, pattr: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<::windows_core::IUnknown>;
}
impl ::windows_core::Iids for IMFSharingEngineClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSharingEngineClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSharingEngineClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSharingEngineClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pattr: *mut ::core::ffi::c_void, ppengine: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateInstance(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pattr)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppengine, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSharingEngineClassFactory_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateInstance: CreateInstance::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFShutdown_Impl: ::windows_core::BaseImpl {
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetShutdownStatus(this: &Self::This) -> ::windows_core::Result<MFSHUTDOWN_STATUS>;
}
impl ::windows_core::Iids for IMFShutdown {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFShutdown_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFShutdown {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFShutdown_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        unsafe extern "system" fn GetShutdownStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFShutdown_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatus: *mut MFSHUTDOWN_STATUS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetShutdownStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFShutdown_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
            GetShutdownStatus: GetShutdownStatus::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSignedLibrary_Impl: ::windows_core::BaseImpl {
    fn GetProcedureAddress(this: &Self::This, name: &::windows_core::PCSTR, address: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSignedLibrary {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSignedLibrary_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSignedLibrary {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProcedureAddress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSignedLibrary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCSTR, address: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProcedureAddress(this, ::core::mem::transmute(&name), ::core::mem::transmute_copy(&address)).into())
        }
        IMFSignedLibrary_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProcedureAddress: GetProcedureAddress::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFSimpleAudioVolume_Impl: ::windows_core::BaseImpl {
    fn SetMasterVolume(this: &Self::This, flevel: f32) -> ::windows_core::Result<()>;
    fn GetMasterVolume(this: &Self::This) -> ::windows_core::Result<f32>;
    fn SetMute(this: &Self::This, bmute: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetMute(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFSimpleAudioVolume {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSimpleAudioVolume_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSimpleAudioVolume {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMasterVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSimpleAudioVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flevel: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMasterVolume(this, ::core::mem::transmute_copy(&flevel)).into())
        }
        unsafe extern "system" fn GetMasterVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSimpleAudioVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflevel: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMasterVolume(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSimpleAudioVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bmute: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMute(this, ::core::mem::transmute_copy(&bmute)).into())
        }
        unsafe extern "system" fn GetMute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSimpleAudioVolume_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbmute: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMute(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbmute, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSimpleAudioVolume_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetMasterVolume: SetMasterVolume::<Identity, Impl, OFFSET>,
            GetMasterVolume: GetMasterVolume::<Identity, Impl, OFFSET>,
            SetMute: SetMute::<Identity, Impl, OFFSET>,
            GetMute: GetMute::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSinkWriter_Impl: ::windows_core::BaseImpl {
    fn AddStream(this: &Self::This, ptargetmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<u32>;
    fn SetInputMediaType(this: &Self::This, dwstreamindex: u32, pinputmediatype: ::core::option::Option<&IMFMediaType>, pencodingparameters: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn BeginWriting(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteSample(this: &Self::This, dwstreamindex: u32, psample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
    fn SendStreamTick(this: &Self::This, dwstreamindex: u32, lltimestamp: i64) -> ::windows_core::Result<()>;
    fn PlaceMarker(this: &Self::This, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn NotifyEndOfSegment(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<()>;
    fn Flush(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<()>;
    fn Finalize(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetServiceForStream(this: &Self::This, dwstreamindex: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetStatistics(this: &Self::This, dwstreamindex: u32, pstats: *mut MF_SINK_WRITER_STATISTICS) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSinkWriter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSinkWriter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptargetmediatype: *mut ::core::ffi::c_void, pdwstreamindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddStream(this, ::windows_core::from_raw_borrowed(&ptargetmediatype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pinputmediatype: *mut ::core::ffi::c_void, pencodingparameters: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputMediaType(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&pinputmediatype), ::windows_core::from_raw_borrowed(&pencodingparameters)).into())
        }
        unsafe extern "system" fn BeginWriting<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginWriting(this).into())
        }
        unsafe extern "system" fn WriteSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, psample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteSample(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&psample)).into())
        }
        unsafe extern "system" fn SendStreamTick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, lltimestamp: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SendStreamTick(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&lltimestamp)).into())
        }
        unsafe extern "system" fn PlaceMarker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlaceMarker(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&pvcontext)).into())
        }
        unsafe extern "system" fn NotifyEndOfSegment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyEndOfSegment(this, ::core::mem::transmute_copy(&dwstreamindex)).into())
        }
        unsafe extern "system" fn Flush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Flush(this, ::core::mem::transmute_copy(&dwstreamindex)).into())
        }
        unsafe extern "system" fn Finalize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Finalize(this).into())
        }
        unsafe extern "system" fn GetServiceForStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetServiceForStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&guidservice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        unsafe extern "system" fn GetStatistics<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pstats: *mut MF_SINK_WRITER_STATISTICS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStatistics(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&pstats)).into())
        }
        IMFSinkWriter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddStream: AddStream::<Identity, Impl, OFFSET>,
            SetInputMediaType: SetInputMediaType::<Identity, Impl, OFFSET>,
            BeginWriting: BeginWriting::<Identity, Impl, OFFSET>,
            WriteSample: WriteSample::<Identity, Impl, OFFSET>,
            SendStreamTick: SendStreamTick::<Identity, Impl, OFFSET>,
            PlaceMarker: PlaceMarker::<Identity, Impl, OFFSET>,
            NotifyEndOfSegment: NotifyEndOfSegment::<Identity, Impl, OFFSET>,
            Flush: Flush::<Identity, Impl, OFFSET>,
            Finalize: Finalize::<Identity, Impl, OFFSET>,
            GetServiceForStream: GetServiceForStream::<Identity, Impl, OFFSET>,
            GetStatistics: GetStatistics::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSinkWriterCallback_Impl: ::windows_core::BaseImpl {
    fn OnFinalize(this: &Self::This, hrstatus: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn OnMarker(this: &Self::This, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSinkWriterCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSinkWriterCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnFinalize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrstatus: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFinalize(this, ::core::mem::transmute_copy(&hrstatus)).into())
        }
        unsafe extern "system" fn OnMarker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pvcontext: *const ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnMarker(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&pvcontext)).into())
        }
        IMFSinkWriterCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnFinalize: OnFinalize::<Identity, Impl, OFFSET>,
            OnMarker: OnMarker::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSinkWriterCallback2_Impl: ::windows_core::BaseImpl + IMFSinkWriterCallback_Impl {
    fn OnTransformChange(this: &Self::This) -> ::windows_core::Result<()>;
    fn OnStreamError(this: &Self::This, dwstreamindex: u32, hrstatus: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSinkWriterCallback2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFSinkWriterCallback);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterCallback2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSinkWriterCallback2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnTransformChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterCallback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnTransformChange(this).into())
        }
        unsafe extern "system" fn OnStreamError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterCallback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, hrstatus: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnStreamError(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&hrstatus)).into())
        }
        IMFSinkWriterCallback2_Vtbl {
            base__: <IMFSinkWriterCallback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnTransformChange: OnTransformChange::<Identity, Impl, OFFSET>,
            OnStreamError: OnStreamError::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSinkWriterEncoderConfig_Impl: ::windows_core::BaseImpl {
    fn SetTargetMediaType(this: &Self::This, dwstreamindex: u32, ptargetmediatype: ::core::option::Option<&IMFMediaType>, pencodingparameters: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn PlaceEncodingParameters(this: &Self::This, dwstreamindex: u32, pencodingparameters: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSinkWriterEncoderConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterEncoderConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSinkWriterEncoderConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTargetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterEncoderConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, ptargetmediatype: *mut ::core::ffi::c_void, pencodingparameters: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTargetMediaType(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&ptargetmediatype), ::windows_core::from_raw_borrowed(&pencodingparameters)).into())
        }
        unsafe extern "system" fn PlaceEncodingParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterEncoderConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pencodingparameters: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlaceEncodingParameters(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&pencodingparameters)).into())
        }
        IMFSinkWriterEncoderConfig_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetTargetMediaType: SetTargetMediaType::<Identity, Impl, OFFSET>,
            PlaceEncodingParameters: PlaceEncodingParameters::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSinkWriterEx_Impl: ::windows_core::BaseImpl + IMFSinkWriter_Impl {
    fn GetTransformForStream(this: &Self::This, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows_core::GUID, pptransform: *mut ::core::option::Option<IMFTransform>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSinkWriterEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFSinkWriter);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSinkWriterEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTransformForStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSinkWriterEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows_core::GUID, pptransform: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTransformForStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwtransformindex), ::core::mem::transmute_copy(&pguidcategory), ::core::mem::transmute_copy(&pptransform)).into())
        }
        IMFSinkWriterEx_Vtbl {
            base__: <IMFSinkWriter as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTransformForStream: GetTransformForStream::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFSourceBuffer_Impl: ::windows_core::BaseImpl {
    fn GetUpdating(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetBuffered(this: &Self::This) -> ::windows_core::Result<IMFMediaTimeRange>;
    fn GetTimeStampOffset(this: &Self::This) -> f64;
    fn SetTimeStampOffset(this: &Self::This, offset: f64) -> ::windows_core::Result<()>;
    fn GetAppendWindowStart(this: &Self::This) -> f64;
    fn SetAppendWindowStart(this: &Self::This, time: f64) -> ::windows_core::Result<()>;
    fn GetAppendWindowEnd(this: &Self::This) -> f64;
    fn SetAppendWindowEnd(this: &Self::This, time: f64) -> ::windows_core::Result<()>;
    fn Append(this: &Self::This, pdata: *const u8, len: u32) -> ::windows_core::Result<()>;
    fn AppendByteStream(this: &Self::This, pstream: ::core::option::Option<&IMFByteStream>, pmaxlen: *const u64) -> ::windows_core::Result<()>;
    fn Abort(this: &Self::This) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, start: f64, end: f64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFSourceBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetUpdating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetUpdating(this))
        }
        unsafe extern "system" fn GetBuffered<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbuffered: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBuffered(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbuffered, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTimeStampOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTimeStampOffset(this))
        }
        unsafe extern "system" fn SetTimeStampOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTimeStampOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetAppendWindowStart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAppendWindowStart(this))
        }
        unsafe extern "system" fn SetAppendWindowStart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, time: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppendWindowStart(this, ::core::mem::transmute_copy(&time)).into())
        }
        unsafe extern "system" fn GetAppendWindowEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAppendWindowEnd(this))
        }
        unsafe extern "system" fn SetAppendWindowEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, time: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppendWindowEnd(this, ::core::mem::transmute_copy(&time)).into())
        }
        unsafe extern "system" fn Append<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdata: *const u8, len: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Append(this, ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&len)).into())
        }
        unsafe extern "system" fn AppendByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstream: *mut ::core::ffi::c_void, pmaxlen: *const u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendByteStream(this, ::windows_core::from_raw_borrowed(&pstream), ::core::mem::transmute_copy(&pmaxlen)).into())
        }
        unsafe extern "system" fn Abort<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Abort(this).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: f64, end: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&end)).into())
        }
        IMFSourceBuffer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetUpdating: GetUpdating::<Identity, Impl, OFFSET>,
            GetBuffered: GetBuffered::<Identity, Impl, OFFSET>,
            GetTimeStampOffset: GetTimeStampOffset::<Identity, Impl, OFFSET>,
            SetTimeStampOffset: SetTimeStampOffset::<Identity, Impl, OFFSET>,
            GetAppendWindowStart: GetAppendWindowStart::<Identity, Impl, OFFSET>,
            SetAppendWindowStart: SetAppendWindowStart::<Identity, Impl, OFFSET>,
            GetAppendWindowEnd: GetAppendWindowEnd::<Identity, Impl, OFFSET>,
            SetAppendWindowEnd: SetAppendWindowEnd::<Identity, Impl, OFFSET>,
            Append: Append::<Identity, Impl, OFFSET>,
            AppendByteStream: AppendByteStream::<Identity, Impl, OFFSET>,
            Abort: Abort::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSourceBufferAppendMode_Impl: ::windows_core::BaseImpl {
    fn GetAppendMode(this: &Self::This) -> MF_MSE_APPEND_MODE;
    fn SetAppendMode(this: &Self::This, mode: MF_MSE_APPEND_MODE) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSourceBufferAppendMode {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferAppendMode_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceBufferAppendMode {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAppendMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferAppendMode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_MSE_APPEND_MODE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAppendMode(this))
        }
        unsafe extern "system" fn SetAppendMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferAppendMode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mode: MF_MSE_APPEND_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAppendMode(this, ::core::mem::transmute_copy(&mode)).into())
        }
        IMFSourceBufferAppendMode_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAppendMode: GetAppendMode::<Identity, Impl, OFFSET>,
            SetAppendMode: SetAppendMode::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSourceBufferList_Impl: ::windows_core::BaseImpl {
    fn GetLength(this: &Self::This) -> u32;
    fn GetSourceBuffer(this: &Self::This, index: u32) -> ::core::option::Option<IMFSourceBuffer>;
}
impl ::windows_core::Iids for IMFSourceBufferList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceBufferList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLength(this))
        }
        unsafe extern "system" fn GetSourceBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::core::option::Option<IMFSourceBuffer> {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSourceBuffer(this, ::core::mem::transmute_copy(&index)))
        }
        IMFSourceBufferList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetSourceBuffer: GetSourceBuffer::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSourceBufferNotify_Impl: ::windows_core::BaseImpl {
    fn OnUpdateStart(this: &Self::This);
    fn OnAbort(this: &Self::This);
    fn OnError(this: &Self::This, hr: ::windows_core::HRESULT);
    fn OnUpdate(this: &Self::This);
    fn OnUpdateEnd(this: &Self::This);
}
impl ::windows_core::Iids for IMFSourceBufferNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceBufferNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnUpdateStart<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnUpdateStart(this))
        }
        unsafe extern "system" fn OnAbort<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnAbort(this))
        }
        unsafe extern "system" fn OnError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hr: ::windows_core::HRESULT) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnError(this, ::core::mem::transmute_copy(&hr)))
        }
        unsafe extern "system" fn OnUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnUpdate(this))
        }
        unsafe extern "system" fn OnUpdateEnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceBufferNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnUpdateEnd(this))
        }
        IMFSourceBufferNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnUpdateStart: OnUpdateStart::<Identity, Impl, OFFSET>,
            OnAbort: OnAbort::<Identity, Impl, OFFSET>,
            OnError: OnError::<Identity, Impl, OFFSET>,
            OnUpdate: OnUpdate::<Identity, Impl, OFFSET>,
            OnUpdateEnd: OnUpdateEnd::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSourceOpenMonitor_Impl: ::windows_core::BaseImpl {
    fn OnSourceEvent(this: &Self::This, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSourceOpenMonitor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceOpenMonitor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceOpenMonitor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnSourceEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceOpenMonitor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnSourceEvent(this, ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        IMFSourceOpenMonitor_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnSourceEvent: OnSourceEvent::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSourceReader_Impl: ::windows_core::BaseImpl {
    fn GetStreamSelection(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn SetStreamSelection(this: &Self::This, dwstreamindex: u32, fselected: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetNativeMediaType(this: &Self::This, dwstreamindex: u32, dwmediatypeindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetCurrentMediaType(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn SetCurrentMediaType(this: &Self::This, dwstreamindex: u32, pdwreserved: *const u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn SetCurrentPosition(this: &Self::This, guidtimeformat: *const ::windows_core::GUID, varposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn ReadSample(this: &Self::This, dwstreamindex: u32, dwcontrolflags: u32, pdwactualstreamindex: *mut u32, pdwstreamflags: *mut u32, plltimestamp: *mut i64, ppsample: *mut ::core::option::Option<IMFSample>) -> ::windows_core::Result<()>;
    fn Flush(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<()>;
    fn GetServiceForStream(this: &Self::This, dwstreamindex: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn GetPresentationAttribute(this: &Self::This, dwstreamindex: u32, guidattribute: *const ::windows_core::GUID) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSourceReader {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceReader {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pfselected: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamSelection(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfselected, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamSelection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, fselected: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamSelection(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&fselected)).into())
        }
        unsafe extern "system" fn GetNativeMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwmediatypeindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNativeMediaType(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwmediatypeindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrentMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentMediaType(this, ::core::mem::transmute_copy(&dwstreamindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pdwreserved: *const u32, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentMediaType(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&pdwreserved), ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        unsafe extern "system" fn SetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidtimeformat: *const ::windows_core::GUID, varposition: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentPosition(this, ::core::mem::transmute_copy(&guidtimeformat), ::core::mem::transmute_copy(&varposition)).into())
        }
        unsafe extern "system" fn ReadSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwcontrolflags: u32, pdwactualstreamindex: *mut u32, pdwstreamflags: *mut u32, plltimestamp: *mut i64, ppsample: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReadSample(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwcontrolflags), ::core::mem::transmute_copy(&pdwactualstreamindex), ::core::mem::transmute_copy(&pdwstreamflags), ::core::mem::transmute_copy(&plltimestamp), ::core::mem::transmute_copy(&ppsample)).into())
        }
        unsafe extern "system" fn Flush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Flush(this, ::core::mem::transmute_copy(&dwstreamindex)).into())
        }
        unsafe extern "system" fn GetServiceForStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetServiceForStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&guidservice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobject)).into())
        }
        unsafe extern "system" fn GetPresentationAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, guidattribute: *const ::windows_core::GUID, pvarattribute: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPresentationAttribute(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&guidattribute)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarattribute, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSourceReader_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamSelection: GetStreamSelection::<Identity, Impl, OFFSET>,
            SetStreamSelection: SetStreamSelection::<Identity, Impl, OFFSET>,
            GetNativeMediaType: GetNativeMediaType::<Identity, Impl, OFFSET>,
            GetCurrentMediaType: GetCurrentMediaType::<Identity, Impl, OFFSET>,
            SetCurrentMediaType: SetCurrentMediaType::<Identity, Impl, OFFSET>,
            SetCurrentPosition: SetCurrentPosition::<Identity, Impl, OFFSET>,
            ReadSample: ReadSample::<Identity, Impl, OFFSET>,
            Flush: Flush::<Identity, Impl, OFFSET>,
            GetServiceForStream: GetServiceForStream::<Identity, Impl, OFFSET>,
            GetPresentationAttribute: GetPresentationAttribute::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSourceReaderCallback_Impl: ::windows_core::BaseImpl {
    fn OnReadSample(this: &Self::This, hrstatus: ::windows_core::HRESULT, dwstreamindex: u32, dwstreamflags: u32, lltimestamp: i64, psample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
    fn OnFlush(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<()>;
    fn OnEvent(this: &Self::This, dwstreamindex: u32, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSourceReaderCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceReaderCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnReadSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrstatus: ::windows_core::HRESULT, dwstreamindex: u32, dwstreamflags: u32, lltimestamp: i64, psample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnReadSample(this, ::core::mem::transmute_copy(&hrstatus), ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwstreamflags), ::core::mem::transmute_copy(&lltimestamp), ::windows_core::from_raw_borrowed(&psample)).into())
        }
        unsafe extern "system" fn OnFlush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnFlush(this, ::core::mem::transmute_copy(&dwstreamindex)).into())
        }
        unsafe extern "system" fn OnEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnEvent(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        IMFSourceReaderCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnReadSample: OnReadSample::<Identity, Impl, OFFSET>,
            OnFlush: OnFlush::<Identity, Impl, OFFSET>,
            OnEvent: OnEvent::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFSourceReaderCallback2_Impl: ::windows_core::BaseImpl + IMFSourceReaderCallback_Impl {
    fn OnTransformChange(this: &Self::This) -> ::windows_core::Result<()>;
    fn OnStreamError(this: &Self::This, dwstreamindex: u32, hrstatus: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSourceReaderCallback2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFSourceReaderCallback);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceReaderCallback2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnTransformChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnTransformChange(this).into())
        }
        unsafe extern "system" fn OnStreamError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderCallback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, hrstatus: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnStreamError(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&hrstatus)).into())
        }
        IMFSourceReaderCallback2_Vtbl {
            base__: <IMFSourceReaderCallback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnTransformChange: OnTransformChange::<Identity, Impl, OFFSET>,
            OnStreamError: OnStreamError::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSourceReaderEx_Impl: ::windows_core::BaseImpl + IMFSourceReader_Impl {
    fn SetNativeMediaType(this: &Self::This, dwstreamindex: u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<u32>;
    fn AddTransformForStream(this: &Self::This, dwstreamindex: u32, ptransformoractivate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn RemoveAllTransformsForStream(this: &Self::This, dwstreamindex: u32) -> ::windows_core::Result<()>;
    fn GetTransformForStream(this: &Self::This, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows_core::GUID, pptransform: *mut ::core::option::Option<IMFTransform>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSourceReaderEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFSourceReader);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceReaderEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetNativeMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, pmediatype: *mut ::core::ffi::c_void, pdwstreamflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetNativeMediaType(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&pmediatype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTransformForStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, ptransformoractivate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTransformForStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::windows_core::from_raw_borrowed(&ptransformoractivate)).into())
        }
        unsafe extern "system" fn RemoveAllTransformsForStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveAllTransformsForStream(this, ::core::mem::transmute_copy(&dwstreamindex)).into())
        }
        unsafe extern "system" fn GetTransformForStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceReaderEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamindex: u32, dwtransformindex: u32, pguidcategory: *mut ::windows_core::GUID, pptransform: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTransformForStream(this, ::core::mem::transmute_copy(&dwstreamindex), ::core::mem::transmute_copy(&dwtransformindex), ::core::mem::transmute_copy(&pguidcategory), ::core::mem::transmute_copy(&pptransform)).into())
        }
        IMFSourceReaderEx_Vtbl {
            base__: <IMFSourceReader as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetNativeMediaType: SetNativeMediaType::<Identity, Impl, OFFSET>,
            AddTransformForStream: AddTransformForStream::<Identity, Impl, OFFSET>,
            RemoveAllTransformsForStream: RemoveAllTransformsForStream::<Identity, Impl, OFFSET>,
            GetTransformForStream: GetTransformForStream::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_UI_Shell_PropertiesSystem\"`"]
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
pub trait IMFSourceResolver_Impl: ::windows_core::BaseImpl {
    fn CreateObjectFromURL(this: &Self::This, pwszurl: &::windows_core::PCWSTR, dwflags: u32, pprops: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn CreateObjectFromByteStream(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, pwszurl: &::windows_core::PCWSTR, dwflags: u32, pprops: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn BeginCreateObjectFromURL(this: &Self::This, pwszurl: &::windows_core::PCWSTR, dwflags: u32, pprops: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>, ppiunknowncancelcookie: *mut ::core::option::Option<::windows_core::IUnknown>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndCreateObjectFromURL(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn BeginCreateObjectFromByteStream(this: &Self::This, pbytestream: ::core::option::Option<&IMFByteStream>, pwszurl: &::windows_core::PCWSTR, dwflags: u32, pprops: ::core::option::Option<&super::super::UI::Shell::PropertiesSystem::IPropertyStore>, ppiunknowncancelcookie: *mut ::core::option::Option<::windows_core::IUnknown>, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndCreateObjectFromByteStream(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn CancelObjectCreation(this: &Self::This, piunknowncancelcookie: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl ::windows_core::Iids for IMFSourceResolver {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_UI_Shell_PropertiesSystem")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSourceResolver {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateObjectFromURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, dwflags: u32, pprops: *mut ::core::ffi::c_void, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateObjectFromURL(this, ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pprops), ::core::mem::transmute_copy(&pobjecttype), ::core::mem::transmute_copy(&ppobject)).into())
        }
        unsafe extern "system" fn CreateObjectFromByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, dwflags: u32, pprops: *mut ::core::ffi::c_void, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateObjectFromByteStream(this, ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pprops), ::core::mem::transmute_copy(&pobjecttype), ::core::mem::transmute_copy(&ppobject)).into())
        }
        unsafe extern "system" fn BeginCreateObjectFromURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, dwflags: u32, pprops: *mut ::core::ffi::c_void, ppiunknowncancelcookie: *mut *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginCreateObjectFromURL(this, ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pprops), ::core::mem::transmute_copy(&ppiunknowncancelcookie), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndCreateObjectFromURL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndCreateObjectFromURL(this, ::windows_core::from_raw_borrowed(&presult), ::core::mem::transmute_copy(&pobjecttype), ::core::mem::transmute_copy(&ppobject)).into())
        }
        unsafe extern "system" fn BeginCreateObjectFromByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestream: *mut ::core::ffi::c_void, pwszurl: ::windows_core::PCWSTR, dwflags: u32, pprops: *mut ::core::ffi::c_void, ppiunknowncancelcookie: *mut *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginCreateObjectFromByteStream(this, ::windows_core::from_raw_borrowed(&pbytestream), ::core::mem::transmute(&pwszurl), ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pprops), ::core::mem::transmute_copy(&ppiunknowncancelcookie), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndCreateObjectFromByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pobjecttype: *mut MF_OBJECT_TYPE, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndCreateObjectFromByteStream(this, ::windows_core::from_raw_borrowed(&presult), ::core::mem::transmute_copy(&pobjecttype), ::core::mem::transmute_copy(&ppobject)).into())
        }
        unsafe extern "system" fn CancelObjectCreation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSourceResolver_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, piunknowncancelcookie: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelObjectCreation(this, ::windows_core::from_raw_borrowed(&piunknowncancelcookie)).into())
        }
        IMFSourceResolver_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateObjectFromURL: CreateObjectFromURL::<Identity, Impl, OFFSET>,
            CreateObjectFromByteStream: CreateObjectFromByteStream::<Identity, Impl, OFFSET>,
            BeginCreateObjectFromURL: BeginCreateObjectFromURL::<Identity, Impl, OFFSET>,
            EndCreateObjectFromURL: EndCreateObjectFromURL::<Identity, Impl, OFFSET>,
            BeginCreateObjectFromByteStream: BeginCreateObjectFromByteStream::<Identity, Impl, OFFSET>,
            EndCreateObjectFromByteStream: EndCreateObjectFromByteStream::<Identity, Impl, OFFSET>,
            CancelObjectCreation: CancelObjectCreation::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Media_Audio\"`"]
#[cfg(feature = "Win32_Media_Audio")]
pub trait IMFSpatialAudioObjectBuffer_Impl: ::windows_core::BaseImpl + IMFMediaBuffer_Impl {
    fn SetID(this: &Self::This, u32id: u32) -> ::windows_core::Result<()>;
    fn GetID(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetType(this: &Self::This, r#type: super::Audio::AudioObjectType) -> ::windows_core::Result<()>;
    fn GetType(this: &Self::This) -> ::windows_core::Result<super::Audio::AudioObjectType>;
    fn GetMetadataItems(this: &Self::This) -> ::windows_core::Result<super::Audio::ISpatialAudioMetadataItems>;
}
#[cfg(feature = "Win32_Media_Audio")]
impl ::windows_core::Iids for IMFSpatialAudioObjectBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaBuffer);
}
#[cfg(feature = "Win32_Media_Audio")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioObjectBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSpatialAudioObjectBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioObjectBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, u32id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetID(this, ::core::mem::transmute_copy(&u32id)).into())
        }
        unsafe extern "system" fn GetID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioObjectBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pu32id: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pu32id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioObjectBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: super::Audio::AudioObjectType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetType(this, ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioObjectBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptype: *mut super::Audio::AudioObjectType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMetadataItems<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioObjectBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmetadataitems: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMetadataItems(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmetadataitems, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSpatialAudioObjectBuffer_Vtbl {
            base__: <IMFMediaBuffer as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetID: SetID::<Identity, Impl, OFFSET>,
            GetID: GetID::<Identity, Impl, OFFSET>,
            SetType: SetType::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            GetMetadataItems: GetMetadataItems::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFSpatialAudioSample_Impl: ::windows_core::BaseImpl + IMFSample_Impl {
    fn GetObjectCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn AddSpatialAudioObject(this: &Self::This, paudioobjbuffer: ::core::option::Option<&IMFSpatialAudioObjectBuffer>) -> ::windows_core::Result<()>;
    fn GetSpatialAudioObjectByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFSpatialAudioObjectBuffer>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFSpatialAudioSample {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFSample);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioSample_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSpatialAudioSample {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetObjectCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwobjectcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetObjectCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwobjectcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddSpatialAudioObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, paudioobjbuffer: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddSpatialAudioObject(this, ::windows_core::from_raw_borrowed(&paudioobjbuffer)).into())
        }
        unsafe extern "system" fn GetSpatialAudioObjectByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSpatialAudioSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppaudioobjbuffer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSpatialAudioObjectByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppaudioobjbuffer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFSpatialAudioSample_Vtbl {
            base__: <IMFSample as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetObjectCount: GetObjectCount::<Identity, Impl, OFFSET>,
            AddSpatialAudioObject: AddSpatialAudioObject::<Identity, Impl, OFFSET>,
            GetSpatialAudioObjectByIndex: GetSpatialAudioObjectByIndex::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFStreamDescriptor_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetStreamIdentifier(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMediaTypeHandler(this: &Self::This) -> ::windows_core::Result<IMFMediaTypeHandler>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFStreamDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFStreamDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwstreamidentifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamIdentifier(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwstreamidentifier, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMediaTypeHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediatypehandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaTypeHandler(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatypehandler, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFStreamDescriptor_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamIdentifier: GetStreamIdentifier::<Identity, Impl, OFFSET>,
            GetMediaTypeHandler: GetMediaTypeHandler::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFStreamSink_Impl: ::windows_core::BaseImpl + IMFMediaEventGenerator_Impl {
    fn GetMediaSink(this: &Self::This) -> ::windows_core::Result<IMFMediaSink>;
    fn GetIdentifier(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetMediaTypeHandler(this: &Self::This) -> ::windows_core::Result<IMFMediaTypeHandler>;
    fn ProcessSample(this: &Self::This, psample: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
    fn PlaceMarker(this: &Self::This, emarkertype: MFSTREAMSINK_MARKER_TYPE, pvarmarkervalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pvarcontextvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::Result<()>;
    fn Flush(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFStreamSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaEventGenerator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFStreamSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetMediaSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediasink: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaSink(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediasink, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwidentifier: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIdentifier(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwidentifier, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMediaTypeHandler<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pphandler: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaTypeHandler(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pphandler, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProcessSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psample: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessSample(this, ::windows_core::from_raw_borrowed(&psample)).into())
        }
        unsafe extern "system" fn PlaceMarker<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emarkertype: MFSTREAMSINK_MARKER_TYPE, pvarmarkervalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pvarcontextvalue: *const super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlaceMarker(this, ::core::mem::transmute_copy(&emarkertype), ::core::mem::transmute_copy(&pvarmarkervalue), ::core::mem::transmute_copy(&pvarcontextvalue)).into())
        }
        unsafe extern "system" fn Flush<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Flush(this).into())
        }
        IMFStreamSink_Vtbl {
            base__: <IMFMediaEventGenerator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetMediaSink: GetMediaSink::<Identity, Impl, OFFSET>,
            GetIdentifier: GetIdentifier::<Identity, Impl, OFFSET>,
            GetMediaTypeHandler: GetMediaTypeHandler::<Identity, Impl, OFFSET>,
            ProcessSample: ProcessSample::<Identity, Impl, OFFSET>,
            PlaceMarker: PlaceMarker::<Identity, Impl, OFFSET>,
            Flush: Flush::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFStreamingSinkConfig_Impl: ::windows_core::BaseImpl {
    fn StartStreaming(this: &Self::This, fseekoffsetisbyteoffset: super::super::Foundation::BOOL, qwseekoffset: u64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFStreamingSinkConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamingSinkConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFStreamingSinkConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartStreaming<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFStreamingSinkConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fseekoffsetisbyteoffset: super::super::Foundation::BOOL, qwseekoffset: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartStreaming(this, ::core::mem::transmute_copy(&fseekoffsetisbyteoffset), ::core::mem::transmute_copy(&qwseekoffset)).into())
        }
        IMFStreamingSinkConfig_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, StartStreaming: StartStreaming::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFSystemId_Impl: ::windows_core::BaseImpl {
    fn GetData(this: &Self::This, size: *mut u32, data: *mut *mut u8) -> ::windows_core::Result<()>;
    fn Setup(this: &Self::This, stage: u32, cbin: u32, pbin: *const u8, pcbout: *mut u32, ppbout: *mut *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFSystemId {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSystemId_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFSystemId {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSystemId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: *mut u32, data: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetData(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&data)).into())
        }
        unsafe extern "system" fn Setup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFSystemId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stage: u32, cbin: u32, pbin: *const u8, pcbout: *mut u32, ppbout: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Setup(this, ::core::mem::transmute_copy(&stage), ::core::mem::transmute_copy(&cbin), ::core::mem::transmute_copy(&pbin), ::core::mem::transmute_copy(&pcbout), ::core::mem::transmute_copy(&ppbout)).into())
        }
        IMFSystemId_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetData: GetData::<Identity, Impl, OFFSET>,
            Setup: Setup::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFTimecodeTranslate_Impl: ::windows_core::BaseImpl {
    fn BeginConvertTimecodeToHNS(this: &Self::This, ppropvartimecode: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndConvertTimecodeToHNS(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<i64>;
    fn BeginConvertHNSToTimecode(this: &Self::This, hnstime: i64, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndConvertHNSToTimecode(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<super::super::System::Com::StructuredStorage::PROPVARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFTimecodeTranslate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimecodeTranslate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimecodeTranslate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginConvertTimecodeToHNS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimecodeTranslate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppropvartimecode: *const super::super::System::Com::StructuredStorage::PROPVARIANT, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginConvertTimecodeToHNS(this, ::core::mem::transmute_copy(&ppropvartimecode), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndConvertTimecodeToHNS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimecodeTranslate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, phnstime: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndConvertTimecodeToHNS(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phnstime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginConvertHNSToTimecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimecodeTranslate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnstime: i64, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginConvertHNSToTimecode(this, ::core::mem::transmute_copy(&hnstime), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        unsafe extern "system" fn EndConvertHNSToTimecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimecodeTranslate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, ppropvartimecode: *mut super::super::System::Com::StructuredStorage::PROPVARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndConvertHNSToTimecode(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropvartimecode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimecodeTranslate_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginConvertTimecodeToHNS: BeginConvertTimecodeToHNS::<Identity, Impl, OFFSET>,
            EndConvertTimecodeToHNS: EndConvertTimecodeToHNS::<Identity, Impl, OFFSET>,
            BeginConvertHNSToTimecode: BeginConvertHNSToTimecode::<Identity, Impl, OFFSET>,
            EndConvertHNSToTimecode: EndConvertHNSToTimecode::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTimedText_Impl: ::windows_core::BaseImpl {
    fn RegisterNotifications(this: &Self::This, notify: ::core::option::Option<&IMFTimedTextNotify>) -> ::windows_core::Result<()>;
    fn SelectTrack(this: &Self::This, trackid: u32, selected: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn AddDataSource(this: &Self::This, bytestream: ::core::option::Option<&IMFByteStream>, label: &::windows_core::PCWSTR, language: &::windows_core::PCWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: super::super::Foundation::BOOL) -> ::windows_core::Result<u32>;
    fn AddDataSourceFromUrl(this: &Self::This, url: &::windows_core::PCWSTR, label: &::windows_core::PCWSTR, language: &::windows_core::PCWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: super::super::Foundation::BOOL) -> ::windows_core::Result<u32>;
    fn AddTrack(this: &Self::This, label: &::windows_core::PCWSTR, language: &::windows_core::PCWSTR, kind: MF_TIMED_TEXT_TRACK_KIND) -> ::windows_core::Result<IMFTimedTextTrack>;
    fn RemoveTrack(this: &Self::This, track: ::core::option::Option<&IMFTimedTextTrack>) -> ::windows_core::Result<()>;
    fn GetCueTimeOffset(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetCueTimeOffset(this: &Self::This, offset: f64) -> ::windows_core::Result<()>;
    fn GetTracks(this: &Self::This) -> ::windows_core::Result<IMFTimedTextTrackList>;
    fn GetActiveTracks(this: &Self::This) -> ::windows_core::Result<IMFTimedTextTrackList>;
    fn GetTextTracks(this: &Self::This) -> ::windows_core::Result<IMFTimedTextTrackList>;
    fn GetMetadataTracks(this: &Self::This) -> ::windows_core::Result<IMFTimedTextTrackList>;
    fn SetInBandEnabled(this: &Self::This, enabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn IsInBandEnabled(this: &Self::This) -> super::super::Foundation::BOOL;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTimedText {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedText {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterNotifications<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, notify: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterNotifications(this, ::windows_core::from_raw_borrowed(&notify)).into())
        }
        unsafe extern "system" fn SelectTrack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, trackid: u32, selected: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectTrack(this, ::core::mem::transmute_copy(&trackid), ::core::mem::transmute_copy(&selected)).into())
        }
        unsafe extern "system" fn AddDataSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bytestream: *mut ::core::ffi::c_void, label: ::windows_core::PCWSTR, language: ::windows_core::PCWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: super::super::Foundation::BOOL, trackid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddDataSource(this, ::windows_core::from_raw_borrowed(&bytestream), ::core::mem::transmute(&label), ::core::mem::transmute(&language), ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&isdefault)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(trackid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddDataSourceFromUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, url: ::windows_core::PCWSTR, label: ::windows_core::PCWSTR, language: ::windows_core::PCWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, isdefault: super::super::Foundation::BOOL, trackid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddDataSourceFromUrl(this, ::core::mem::transmute(&url), ::core::mem::transmute(&label), ::core::mem::transmute(&language), ::core::mem::transmute_copy(&kind), ::core::mem::transmute_copy(&isdefault)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(trackid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTrack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, label: ::windows_core::PCWSTR, language: ::windows_core::PCWSTR, kind: MF_TIMED_TEXT_TRACK_KIND, track: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AddTrack(this, ::core::mem::transmute(&label), ::core::mem::transmute(&language), ::core::mem::transmute_copy(&kind)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(track, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveTrack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, track: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTrack(this, ::windows_core::from_raw_borrowed(&track)).into())
        }
        unsafe extern "system" fn GetCueTimeOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCueTimeOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(offset, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCueTimeOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, offset: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCueTimeOffset(this, ::core::mem::transmute_copy(&offset)).into())
        }
        unsafe extern "system" fn GetTracks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tracks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTracks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tracks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetActiveTracks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, activetracks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetActiveTracks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(activetracks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextTracks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, texttracks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextTracks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(texttracks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMetadataTracks<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, metadatatracks: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMetadataTracks(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(metadatatracks, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInBandEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInBandEnabled(this, ::core::mem::transmute_copy(&enabled)).into())
        }
        unsafe extern "system" fn IsInBandEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsInBandEnabled(this))
        }
        IMFTimedText_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterNotifications: RegisterNotifications::<Identity, Impl, OFFSET>,
            SelectTrack: SelectTrack::<Identity, Impl, OFFSET>,
            AddDataSource: AddDataSource::<Identity, Impl, OFFSET>,
            AddDataSourceFromUrl: AddDataSourceFromUrl::<Identity, Impl, OFFSET>,
            AddTrack: AddTrack::<Identity, Impl, OFFSET>,
            RemoveTrack: RemoveTrack::<Identity, Impl, OFFSET>,
            GetCueTimeOffset: GetCueTimeOffset::<Identity, Impl, OFFSET>,
            SetCueTimeOffset: SetCueTimeOffset::<Identity, Impl, OFFSET>,
            GetTracks: GetTracks::<Identity, Impl, OFFSET>,
            GetActiveTracks: GetActiveTracks::<Identity, Impl, OFFSET>,
            GetTextTracks: GetTextTracks::<Identity, Impl, OFFSET>,
            GetMetadataTracks: GetMetadataTracks::<Identity, Impl, OFFSET>,
            SetInBandEnabled: SetInBandEnabled::<Identity, Impl, OFFSET>,
            IsInBandEnabled: IsInBandEnabled::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimedTextBinary_Impl: ::windows_core::BaseImpl {
    fn GetData(this: &Self::This, data: *mut *mut u8, length: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTimedTextBinary {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextBinary_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextBinary {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextBinary_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, data: *mut *mut u8, length: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetData(this, ::core::mem::transmute_copy(&data), ::core::mem::transmute_copy(&length)).into())
        }
        IMFTimedTextBinary_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetData: GetData::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFTimedTextBouten_Impl: ::windows_core::BaseImpl {
    fn GetBoutenType(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_BOUTEN_TYPE>;
    fn GetBoutenColor(this: &Self::This) -> ::windows_core::Result<MFARGB>;
    fn GetBoutenPosition(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_BOUTEN_POSITION>;
}
impl ::windows_core::Iids for IMFTimedTextBouten {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextBouten_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextBouten {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetBoutenType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextBouten_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MF_TIMED_TEXT_BOUTEN_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBoutenType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBoutenColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextBouten_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBoutenColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBoutenPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextBouten_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MF_TIMED_TEXT_BOUTEN_POSITION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBoutenPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextBouten_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetBoutenType: GetBoutenType::<Identity, Impl, OFFSET>,
            GetBoutenColor: GetBoutenColor::<Identity, Impl, OFFSET>,
            GetBoutenPosition: GetBoutenPosition::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimedTextCue_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> u32;
    fn GetOriginalId(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetCueKind(this: &Self::This) -> MF_TIMED_TEXT_TRACK_KIND;
    fn GetStartTime(this: &Self::This) -> f64;
    fn GetDuration(this: &Self::This) -> f64;
    fn GetTrackId(this: &Self::This) -> u32;
    fn GetData(this: &Self::This) -> ::windows_core::Result<IMFTimedTextBinary>;
    fn GetRegion(this: &Self::This) -> ::windows_core::Result<IMFTimedTextRegion>;
    fn GetStyle(this: &Self::This) -> ::windows_core::Result<IMFTimedTextStyle>;
    fn GetLineCount(this: &Self::This) -> u32;
    fn GetLine(this: &Self::This, index: u32) -> ::windows_core::Result<IMFTimedTextFormattedText>;
}
impl ::windows_core::Iids for IMFTimedTextCue {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextCue {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetId(this))
        }
        unsafe extern "system" fn GetOriginalId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, originalid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(originalid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCueKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_TIMED_TEXT_TRACK_KIND {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCueKind(this))
        }
        unsafe extern "system" fn GetStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStartTime(this))
        }
        unsafe extern "system" fn GetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> f64 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDuration(this))
        }
        unsafe extern "system" fn GetTrackId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTrackId(this))
        }
        unsafe extern "system" fn GetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, data: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(data, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRegion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, region: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRegion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(region, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, style: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStyle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(style, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLineCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineCount(this))
        }
        unsafe extern "system" fn GetLine<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCue_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, line: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLine(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(line, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextCue_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            GetOriginalId: GetOriginalId::<Identity, Impl, OFFSET>,
            GetCueKind: GetCueKind::<Identity, Impl, OFFSET>,
            GetStartTime: GetStartTime::<Identity, Impl, OFFSET>,
            GetDuration: GetDuration::<Identity, Impl, OFFSET>,
            GetTrackId: GetTrackId::<Identity, Impl, OFFSET>,
            GetData: GetData::<Identity, Impl, OFFSET>,
            GetRegion: GetRegion::<Identity, Impl, OFFSET>,
            GetStyle: GetStyle::<Identity, Impl, OFFSET>,
            GetLineCount: GetLineCount::<Identity, Impl, OFFSET>,
            GetLine: GetLine::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimedTextCueList_Impl: ::windows_core::BaseImpl {
    fn GetLength(this: &Self::This) -> u32;
    fn GetCueByIndex(this: &Self::This, index: u32) -> ::windows_core::Result<IMFTimedTextCue>;
    fn GetCueById(this: &Self::This, id: u32) -> ::windows_core::Result<IMFTimedTextCue>;
    fn GetCueByOriginalId(this: &Self::This, originalid: &::windows_core::PCWSTR) -> ::windows_core::Result<IMFTimedTextCue>;
    fn AddTextCue(this: &Self::This, start: f64, duration: f64, text: &::windows_core::PCWSTR, cue: *mut ::core::option::Option<IMFTimedTextCue>) -> ::windows_core::Result<()>;
    fn AddDataCue(this: &Self::This, start: f64, duration: f64, data: *const u8, datasize: u32, cue: *mut ::core::option::Option<IMFTimedTextCue>) -> ::windows_core::Result<()>;
    fn RemoveCue(this: &Self::This, cue: ::core::option::Option<&IMFTimedTextCue>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTimedTextCueList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextCueList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLength(this))
        }
        unsafe extern "system" fn GetCueByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, cue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCueByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCueById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: u32, cue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCueById(this, ::core::mem::transmute_copy(&id)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCueByOriginalId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, originalid: ::windows_core::PCWSTR, cue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCueByOriginalId(this, ::core::mem::transmute(&originalid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddTextCue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: f64, duration: f64, text: ::windows_core::PCWSTR, cue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTextCue(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&duration), ::core::mem::transmute(&text), ::core::mem::transmute_copy(&cue)).into())
        }
        unsafe extern "system" fn AddDataCue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, start: f64, duration: f64, data: *const u8, datasize: u32, cue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDataCue(this, ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&duration), ::core::mem::transmute_copy(&data), ::core::mem::transmute_copy(&datasize), ::core::mem::transmute_copy(&cue)).into())
        }
        unsafe extern "system" fn RemoveCue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextCueList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveCue(this, ::windows_core::from_raw_borrowed(&cue)).into())
        }
        IMFTimedTextCueList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCueByIndex: GetCueByIndex::<Identity, Impl, OFFSET>,
            GetCueById: GetCueById::<Identity, Impl, OFFSET>,
            GetCueByOriginalId: GetCueByOriginalId::<Identity, Impl, OFFSET>,
            AddTextCue: AddTextCue::<Identity, Impl, OFFSET>,
            AddDataCue: AddDataCue::<Identity, Impl, OFFSET>,
            RemoveCue: RemoveCue::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimedTextFormattedText_Impl: ::windows_core::BaseImpl {
    fn GetText(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetSubformattingCount(this: &Self::This) -> u32;
    fn GetSubformatting(this: &Self::This, index: u32, firstchar: *mut u32, charlength: *mut u32, style: *mut ::core::option::Option<IMFTimedTextStyle>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTimedTextFormattedText {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextFormattedText_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextFormattedText {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextFormattedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, text: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(text, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSubformattingCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextFormattedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSubformattingCount(this))
        }
        unsafe extern "system" fn GetSubformatting<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextFormattedText_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, firstchar: *mut u32, charlength: *mut u32, style: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSubformatting(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&firstchar), ::core::mem::transmute_copy(&charlength), ::core::mem::transmute_copy(&style)).into())
        }
        IMFTimedTextFormattedText_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetText: GetText::<Identity, Impl, OFFSET>,
            GetSubformattingCount: GetSubformattingCount::<Identity, Impl, OFFSET>,
            GetSubformatting: GetSubformatting::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTimedTextNotify_Impl: ::windows_core::BaseImpl {
    fn TrackAdded(this: &Self::This, trackid: u32);
    fn TrackRemoved(this: &Self::This, trackid: u32);
    fn TrackSelected(this: &Self::This, trackid: u32, selected: super::super::Foundation::BOOL);
    fn TrackReadyStateChanged(this: &Self::This, trackid: u32);
    fn Error(this: &Self::This, errorcode: MF_TIMED_TEXT_ERROR_CODE, extendederrorcode: ::windows_core::HRESULT, sourcetrackid: u32);
    fn Cue(this: &Self::This, cueevent: MF_TIMED_TEXT_CUE_EVENT, currenttime: f64, cue: ::core::option::Option<&IMFTimedTextCue>);
    fn Reset(this: &Self::This);
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTimedTextNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TrackAdded<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, trackid: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TrackAdded(this, ::core::mem::transmute_copy(&trackid)))
        }
        unsafe extern "system" fn TrackRemoved<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, trackid: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TrackRemoved(this, ::core::mem::transmute_copy(&trackid)))
        }
        unsafe extern "system" fn TrackSelected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, trackid: u32, selected: super::super::Foundation::BOOL) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TrackSelected(this, ::core::mem::transmute_copy(&trackid), ::core::mem::transmute_copy(&selected)))
        }
        unsafe extern "system" fn TrackReadyStateChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, trackid: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TrackReadyStateChanged(this, ::core::mem::transmute_copy(&trackid)))
        }
        unsafe extern "system" fn Error<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, errorcode: MF_TIMED_TEXT_ERROR_CODE, extendederrorcode: ::windows_core::HRESULT, sourcetrackid: u32) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Error(this, ::core::mem::transmute_copy(&errorcode), ::core::mem::transmute_copy(&extendederrorcode), ::core::mem::transmute_copy(&sourcetrackid)))
        }
        unsafe extern "system" fn Cue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cueevent: MF_TIMED_TEXT_CUE_EVENT, currenttime: f64, cue: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Cue(this, ::core::mem::transmute_copy(&cueevent), ::core::mem::transmute_copy(&currenttime), ::windows_core::from_raw_borrowed(&cue)))
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this))
        }
        IMFTimedTextNotify_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TrackAdded: TrackAdded::<Identity, Impl, OFFSET>,
            TrackRemoved: TrackRemoved::<Identity, Impl, OFFSET>,
            TrackSelected: TrackSelected::<Identity, Impl, OFFSET>,
            TrackReadyStateChanged: TrackReadyStateChanged::<Identity, Impl, OFFSET>,
            Error: Error::<Identity, Impl, OFFSET>,
            Cue: Cue::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTimedTextRegion_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetPosition(this: &Self::This, px: *mut f64, py: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::Result<()>;
    fn GetExtent(this: &Self::This, pwidth: *mut f64, pheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::Result<()>;
    fn GetBackgroundColor(this: &Self::This) -> ::windows_core::Result<MFARGB>;
    fn GetWritingMode(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_WRITING_MODE>;
    fn GetDisplayAlignment(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_DISPLAY_ALIGNMENT>;
    fn GetLineHeight(this: &Self::This, plineheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::Result<()>;
    fn GetClipOverflow(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetPadding(this: &Self::This, before: *mut f64, start: *mut f64, after: *mut f64, end: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::Result<()>;
    fn GetWrap(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetZIndex(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetScrollMode(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_SCROLL_MODE>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTimedTextRegion {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextRegion {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, px: *mut f64, py: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPosition(this, ::core::mem::transmute_copy(&px), ::core::mem::transmute_copy(&py), ::core::mem::transmute_copy(&unittype)).into())
        }
        unsafe extern "system" fn GetExtent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwidth: *mut f64, pheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtent(this, ::core::mem::transmute_copy(&pwidth), ::core::mem::transmute_copy(&pheight), ::core::mem::transmute_copy(&unittype)).into())
        }
        unsafe extern "system" fn GetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bgcolor: *mut MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBackgroundColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bgcolor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetWritingMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, writingmode: *mut MF_TIMED_TEXT_WRITING_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWritingMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(writingmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDisplayAlignment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, displayalign: *mut MF_TIMED_TEXT_DISPLAY_ALIGNMENT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDisplayAlignment(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(displayalign, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLineHeight<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plineheight: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLineHeight(this, ::core::mem::transmute_copy(&plineheight), ::core::mem::transmute_copy(&unittype)).into())
        }
        unsafe extern "system" fn GetClipOverflow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clipoverflow: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetClipOverflow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(clipoverflow, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPadding<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, before: *mut f64, start: *mut f64, after: *mut f64, end: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPadding(this, ::core::mem::transmute_copy(&before), ::core::mem::transmute_copy(&start), ::core::mem::transmute_copy(&after), ::core::mem::transmute_copy(&end), ::core::mem::transmute_copy(&unittype)).into())
        }
        unsafe extern "system" fn GetWrap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wrap: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWrap(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(wrap, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetZIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, zindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetZIndex(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(zindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetScrollMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRegion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scrollmode: *mut MF_TIMED_TEXT_SCROLL_MODE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScrollMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(scrollmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextRegion_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetPosition: GetPosition::<Identity, Impl, OFFSET>,
            GetExtent: GetExtent::<Identity, Impl, OFFSET>,
            GetBackgroundColor: GetBackgroundColor::<Identity, Impl, OFFSET>,
            GetWritingMode: GetWritingMode::<Identity, Impl, OFFSET>,
            GetDisplayAlignment: GetDisplayAlignment::<Identity, Impl, OFFSET>,
            GetLineHeight: GetLineHeight::<Identity, Impl, OFFSET>,
            GetClipOverflow: GetClipOverflow::<Identity, Impl, OFFSET>,
            GetPadding: GetPadding::<Identity, Impl, OFFSET>,
            GetWrap: GetWrap::<Identity, Impl, OFFSET>,
            GetZIndex: GetZIndex::<Identity, Impl, OFFSET>,
            GetScrollMode: GetScrollMode::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimedTextRuby_Impl: ::windows_core::BaseImpl {
    fn GetRubyText(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetRubyPosition(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_RUBY_POSITION>;
    fn GetRubyAlign(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_RUBY_ALIGN>;
    fn GetRubyReserve(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_RUBY_RESERVE>;
}
impl ::windows_core::Iids for IMFTimedTextRuby {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRuby_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextRuby {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRubyText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRuby_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rubytext: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRubyText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rubytext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRubyPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRuby_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MF_TIMED_TEXT_RUBY_POSITION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRubyPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRubyAlign<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRuby_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MF_TIMED_TEXT_RUBY_ALIGN) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRubyAlign(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRubyReserve<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextRuby_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut MF_TIMED_TEXT_RUBY_RESERVE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRubyReserve(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextRuby_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRubyText: GetRubyText::<Identity, Impl, OFFSET>,
            GetRubyPosition: GetRubyPosition::<Identity, Impl, OFFSET>,
            GetRubyAlign: GetRubyAlign::<Identity, Impl, OFFSET>,
            GetRubyReserve: GetRubyReserve::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTimedTextStyle_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn IsExternal(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetFontFamily(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetFontSize(this: &Self::This, fontsize: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::Result<()>;
    fn GetColor(this: &Self::This) -> ::windows_core::Result<MFARGB>;
    fn GetBackgroundColor(this: &Self::This) -> ::windows_core::Result<MFARGB>;
    fn GetShowBackgroundAlways(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetFontStyle(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_FONT_STYLE>;
    fn GetBold(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetRightToLeft(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetTextAlignment(this: &Self::This) -> ::windows_core::Result<MF_TIMED_TEXT_ALIGNMENT>;
    fn GetTextDecoration(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextOutline(this: &Self::This, color: *mut MFARGB, thickness: *mut f64, blurradius: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTimedTextStyle {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextStyle {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsExternal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsExternal(this))
        }
        unsafe extern "system" fn GetFontFamily<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fontfamily: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFontFamily(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fontfamily, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFontSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fontsize: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFontSize(this, ::core::mem::transmute_copy(&fontsize), ::core::mem::transmute_copy(&unittype)).into())
        }
        unsafe extern "system" fn GetColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: *mut MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(color, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bgcolor: *mut MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBackgroundColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bgcolor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetShowBackgroundAlways<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, showbackgroundalways: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetShowBackgroundAlways(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(showbackgroundalways, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFontStyle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fontstyle: *mut MF_TIMED_TEXT_FONT_STYLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFontStyle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fontstyle, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBold<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bold: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBold(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bold, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRightToLeft<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, righttoleft: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRightToLeft(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(righttoleft, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextAlignment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, textalign: *mut MF_TIMED_TEXT_ALIGNMENT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextAlignment(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(textalign, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextDecoration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, textdecoration: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextDecoration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(textdecoration, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextOutline<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: *mut MFARGB, thickness: *mut f64, blurradius: *mut f64, unittype: *mut MF_TIMED_TEXT_UNIT_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextOutline(this, ::core::mem::transmute_copy(&color), ::core::mem::transmute_copy(&thickness), ::core::mem::transmute_copy(&blurradius), ::core::mem::transmute_copy(&unittype)).into())
        }
        IMFTimedTextStyle_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            IsExternal: IsExternal::<Identity, Impl, OFFSET>,
            GetFontFamily: GetFontFamily::<Identity, Impl, OFFSET>,
            GetFontSize: GetFontSize::<Identity, Impl, OFFSET>,
            GetColor: GetColor::<Identity, Impl, OFFSET>,
            GetBackgroundColor: GetBackgroundColor::<Identity, Impl, OFFSET>,
            GetShowBackgroundAlways: GetShowBackgroundAlways::<Identity, Impl, OFFSET>,
            GetFontStyle: GetFontStyle::<Identity, Impl, OFFSET>,
            GetBold: GetBold::<Identity, Impl, OFFSET>,
            GetRightToLeft: GetRightToLeft::<Identity, Impl, OFFSET>,
            GetTextAlignment: GetTextAlignment::<Identity, Impl, OFFSET>,
            GetTextDecoration: GetTextDecoration::<Identity, Impl, OFFSET>,
            GetTextOutline: GetTextOutline::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTimedTextStyle2_Impl: ::windows_core::BaseImpl {
    fn GetRuby(this: &Self::This) -> ::windows_core::Result<IMFTimedTextRuby>;
    fn GetBouten(this: &Self::This) -> ::windows_core::Result<IMFTimedTextBouten>;
    fn IsTextCombined(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
    fn GetFontAngleInDegrees(this: &Self::This) -> ::windows_core::Result<f64>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTimedTextStyle2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextStyle2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRuby<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ruby: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRuby(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ruby, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBouten<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bouten: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBouten(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bouten, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsTextCombined<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsTextCombined(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFontAngleInDegrees<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextStyle2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFontAngleInDegrees(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(value, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextStyle2_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRuby: GetRuby::<Identity, Impl, OFFSET>,
            GetBouten: GetBouten::<Identity, Impl, OFFSET>,
            IsTextCombined: IsTextCombined::<Identity, Impl, OFFSET>,
            GetFontAngleInDegrees: GetFontAngleInDegrees::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTimedTextTrack_Impl: ::windows_core::BaseImpl {
    fn GetId(this: &Self::This) -> u32;
    fn GetLabel(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetLabel(this: &Self::This, label: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetLanguage(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetTrackKind(this: &Self::This) -> MF_TIMED_TEXT_TRACK_KIND;
    fn IsInBand(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetInBandMetadataTrackDispatchType(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn IsActive(this: &Self::This) -> super::super::Foundation::BOOL;
    fn GetErrorCode(this: &Self::This) -> MF_TIMED_TEXT_ERROR_CODE;
    fn GetExtendedErrorCode(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetDataFormat(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetReadyState(this: &Self::This) -> MF_TIMED_TEXT_TRACK_READY_STATE;
    fn GetCueList(this: &Self::This) -> ::windows_core::Result<IMFTimedTextCueList>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTimedTextTrack {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextTrack {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetId(this))
        }
        unsafe extern "system" fn GetLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, label: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLabel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(label, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, label: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLabel(this, ::core::mem::transmute(&label)).into())
        }
        unsafe extern "system" fn GetLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, language: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLanguage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(language, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTrackKind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_TIMED_TEXT_TRACK_KIND {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTrackKind(this))
        }
        unsafe extern "system" fn IsInBand<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsInBand(this))
        }
        unsafe extern "system" fn GetInBandMetadataTrackDispatchType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dispatchtype: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInBandMetadataTrackDispatchType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dispatchtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::super::Foundation::BOOL {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsActive(this))
        }
        unsafe extern "system" fn GetErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_TIMED_TEXT_ERROR_CODE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetErrorCode(this))
        }
        unsafe extern "system" fn GetExtendedErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtendedErrorCode(this).into())
        }
        unsafe extern "system" fn GetDataFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, format: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataFormat(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(format, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReadyState<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> MF_TIMED_TEXT_TRACK_READY_STATE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReadyState(this))
        }
        unsafe extern "system" fn GetCueList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrack_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cues: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCueList(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cues, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextTrack_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetId: GetId::<Identity, Impl, OFFSET>,
            GetLabel: GetLabel::<Identity, Impl, OFFSET>,
            SetLabel: SetLabel::<Identity, Impl, OFFSET>,
            GetLanguage: GetLanguage::<Identity, Impl, OFFSET>,
            GetTrackKind: GetTrackKind::<Identity, Impl, OFFSET>,
            IsInBand: IsInBand::<Identity, Impl, OFFSET>,
            GetInBandMetadataTrackDispatchType: GetInBandMetadataTrackDispatchType::<Identity, Impl, OFFSET>,
            IsActive: IsActive::<Identity, Impl, OFFSET>,
            GetErrorCode: GetErrorCode::<Identity, Impl, OFFSET>,
            GetExtendedErrorCode: GetExtendedErrorCode::<Identity, Impl, OFFSET>,
            GetDataFormat: GetDataFormat::<Identity, Impl, OFFSET>,
            GetReadyState: GetReadyState::<Identity, Impl, OFFSET>,
            GetCueList: GetCueList::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimedTextTrackList_Impl: ::windows_core::BaseImpl {
    fn GetLength(this: &Self::This) -> u32;
    fn GetTrack(this: &Self::This, index: u32) -> ::windows_core::Result<IMFTimedTextTrack>;
    fn GetTrackById(this: &Self::This, trackid: u32) -> ::windows_core::Result<IMFTimedTextTrack>;
}
impl ::windows_core::Iids for IMFTimedTextTrackList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrackList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimedTextTrackList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrackList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> u32 {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLength(this))
        }
        unsafe extern "system" fn GetTrack<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrackList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, track: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTrack(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(track, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTrackById<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimedTextTrackList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, trackid: u32, track: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTrackById(this, ::core::mem::transmute_copy(&trackid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(track, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTimedTextTrackList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetTrack: GetTrack::<Identity, Impl, OFFSET>,
            GetTrackById: GetTrackById::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTimer_Impl: ::windows_core::BaseImpl {
    fn SetTimer(this: &Self::This, dwflags: u32, llclocktime: i64, pcallback: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn CancelTimer(this: &Self::This, punkkey: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTimer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTimer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, llclocktime: i64, pcallback: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void, ppunkkey: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetTimer(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&llclocktime), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&punkstate)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkkey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CancelTimer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTimer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkkey: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelTimer(this, ::windows_core::from_raw_borrowed(&punkkey)).into())
        }
        IMFTimer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetTimer: SetTimer::<Identity, Impl, OFFSET>,
            CancelTimer: CancelTimer::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTopoLoader_Impl: ::windows_core::BaseImpl {
    fn Load(this: &Self::This, pinputtopo: ::core::option::Option<&IMFTopology>, ppoutputtopo: *mut ::core::option::Option<IMFTopology>, pcurrenttopo: ::core::option::Option<&IMFTopology>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTopoLoader {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopoLoader_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTopoLoader {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Load<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopoLoader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinputtopo: *mut ::core::ffi::c_void, ppoutputtopo: *mut *mut ::core::ffi::c_void, pcurrenttopo: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Load(this, ::windows_core::from_raw_borrowed(&pinputtopo), ::core::mem::transmute_copy(&ppoutputtopo), ::windows_core::from_raw_borrowed(&pcurrenttopo)).into())
        }
        IMFTopoLoader_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Load: Load::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFTopology_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn GetTopologyID(this: &Self::This) -> ::windows_core::Result<u64>;
    fn AddNode(this: &Self::This, pnode: ::core::option::Option<&IMFTopologyNode>) -> ::windows_core::Result<()>;
    fn RemoveNode(this: &Self::This, pnode: ::core::option::Option<&IMFTopologyNode>) -> ::windows_core::Result<()>;
    fn GetNodeCount(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetNode(this: &Self::This, windex: u16) -> ::windows_core::Result<IMFTopologyNode>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn CloneFrom(this: &Self::This, ptopology: ::core::option::Option<&IMFTopology>) -> ::windows_core::Result<()>;
    fn GetNodeByID(this: &Self::This, qwtoponodeid: u64) -> ::windows_core::Result<IMFTopologyNode>;
    fn GetSourceNodeCollection(this: &Self::This) -> ::windows_core::Result<IMFCollection>;
    fn GetOutputNodeCollection(this: &Self::This) -> ::windows_core::Result<IMFCollection>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFTopology {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTopology {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTopologyID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTopologyID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddNode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnode: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddNode(this, ::windows_core::from_raw_borrowed(&pnode)).into())
        }
        unsafe extern "system" fn RemoveNode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnode: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveNode(this, ::windows_core::from_raw_borrowed(&pnode)).into())
        }
        unsafe extern "system" fn GetNodeCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwnodes: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNodeCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwnodes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, windex: u16, ppnode: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNode(this, ::core::mem::transmute_copy(&windex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn CloneFrom<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptopology: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloneFrom(this, ::windows_core::from_raw_borrowed(&ptopology)).into())
        }
        unsafe extern "system" fn GetNodeByID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwtoponodeid: u64, ppnode: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNodeByID(this, ::core::mem::transmute_copy(&qwtoponodeid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceNodeCollection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcollection: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSourceNodeCollection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcollection, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputNodeCollection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopology_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcollection: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputNodeCollection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcollection, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTopology_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTopologyID: GetTopologyID::<Identity, Impl, OFFSET>,
            AddNode: AddNode::<Identity, Impl, OFFSET>,
            RemoveNode: RemoveNode::<Identity, Impl, OFFSET>,
            GetNodeCount: GetNodeCount::<Identity, Impl, OFFSET>,
            GetNode: GetNode::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            CloneFrom: CloneFrom::<Identity, Impl, OFFSET>,
            GetNodeByID: GetNodeByID::<Identity, Impl, OFFSET>,
            GetSourceNodeCollection: GetSourceNodeCollection::<Identity, Impl, OFFSET>,
            GetOutputNodeCollection: GetOutputNodeCollection::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFTopologyNode_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn SetObject(this: &Self::This, pobject: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetObject(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn GetNodeType(this: &Self::This) -> ::windows_core::Result<MF_TOPOLOGY_TYPE>;
    fn GetTopoNodeID(this: &Self::This) -> ::windows_core::Result<u64>;
    fn SetTopoNodeID(this: &Self::This, ulltopoid: u64) -> ::windows_core::Result<()>;
    fn GetInputCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOutputCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn ConnectOutput(this: &Self::This, dwoutputindex: u32, pdownstreamnode: ::core::option::Option<&IMFTopologyNode>, dwinputindexondownstreamnode: u32) -> ::windows_core::Result<()>;
    fn DisconnectOutput(this: &Self::This, dwoutputindex: u32) -> ::windows_core::Result<()>;
    fn GetInput(this: &Self::This, dwinputindex: u32, ppupstreamnode: *mut ::core::option::Option<IMFTopologyNode>, pdwoutputindexonupstreamnode: *mut u32) -> ::windows_core::Result<()>;
    fn GetOutput(this: &Self::This, dwoutputindex: u32, ppdownstreamnode: *mut ::core::option::Option<IMFTopologyNode>, pdwinputindexondownstreamnode: *mut u32) -> ::windows_core::Result<()>;
    fn SetOutputPrefType(this: &Self::This, dwoutputindex: u32, ptype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetOutputPrefType(this: &Self::This, dwoutputindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn SetInputPrefType(this: &Self::This, dwinputindex: u32, ptype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn GetInputPrefType(this: &Self::This, dwinputindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn CloneFrom(this: &Self::This, pnode: ::core::option::Option<&IMFTopologyNode>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFTopologyNode {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTopologyNode {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobject: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetObject(this, ::windows_core::from_raw_borrowed(&pobject)).into())
        }
        unsafe extern "system" fn GetObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNodeType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptype: *mut MF_TOPOLOGY_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNodeType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTopoNodeID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTopoNodeID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTopoNodeID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulltopoid: u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTopoNodeID(this, ::core::mem::transmute_copy(&ulltopoid)).into())
        }
        unsafe extern "system" fn GetInputCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcinputs: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcinputs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcoutputs: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcoutputs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ConnectOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputindex: u32, pdownstreamnode: *mut ::core::ffi::c_void, dwinputindexondownstreamnode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConnectOutput(this, ::core::mem::transmute_copy(&dwoutputindex), ::windows_core::from_raw_borrowed(&pdownstreamnode), ::core::mem::transmute_copy(&dwinputindexondownstreamnode)).into())
        }
        unsafe extern "system" fn DisconnectOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisconnectOutput(this, ::core::mem::transmute_copy(&dwoutputindex)).into())
        }
        unsafe extern "system" fn GetInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputindex: u32, ppupstreamnode: *mut *mut ::core::ffi::c_void, pdwoutputindexonupstreamnode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInput(this, ::core::mem::transmute_copy(&dwinputindex), ::core::mem::transmute_copy(&ppupstreamnode), ::core::mem::transmute_copy(&pdwoutputindexonupstreamnode)).into())
        }
        unsafe extern "system" fn GetOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputindex: u32, ppdownstreamnode: *mut *mut ::core::ffi::c_void, pdwinputindexondownstreamnode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetOutput(this, ::core::mem::transmute_copy(&dwoutputindex), ::core::mem::transmute_copy(&ppdownstreamnode), ::core::mem::transmute_copy(&pdwinputindexondownstreamnode)).into())
        }
        unsafe extern "system" fn SetOutputPrefType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputindex: u32, ptype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputPrefType(this, ::core::mem::transmute_copy(&dwoutputindex), ::windows_core::from_raw_borrowed(&ptype)).into())
        }
        unsafe extern "system" fn GetOutputPrefType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputindex: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputPrefType(this, ::core::mem::transmute_copy(&dwoutputindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputPrefType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputindex: u32, ptype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputPrefType(this, ::core::mem::transmute_copy(&dwinputindex), ::windows_core::from_raw_borrowed(&ptype)).into())
        }
        unsafe extern "system" fn GetInputPrefType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputindex: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputPrefType(this, ::core::mem::transmute_copy(&dwinputindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CloneFrom<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNode_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnode: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CloneFrom(this, ::windows_core::from_raw_borrowed(&pnode)).into())
        }
        IMFTopologyNode_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetObject: SetObject::<Identity, Impl, OFFSET>,
            GetObject: GetObject::<Identity, Impl, OFFSET>,
            GetNodeType: GetNodeType::<Identity, Impl, OFFSET>,
            GetTopoNodeID: GetTopoNodeID::<Identity, Impl, OFFSET>,
            SetTopoNodeID: SetTopoNodeID::<Identity, Impl, OFFSET>,
            GetInputCount: GetInputCount::<Identity, Impl, OFFSET>,
            GetOutputCount: GetOutputCount::<Identity, Impl, OFFSET>,
            ConnectOutput: ConnectOutput::<Identity, Impl, OFFSET>,
            DisconnectOutput: DisconnectOutput::<Identity, Impl, OFFSET>,
            GetInput: GetInput::<Identity, Impl, OFFSET>,
            GetOutput: GetOutput::<Identity, Impl, OFFSET>,
            SetOutputPrefType: SetOutputPrefType::<Identity, Impl, OFFSET>,
            GetOutputPrefType: GetOutputPrefType::<Identity, Impl, OFFSET>,
            SetInputPrefType: SetInputPrefType::<Identity, Impl, OFFSET>,
            GetInputPrefType: GetInputPrefType::<Identity, Impl, OFFSET>,
            CloneFrom: CloneFrom::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTopologyNodeAttributeEditor_Impl: ::windows_core::BaseImpl {
    fn UpdateNodeAttributes(this: &Self::This, topoid: u64, cupdates: u32, pupdates: *const MFTOPONODE_ATTRIBUTE_UPDATE) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTopologyNodeAttributeEditor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNodeAttributeEditor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTopologyNodeAttributeEditor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UpdateNodeAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyNodeAttributeEditor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, topoid: u64, cupdates: u32, pupdates: *const MFTOPONODE_ATTRIBUTE_UPDATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateNodeAttributes(this, ::core::mem::transmute_copy(&topoid), ::core::mem::transmute_copy(&cupdates), ::core::mem::transmute_copy(&pupdates)).into())
        }
        IMFTopologyNodeAttributeEditor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            UpdateNodeAttributes: UpdateNodeAttributes::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTopologyServiceLookup_Impl: ::windows_core::BaseImpl {
    fn LookupService(this: &Self::This, r#type: MF_SERVICE_LOOKUP_TYPE, dwindex: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobjects: *mut *mut ::core::ffi::c_void, pnobjects: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTopologyServiceLookup {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyServiceLookup_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTopologyServiceLookup {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LookupService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyServiceLookup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: MF_SERVICE_LOOKUP_TYPE, dwindex: u32, guidservice: *const ::windows_core::GUID, riid: *const ::windows_core::GUID, ppvobjects: *mut *mut ::core::ffi::c_void, pnobjects: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LookupService(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&guidservice), ::core::mem::transmute_copy(&riid), ::core::mem::transmute_copy(&ppvobjects), ::core::mem::transmute_copy(&pnobjects)).into())
        }
        IMFTopologyServiceLookup_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, LookupService: LookupService::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFTopologyServiceLookupClient_Impl: ::windows_core::BaseImpl {
    fn InitServicePointers(this: &Self::This, plookup: ::core::option::Option<&IMFTopologyServiceLookup>) -> ::windows_core::Result<()>;
    fn ReleaseServicePointers(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTopologyServiceLookupClient {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyServiceLookupClient_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTopologyServiceLookupClient {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitServicePointers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyServiceLookupClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plookup: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitServicePointers(this, ::windows_core::from_raw_borrowed(&plookup)).into())
        }
        unsafe extern "system" fn ReleaseServicePointers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTopologyServiceLookupClient_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReleaseServicePointers(this).into())
        }
        IMFTopologyServiceLookupClient_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitServicePointers: InitServicePointers::<Identity, Impl, OFFSET>,
            ReleaseServicePointers: ReleaseServicePointers::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTrackedSample_Impl: ::windows_core::BaseImpl {
    fn SetAllocator(this: &Self::This, psampleallocator: ::core::option::Option<&IMFAsyncCallback>, punkstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTrackedSample {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrackedSample_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTrackedSample {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrackedSample_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psampleallocator: *mut ::core::ffi::c_void, punkstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllocator(this, ::windows_core::from_raw_borrowed(&psampleallocator), ::windows_core::from_raw_borrowed(&punkstate)).into())
        }
        IMFTrackedSample_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetAllocator: SetAllocator::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFTranscodeProfile_Impl: ::windows_core::BaseImpl {
    fn SetAudioAttributes(this: &Self::This, pattrs: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn GetAudioAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn SetVideoAttributes(this: &Self::This, pattrs: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn GetVideoAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn SetContainerAttributes(this: &Self::This, pattrs: ::core::option::Option<&IMFAttributes>) -> ::windows_core::Result<()>;
    fn GetContainerAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
}
impl ::windows_core::Iids for IMFTranscodeProfile {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTranscodeProfile {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAudioAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattrs: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAudioAttributes(this, ::windows_core::from_raw_borrowed(&pattrs)).into())
        }
        unsafe extern "system" fn GetAudioAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattrs: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAudioAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattrs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVideoAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattrs: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoAttributes(this, ::windows_core::from_raw_borrowed(&pattrs)).into())
        }
        unsafe extern "system" fn GetVideoAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattrs: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattrs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContainerAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattrs: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContainerAttributes(this, ::windows_core::from_raw_borrowed(&pattrs)).into())
        }
        unsafe extern "system" fn GetContainerAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppattrs: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContainerAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppattrs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTranscodeProfile_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAudioAttributes: SetAudioAttributes::<Identity, Impl, OFFSET>,
            GetAudioAttributes: GetAudioAttributes::<Identity, Impl, OFFSET>,
            SetVideoAttributes: SetVideoAttributes::<Identity, Impl, OFFSET>,
            GetVideoAttributes: GetVideoAttributes::<Identity, Impl, OFFSET>,
            SetContainerAttributes: SetContainerAttributes::<Identity, Impl, OFFSET>,
            GetContainerAttributes: GetContainerAttributes::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTranscodeSinkInfoProvider_Impl: ::windows_core::BaseImpl {
    fn SetOutputFile(this: &Self::This, pwszfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn SetOutputByteStream(this: &Self::This, pbytestreamactivate: ::core::option::Option<&IMFActivate>) -> ::windows_core::Result<()>;
    fn SetProfile(this: &Self::This, pprofile: ::core::option::Option<&IMFTranscodeProfile>) -> ::windows_core::Result<()>;
    fn GetSinkInfo(this: &Self::This) -> ::windows_core::Result<MF_TRANSCODE_SINK_INFO>;
}
impl ::windows_core::Iids for IMFTranscodeSinkInfoProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeSinkInfoProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTranscodeSinkInfoProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetOutputFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeSinkInfoProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputFile(this, ::core::mem::transmute(&pwszfilename)).into())
        }
        unsafe extern "system" fn SetOutputByteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeSinkInfoProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbytestreamactivate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputByteStream(this, ::windows_core::from_raw_borrowed(&pbytestreamactivate)).into())
        }
        unsafe extern "system" fn SetProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeSinkInfoProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprofile: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProfile(this, ::windows_core::from_raw_borrowed(&pprofile)).into())
        }
        unsafe extern "system" fn GetSinkInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTranscodeSinkInfoProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psinkinfo: *mut MF_TRANSCODE_SINK_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSinkInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psinkinfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTranscodeSinkInfoProvider_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetOutputFile: SetOutputFile::<Identity, Impl, OFFSET>,
            SetOutputByteStream: SetOutputByteStream::<Identity, Impl, OFFSET>,
            SetProfile: SetProfile::<Identity, Impl, OFFSET>,
            GetSinkInfo: GetSinkInfo::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTransform_Impl: ::windows_core::BaseImpl {
    fn GetStreamLimits(this: &Self::This, pdwinputminimum: *mut u32, pdwinputmaximum: *mut u32, pdwoutputminimum: *mut u32, pdwoutputmaximum: *mut u32) -> ::windows_core::Result<()>;
    fn GetStreamCount(this: &Self::This, pcinputstreams: *mut u32, pcoutputstreams: *mut u32) -> ::windows_core::Result<()>;
    fn GetStreamIDs(this: &Self::This, dwinputidarraysize: u32, pdwinputids: *mut u32, dwoutputidarraysize: u32, pdwoutputids: *mut u32) -> ::windows_core::Result<()>;
    fn GetInputStreamInfo(this: &Self::This, dwinputstreamid: u32, pstreaminfo: *mut MFT_INPUT_STREAM_INFO) -> ::windows_core::Result<()>;
    fn GetOutputStreamInfo(this: &Self::This, dwoutputstreamid: u32) -> ::windows_core::Result<MFT_OUTPUT_STREAM_INFO>;
    fn GetAttributes(this: &Self::This) -> ::windows_core::Result<IMFAttributes>;
    fn GetInputStreamAttributes(this: &Self::This, dwinputstreamid: u32) -> ::windows_core::Result<IMFAttributes>;
    fn GetOutputStreamAttributes(this: &Self::This, dwoutputstreamid: u32) -> ::windows_core::Result<IMFAttributes>;
    fn DeleteInputStream(this: &Self::This, dwstreamid: u32) -> ::windows_core::Result<()>;
    fn AddInputStreams(this: &Self::This, cstreams: u32, adwstreamids: *const u32) -> ::windows_core::Result<()>;
    fn GetInputAvailableType(this: &Self::This, dwinputstreamid: u32, dwtypeindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetOutputAvailableType(this: &Self::This, dwoutputstreamid: u32, dwtypeindex: u32) -> ::windows_core::Result<IMFMediaType>;
    fn SetInputType(this: &Self::This, dwinputstreamid: u32, ptype: ::core::option::Option<&IMFMediaType>, dwflags: u32) -> ::windows_core::Result<()>;
    fn SetOutputType(this: &Self::This, dwoutputstreamid: u32, ptype: ::core::option::Option<&IMFMediaType>, dwflags: u32) -> ::windows_core::Result<()>;
    fn GetInputCurrentType(this: &Self::This, dwinputstreamid: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetOutputCurrentType(this: &Self::This, dwoutputstreamid: u32) -> ::windows_core::Result<IMFMediaType>;
    fn GetInputStatus(this: &Self::This, dwinputstreamid: u32) -> ::windows_core::Result<u32>;
    fn GetOutputStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetOutputBounds(this: &Self::This, hnslowerbound: i64, hnsupperbound: i64) -> ::windows_core::Result<()>;
    fn ProcessEvent(this: &Self::This, dwinputstreamid: u32, pevent: ::core::option::Option<&IMFMediaEvent>) -> ::windows_core::Result<()>;
    fn ProcessMessage(this: &Self::This, emessage: MFT_MESSAGE_TYPE, ulparam: usize) -> ::windows_core::Result<()>;
    fn ProcessInput(this: &Self::This, dwinputstreamid: u32, psample: ::core::option::Option<&IMFSample>, dwflags: u32) -> ::windows_core::Result<()>;
    fn ProcessOutput(this: &Self::This, dwflags: u32, coutputbuffercount: u32, poutputsamples: *mut MFT_OUTPUT_DATA_BUFFER, pdwstatus: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFTransform {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTransform {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamLimits<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwinputminimum: *mut u32, pdwinputmaximum: *mut u32, pdwoutputminimum: *mut u32, pdwoutputmaximum: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamLimits(this, ::core::mem::transmute_copy(&pdwinputminimum), ::core::mem::transmute_copy(&pdwinputmaximum), ::core::mem::transmute_copy(&pdwoutputminimum), ::core::mem::transmute_copy(&pdwoutputmaximum)).into())
        }
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcinputstreams: *mut u32, pcoutputstreams: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamCount(this, ::core::mem::transmute_copy(&pcinputstreams), ::core::mem::transmute_copy(&pcoutputstreams)).into())
        }
        unsafe extern "system" fn GetStreamIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputidarraysize: u32, pdwinputids: *mut u32, dwoutputidarraysize: u32, pdwoutputids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetStreamIDs(this, ::core::mem::transmute_copy(&dwinputidarraysize), ::core::mem::transmute_copy(&pdwinputids), ::core::mem::transmute_copy(&dwoutputidarraysize), ::core::mem::transmute_copy(&pdwoutputids)).into())
        }
        unsafe extern "system" fn GetInputStreamInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pstreaminfo: *mut MFT_INPUT_STREAM_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInputStreamInfo(this, ::core::mem::transmute_copy(&dwinputstreamid), ::core::mem::transmute_copy(&pstreaminfo)).into())
        }
        unsafe extern "system" fn GetOutputStreamInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, pstreaminfo: *mut MFT_OUTPUT_STREAM_INFO) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStreamInfo(this, ::core::mem::transmute_copy(&dwoutputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstreaminfo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputStreamAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputStreamAttributes(this, ::core::mem::transmute_copy(&dwinputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputStreamAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, pattributes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStreamAttributes(this, ::core::mem::transmute_copy(&dwoutputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteInputStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteInputStream(this, ::core::mem::transmute_copy(&dwstreamid)).into())
        }
        unsafe extern "system" fn AddInputStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cstreams: u32, adwstreamids: *const u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddInputStreams(this, ::core::mem::transmute_copy(&cstreams), ::core::mem::transmute_copy(&adwstreamids)).into())
        }
        unsafe extern "system" fn GetInputAvailableType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, dwtypeindex: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputAvailableType(this, ::core::mem::transmute_copy(&dwinputstreamid), ::core::mem::transmute_copy(&dwtypeindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputAvailableType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, dwtypeindex: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputAvailableType(this, ::core::mem::transmute_copy(&dwoutputstreamid), ::core::mem::transmute_copy(&dwtypeindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, ptype: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputType(this, ::core::mem::transmute_copy(&dwinputstreamid), ::windows_core::from_raw_borrowed(&ptype), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn SetOutputType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, ptype: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputType(this, ::core::mem::transmute_copy(&dwoutputstreamid), ::windows_core::from_raw_borrowed(&ptype), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn GetInputCurrentType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputCurrentType(this, ::core::mem::transmute_copy(&dwinputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputCurrentType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwoutputstreamid: u32, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputCurrentType(this, ::core::mem::transmute_copy(&dwoutputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetInputStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputStatus(this, ::core::mem::transmute_copy(&dwinputstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputBounds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnslowerbound: i64, hnsupperbound: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputBounds(this, ::core::mem::transmute_copy(&hnslowerbound), ::core::mem::transmute_copy(&hnsupperbound)).into())
        }
        unsafe extern "system" fn ProcessEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, pevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessEvent(this, ::core::mem::transmute_copy(&dwinputstreamid), ::windows_core::from_raw_borrowed(&pevent)).into())
        }
        unsafe extern "system" fn ProcessMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emessage: MFT_MESSAGE_TYPE, ulparam: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessMessage(this, ::core::mem::transmute_copy(&emessage), ::core::mem::transmute_copy(&ulparam)).into())
        }
        unsafe extern "system" fn ProcessInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwinputstreamid: u32, psample: *mut ::core::ffi::c_void, dwflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessInput(this, ::core::mem::transmute_copy(&dwinputstreamid), ::windows_core::from_raw_borrowed(&psample), ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn ProcessOutput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTransform_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, coutputbuffercount: u32, poutputsamples: *mut MFT_OUTPUT_DATA_BUFFER, pdwstatus: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessOutput(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&coutputbuffercount), ::core::mem::transmute_copy(&poutputsamples), ::core::mem::transmute_copy(&pdwstatus)).into())
        }
        IMFTransform_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamLimits: GetStreamLimits::<Identity, Impl, OFFSET>,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetStreamIDs: GetStreamIDs::<Identity, Impl, OFFSET>,
            GetInputStreamInfo: GetInputStreamInfo::<Identity, Impl, OFFSET>,
            GetOutputStreamInfo: GetOutputStreamInfo::<Identity, Impl, OFFSET>,
            GetAttributes: GetAttributes::<Identity, Impl, OFFSET>,
            GetInputStreamAttributes: GetInputStreamAttributes::<Identity, Impl, OFFSET>,
            GetOutputStreamAttributes: GetOutputStreamAttributes::<Identity, Impl, OFFSET>,
            DeleteInputStream: DeleteInputStream::<Identity, Impl, OFFSET>,
            AddInputStreams: AddInputStreams::<Identity, Impl, OFFSET>,
            GetInputAvailableType: GetInputAvailableType::<Identity, Impl, OFFSET>,
            GetOutputAvailableType: GetOutputAvailableType::<Identity, Impl, OFFSET>,
            SetInputType: SetInputType::<Identity, Impl, OFFSET>,
            SetOutputType: SetOutputType::<Identity, Impl, OFFSET>,
            GetInputCurrentType: GetInputCurrentType::<Identity, Impl, OFFSET>,
            GetOutputCurrentType: GetOutputCurrentType::<Identity, Impl, OFFSET>,
            GetInputStatus: GetInputStatus::<Identity, Impl, OFFSET>,
            GetOutputStatus: GetOutputStatus::<Identity, Impl, OFFSET>,
            SetOutputBounds: SetOutputBounds::<Identity, Impl, OFFSET>,
            ProcessEvent: ProcessEvent::<Identity, Impl, OFFSET>,
            ProcessMessage: ProcessMessage::<Identity, Impl, OFFSET>,
            ProcessInput: ProcessInput::<Identity, Impl, OFFSET>,
            ProcessOutput: ProcessOutput::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFTrustedInput_Impl: ::windows_core::BaseImpl {
    fn GetInputTrustAuthority(this: &Self::This, dwstreamid: u32, riid: *const ::windows_core::GUID) -> ::windows_core::Result<::windows_core::IUnknown>;
}
impl ::windows_core::Iids for IMFTrustedInput {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrustedInput_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTrustedInput {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetInputTrustAuthority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrustedInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, riid: *const ::windows_core::GUID, ppunkobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInputTrustAuthority(this, ::core::mem::transmute_copy(&dwstreamid), ::core::mem::transmute_copy(&riid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTrustedInput_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetInputTrustAuthority: GetInputTrustAuthority::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFTrustedOutput_Impl: ::windows_core::BaseImpl {
    fn GetOutputTrustAuthorityCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOutputTrustAuthorityByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IMFOutputTrustAuthority>;
    fn IsFinal(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFTrustedOutput {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrustedOutput_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFTrustedOutput {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetOutputTrustAuthorityCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrustedOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcoutputtrustauthorities: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputTrustAuthorityCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcoutputtrustauthorities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOutputTrustAuthorityByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrustedOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppauthority: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOutputTrustAuthorityByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppauthority, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsFinal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFTrustedOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfisfinal: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsFinal(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfisfinal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFTrustedOutput_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetOutputTrustAuthorityCount: GetOutputTrustAuthorityCount::<Identity, Impl, OFFSET>,
            GetOutputTrustAuthorityByIndex: GetOutputTrustAuthorityByIndex::<Identity, Impl, OFFSET>,
            IsFinal: IsFinal::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoCaptureSampleAllocator_Impl: ::windows_core::BaseImpl + IMFVideoSampleAllocator_Impl {
    fn InitializeCaptureSampleAllocator(this: &Self::This, cbsamplesize: u32, cbcapturemetadatasize: u32, cbalignment: u32, cminimumsamples: u32, pattributes: ::core::option::Option<&IMFAttributes>, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoCaptureSampleAllocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFVideoSampleAllocator);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoCaptureSampleAllocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoCaptureSampleAllocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeCaptureSampleAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoCaptureSampleAllocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cbsamplesize: u32, cbcapturemetadatasize: u32, cbalignment: u32, cminimumsamples: u32, pattributes: *mut ::core::ffi::c_void, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeCaptureSampleAllocator(this, ::core::mem::transmute_copy(&cbsamplesize), ::core::mem::transmute_copy(&cbcapturemetadatasize), ::core::mem::transmute_copy(&cbalignment), ::core::mem::transmute_copy(&cminimumsamples), ::windows_core::from_raw_borrowed(&pattributes), ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        IMFVideoCaptureSampleAllocator_Vtbl {
            base__: <IMFVideoSampleAllocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeCaptureSampleAllocator: InitializeCaptureSampleAllocator::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoDeviceID_Impl: ::windows_core::BaseImpl {
    fn GetDeviceID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
}
impl ::windows_core::Iids for IMFVideoDeviceID {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDeviceID_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoDeviceID {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDeviceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDeviceID_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdeviceid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDeviceID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdeviceid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoDeviceID_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetDeviceID: GetDeviceID::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
pub trait IMFVideoDisplayControl_Impl: ::windows_core::BaseImpl {
    fn GetNativeVideoSize(this: &Self::This, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn GetIdealVideoSize(this: &Self::This, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn SetVideoPosition(this: &Self::This, pnrcsource: *const MFVideoNormalizedRect, prcdest: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn GetVideoPosition(this: &Self::This, pnrcsource: *mut MFVideoNormalizedRect, prcdest: *mut super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn SetAspectRatioMode(this: &Self::This, dwaspectratiomode: u32) -> ::windows_core::Result<()>;
    fn GetAspectRatioMode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetVideoWindow(this: &Self::This, hwndvideo: super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn GetVideoWindow(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::HWND>;
    fn RepaintVideo(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCurrentImage(this: &Self::This, pbih: *mut super::super::Graphics::Gdi::BITMAPINFOHEADER, pdib: *mut *mut u8, pcbdib: *mut u32, ptimestamp: *mut i64) -> ::windows_core::Result<()>;
    fn SetBorderColor(this: &Self::This, clr: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
    fn GetBorderColor(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::COLORREF>;
    fn SetRenderingPrefs(this: &Self::This, dwrenderflags: u32) -> ::windows_core::Result<()>;
    fn GetRenderingPrefs(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetFullscreen(this: &Self::This, ffullscreen: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetFullscreen(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IMFVideoDisplayControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoDisplayControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNativeVideoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszvideo: *mut super::super::Foundation::SIZE, pszarvideo: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNativeVideoSize(this, ::core::mem::transmute_copy(&pszvideo), ::core::mem::transmute_copy(&pszarvideo)).into())
        }
        unsafe extern "system" fn GetIdealVideoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszmin: *mut super::super::Foundation::SIZE, pszmax: *mut super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdealVideoSize(this, ::core::mem::transmute_copy(&pszmin), ::core::mem::transmute_copy(&pszmax)).into())
        }
        unsafe extern "system" fn SetVideoPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnrcsource: *const MFVideoNormalizedRect, prcdest: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoPosition(this, ::core::mem::transmute_copy(&pnrcsource), ::core::mem::transmute_copy(&prcdest)).into())
        }
        unsafe extern "system" fn GetVideoPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnrcsource: *mut MFVideoNormalizedRect, prcdest: *mut super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoPosition(this, ::core::mem::transmute_copy(&pnrcsource), ::core::mem::transmute_copy(&prcdest)).into())
        }
        unsafe extern "system" fn SetAspectRatioMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwaspectratiomode: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAspectRatioMode(this, ::core::mem::transmute_copy(&dwaspectratiomode)).into())
        }
        unsafe extern "system" fn GetAspectRatioMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwaspectratiomode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAspectRatioMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwaspectratiomode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVideoWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndvideo: super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoWindow(this, ::core::mem::transmute_copy(&hwndvideo)).into())
        }
        unsafe extern "system" fn GetVideoWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwndvideo: *mut super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwndvideo, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RepaintVideo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RepaintVideo(this).into())
        }
        unsafe extern "system" fn GetCurrentImage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbih: *mut super::super::Graphics::Gdi::BITMAPINFOHEADER, pdib: *mut *mut u8, pcbdib: *mut u32, ptimestamp: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentImage(this, ::core::mem::transmute_copy(&pbih), ::core::mem::transmute_copy(&pdib), ::core::mem::transmute_copy(&pcbdib), ::core::mem::transmute_copy(&ptimestamp)).into())
        }
        unsafe extern "system" fn SetBorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clr: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBorderColor(this, ::core::mem::transmute_copy(&clr)).into())
        }
        unsafe extern "system" fn GetBorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pclr: *mut super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBorderColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pclr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRenderingPrefs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrenderflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRenderingPrefs(this, ::core::mem::transmute_copy(&dwrenderflags)).into())
        }
        unsafe extern "system" fn GetRenderingPrefs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwrenderflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRenderingPrefs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwrenderflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFullscreen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ffullscreen: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFullscreen(this, ::core::mem::transmute_copy(&ffullscreen)).into())
        }
        unsafe extern "system" fn GetFullscreen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoDisplayControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pffullscreen: *mut super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFullscreen(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pffullscreen, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoDisplayControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNativeVideoSize: GetNativeVideoSize::<Identity, Impl, OFFSET>,
            GetIdealVideoSize: GetIdealVideoSize::<Identity, Impl, OFFSET>,
            SetVideoPosition: SetVideoPosition::<Identity, Impl, OFFSET>,
            GetVideoPosition: GetVideoPosition::<Identity, Impl, OFFSET>,
            SetAspectRatioMode: SetAspectRatioMode::<Identity, Impl, OFFSET>,
            GetAspectRatioMode: GetAspectRatioMode::<Identity, Impl, OFFSET>,
            SetVideoWindow: SetVideoWindow::<Identity, Impl, OFFSET>,
            GetVideoWindow: GetVideoWindow::<Identity, Impl, OFFSET>,
            RepaintVideo: RepaintVideo::<Identity, Impl, OFFSET>,
            GetCurrentImage: GetCurrentImage::<Identity, Impl, OFFSET>,
            SetBorderColor: SetBorderColor::<Identity, Impl, OFFSET>,
            GetBorderColor: GetBorderColor::<Identity, Impl, OFFSET>,
            SetRenderingPrefs: SetRenderingPrefs::<Identity, Impl, OFFSET>,
            GetRenderingPrefs: GetRenderingPrefs::<Identity, Impl, OFFSET>,
            SetFullscreen: SetFullscreen::<Identity, Impl, OFFSET>,
            GetFullscreen: GetFullscreen::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFVideoMediaType_Impl: ::windows_core::BaseImpl + IMFMediaType_Impl {
    fn GetVideoFormat(this: &Self::This) -> *mut MFVIDEOFORMAT;
    fn GetVideoRepresentation(this: &Self::This, guidrepresentation: &::windows_core::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void, lstride: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFVideoMediaType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFMediaType);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMediaType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoMediaType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetVideoFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> *mut MFVIDEOFORMAT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoFormat(this))
        }
        unsafe extern "system" fn GetVideoRepresentation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMediaType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidrepresentation: ::windows_core::GUID, ppvrepresentation: *mut *mut ::core::ffi::c_void, lstride: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoRepresentation(this, ::core::mem::transmute(&guidrepresentation), ::core::mem::transmute_copy(&ppvrepresentation), ::core::mem::transmute_copy(&lstride)).into())
        }
        IMFVideoMediaType_Vtbl {
            base__: <IMFMediaType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetVideoFormat: GetVideoFormat::<Identity, Impl, OFFSET>,
            GetVideoRepresentation: GetVideoRepresentation::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`, `\"Win32_Graphics_Gdi\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
pub trait IMFVideoMixerBitmap_Impl: ::windows_core::BaseImpl {
    fn SetAlphaBitmap(this: &Self::This, pbmpparms: *const MFVideoAlphaBitmap) -> ::windows_core::Result<()>;
    fn ClearAlphaBitmap(this: &Self::This) -> ::windows_core::Result<()>;
    fn UpdateAlphaBitmapParameters(this: &Self::This, pbmpparms: *const MFVideoAlphaBitmapParams) -> ::windows_core::Result<()>;
    fn GetAlphaBitmapParameters(this: &Self::This, pbmpparms: *mut MFVideoAlphaBitmapParams) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl ::windows_core::Iids for IMFVideoMixerBitmap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9", feature = "Win32_Graphics_Gdi"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerBitmap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoMixerBitmap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAlphaBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbmpparms: *const MFVideoAlphaBitmap) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlphaBitmap(this, ::core::mem::transmute_copy(&pbmpparms)).into())
        }
        unsafe extern "system" fn ClearAlphaBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClearAlphaBitmap(this).into())
        }
        unsafe extern "system" fn UpdateAlphaBitmapParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbmpparms: *const MFVideoAlphaBitmapParams) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateAlphaBitmapParameters(this, ::core::mem::transmute_copy(&pbmpparms)).into())
        }
        unsafe extern "system" fn GetAlphaBitmapParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerBitmap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbmpparms: *mut MFVideoAlphaBitmapParams) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAlphaBitmapParameters(this, ::core::mem::transmute_copy(&pbmpparms)).into())
        }
        IMFVideoMixerBitmap_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAlphaBitmap: SetAlphaBitmap::<Identity, Impl, OFFSET>,
            ClearAlphaBitmap: ClearAlphaBitmap::<Identity, Impl, OFFSET>,
            UpdateAlphaBitmapParameters: UpdateAlphaBitmapParameters::<Identity, Impl, OFFSET>,
            GetAlphaBitmapParameters: GetAlphaBitmapParameters::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoMixerControl_Impl: ::windows_core::BaseImpl {
    fn SetStreamZOrder(this: &Self::This, dwstreamid: u32, dwz: u32) -> ::windows_core::Result<()>;
    fn GetStreamZOrder(this: &Self::This, dwstreamid: u32) -> ::windows_core::Result<u32>;
    fn SetStreamOutputRect(this: &Self::This, dwstreamid: u32, pnrcoutput: *const MFVideoNormalizedRect) -> ::windows_core::Result<()>;
    fn GetStreamOutputRect(this: &Self::This, dwstreamid: u32) -> ::windows_core::Result<MFVideoNormalizedRect>;
}
impl ::windows_core::Iids for IMFVideoMixerControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoMixerControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetStreamZOrder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, dwz: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamZOrder(this, ::core::mem::transmute_copy(&dwstreamid), ::core::mem::transmute_copy(&dwz)).into())
        }
        unsafe extern "system" fn GetStreamZOrder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pdwz: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamZOrder(this, ::core::mem::transmute_copy(&dwstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwz, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamOutputRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pnrcoutput: *const MFVideoNormalizedRect) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamOutputRect(this, ::core::mem::transmute_copy(&dwstreamid), ::core::mem::transmute_copy(&pnrcoutput)).into())
        }
        unsafe extern "system" fn GetStreamOutputRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwstreamid: u32, pnrcoutput: *mut MFVideoNormalizedRect) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamOutputRect(this, ::core::mem::transmute_copy(&dwstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnrcoutput, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoMixerControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetStreamZOrder: SetStreamZOrder::<Identity, Impl, OFFSET>,
            GetStreamZOrder: GetStreamZOrder::<Identity, Impl, OFFSET>,
            SetStreamOutputRect: SetStreamOutputRect::<Identity, Impl, OFFSET>,
            GetStreamOutputRect: GetStreamOutputRect::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoMixerControl2_Impl: ::windows_core::BaseImpl + IMFVideoMixerControl_Impl {
    fn SetMixingPrefs(this: &Self::This, dwmixflags: u32) -> ::windows_core::Result<()>;
    fn GetMixingPrefs(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFVideoMixerControl2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFVideoMixerControl);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoMixerControl2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMixingPrefs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmixflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMixingPrefs(this, ::core::mem::transmute_copy(&dwmixflags)).into())
        }
        unsafe extern "system" fn GetMixingPrefs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoMixerControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmixflags: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMixingPrefs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwmixflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoMixerControl2_Vtbl {
            base__: <IMFVideoMixerControl as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetMixingPrefs: SetMixingPrefs::<Identity, Impl, OFFSET>,
            GetMixingPrefs: GetMixingPrefs::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoPositionMapper_Impl: ::windows_core::BaseImpl {
    fn MapOutputCoordinateToInputStream(this: &Self::This, xout: f32, yout: f32, dwoutputstreamindex: u32, dwinputstreamindex: u32, pxin: *mut f32, pyin: *mut f32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoPositionMapper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoPositionMapper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoPositionMapper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MapOutputCoordinateToInputStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoPositionMapper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, xout: f32, yout: f32, dwoutputstreamindex: u32, dwinputstreamindex: u32, pxin: *mut f32, pyin: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MapOutputCoordinateToInputStream(this, ::core::mem::transmute_copy(&xout), ::core::mem::transmute_copy(&yout), ::core::mem::transmute_copy(&dwoutputstreamindex), ::core::mem::transmute_copy(&dwinputstreamindex), ::core::mem::transmute_copy(&pxin), ::core::mem::transmute_copy(&pyin)).into())
        }
        IMFVideoPositionMapper_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MapOutputCoordinateToInputStream: MapOutputCoordinateToInputStream::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoPresenter_Impl: ::windows_core::BaseImpl + IMFClockStateSink_Impl {
    fn ProcessMessage(this: &Self::This, emessage: MFVP_MESSAGE_TYPE, ulparam: usize) -> ::windows_core::Result<()>;
    fn GetCurrentMediaType(this: &Self::This) -> ::windows_core::Result<IMFVideoMediaType>;
}
impl ::windows_core::Iids for IMFVideoPresenter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFClockStateSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoPresenter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoPresenter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProcessMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoPresenter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emessage: MFVP_MESSAGE_TYPE, ulparam: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProcessMessage(this, ::core::mem::transmute_copy(&emessage), ::core::mem::transmute_copy(&ulparam)).into())
        }
        unsafe extern "system" fn GetCurrentMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoPresenter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediatype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentMediaType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoPresenter_Vtbl {
            base__: <IMFClockStateSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ProcessMessage: ProcessMessage::<Identity, Impl, OFFSET>,
            GetCurrentMediaType: GetCurrentMediaType::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Direct3D9\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
pub trait IMFVideoProcessor_Impl: ::windows_core::BaseImpl {
    fn GetAvailableVideoProcessorModes(this: &Self::This, lpdwnumprocessingmodes: *mut u32, ppvideoprocessingmodes: *mut *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetVideoProcessorCaps(this: &Self::This, lpvideoprocessormode: *const ::windows_core::GUID, lpvideoprocessorcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows_core::Result<()>;
    fn GetVideoProcessorMode(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetVideoProcessorMode(this: &Self::This, lpmode: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetProcAmpRange(this: &Self::This, dwproperty: u32) -> ::windows_core::Result<DXVA2_ValueRange>;
    fn GetProcAmpValues(this: &Self::This, dwflags: u32) -> ::windows_core::Result<DXVA2_ProcAmpValues>;
    fn SetProcAmpValues(this: &Self::This, dwflags: u32, pvalues: *const DXVA2_ProcAmpValues) -> ::windows_core::Result<()>;
    fn GetFilteringRange(this: &Self::This, dwproperty: u32) -> ::windows_core::Result<DXVA2_ValueRange>;
    fn GetFilteringValue(this: &Self::This, dwproperty: u32) -> ::windows_core::Result<DXVA2_Fixed32>;
    fn SetFilteringValue(this: &Self::This, dwproperty: u32, pvalue: *const DXVA2_Fixed32) -> ::windows_core::Result<()>;
    fn GetBackgroundColor(this: &Self::This) -> ::windows_core::Result<super::super::Foundation::COLORREF>;
    fn SetBackgroundColor(this: &Self::This, clrbkg: super::super::Foundation::COLORREF) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl ::windows_core::Iids for IMFVideoProcessor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Direct3D9"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoProcessor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAvailableVideoProcessorModes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpdwnumprocessingmodes: *mut u32, ppvideoprocessingmodes: *mut *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAvailableVideoProcessorModes(this, ::core::mem::transmute_copy(&lpdwnumprocessingmodes), ::core::mem::transmute_copy(&ppvideoprocessingmodes)).into())
        }
        unsafe extern "system" fn GetVideoProcessorCaps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpvideoprocessormode: *const ::windows_core::GUID, lpvideoprocessorcaps: *mut DXVA2_VideoProcessorCaps) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetVideoProcessorCaps(this, ::core::mem::transmute_copy(&lpvideoprocessormode), ::core::mem::transmute_copy(&lpvideoprocessorcaps)).into())
        }
        unsafe extern "system" fn GetVideoProcessorMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpmode: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVideoProcessorMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVideoProcessorMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpmode: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoProcessorMode(this, ::core::mem::transmute_copy(&lpmode)).into())
        }
        unsafe extern "system" fn GetProcAmpRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pproprange: *mut DXVA2_ValueRange) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcAmpRange(this, ::core::mem::transmute_copy(&dwproperty)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pproprange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcAmpValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, values: *mut DXVA2_ProcAmpValues) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcAmpValues(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(values, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProcAmpValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pvalues: *const DXVA2_ProcAmpValues) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcAmpValues(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pvalues)).into())
        }
        unsafe extern "system" fn GetFilteringRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pproprange: *mut DXVA2_ValueRange) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFilteringRange(this, ::core::mem::transmute_copy(&dwproperty)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pproprange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFilteringValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvalue: *mut DXVA2_Fixed32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFilteringValue(this, ::core::mem::transmute_copy(&dwproperty)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFilteringValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwproperty: u32, pvalue: *const DXVA2_Fixed32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFilteringValue(this, ::core::mem::transmute_copy(&dwproperty), ::core::mem::transmute_copy(&pvalue)).into())
        }
        unsafe extern "system" fn GetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpclrbkg: *mut super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBackgroundColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpclrbkg, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBackgroundColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clrbkg: super::super::Foundation::COLORREF) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBackgroundColor(this, ::core::mem::transmute_copy(&clrbkg)).into())
        }
        IMFVideoProcessor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAvailableVideoProcessorModes: GetAvailableVideoProcessorModes::<Identity, Impl, OFFSET>,
            GetVideoProcessorCaps: GetVideoProcessorCaps::<Identity, Impl, OFFSET>,
            GetVideoProcessorMode: GetVideoProcessorMode::<Identity, Impl, OFFSET>,
            SetVideoProcessorMode: SetVideoProcessorMode::<Identity, Impl, OFFSET>,
            GetProcAmpRange: GetProcAmpRange::<Identity, Impl, OFFSET>,
            GetProcAmpValues: GetProcAmpValues::<Identity, Impl, OFFSET>,
            SetProcAmpValues: SetProcAmpValues::<Identity, Impl, OFFSET>,
            GetFilteringRange: GetFilteringRange::<Identity, Impl, OFFSET>,
            GetFilteringValue: GetFilteringValue::<Identity, Impl, OFFSET>,
            SetFilteringValue: SetFilteringValue::<Identity, Impl, OFFSET>,
            GetBackgroundColor: GetBackgroundColor::<Identity, Impl, OFFSET>,
            SetBackgroundColor: SetBackgroundColor::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFVideoProcessorControl_Impl: ::windows_core::BaseImpl {
    fn SetBorderColor(this: &Self::This, pbordercolor: *const MFARGB) -> ::windows_core::Result<()>;
    fn SetSourceRectangle(this: &Self::This, psrcrect: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn SetDestinationRectangle(this: &Self::This, pdstrect: *const super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn SetMirror(this: &Self::This, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows_core::Result<()>;
    fn SetRotation(this: &Self::This, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows_core::Result<()>;
    fn SetConstrictionSize(this: &Self::This, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFVideoProcessorControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoProcessorControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbordercolor: *const MFARGB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBorderColor(this, ::core::mem::transmute_copy(&pbordercolor)).into())
        }
        unsafe extern "system" fn SetSourceRectangle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psrcrect: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourceRectangle(this, ::core::mem::transmute_copy(&psrcrect)).into())
        }
        unsafe extern "system" fn SetDestinationRectangle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdstrect: *const super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDestinationRectangle(this, ::core::mem::transmute_copy(&pdstrect)).into())
        }
        unsafe extern "system" fn SetMirror<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, emirror: MF_VIDEO_PROCESSOR_MIRROR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMirror(this, ::core::mem::transmute_copy(&emirror)).into())
        }
        unsafe extern "system" fn SetRotation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, erotation: MF_VIDEO_PROCESSOR_ROTATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRotation(this, ::core::mem::transmute_copy(&erotation)).into())
        }
        unsafe extern "system" fn SetConstrictionSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pconstrictionsize: *const super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConstrictionSize(this, ::core::mem::transmute_copy(&pconstrictionsize)).into())
        }
        IMFVideoProcessorControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBorderColor: SetBorderColor::<Identity, Impl, OFFSET>,
            SetSourceRectangle: SetSourceRectangle::<Identity, Impl, OFFSET>,
            SetDestinationRectangle: SetDestinationRectangle::<Identity, Impl, OFFSET>,
            SetMirror: SetMirror::<Identity, Impl, OFFSET>,
            SetRotation: SetRotation::<Identity, Impl, OFFSET>,
            SetConstrictionSize: SetConstrictionSize::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFVideoProcessorControl2_Impl: ::windows_core::BaseImpl + IMFVideoProcessorControl_Impl {
    fn SetRotationOverride(this: &Self::This, uirotation: u32) -> ::windows_core::Result<()>;
    fn EnableHardwareEffects(this: &Self::This, fenabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetSupportedHardwareEffects(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFVideoProcessorControl2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFVideoProcessorControl);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoProcessorControl2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetRotationOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, uirotation: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRotationOverride(this, ::core::mem::transmute_copy(&uirotation)).into())
        }
        unsafe extern "system" fn EnableHardwareEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableHardwareEffects(this, ::core::mem::transmute_copy(&fenabled)).into())
        }
        unsafe extern "system" fn GetSupportedHardwareEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, puisupport: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSupportedHardwareEffects(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(puisupport, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoProcessorControl2_Vtbl {
            base__: <IMFVideoProcessorControl as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetRotationOverride: SetRotationOverride::<Identity, Impl, OFFSET>,
            EnableHardwareEffects: EnableHardwareEffects::<Identity, Impl, OFFSET>,
            GetSupportedHardwareEffects: GetSupportedHardwareEffects::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMFVideoProcessorControl3_Impl: ::windows_core::BaseImpl + IMFVideoProcessorControl2_Impl {
    fn GetNaturalOutputType(this: &Self::This) -> ::windows_core::Result<IMFMediaType>;
    fn EnableSphericalVideoProcessing(this: &Self::This, fenable: super::super::Foundation::BOOL, eformat: MFVideoSphericalFormat, eprojectionmode: MFVideoSphericalProjectionMode) -> ::windows_core::Result<()>;
    fn SetSphericalVideoProperties(this: &Self::This, x: f32, y: f32, z: f32, w: f32, fieldofview: f32) -> ::windows_core::Result<()>;
    fn SetOutputDevice(this: &Self::This, poutputdevice: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMFVideoProcessorControl3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFVideoProcessorControl2);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoProcessorControl3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNaturalOutputType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNaturalOutputType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnableSphericalVideoProcessing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenable: super::super::Foundation::BOOL, eformat: MFVideoSphericalFormat, eprojectionmode: MFVideoSphericalProjectionMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableSphericalVideoProcessing(this, ::core::mem::transmute_copy(&fenable), ::core::mem::transmute_copy(&eformat), ::core::mem::transmute_copy(&eprojectionmode)).into())
        }
        unsafe extern "system" fn SetSphericalVideoProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, x: f32, y: f32, z: f32, w: f32, fieldofview: f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSphericalVideoProperties(this, ::core::mem::transmute_copy(&x), ::core::mem::transmute_copy(&y), ::core::mem::transmute_copy(&z), ::core::mem::transmute_copy(&w), ::core::mem::transmute_copy(&fieldofview)).into())
        }
        unsafe extern "system" fn SetOutputDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoProcessorControl3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, poutputdevice: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputDevice(this, ::windows_core::from_raw_borrowed(&poutputdevice)).into())
        }
        IMFVideoProcessorControl3_Vtbl {
            base__: <IMFVideoProcessorControl2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNaturalOutputType: GetNaturalOutputType::<Identity, Impl, OFFSET>,
            EnableSphericalVideoProcessing: EnableSphericalVideoProcessing::<Identity, Impl, OFFSET>,
            SetSphericalVideoProperties: SetSphericalVideoProperties::<Identity, Impl, OFFSET>,
            SetOutputDevice: SetOutputDevice::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoRenderer_Impl: ::windows_core::BaseImpl {
    fn InitializeRenderer(this: &Self::This, pvideomixer: ::core::option::Option<&IMFTransform>, pvideopresenter: ::core::option::Option<&IMFVideoPresenter>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoRenderer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoRenderer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoRenderer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeRenderer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvideomixer: *mut ::core::ffi::c_void, pvideopresenter: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeRenderer(this, ::windows_core::from_raw_borrowed(&pvideomixer), ::windows_core::from_raw_borrowed(&pvideopresenter)).into())
        }
        IMFVideoRenderer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeRenderer: InitializeRenderer::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoRendererEffectControl_Impl: ::windows_core::BaseImpl {
    fn OnAppServiceConnectionEstablished(this: &Self::This, pappserviceconnection: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoRendererEffectControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoRendererEffectControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoRendererEffectControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnAppServiceConnectionEstablished<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoRendererEffectControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pappserviceconnection: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnAppServiceConnectionEstablished(this, ::windows_core::from_raw_borrowed(&pappserviceconnection)).into())
        }
        IMFVideoRendererEffectControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnAppServiceConnectionEstablished: OnAppServiceConnectionEstablished::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoSampleAllocator_Impl: ::windows_core::BaseImpl {
    fn SetDirectXManager(this: &Self::This, pmanager: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn UninitializeSampleAllocator(this: &Self::This) -> ::windows_core::Result<()>;
    fn InitializeSampleAllocator(this: &Self::This, crequestedframes: u32, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
    fn AllocateSample(this: &Self::This) -> ::windows_core::Result<IMFSample>;
}
impl ::windows_core::Iids for IMFVideoSampleAllocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoSampleAllocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDirectXManager<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmanager: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDirectXManager(this, ::windows_core::from_raw_borrowed(&pmanager)).into())
        }
        unsafe extern "system" fn UninitializeSampleAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UninitializeSampleAllocator(this).into())
        }
        unsafe extern "system" fn InitializeSampleAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, crequestedframes: u32, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeSampleAllocator(this, ::core::mem::transmute_copy(&crequestedframes), ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        unsafe extern "system" fn AllocateSample<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsample: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AllocateSample(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsample, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoSampleAllocator_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDirectXManager: SetDirectXManager::<Identity, Impl, OFFSET>,
            UninitializeSampleAllocator: UninitializeSampleAllocator::<Identity, Impl, OFFSET>,
            InitializeSampleAllocator: InitializeSampleAllocator::<Identity, Impl, OFFSET>,
            AllocateSample: AllocateSample::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoSampleAllocatorCallback_Impl: ::windows_core::BaseImpl {
    fn SetCallback(this: &Self::This, pnotify: ::core::option::Option<&IMFVideoSampleAllocatorNotify>) -> ::windows_core::Result<()>;
    fn GetFreeSampleCount(this: &Self::This) -> ::windows_core::Result<i32>;
}
impl ::windows_core::Iids for IMFVideoSampleAllocatorCallback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorCallback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoSampleAllocatorCallback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetCallback<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnotify: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCallback(this, ::windows_core::from_raw_borrowed(&pnotify)).into())
        }
        unsafe extern "system" fn GetFreeSampleCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorCallback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plsamples: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFreeSampleCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plsamples, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFVideoSampleAllocatorCallback_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetCallback: SetCallback::<Identity, Impl, OFFSET>,
            GetFreeSampleCount: GetFreeSampleCount::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoSampleAllocatorEx_Impl: ::windows_core::BaseImpl + IMFVideoSampleAllocator_Impl {
    fn InitializeSampleAllocatorEx(this: &Self::This, cinitialsamples: u32, cmaximumsamples: u32, pattributes: ::core::option::Option<&IMFAttributes>, pmediatype: ::core::option::Option<&IMFMediaType>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoSampleAllocatorEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFVideoSampleAllocator);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoSampleAllocatorEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeSampleAllocatorEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cinitialsamples: u32, cmaximumsamples: u32, pattributes: *mut ::core::ffi::c_void, pmediatype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeSampleAllocatorEx(this, ::core::mem::transmute_copy(&cinitialsamples), ::core::mem::transmute_copy(&cmaximumsamples), ::windows_core::from_raw_borrowed(&pattributes), ::windows_core::from_raw_borrowed(&pmediatype)).into())
        }
        IMFVideoSampleAllocatorEx_Vtbl {
            base__: <IMFVideoSampleAllocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeSampleAllocatorEx: InitializeSampleAllocatorEx::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFVideoSampleAllocatorNotify_Impl: ::windows_core::BaseImpl {
    fn NotifyRelease(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoSampleAllocatorNotify {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorNotify_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoSampleAllocatorNotify {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyRelease<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorNotify_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyRelease(this).into())
        }
        IMFVideoSampleAllocatorNotify_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, NotifyRelease: NotifyRelease::<Identity, Impl, OFFSET> }
    };
}
pub trait IMFVideoSampleAllocatorNotifyEx_Impl: ::windows_core::BaseImpl + IMFVideoSampleAllocatorNotify_Impl {
    fn NotifyPrune(this: &Self::This, __midl__imfvideosampleallocatornotifyex0000: ::core::option::Option<&IMFSample>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMFVideoSampleAllocatorNotifyEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFVideoSampleAllocatorNotify);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorNotifyEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVideoSampleAllocatorNotifyEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NotifyPrune<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVideoSampleAllocatorNotifyEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, __midl__imfvideosampleallocatornotifyex0000: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyPrune(this, ::windows_core::from_raw_borrowed(&__midl__imfvideosampleallocatornotifyex0000)).into())
        }
        IMFVideoSampleAllocatorNotifyEx_Vtbl { base__: <IMFVideoSampleAllocatorNotify as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, NotifyPrune: NotifyPrune::<Identity, Impl, OFFSET> }
    };
}
#[doc = "Required features: `\"Win32_Devices_Properties\"`, `\"Win32_Foundation\"`, `\"Win32_System_Com_StructuredStorage\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Devices_Properties", feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
pub trait IMFVirtualCamera_Impl: ::windows_core::BaseImpl + IMFAttributes_Impl {
    fn AddDeviceSourceInfo(this: &Self::This, devicesourceinfo: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddProperty(this: &Self::This, pkey: *const super::super::Devices::Properties::DEVPROPKEY, r#type: super::super::Devices::Properties::DEVPROPTYPE, pbdata: *const u8, cbdata: u32) -> ::windows_core::Result<()>;
    fn AddRegistryEntry(this: &Self::This, entryname: &::windows_core::PCWSTR, subkeypath: &::windows_core::PCWSTR, dwregtype: u32, pbdata: *const u8, cbdata: u32) -> ::windows_core::Result<()>;
    fn Start(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetMediaSource(this: &Self::This) -> ::windows_core::Result<IMFMediaSource>;
    fn SendCameraProperty(this: &Self::This, propertyset: *const ::windows_core::GUID, propertyid: u32, propertyflags: u32, propertypayload: *mut ::core::ffi::c_void, propertypayloadlength: u32, data: *mut ::core::ffi::c_void, datalength: u32, datawritten: *mut u32) -> ::windows_core::Result<()>;
    fn CreateSyncEvent(this: &Self::This, kseventset: *const ::windows_core::GUID, kseventid: u32, kseventflags: u32, eventhandle: super::super::Foundation::HANDLE) -> ::windows_core::Result<IMFCameraSyncObject>;
    fn CreateSyncSemaphore(this: &Self::This, kseventset: *const ::windows_core::GUID, kseventid: u32, kseventflags: u32, semaphorehandle: super::super::Foundation::HANDLE, semaphoreadjustment: i32) -> ::windows_core::Result<IMFCameraSyncObject>;
    fn Shutdown(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Devices_Properties", feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMFVirtualCamera {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAttributes);
}
#[cfg(all(feature = "Win32_Devices_Properties", feature = "Win32_Foundation", feature = "Win32_System_Com_StructuredStorage", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFVirtualCamera {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddDeviceSourceInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, devicesourceinfo: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddDeviceSourceInfo(this, ::core::mem::transmute(&devicesourceinfo)).into())
        }
        unsafe extern "system" fn AddProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkey: *const super::super::Devices::Properties::DEVPROPKEY, r#type: super::super::Devices::Properties::DEVPROPTYPE, pbdata: *const u8, cbdata: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddProperty(this, ::core::mem::transmute_copy(&pkey), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&cbdata)).into())
        }
        unsafe extern "system" fn AddRegistryEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, entryname: ::windows_core::PCWSTR, subkeypath: ::windows_core::PCWSTR, dwregtype: u32, pbdata: *const u8, cbdata: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRegistryEntry(this, ::core::mem::transmute(&entryname), ::core::mem::transmute(&subkeypath), ::core::mem::transmute_copy(&dwregtype), ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&cbdata)).into())
        }
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this, ::windows_core::from_raw_borrowed(&pcallback)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this).into())
        }
        unsafe extern "system" fn GetMediaSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmediasource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMediaSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediasource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SendCameraProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propertyset: *const ::windows_core::GUID, propertyid: u32, propertyflags: u32, propertypayload: *mut ::core::ffi::c_void, propertypayloadlength: u32, data: *mut ::core::ffi::c_void, datalength: u32, datawritten: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SendCameraProperty(this, ::core::mem::transmute_copy(&propertyset), ::core::mem::transmute_copy(&propertyid), ::core::mem::transmute_copy(&propertyflags), ::core::mem::transmute_copy(&propertypayload), ::core::mem::transmute_copy(&propertypayloadlength), ::core::mem::transmute_copy(&data), ::core::mem::transmute_copy(&datalength), ::core::mem::transmute_copy(&datawritten)).into())
        }
        unsafe extern "system" fn CreateSyncEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kseventset: *const ::windows_core::GUID, kseventid: u32, kseventflags: u32, eventhandle: super::super::Foundation::HANDLE, camerasyncobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSyncEvent(this, ::core::mem::transmute_copy(&kseventset), ::core::mem::transmute_copy(&kseventid), ::core::mem::transmute_copy(&kseventflags), ::core::mem::transmute_copy(&eventhandle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(camerasyncobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateSyncSemaphore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, kseventset: *const ::windows_core::GUID, kseventid: u32, kseventflags: u32, semaphorehandle: super::super::Foundation::HANDLE, semaphoreadjustment: i32, camerasyncobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateSyncSemaphore(this, ::core::mem::transmute_copy(&kseventset), ::core::mem::transmute_copy(&kseventid), ::core::mem::transmute_copy(&kseventflags), ::core::mem::transmute_copy(&semaphorehandle), ::core::mem::transmute_copy(&semaphoreadjustment)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(camerasyncobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Shutdown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFVirtualCamera_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Shutdown(this).into())
        }
        IMFVirtualCamera_Vtbl {
            base__: <IMFAttributes as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddDeviceSourceInfo: AddDeviceSourceInfo::<Identity, Impl, OFFSET>,
            AddProperty: AddProperty::<Identity, Impl, OFFSET>,
            AddRegistryEntry: AddRegistryEntry::<Identity, Impl, OFFSET>,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            GetMediaSource: GetMediaSource::<Identity, Impl, OFFSET>,
            SendCameraProperty: SendCameraProperty::<Identity, Impl, OFFSET>,
            CreateSyncEvent: CreateSyncEvent::<Identity, Impl, OFFSET>,
            CreateSyncSemaphore: CreateSyncSemaphore::<Identity, Impl, OFFSET>,
            Shutdown: Shutdown::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFWorkQueueServices_Impl: ::windows_core::BaseImpl {
    fn BeginRegisterTopologyWorkQueuesWithMMCSS(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndRegisterTopologyWorkQueuesWithMMCSS(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn BeginUnregisterTopologyWorkQueuesWithMMCSS(this: &Self::This, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndUnregisterTopologyWorkQueuesWithMMCSS(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn GetTopologyWorkQueueMMCSSClass(this: &Self::This, dwtopologyworkqueueid: u32, pwszclass: ::windows_core::PWSTR, pcchclass: *mut u32) -> ::windows_core::Result<()>;
    fn GetTopologyWorkQueueMMCSSTaskId(this: &Self::This, dwtopologyworkqueueid: u32) -> ::windows_core::Result<u32>;
    fn BeginRegisterPlatformWorkQueueWithMMCSS(this: &Self::This, dwplatformworkqueue: u32, wszclass: &::windows_core::PCWSTR, dwtaskid: u32, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndRegisterPlatformWorkQueueWithMMCSS(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<u32>;
    fn BeginUnregisterPlatformWorkQueueWithMMCSS(this: &Self::This, dwplatformworkqueue: u32, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EndUnregisterPlatformWorkQueueWithMMCSS(this: &Self::This, presult: ::core::option::Option<&IMFAsyncResult>) -> ::windows_core::Result<()>;
    fn GetPlaftormWorkQueueMMCSSClass(this: &Self::This, dwplatformworkqueueid: u32, pwszclass: ::windows_core::PWSTR, pcchclass: *mut u32) -> ::windows_core::Result<()>;
    fn GetPlatformWorkQueueMMCSSTaskId(this: &Self::This, dwplatformworkqueueid: u32) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IMFWorkQueueServices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFWorkQueueServices {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BeginRegisterTopologyWorkQueuesWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginRegisterTopologyWorkQueuesWithMMCSS(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndRegisterTopologyWorkQueuesWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndRegisterTopologyWorkQueuesWithMMCSS(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn BeginUnregisterTopologyWorkQueuesWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginUnregisterTopologyWorkQueuesWithMMCSS(this, ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndUnregisterTopologyWorkQueuesWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndUnregisterTopologyWorkQueuesWithMMCSS(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn GetTopologyWorkQueueMMCSSClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtopologyworkqueueid: u32, pwszclass: ::windows_core::PWSTR, pcchclass: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTopologyWorkQueueMMCSSClass(this, ::core::mem::transmute_copy(&dwtopologyworkqueueid), ::core::mem::transmute_copy(&pwszclass), ::core::mem::transmute_copy(&pcchclass)).into())
        }
        unsafe extern "system" fn GetTopologyWorkQueueMMCSSTaskId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtopologyworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTopologyWorkQueueMMCSSTaskId(this, ::core::mem::transmute_copy(&dwtopologyworkqueueid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwtaskid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginRegisterPlatformWorkQueueWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwplatformworkqueue: u32, wszclass: ::windows_core::PCWSTR, dwtaskid: u32, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginRegisterPlatformWorkQueueWithMMCSS(this, ::core::mem::transmute_copy(&dwplatformworkqueue), ::core::mem::transmute(&wszclass), ::core::mem::transmute_copy(&dwtaskid), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndRegisterPlatformWorkQueueWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void, pdwtaskid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EndRegisterPlatformWorkQueueWithMMCSS(this, ::windows_core::from_raw_borrowed(&presult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwtaskid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginUnregisterPlatformWorkQueueWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwplatformworkqueue: u32, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginUnregisterPlatformWorkQueueWithMMCSS(this, ::core::mem::transmute_copy(&dwplatformworkqueue), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn EndUnregisterPlatformWorkQueueWithMMCSS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, presult: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndUnregisterPlatformWorkQueueWithMMCSS(this, ::windows_core::from_raw_borrowed(&presult)).into())
        }
        unsafe extern "system" fn GetPlaftormWorkQueueMMCSSClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwplatformworkqueueid: u32, pwszclass: ::windows_core::PWSTR, pcchclass: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPlaftormWorkQueueMMCSSClass(this, ::core::mem::transmute_copy(&dwplatformworkqueueid), ::core::mem::transmute_copy(&pwszclass), ::core::mem::transmute_copy(&pcchclass)).into())
        }
        unsafe extern "system" fn GetPlatformWorkQueueMMCSSTaskId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwplatformworkqueueid: u32, pdwtaskid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPlatformWorkQueueMMCSSTaskId(this, ::core::mem::transmute_copy(&dwplatformworkqueueid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwtaskid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFWorkQueueServices_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BeginRegisterTopologyWorkQueuesWithMMCSS: BeginRegisterTopologyWorkQueuesWithMMCSS::<Identity, Impl, OFFSET>,
            EndRegisterTopologyWorkQueuesWithMMCSS: EndRegisterTopologyWorkQueuesWithMMCSS::<Identity, Impl, OFFSET>,
            BeginUnregisterTopologyWorkQueuesWithMMCSS: BeginUnregisterTopologyWorkQueuesWithMMCSS::<Identity, Impl, OFFSET>,
            EndUnregisterTopologyWorkQueuesWithMMCSS: EndUnregisterTopologyWorkQueuesWithMMCSS::<Identity, Impl, OFFSET>,
            GetTopologyWorkQueueMMCSSClass: GetTopologyWorkQueueMMCSSClass::<Identity, Impl, OFFSET>,
            GetTopologyWorkQueueMMCSSTaskId: GetTopologyWorkQueueMMCSSTaskId::<Identity, Impl, OFFSET>,
            BeginRegisterPlatformWorkQueueWithMMCSS: BeginRegisterPlatformWorkQueueWithMMCSS::<Identity, Impl, OFFSET>,
            EndRegisterPlatformWorkQueueWithMMCSS: EndRegisterPlatformWorkQueueWithMMCSS::<Identity, Impl, OFFSET>,
            BeginUnregisterPlatformWorkQueueWithMMCSS: BeginUnregisterPlatformWorkQueueWithMMCSS::<Identity, Impl, OFFSET>,
            EndUnregisterPlatformWorkQueueWithMMCSS: EndUnregisterPlatformWorkQueueWithMMCSS::<Identity, Impl, OFFSET>,
            GetPlaftormWorkQueueMMCSSClass: GetPlaftormWorkQueueMMCSSClass::<Identity, Impl, OFFSET>,
            GetPlatformWorkQueueMMCSSTaskId: GetPlatformWorkQueueMMCSSTaskId::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IMFWorkQueueServicesEx_Impl: ::windows_core::BaseImpl + IMFWorkQueueServices_Impl {
    fn GetTopologyWorkQueueMMCSSPriority(this: &Self::This, dwtopologyworkqueueid: u32) -> ::windows_core::Result<i32>;
    fn BeginRegisterPlatformWorkQueueWithMMCSSEx(this: &Self::This, dwplatformworkqueue: u32, wszclass: &::windows_core::PCWSTR, dwtaskid: u32, lpriority: i32, pcallback: ::core::option::Option<&IMFAsyncCallback>, pstate: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetPlatformWorkQueueMMCSSPriority(this: &Self::This, dwplatformworkqueueid: u32) -> ::windows_core::Result<i32>;
}
impl ::windows_core::Iids for IMFWorkQueueServicesEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFWorkQueueServices);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServicesEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMFWorkQueueServicesEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTopologyWorkQueueMMCSSPriority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServicesEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtopologyworkqueueid: u32, plpriority: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTopologyWorkQueueMMCSSPriority(this, ::core::mem::transmute_copy(&dwtopologyworkqueueid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plpriority, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BeginRegisterPlatformWorkQueueWithMMCSSEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServicesEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwplatformworkqueue: u32, wszclass: ::windows_core::PCWSTR, dwtaskid: u32, lpriority: i32, pcallback: *mut ::core::ffi::c_void, pstate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BeginRegisterPlatformWorkQueueWithMMCSSEx(this, ::core::mem::transmute_copy(&dwplatformworkqueue), ::core::mem::transmute(&wszclass), ::core::mem::transmute_copy(&dwtaskid), ::core::mem::transmute_copy(&lpriority), ::windows_core::from_raw_borrowed(&pcallback), ::windows_core::from_raw_borrowed(&pstate)).into())
        }
        unsafe extern "system" fn GetPlatformWorkQueueMMCSSPriority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMFWorkQueueServicesEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwplatformworkqueueid: u32, plpriority: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPlatformWorkQueueMMCSSPriority(this, ::core::mem::transmute_copy(&dwplatformworkqueueid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plpriority, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMFWorkQueueServicesEx_Vtbl {
            base__: <IMFWorkQueueServices as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTopologyWorkQueueMMCSSPriority: GetTopologyWorkQueueMMCSSPriority::<Identity, Impl, OFFSET>,
            BeginRegisterPlatformWorkQueueWithMMCSSEx: BeginRegisterPlatformWorkQueueWithMMCSSEx::<Identity, Impl, OFFSET>,
            GetPlatformWorkQueueMMCSSPriority: GetPlatformWorkQueueMMCSSPriority::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IOPMVideoOutput_Impl: ::windows_core::BaseImpl {
    fn StartInitialization(this: &Self::This, prnrandomnumber: *mut OPM_RANDOM_NUMBER, ppbcertificate: *mut *mut u8, pulcertificatelength: *mut u32) -> ::windows_core::Result<()>;
    fn FinishInitialization(this: &Self::This, pparameters: *const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS) -> ::windows_core::Result<()>;
    fn GetInformation(this: &Self::This, pparameters: *const OPM_GET_INFO_PARAMETERS, prequestedinformation: *mut OPM_REQUESTED_INFORMATION) -> ::windows_core::Result<()>;
    fn COPPCompatibleGetInformation(this: &Self::This, pparameters: *const OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS, prequestedinformation: *mut OPM_REQUESTED_INFORMATION) -> ::windows_core::Result<()>;
    fn Configure(this: &Self::This, pparameters: *const OPM_CONFIGURE_PARAMETERS, uladditionalparameterssize: u32, pbadditionalparameters: *const u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IOPMVideoOutput {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOPMVideoOutput_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOPMVideoOutput {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartInitialization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOPMVideoOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prnrandomnumber: *mut OPM_RANDOM_NUMBER, ppbcertificate: *mut *mut u8, pulcertificatelength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartInitialization(this, ::core::mem::transmute_copy(&prnrandomnumber), ::core::mem::transmute_copy(&ppbcertificate), ::core::mem::transmute_copy(&pulcertificatelength)).into())
        }
        unsafe extern "system" fn FinishInitialization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOPMVideoOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparameters: *const OPM_ENCRYPTED_INITIALIZATION_PARAMETERS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FinishInitialization(this, ::core::mem::transmute_copy(&pparameters)).into())
        }
        unsafe extern "system" fn GetInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOPMVideoOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparameters: *const OPM_GET_INFO_PARAMETERS, prequestedinformation: *mut OPM_REQUESTED_INFORMATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetInformation(this, ::core::mem::transmute_copy(&pparameters), ::core::mem::transmute_copy(&prequestedinformation)).into())
        }
        unsafe extern "system" fn COPPCompatibleGetInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOPMVideoOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparameters: *const OPM_COPP_COMPATIBLE_GET_INFO_PARAMETERS, prequestedinformation: *mut OPM_REQUESTED_INFORMATION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::COPPCompatibleGetInformation(this, ::core::mem::transmute_copy(&pparameters), ::core::mem::transmute_copy(&prequestedinformation)).into())
        }
        unsafe extern "system" fn Configure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOPMVideoOutput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pparameters: *const OPM_CONFIGURE_PARAMETERS, uladditionalparameterssize: u32, pbadditionalparameters: *const u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Configure(this, ::core::mem::transmute_copy(&pparameters), ::core::mem::transmute_copy(&uladditionalparameterssize), ::core::mem::transmute_copy(&pbadditionalparameters)).into())
        }
        IOPMVideoOutput_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartInitialization: StartInitialization::<Identity, Impl, OFFSET>,
            FinishInitialization: FinishInitialization::<Identity, Impl, OFFSET>,
            GetInformation: GetInformation::<Identity, Impl, OFFSET>,
            COPPCompatibleGetInformation: COPPCompatibleGetInformation::<Identity, Impl, OFFSET>,
            Configure: Configure::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IPlayToControl_Impl: ::windows_core::BaseImpl {
    fn Connect(this: &Self::This, pfactory: ::core::option::Option<&IMFSharingEngineClassFactory>) -> ::windows_core::Result<()>;
    fn Disconnect(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPlayToControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPlayToControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Connect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfactory: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Connect(this, ::windows_core::from_raw_borrowed(&pfactory)).into())
        }
        unsafe extern "system" fn Disconnect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Disconnect(this).into())
        }
        IPlayToControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Connect: Connect::<Identity, Impl, OFFSET>,
            Disconnect: Disconnect::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IPlayToControlWithCapabilities_Impl: ::windows_core::BaseImpl + IPlayToControl_Impl {
    fn GetCapabilities(this: &Self::This) -> ::windows_core::Result<PLAYTO_SOURCE_CREATEFLAGS>;
}
impl ::windows_core::Iids for IPlayToControlWithCapabilities {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IPlayToControl);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToControlWithCapabilities_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPlayToControlWithCapabilities {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToControlWithCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcapabilities: *mut PLAYTO_SOURCE_CREATEFLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcapabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPlayToControlWithCapabilities_Vtbl { base__: <IPlayToControl as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetCapabilities: GetCapabilities::<Identity, Impl, OFFSET> }
    };
}
pub trait IPlayToSourceClassFactory_Impl: ::windows_core::BaseImpl {
    fn CreateInstance(this: &Self::This, dwflags: u32, pcontrol: ::core::option::Option<&IPlayToControl>) -> ::windows_core::Result<::windows_core::IInspectable>;
}
impl ::windows_core::Iids for IPlayToSourceClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToSourceClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPlayToSourceClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateInstance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPlayToSourceClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pcontrol: *mut ::core::ffi::c_void, ppsource: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateInstance(this, ::core::mem::transmute_copy(&dwflags), ::windows_core::from_raw_borrowed(&pcontrol)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsource, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPlayToSourceClassFactory_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateInstance: CreateInstance::<Identity, Impl, OFFSET> }
    };
}
pub trait IToc_Impl: ::windows_core::BaseImpl {
    fn SetDescriptor(this: &Self::This, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows_core::Result<()>;
    fn GetDescriptor(this: &Self::This, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows_core::Result<()>;
    fn SetDescription(this: &Self::This, pwszdescription: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetDescription(this: &Self::This, pwdescriptionsize: *mut u16, pwszdescription: ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetContext(this: &Self::This, dwcontextsize: u32, pbtcontext: *mut u8) -> ::windows_core::Result<()>;
    fn GetContext(this: &Self::This, pdwcontextsize: *mut u32, pbtcontext: *mut u8) -> ::windows_core::Result<()>;
    fn GetEntryListCount(this: &Self::This, pwcount: *mut u16) -> ::windows_core::Result<()>;
    fn GetEntryListByIndex(this: &Self::This, wentrylistindex: u16) -> ::windows_core::Result<ITocEntryList>;
    fn AddEntryList(this: &Self::This, pentrylist: ::core::option::Option<&ITocEntryList>, pwentrylistindex: *mut u16) -> ::windows_core::Result<()>;
    fn AddEntryListByIndex(this: &Self::This, wentrylistindex: u16, pentrylist: ::core::option::Option<&ITocEntryList>) -> ::windows_core::Result<()>;
    fn RemoveEntryListByIndex(this: &Self::This, wentrylistindex: u16) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IToc {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IToc {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescriptor(this, ::core::mem::transmute_copy(&pdescriptor)).into())
        }
        unsafe extern "system" fn GetDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdescriptor: *mut TOC_DESCRIPTOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescriptor(this, ::core::mem::transmute_copy(&pdescriptor)).into())
        }
        unsafe extern "system" fn SetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszdescription: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescription(this, ::core::mem::transmute(&pwszdescription)).into())
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwdescriptionsize: *mut u16, pwszdescription: ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&pwdescriptionsize), ::core::mem::transmute_copy(&pwszdescription)).into())
        }
        unsafe extern "system" fn SetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwcontextsize: u32, pbtcontext: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContext(this, ::core::mem::transmute_copy(&dwcontextsize), ::core::mem::transmute_copy(&pbtcontext)).into())
        }
        unsafe extern "system" fn GetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcontextsize: *mut u32, pbtcontext: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContext(this, ::core::mem::transmute_copy(&pdwcontextsize), ::core::mem::transmute_copy(&pbtcontext)).into())
        }
        unsafe extern "system" fn GetEntryListCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwcount: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEntryListCount(this, ::core::mem::transmute_copy(&pwcount)).into())
        }
        unsafe extern "system" fn GetEntryListByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wentrylistindex: u16, ppentrylist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEntryListByIndex(this, ::core::mem::transmute_copy(&wentrylistindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppentrylist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEntryList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pentrylist: *mut ::core::ffi::c_void, pwentrylistindex: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntryList(this, ::windows_core::from_raw_borrowed(&pentrylist), ::core::mem::transmute_copy(&pwentrylistindex)).into())
        }
        unsafe extern "system" fn AddEntryListByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wentrylistindex: u16, pentrylist: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntryListByIndex(this, ::core::mem::transmute_copy(&wentrylistindex), ::windows_core::from_raw_borrowed(&pentrylist)).into())
        }
        unsafe extern "system" fn RemoveEntryListByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IToc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wentrylistindex: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEntryListByIndex(this, ::core::mem::transmute_copy(&wentrylistindex)).into())
        }
        IToc_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDescriptor: SetDescriptor::<Identity, Impl, OFFSET>,
            GetDescriptor: GetDescriptor::<Identity, Impl, OFFSET>,
            SetDescription: SetDescription::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            SetContext: SetContext::<Identity, Impl, OFFSET>,
            GetContext: GetContext::<Identity, Impl, OFFSET>,
            GetEntryListCount: GetEntryListCount::<Identity, Impl, OFFSET>,
            GetEntryListByIndex: GetEntryListByIndex::<Identity, Impl, OFFSET>,
            AddEntryList: AddEntryList::<Identity, Impl, OFFSET>,
            AddEntryListByIndex: AddEntryListByIndex::<Identity, Impl, OFFSET>,
            RemoveEntryListByIndex: RemoveEntryListByIndex::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait ITocCollection_Impl: ::windows_core::BaseImpl {
    fn GetEntryCount(this: &Self::This, pdwentrycount: *mut u32) -> ::windows_core::Result<()>;
    fn GetEntryByIndex(this: &Self::This, dwentryindex: u32) -> ::windows_core::Result<IToc>;
    fn AddEntry(this: &Self::This, ptoc: ::core::option::Option<&IToc>, pdwentryindex: *mut u32) -> ::windows_core::Result<()>;
    fn AddEntryByIndex(this: &Self::This, dwentryindex: u32, ptoc: ::core::option::Option<&IToc>) -> ::windows_core::Result<()>;
    fn RemoveEntryByIndex(this: &Self::This, dwentryindex: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITocCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITocCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEntryCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwentrycount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEntryCount(this, ::core::mem::transmute_copy(&pdwentrycount)).into())
        }
        unsafe extern "system" fn GetEntryByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwentryindex: u32, pptoc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEntryByIndex(this, ::core::mem::transmute_copy(&dwentryindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptoc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptoc: *mut ::core::ffi::c_void, pdwentryindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntry(this, ::windows_core::from_raw_borrowed(&ptoc), ::core::mem::transmute_copy(&pdwentryindex)).into())
        }
        unsafe extern "system" fn AddEntryByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwentryindex: u32, ptoc: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntryByIndex(this, ::core::mem::transmute_copy(&dwentryindex), ::windows_core::from_raw_borrowed(&ptoc)).into())
        }
        unsafe extern "system" fn RemoveEntryByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwentryindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEntryByIndex(this, ::core::mem::transmute_copy(&dwentryindex)).into())
        }
        ITocCollection_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEntryCount: GetEntryCount::<Identity, Impl, OFFSET>,
            GetEntryByIndex: GetEntryByIndex::<Identity, Impl, OFFSET>,
            AddEntry: AddEntry::<Identity, Impl, OFFSET>,
            AddEntryByIndex: AddEntryByIndex::<Identity, Impl, OFFSET>,
            RemoveEntryByIndex: RemoveEntryByIndex::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait ITocEntry_Impl: ::windows_core::BaseImpl {
    fn SetTitle(this: &Self::This, pwsztitle: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetTitle(this: &Self::This, pwtitlesize: *mut u16, pwsztitle: ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetDescriptor(this: &Self::This, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows_core::Result<()>;
    fn GetDescriptor(this: &Self::This, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows_core::Result<()>;
    fn SetSubEntries(this: &Self::This, dwnumsubentries: u32, pwsubentryindices: *mut u16) -> ::windows_core::Result<()>;
    fn GetSubEntries(this: &Self::This, pdwnumsubentries: *mut u32, pwsubentryindices: *mut u16) -> ::windows_core::Result<()>;
    fn SetDescriptionData(this: &Self::This, dwdescriptiondatasize: u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetDescriptionData(this: &Self::This, pdwdescriptiondatasize: *mut u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITocEntry {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITocEntry {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwsztitle: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTitle(this, ::core::mem::transmute(&pwsztitle)).into())
        }
        unsafe extern "system" fn GetTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwtitlesize: *mut u16, pwsztitle: ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTitle(this, ::core::mem::transmute_copy(&pwtitlesize), ::core::mem::transmute_copy(&pwsztitle)).into())
        }
        unsafe extern "system" fn SetDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescriptor(this, ::core::mem::transmute_copy(&pdescriptor)).into())
        }
        unsafe extern "system" fn GetDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdescriptor: *mut TOC_ENTRY_DESCRIPTOR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescriptor(this, ::core::mem::transmute_copy(&pdescriptor)).into())
        }
        unsafe extern "system" fn SetSubEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwnumsubentries: u32, pwsubentryindices: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSubEntries(this, ::core::mem::transmute_copy(&dwnumsubentries), ::core::mem::transmute_copy(&pwsubentryindices)).into())
        }
        unsafe extern "system" fn GetSubEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwnumsubentries: *mut u32, pwsubentryindices: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSubEntries(this, ::core::mem::transmute_copy(&pdwnumsubentries), ::core::mem::transmute_copy(&pwsubentryindices)).into())
        }
        unsafe extern "system" fn SetDescriptionData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwdescriptiondatasize: u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescriptionData(this, ::core::mem::transmute_copy(&dwdescriptiondatasize), ::core::mem::transmute_copy(&pbtdescriptiondata), ::core::mem::transmute_copy(&pguidtype)).into())
        }
        unsafe extern "system" fn GetDescriptionData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwdescriptiondatasize: *mut u32, pbtdescriptiondata: *mut u8, pguidtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescriptionData(this, ::core::mem::transmute_copy(&pdwdescriptiondatasize), ::core::mem::transmute_copy(&pbtdescriptiondata), ::core::mem::transmute_copy(&pguidtype)).into())
        }
        ITocEntry_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetTitle: SetTitle::<Identity, Impl, OFFSET>,
            GetTitle: GetTitle::<Identity, Impl, OFFSET>,
            SetDescriptor: SetDescriptor::<Identity, Impl, OFFSET>,
            GetDescriptor: GetDescriptor::<Identity, Impl, OFFSET>,
            SetSubEntries: SetSubEntries::<Identity, Impl, OFFSET>,
            GetSubEntries: GetSubEntries::<Identity, Impl, OFFSET>,
            SetDescriptionData: SetDescriptionData::<Identity, Impl, OFFSET>,
            GetDescriptionData: GetDescriptionData::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait ITocEntryList_Impl: ::windows_core::BaseImpl {
    fn GetEntryCount(this: &Self::This, pdwentrycount: *mut u32) -> ::windows_core::Result<()>;
    fn GetEntryByIndex(this: &Self::This, dwentryindex: u32) -> ::windows_core::Result<ITocEntry>;
    fn AddEntry(this: &Self::This, pentry: ::core::option::Option<&ITocEntry>, pdwentryindex: *mut u32) -> ::windows_core::Result<()>;
    fn AddEntryByIndex(this: &Self::This, dwentryindex: u32, pentry: ::core::option::Option<&ITocEntry>) -> ::windows_core::Result<()>;
    fn RemoveEntryByIndex(this: &Self::This, dwentryindex: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITocEntryList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntryList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITocEntryList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEntryCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntryList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwentrycount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEntryCount(this, ::core::mem::transmute_copy(&pdwentrycount)).into())
        }
        unsafe extern "system" fn GetEntryByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntryList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwentryindex: u32, ppentry: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEntryByIndex(this, ::core::mem::transmute_copy(&dwentryindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppentry, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntryList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pentry: *mut ::core::ffi::c_void, pdwentryindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntry(this, ::windows_core::from_raw_borrowed(&pentry), ::core::mem::transmute_copy(&pdwentryindex)).into())
        }
        unsafe extern "system" fn AddEntryByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntryList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwentryindex: u32, pentry: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEntryByIndex(this, ::core::mem::transmute_copy(&dwentryindex), ::windows_core::from_raw_borrowed(&pentry)).into())
        }
        unsafe extern "system" fn RemoveEntryByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocEntryList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwentryindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveEntryByIndex(this, ::core::mem::transmute_copy(&dwentryindex)).into())
        }
        ITocEntryList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetEntryCount: GetEntryCount::<Identity, Impl, OFFSET>,
            GetEntryByIndex: GetEntryByIndex::<Identity, Impl, OFFSET>,
            AddEntry: AddEntry::<Identity, Impl, OFFSET>,
            AddEntryByIndex: AddEntryByIndex::<Identity, Impl, OFFSET>,
            RemoveEntryByIndex: RemoveEntryByIndex::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait ITocParser_Impl: ::windows_core::BaseImpl {
    fn Init(this: &Self::This, pwszfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetTocCount(this: &Self::This, enumtocpostype: TOC_POS_TYPE, pdwtoccount: *mut u32) -> ::windows_core::Result<()>;
    fn GetTocByIndex(this: &Self::This, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32) -> ::windows_core::Result<IToc>;
    fn GetTocByType(this: &Self::This, enumtocpostype: TOC_POS_TYPE, guidtoctype: &::windows_core::GUID) -> ::windows_core::Result<ITocCollection>;
    fn AddToc(this: &Self::This, enumtocpostype: TOC_POS_TYPE, ptoc: ::core::option::Option<&IToc>, pdwtocindex: *mut u32) -> ::windows_core::Result<()>;
    fn RemoveTocByIndex(this: &Self::This, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32) -> ::windows_core::Result<()>;
    fn RemoveTocByType(this: &Self::This, enumtocpostype: TOC_POS_TYPE, guidtoctype: &::windows_core::GUID) -> ::windows_core::Result<()>;
    fn Commit(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITocParser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITocParser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Init(this, ::core::mem::transmute(&pwszfilename)).into())
        }
        unsafe extern "system" fn GetTocCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumtocpostype: TOC_POS_TYPE, pdwtoccount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTocCount(this, ::core::mem::transmute_copy(&enumtocpostype), ::core::mem::transmute_copy(&pdwtoccount)).into())
        }
        unsafe extern "system" fn GetTocByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32, pptoc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTocByIndex(this, ::core::mem::transmute_copy(&enumtocpostype), ::core::mem::transmute_copy(&dwtocindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptoc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTocByType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumtocpostype: TOC_POS_TYPE, guidtoctype: ::windows_core::GUID, pptocs: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTocByType(this, ::core::mem::transmute_copy(&enumtocpostype), ::core::mem::transmute(&guidtoctype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptocs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddToc<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumtocpostype: TOC_POS_TYPE, ptoc: *mut ::core::ffi::c_void, pdwtocindex: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddToc(this, ::core::mem::transmute_copy(&enumtocpostype), ::windows_core::from_raw_borrowed(&ptoc), ::core::mem::transmute_copy(&pdwtocindex)).into())
        }
        unsafe extern "system" fn RemoveTocByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumtocpostype: TOC_POS_TYPE, dwtocindex: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTocByIndex(this, ::core::mem::transmute_copy(&enumtocpostype), ::core::mem::transmute_copy(&dwtocindex)).into())
        }
        unsafe extern "system" fn RemoveTocByType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enumtocpostype: TOC_POS_TYPE, guidtoctype: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTocByType(this, ::core::mem::transmute_copy(&enumtocpostype), ::core::mem::transmute(&guidtoctype)).into())
        }
        unsafe extern "system" fn Commit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITocParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Commit(this).into())
        }
        ITocParser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Init: Init::<Identity, Impl, OFFSET>,
            GetTocCount: GetTocCount::<Identity, Impl, OFFSET>,
            GetTocByIndex: GetTocByIndex::<Identity, Impl, OFFSET>,
            GetTocByType: GetTocByType::<Identity, Impl, OFFSET>,
            AddToc: AddToc::<Identity, Impl, OFFSET>,
            RemoveTocByIndex: RemoveTocByIndex::<Identity, Impl, OFFSET>,
            RemoveTocByType: RemoveTocByType::<Identity, Impl, OFFSET>,
            Commit: Commit::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IValidateBinding_Impl: ::windows_core::BaseImpl {
    fn GetIdentifier(this: &Self::This, guidlicensorid: &::windows_core::GUID, pbephemeron: *const u8, cbephemeron: u32, ppbblobvalidationid: *mut *mut u8, pcbblobsize: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IValidateBinding {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IValidateBinding_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IValidateBinding {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IValidateBinding_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidlicensorid: ::windows_core::GUID, pbephemeron: *const u8, cbephemeron: u32, ppbblobvalidationid: *mut *mut u8, pcbblobsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIdentifier(this, ::core::mem::transmute(&guidlicensorid), ::core::mem::transmute_copy(&pbephemeron), ::core::mem::transmute_copy(&cbephemeron), ::core::mem::transmute_copy(&ppbblobvalidationid), ::core::mem::transmute_copy(&pcbblobsize)).into())
        }
        IValidateBinding_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetIdentifier: GetIdentifier::<Identity, Impl, OFFSET> }
    };
}
pub trait IWMCodecLeakyBucket_Impl: ::windows_core::BaseImpl {
    fn SetBufferSizeBits(this: &Self::This, ulbuffersize: u32) -> ::windows_core::Result<()>;
    fn GetBufferSizeBits(this: &Self::This, pulbuffersize: *mut u32) -> ::windows_core::Result<()>;
    fn SetBufferFullnessBits(this: &Self::This, ulbufferfullness: u32) -> ::windows_core::Result<()>;
    fn GetBufferFullnessBits(this: &Self::This, pulbufferfullness: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMCodecLeakyBucket {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecLeakyBucket_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMCodecLeakyBucket {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetBufferSizeBits<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecLeakyBucket_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulbuffersize: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBufferSizeBits(this, ::core::mem::transmute_copy(&ulbuffersize)).into())
        }
        unsafe extern "system" fn GetBufferSizeBits<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecLeakyBucket_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulbuffersize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBufferSizeBits(this, ::core::mem::transmute_copy(&pulbuffersize)).into())
        }
        unsafe extern "system" fn SetBufferFullnessBits<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecLeakyBucket_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulbufferfullness: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBufferFullnessBits(this, ::core::mem::transmute_copy(&ulbufferfullness)).into())
        }
        unsafe extern "system" fn GetBufferFullnessBits<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecLeakyBucket_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulbufferfullness: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBufferFullnessBits(this, ::core::mem::transmute_copy(&pulbufferfullness)).into())
        }
        IWMCodecLeakyBucket_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetBufferSizeBits: SetBufferSizeBits::<Identity, Impl, OFFSET>,
            GetBufferSizeBits: GetBufferSizeBits::<Identity, Impl, OFFSET>,
            SetBufferFullnessBits: SetBufferFullnessBits::<Identity, Impl, OFFSET>,
            GetBufferFullnessBits: GetBufferFullnessBits::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMCodecOutputTimestamp_Impl: ::windows_core::BaseImpl {
    fn GetNextOutputTime(this: &Self::This, prttime: *mut i64) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMCodecOutputTimestamp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecOutputTimestamp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMCodecOutputTimestamp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNextOutputTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecOutputTimestamp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prttime: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetNextOutputTime(this, ::core::mem::transmute_copy(&prttime)).into())
        }
        IWMCodecOutputTimestamp_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNextOutputTime: GetNextOutputTime::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_DxMediaObjects\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
pub trait IWMCodecPrivateData_Impl: ::windows_core::BaseImpl {
    fn SetPartialOutputType(this: &Self::This, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE) -> ::windows_core::Result<()>;
    fn GetPrivateData(this: &Self::This, pbdata: *mut u8, pcbdata: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
impl ::windows_core::Iids for IWMCodecPrivateData {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecPrivateData_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMCodecPrivateData {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPartialOutputType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecPrivateData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPartialOutputType(this, ::core::mem::transmute_copy(&pmt)).into())
        }
        unsafe extern "system" fn GetPrivateData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecPrivateData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut u8, pcbdata: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPrivateData(this, ::core::mem::transmute_copy(&pbdata), ::core::mem::transmute_copy(&pcbdata)).into())
        }
        IWMCodecPrivateData_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetPartialOutputType: SetPartialOutputType::<Identity, Impl, OFFSET>,
            GetPrivateData: GetPrivateData::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_DxMediaObjects\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
pub trait IWMCodecProps_Impl: ::windows_core::BaseImpl {
    fn GetFormatProp(this: &Self::This, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE, pszname: &::windows_core::PCWSTR, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetCodecProp(this: &Self::This, dwformat: u32, pszname: &::windows_core::PCWSTR, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
impl ::windows_core::Iids for IWMCodecProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMCodecProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetFormatProp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE, pszname: ::windows_core::PCWSTR, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFormatProp(this, ::core::mem::transmute_copy(&pmt), ::core::mem::transmute(&pszname), ::core::mem::transmute_copy(&ptype), ::core::mem::transmute_copy(&pvalue), ::core::mem::transmute_copy(&pdwsize)).into())
        }
        unsafe extern "system" fn GetCodecProp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwformat: u32, pszname: ::windows_core::PCWSTR, ptype: *mut WMT_PROP_DATATYPE, pvalue: *mut u8, pdwsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCodecProp(this, ::core::mem::transmute_copy(&dwformat), ::core::mem::transmute(&pszname), ::core::mem::transmute_copy(&ptype), ::core::mem::transmute_copy(&pvalue), ::core::mem::transmute_copy(&pdwsize)).into())
        }
        IWMCodecProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetFormatProp: GetFormatProp::<Identity, Impl, OFFSET>,
            GetCodecProp: GetCodecProp::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_DxMediaObjects\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
pub trait IWMCodecStrings_Impl: ::windows_core::BaseImpl {
    fn GetName(this: &Self::This, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE, cchlength: u32, szname: ::windows_core::PWSTR, pcchlength: *mut u32) -> ::windows_core::Result<()>;
    fn GetDescription(this: &Self::This, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE, cchlength: u32, szdescription: ::windows_core::PWSTR, pcchlength: *mut u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
impl ::windows_core::Iids for IWMCodecStrings {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_DxMediaObjects"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecStrings_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMCodecStrings {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecStrings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE, cchlength: u32, szname: ::windows_core::PWSTR, pcchlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetName(this, ::core::mem::transmute_copy(&pmt), ::core::mem::transmute_copy(&cchlength), ::core::mem::transmute_copy(&szname), ::core::mem::transmute_copy(&pcchlength)).into())
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMCodecStrings_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmt: *mut super::DxMediaObjects::DMO_MEDIA_TYPE, cchlength: u32, szdescription: ::windows_core::PWSTR, pcchlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDescription(this, ::core::mem::transmute_copy(&pmt), ::core::mem::transmute_copy(&cchlength), ::core::mem::transmute_copy(&szdescription), ::core::mem::transmute_copy(&pcchlength)).into())
        }
        IWMCodecStrings_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMColorConvProps_Impl: ::windows_core::BaseImpl {
    fn SetMode(this: &Self::This, lmode: i32) -> ::windows_core::Result<()>;
    fn SetFullCroppingParam(this: &Self::This, lsrccropleft: i32, lsrccroptop: i32, ldstcropleft: i32, ldstcroptop: i32, lcropwidth: i32, lcropheight: i32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMColorConvProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMColorConvProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMColorConvProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMColorConvProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lmode: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMode(this, ::core::mem::transmute_copy(&lmode)).into())
        }
        unsafe extern "system" fn SetFullCroppingParam<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMColorConvProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lsrccropleft: i32, lsrccroptop: i32, ldstcropleft: i32, ldstcroptop: i32, lcropwidth: i32, lcropheight: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFullCroppingParam(this, ::core::mem::transmute_copy(&lsrccropleft), ::core::mem::transmute_copy(&lsrccroptop), ::core::mem::transmute_copy(&ldstcropleft), ::core::mem::transmute_copy(&ldstcroptop), ::core::mem::transmute_copy(&lcropwidth), ::core::mem::transmute_copy(&lcropheight)).into())
        }
        IWMColorConvProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetMode: SetMode::<Identity, Impl, OFFSET>,
            SetFullCroppingParam: SetFullCroppingParam::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMColorLegalizerProps_Impl: ::windows_core::BaseImpl {
    fn SetColorLegalizerQuality(this: &Self::This, lquality: i32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMColorLegalizerProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMColorLegalizerProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMColorLegalizerProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetColorLegalizerQuality<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMColorLegalizerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lquality: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColorLegalizerQuality(this, ::core::mem::transmute_copy(&lquality)).into())
        }
        IWMColorLegalizerProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetColorLegalizerQuality: SetColorLegalizerQuality::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IWMFrameInterpProps_Impl: ::windows_core::BaseImpl {
    fn SetFrameRateIn(this: &Self::This, lframerate: i32, lscale: i32) -> ::windows_core::Result<()>;
    fn SetFrameRateOut(this: &Self::This, lframerate: i32, lscale: i32) -> ::windows_core::Result<()>;
    fn SetFrameInterpEnabled(this: &Self::This, bfienabled: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetComplexityLevel(this: &Self::This, icomplexity: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IWMFrameInterpProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMFrameInterpProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMFrameInterpProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetFrameRateIn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMFrameInterpProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lframerate: i32, lscale: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFrameRateIn(this, ::core::mem::transmute_copy(&lframerate), ::core::mem::transmute_copy(&lscale)).into())
        }
        unsafe extern "system" fn SetFrameRateOut<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMFrameInterpProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lframerate: i32, lscale: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFrameRateOut(this, ::core::mem::transmute_copy(&lframerate), ::core::mem::transmute_copy(&lscale)).into())
        }
        unsafe extern "system" fn SetFrameInterpEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMFrameInterpProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bfienabled: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFrameInterpEnabled(this, ::core::mem::transmute_copy(&bfienabled)).into())
        }
        unsafe extern "system" fn SetComplexityLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMFrameInterpProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, icomplexity: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetComplexityLevel(this, ::core::mem::transmute_copy(&icomplexity)).into())
        }
        IWMFrameInterpProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetFrameRateIn: SetFrameRateIn::<Identity, Impl, OFFSET>,
            SetFrameRateOut: SetFrameRateOut::<Identity, Impl, OFFSET>,
            SetFrameInterpEnabled: SetFrameInterpEnabled::<Identity, Impl, OFFSET>,
            SetComplexityLevel: SetComplexityLevel::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMInterlaceProps_Impl: ::windows_core::BaseImpl {
    fn SetProcessType(this: &Self::This, iprocesstype: i32) -> ::windows_core::Result<()>;
    fn SetInitInverseTeleCinePattern(this: &Self::This, iinitpattern: i32) -> ::windows_core::Result<()>;
    fn SetLastFrame(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMInterlaceProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMInterlaceProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMInterlaceProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetProcessType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMInterlaceProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iprocesstype: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProcessType(this, ::core::mem::transmute_copy(&iprocesstype)).into())
        }
        unsafe extern "system" fn SetInitInverseTeleCinePattern<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMInterlaceProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, iinitpattern: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInitInverseTeleCinePattern(this, ::core::mem::transmute_copy(&iinitpattern)).into())
        }
        unsafe extern "system" fn SetLastFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMInterlaceProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLastFrame(this).into())
        }
        IWMInterlaceProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetProcessType: SetProcessType::<Identity, Impl, OFFSET>,
            SetInitInverseTeleCinePattern: SetInitInverseTeleCinePattern::<Identity, Impl, OFFSET>,
            SetLastFrame: SetLastFrame::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMResamplerProps_Impl: ::windows_core::BaseImpl {
    fn SetHalfFilterLength(this: &Self::This, lhalffilterlen: i32) -> ::windows_core::Result<()>;
    fn SetUserChannelMtx(this: &Self::This, userchannelmtx: *mut f32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMResamplerProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResamplerProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMResamplerProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetHalfFilterLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResamplerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lhalffilterlen: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHalfFilterLength(this, ::core::mem::transmute_copy(&lhalffilterlen)).into())
        }
        unsafe extern "system" fn SetUserChannelMtx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResamplerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, userchannelmtx: *mut f32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUserChannelMtx(this, ::core::mem::transmute_copy(&userchannelmtx)).into())
        }
        IWMResamplerProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetHalfFilterLength: SetHalfFilterLength::<Identity, Impl, OFFSET>,
            SetUserChannelMtx: SetUserChannelMtx::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMResizerProps_Impl: ::windows_core::BaseImpl {
    fn SetResizerQuality(this: &Self::This, lquality: i32) -> ::windows_core::Result<()>;
    fn SetInterlaceMode(this: &Self::This, lmode: i32) -> ::windows_core::Result<()>;
    fn SetClipRegion(this: &Self::This, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32) -> ::windows_core::Result<()>;
    fn SetFullCropRegion(this: &Self::This, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32, lcliporixdst: i32, lcliporiydst: i32, lclipwidthdst: i32, lclipheightdst: i32) -> ::windows_core::Result<()>;
    fn GetFullCropRegion(this: &Self::This, lcliporixsrc: *mut i32, lcliporiysrc: *mut i32, lclipwidthsrc: *mut i32, lclipheightsrc: *mut i32, lcliporixdst: *mut i32, lcliporiydst: *mut i32, lclipwidthdst: *mut i32, lclipheightdst: *mut i32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMResizerProps {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResizerProps_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMResizerProps {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetResizerQuality<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResizerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lquality: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetResizerQuality(this, ::core::mem::transmute_copy(&lquality)).into())
        }
        unsafe extern "system" fn SetInterlaceMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResizerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lmode: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInterlaceMode(this, ::core::mem::transmute_copy(&lmode)).into())
        }
        unsafe extern "system" fn SetClipRegion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResizerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClipRegion(this, ::core::mem::transmute_copy(&lcliporixsrc), ::core::mem::transmute_copy(&lcliporiysrc), ::core::mem::transmute_copy(&lclipwidthsrc), ::core::mem::transmute_copy(&lclipheightsrc)).into())
        }
        unsafe extern "system" fn SetFullCropRegion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResizerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcliporixsrc: i32, lcliporiysrc: i32, lclipwidthsrc: i32, lclipheightsrc: i32, lcliporixdst: i32, lcliporiydst: i32, lclipwidthdst: i32, lclipheightdst: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFullCropRegion(this, ::core::mem::transmute_copy(&lcliporixsrc), ::core::mem::transmute_copy(&lcliporiysrc), ::core::mem::transmute_copy(&lclipwidthsrc), ::core::mem::transmute_copy(&lclipheightsrc), ::core::mem::transmute_copy(&lcliporixdst), ::core::mem::transmute_copy(&lcliporiydst), ::core::mem::transmute_copy(&lclipwidthdst), ::core::mem::transmute_copy(&lclipheightdst)).into())
        }
        unsafe extern "system" fn GetFullCropRegion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMResizerProps_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcliporixsrc: *mut i32, lcliporiysrc: *mut i32, lclipwidthsrc: *mut i32, lclipheightsrc: *mut i32, lcliporixdst: *mut i32, lcliporiydst: *mut i32, lclipwidthdst: *mut i32, lclipheightdst: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFullCropRegion(this, ::core::mem::transmute_copy(&lcliporixsrc), ::core::mem::transmute_copy(&lcliporiysrc), ::core::mem::transmute_copy(&lclipwidthsrc), ::core::mem::transmute_copy(&lclipheightsrc), ::core::mem::transmute_copy(&lcliporixdst), ::core::mem::transmute_copy(&lcliporiydst), ::core::mem::transmute_copy(&lclipwidthdst), ::core::mem::transmute_copy(&lclipheightdst)).into())
        }
        IWMResizerProps_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetResizerQuality: SetResizerQuality::<Identity, Impl, OFFSET>,
            SetInterlaceMode: SetInterlaceMode::<Identity, Impl, OFFSET>,
            SetClipRegion: SetClipRegion::<Identity, Impl, OFFSET>,
            SetFullCropRegion: SetFullCropRegion::<Identity, Impl, OFFSET>,
            GetFullCropRegion: GetFullCropRegion::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IWMSampleExtensionSupport_Impl: ::windows_core::BaseImpl {
    fn SetUseSampleExtensions(this: &Self::This, fuseextensions: super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IWMSampleExtensionSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMSampleExtensionSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMSampleExtensionSupport {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetUseSampleExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMSampleExtensionSupport_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fuseextensions: super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUseSampleExtensions(this, ::core::mem::transmute_copy(&fuseextensions)).into())
        }
        IWMSampleExtensionSupport_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetUseSampleExtensions: SetUseSampleExtensions::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMValidate_Impl: ::windows_core::BaseImpl {
    fn SetIdentifier(this: &Self::This, guidvalidationid: &::windows_core::GUID) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMValidate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMValidate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMValidate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMValidate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidvalidationid: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIdentifier(this, ::core::mem::transmute(&guidvalidationid)).into())
        }
        IWMValidate_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetIdentifier: SetIdentifier::<Identity, Impl, OFFSET> }
    };
}
pub trait IWMVideoDecoderHurryup_Impl: ::windows_core::BaseImpl {
    fn SetHurryup(this: &Self::This, lhurryup: i32) -> ::windows_core::Result<()>;
    fn GetHurryup(this: &Self::This, plhurryup: *mut i32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMVideoDecoderHurryup {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderHurryup_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMVideoDecoderHurryup {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetHurryup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderHurryup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lhurryup: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHurryup(this, ::core::mem::transmute_copy(&lhurryup)).into())
        }
        unsafe extern "system" fn GetHurryup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderHurryup_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plhurryup: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetHurryup(this, ::core::mem::transmute_copy(&plhurryup)).into())
        }
        IWMVideoDecoderHurryup_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetHurryup: SetHurryup::<Identity, Impl, OFFSET>,
            GetHurryup: GetHurryup::<Identity, Impl, OFFSET>,
        }
    };
}
#[doc = "Required features: `\"Win32_Media_DxMediaObjects\"`"]
#[cfg(feature = "Win32_Media_DxMediaObjects")]
pub trait IWMVideoDecoderReconBuffer_Impl: ::windows_core::BaseImpl {
    fn GetReconstructedVideoFrameSize(this: &Self::This, pdwsize: *mut u32) -> ::windows_core::Result<()>;
    fn GetReconstructedVideoFrame(this: &Self::This, pbuf: ::core::option::Option<&super::DxMediaObjects::IMediaBuffer>) -> ::windows_core::Result<()>;
    fn SetReconstructedVideoFrame(this: &Self::This, pbuf: ::core::option::Option<&super::DxMediaObjects::IMediaBuffer>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Media_DxMediaObjects")]
impl ::windows_core::Iids for IWMVideoDecoderReconBuffer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Media_DxMediaObjects")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderReconBuffer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMVideoDecoderReconBuffer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetReconstructedVideoFrameSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderReconBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwsize: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReconstructedVideoFrameSize(this, ::core::mem::transmute_copy(&pdwsize)).into())
        }
        unsafe extern "system" fn GetReconstructedVideoFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderReconBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuf: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetReconstructedVideoFrame(this, ::windows_core::from_raw_borrowed(&pbuf)).into())
        }
        unsafe extern "system" fn SetReconstructedVideoFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoDecoderReconBuffer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbuf: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReconstructedVideoFrame(this, ::windows_core::from_raw_borrowed(&pbuf)).into())
        }
        IWMVideoDecoderReconBuffer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetReconstructedVideoFrameSize: GetReconstructedVideoFrameSize::<Identity, Impl, OFFSET>,
            GetReconstructedVideoFrame: GetReconstructedVideoFrame::<Identity, Impl, OFFSET>,
            SetReconstructedVideoFrame: SetReconstructedVideoFrame::<Identity, Impl, OFFSET>,
        }
    };
}
pub trait IWMVideoForceKeyFrame_Impl: ::windows_core::BaseImpl {
    fn SetKeyFrame(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IWMVideoForceKeyFrame {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoForceKeyFrame_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IWMVideoForceKeyFrame {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetKeyFrame<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IWMVideoForceKeyFrame_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyFrame(this).into())
        }
        IWMVideoForceKeyFrame_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetKeyFrame: SetKeyFrame::<Identity, Impl, OFFSET> }
    };
}
pub trait MFASYNCRESULT_Impl: ::windows_core::BaseImpl + IMFAsyncResult_Impl {}
impl ::windows_core::Iids for MFASYNCRESULT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMFAsyncResult);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: MFASYNCRESULT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for MFASYNCRESULT {
    const VTABLE: Self::Vtable = { MFASYNCRESULT_Vtbl { base__: <IMFAsyncResult as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
}
