#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IATSCChannelTuneRequest_Impl: ::windows_core::BaseImpl + IChannelTuneRequest_Impl {
    fn MinorChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinorChannel(this: &Self::This, minorchannel: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IATSCChannelTuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IChannelTuneRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCChannelTuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSCChannelTuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MinorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCChannelTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minorchannel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinorChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minorchannel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCChannelTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minorchannel: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinorChannel(this, ::core::mem::transmute_copy(&minorchannel)).into())
        }
        IATSCChannelTuneRequest_Vtbl {
            base__: <IChannelTuneRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MinorChannel: MinorChannel::<Identity, Impl, OFFSET>,
            SetMinorChannel: SetMinorChannel::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IATSCComponentType_Impl: ::windows_core::BaseImpl + IMPEG2ComponentType_Impl {
    fn Flags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetFlags(this: &Self::This, flags: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IATSCComponentType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMPEG2ComponentType);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCComponentType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSCComponentType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Flags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Flags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        IATSCComponentType_Vtbl {
            base__: <IMPEG2ComponentType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Flags: Flags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IATSCLocator_Impl: ::windows_core::BaseImpl + IDigitalLocator_Impl {
    fn PhysicalChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetPhysicalChannel(this: &Self::This, physicalchannel: i32) -> ::windows_core::Result<()>;
    fn TSID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetTSID(this: &Self::This, tsid: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IATSCLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDigitalLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSCLocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PhysicalChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, physicalchannel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PhysicalChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(physicalchannel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPhysicalChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, physicalchannel: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPhysicalChannel(this, ::core::mem::transmute_copy(&physicalchannel)).into())
        }
        unsafe extern "system" fn TSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TSID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTSID(this, ::core::mem::transmute_copy(&tsid)).into())
        }
        IATSCLocator_Vtbl {
            base__: <IDigitalLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PhysicalChannel: PhysicalChannel::<Identity, Impl, OFFSET>,
            SetPhysicalChannel: SetPhysicalChannel::<Identity, Impl, OFFSET>,
            TSID: TSID::<Identity, Impl, OFFSET>,
            SetTSID: SetTSID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IATSCLocator2_Impl: ::windows_core::BaseImpl + IATSCLocator_Impl {
    fn ProgramNumber(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetProgramNumber(this: &Self::This, programnumber: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IATSCLocator2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IATSCLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSCLocator2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, programnumber: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProgramNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(programnumber, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, programnumber: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgramNumber(this, ::core::mem::transmute_copy(&programnumber)).into())
        }
        IATSCLocator2_Vtbl {
            base__: <IATSCLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ProgramNumber: ProgramNumber::<Identity, Impl, OFFSET>,
            SetProgramNumber: SetProgramNumber::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IATSCTuningSpace_Impl: ::windows_core::BaseImpl + IAnalogTVTuningSpace_Impl {
    fn MinMinorChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinMinorChannel(this: &Self::This, newminminorchannelval: i32) -> ::windows_core::Result<()>;
    fn MaxMinorChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxMinorChannel(this: &Self::This, newmaxminorchannelval: i32) -> ::windows_core::Result<()>;
    fn MinPhysicalChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinPhysicalChannel(this: &Self::This, newminphysicalchannelval: i32) -> ::windows_core::Result<()>;
    fn MaxPhysicalChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxPhysicalChannel(this: &Self::This, newmaxphysicalchannelval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IATSCTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IAnalogTVTuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSCTuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MinMinorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minminorchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinMinorChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minminorchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinMinorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newminminorchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinMinorChannel(this, ::core::mem::transmute_copy(&newminminorchannelval)).into())
        }
        unsafe extern "system" fn MaxMinorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxminorchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxMinorChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxminorchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxMinorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newmaxminorchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxMinorChannel(this, ::core::mem::transmute_copy(&newmaxminorchannelval)).into())
        }
        unsafe extern "system" fn MinPhysicalChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minphysicalchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinPhysicalChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minphysicalchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinPhysicalChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newminphysicalchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinPhysicalChannel(this, ::core::mem::transmute_copy(&newminphysicalchannelval)).into())
        }
        unsafe extern "system" fn MaxPhysicalChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxphysicalchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxPhysicalChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxphysicalchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxPhysicalChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSCTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newmaxphysicalchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxPhysicalChannel(this, ::core::mem::transmute_copy(&newmaxphysicalchannelval)).into())
        }
        IATSCTuningSpace_Vtbl {
            base__: <IAnalogTVTuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MinMinorChannel: MinMinorChannel::<Identity, Impl, OFFSET>,
            SetMinMinorChannel: SetMinMinorChannel::<Identity, Impl, OFFSET>,
            MaxMinorChannel: MaxMinorChannel::<Identity, Impl, OFFSET>,
            SetMaxMinorChannel: SetMaxMinorChannel::<Identity, Impl, OFFSET>,
            MinPhysicalChannel: MinPhysicalChannel::<Identity, Impl, OFFSET>,
            SetMinPhysicalChannel: SetMinPhysicalChannel::<Identity, Impl, OFFSET>,
            MaxPhysicalChannel: MaxPhysicalChannel::<Identity, Impl, OFFSET>,
            SetMaxPhysicalChannel: SetMaxPhysicalChannel::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IATSC_EIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSourceId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetProtocolVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordEventId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordStartTime(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
    fn GetRecordEtmLocation(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordDuration(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<MPEG_TIME>;
    fn GetRecordTitleText(this: &Self::This, dwrecordindex: u32, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows_core::Result<()>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IATSC_EIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSC_EIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSourceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSourceId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtocolVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtocolVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEventId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEventId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordStartTime(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEtmLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEtmLocation(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDuration(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTitleText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordTitleText(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&pdwlength), ::core::mem::transmute_copy(&pptext)).into())
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        IATSC_EIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetSourceId: GetSourceId::<Identity, Impl, OFFSET>,
            GetProtocolVersion: GetProtocolVersion::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordEventId: GetRecordEventId::<Identity, Impl, OFFSET>,
            GetRecordStartTime: GetRecordStartTime::<Identity, Impl, OFFSET>,
            GetRecordEtmLocation: GetRecordEtmLocation::<Identity, Impl, OFFSET>,
            GetRecordDuration: GetRecordDuration::<Identity, Impl, OFFSET>,
            GetRecordTitleText: GetRecordTitleText::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IATSC_ETT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetProtocolVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetEtmId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetExtendedMessageText(this: &Self::This, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IATSC_ETT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_ETT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSC_ETT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_ETT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_ETT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtocolVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_ETT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtocolVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEtmId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_ETT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEtmId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExtendedMessageText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_ETT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwlength: *mut u32, pptext: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExtendedMessageText(this, ::core::mem::transmute_copy(&pdwlength), ::core::mem::transmute_copy(&pptext)).into())
        }
        IATSC_ETT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetProtocolVersion: GetProtocolVersion::<Identity, Impl, OFFSET>,
            GetEtmId: GetEtmId::<Identity, Impl, OFFSET>,
            GetExtendedMessageText: GetExtendedMessageText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IATSC_MGT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetProtocolVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordType(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordTypePid(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordVersionNumber(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfTableDescriptors(this: &Self::This, pdwval: *const u32) -> ::windows_core::Result<()>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IATSC_MGT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSC_MGT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtocolVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtocolVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordType(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTypePid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, ppidval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTypePid(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordVersionNumber(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *const u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCountOfTableDescriptors(this, ::core::mem::transmute_copy(&pdwval)).into())
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_MGT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        IATSC_MGT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetProtocolVersion: GetProtocolVersion::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordType: GetRecordType::<Identity, Impl, OFFSET>,
            GetRecordTypePid: GetRecordTypePid::<Identity, Impl, OFFSET>,
            GetRecordVersionNumber: GetRecordVersionNumber::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IATSC_STT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetProtocolVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSystemTime(this: &Self::This) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
    fn GetGpsUtcOffset(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDaylightSavings(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IATSC_STT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSC_STT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetProtocolVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtocolVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSystemTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmdtsystemtime: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSystemTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtsystemtime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGpsUtcOffset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGpsUtcOffset(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDaylightSavings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDaylightSavings(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_STT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        IATSC_STT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetProtocolVersion: GetProtocolVersion::<Identity, Impl, OFFSET>,
            GetSystemTime: GetSystemTime::<Identity, Impl, OFFSET>,
            GetGpsUtcOffset: GetGpsUtcOffset::<Identity, Impl, OFFSET>,
            GetDaylightSavings: GetDaylightSavings::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IATSC_VCT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTransportStreamId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetProtocolVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordName(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn GetRecordMajorChannelNumber(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordMinorChannelNumber(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordModulationMode(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordCarrierFrequency(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordTransportStreamId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordProgramNumber(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordEtmLocation(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordIsAccessControlledBitSet(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordIsHiddenBitSet(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordIsPathSelectBitSet(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordIsOutOfBandBitSet(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordIsHideGuideBitSet(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordServiceType(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordSourceId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfTableDescriptors(this: &Self::This, pdwval: *const u32) -> ::windows_core::Result<()>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IATSC_VCT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IATSC_VCT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransportStreamId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtocolVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtocolVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwsname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordName(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwsname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordMajorChannelNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordMajorChannelNumber(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordMinorChannelNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordMinorChannelNumber(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordModulationMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordModulationMode(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCarrierFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCarrierFrequency(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTransportStreamId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordProgramNumber(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEtmLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEtmLocation(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordIsAccessControlledBitSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordIsAccessControlledBitSet(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordIsHiddenBitSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordIsHiddenBitSet(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordIsPathSelectBitSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordIsPathSelectBitSet(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordIsOutOfBandBitSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordIsOutOfBandBitSet(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordIsHideGuideBitSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordIsHideGuideBitSet(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceType(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordSourceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordSourceId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *const u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCountOfTableDescriptors(this, ::core::mem::transmute_copy(&pdwval)).into())
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IATSC_VCT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        IATSC_VCT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetTransportStreamId: GetTransportStreamId::<Identity, Impl, OFFSET>,
            GetProtocolVersion: GetProtocolVersion::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordName: GetRecordName::<Identity, Impl, OFFSET>,
            GetRecordMajorChannelNumber: GetRecordMajorChannelNumber::<Identity, Impl, OFFSET>,
            GetRecordMinorChannelNumber: GetRecordMinorChannelNumber::<Identity, Impl, OFFSET>,
            GetRecordModulationMode: GetRecordModulationMode::<Identity, Impl, OFFSET>,
            GetRecordCarrierFrequency: GetRecordCarrierFrequency::<Identity, Impl, OFFSET>,
            GetRecordTransportStreamId: GetRecordTransportStreamId::<Identity, Impl, OFFSET>,
            GetRecordProgramNumber: GetRecordProgramNumber::<Identity, Impl, OFFSET>,
            GetRecordEtmLocation: GetRecordEtmLocation::<Identity, Impl, OFFSET>,
            GetRecordIsAccessControlledBitSet: GetRecordIsAccessControlledBitSet::<Identity, Impl, OFFSET>,
            GetRecordIsHiddenBitSet: GetRecordIsHiddenBitSet::<Identity, Impl, OFFSET>,
            GetRecordIsPathSelectBitSet: GetRecordIsPathSelectBitSet::<Identity, Impl, OFFSET>,
            GetRecordIsOutOfBandBitSet: GetRecordIsOutOfBandBitSet::<Identity, Impl, OFFSET>,
            GetRecordIsHideGuideBitSet: GetRecordIsHideGuideBitSet::<Identity, Impl, OFFSET>,
            GetRecordServiceType: GetRecordServiceType::<Identity, Impl, OFFSET>,
            GetRecordSourceId: GetRecordSourceId::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAnalogAudioComponentType_Impl: ::windows_core::BaseImpl + IComponentType_Impl {
    fn AnalogAudioMode(this: &Self::This) -> ::windows_core::Result<super::TVAudioMode>;
    fn SetAnalogAudioMode(this: &Self::This, mode: super::TVAudioMode) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAnalogAudioComponentType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IComponentType);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogAudioComponentType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAnalogAudioComponentType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AnalogAudioMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogAudioComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mode: *mut super::TVAudioMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AnalogAudioMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAnalogAudioMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogAudioComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mode: super::TVAudioMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAnalogAudioMode(this, ::core::mem::transmute_copy(&mode)).into())
        }
        IAnalogAudioComponentType_Vtbl {
            base__: <IComponentType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AnalogAudioMode: AnalogAudioMode::<Identity, Impl, OFFSET>,
            SetAnalogAudioMode: SetAnalogAudioMode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAnalogLocator_Impl: ::windows_core::BaseImpl + ILocator_Impl {
    fn VideoStandard(this: &Self::This) -> ::windows_core::Result<super::AnalogVideoStandard>;
    fn SetVideoStandard(this: &Self::This, avs: super::AnalogVideoStandard) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAnalogLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ILocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAnalogLocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn VideoStandard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, avs: *mut super::AnalogVideoStandard) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoStandard(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(avs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVideoStandard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, avs: super::AnalogVideoStandard) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoStandard(this, ::core::mem::transmute_copy(&avs)).into())
        }
        IAnalogLocator_Vtbl {
            base__: <ILocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            VideoStandard: VideoStandard::<Identity, Impl, OFFSET>,
            SetVideoStandard: SetVideoStandard::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAnalogRadioTuningSpace_Impl: ::windows_core::BaseImpl + ITuningSpace_Impl {
    fn MinFrequency(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinFrequency(this: &Self::This, newminfrequencyval: i32) -> ::windows_core::Result<()>;
    fn MaxFrequency(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxFrequency(this: &Self::This, newmaxfrequencyval: i32) -> ::windows_core::Result<()>;
    fn Step(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetStep(this: &Self::This, newstepval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAnalogRadioTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAnalogRadioTuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MinFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minfrequencyval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minfrequencyval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newminfrequencyval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinFrequency(this, ::core::mem::transmute_copy(&newminfrequencyval)).into())
        }
        unsafe extern "system" fn MaxFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxfrequencyval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxfrequencyval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newmaxfrequencyval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxFrequency(this, ::core::mem::transmute_copy(&newmaxfrequencyval)).into())
        }
        unsafe extern "system" fn Step<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stepval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Step(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(stepval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newstepval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStep(this, ::core::mem::transmute_copy(&newstepval)).into())
        }
        IAnalogRadioTuningSpace_Vtbl {
            base__: <ITuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MinFrequency: MinFrequency::<Identity, Impl, OFFSET>,
            SetMinFrequency: SetMinFrequency::<Identity, Impl, OFFSET>,
            MaxFrequency: MaxFrequency::<Identity, Impl, OFFSET>,
            SetMaxFrequency: SetMaxFrequency::<Identity, Impl, OFFSET>,
            Step: Step::<Identity, Impl, OFFSET>,
            SetStep: SetStep::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAnalogRadioTuningSpace2_Impl: ::windows_core::BaseImpl + IAnalogRadioTuningSpace_Impl {
    fn CountryCode(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCountryCode(this: &Self::This, newcountrycodeval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAnalogRadioTuningSpace2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IAnalogRadioTuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAnalogRadioTuningSpace2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CountryCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(countrycodeval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogRadioTuningSpace2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCountryCode(this, ::core::mem::transmute_copy(&newcountrycodeval)).into())
        }
        IAnalogRadioTuningSpace2_Vtbl {
            base__: <IAnalogRadioTuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CountryCode: CountryCode::<Identity, Impl, OFFSET>,
            SetCountryCode: SetCountryCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAnalogTVTuningSpace_Impl: ::windows_core::BaseImpl + ITuningSpace_Impl {
    fn MinChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinChannel(this: &Self::This, newminchannelval: i32) -> ::windows_core::Result<()>;
    fn MaxChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxChannel(this: &Self::This, newmaxchannelval: i32) -> ::windows_core::Result<()>;
    fn InputType(this: &Self::This) -> ::windows_core::Result<super::TunerInputType>;
    fn SetInputType(this: &Self::This, newinputtypeval: super::TunerInputType) -> ::windows_core::Result<()>;
    fn CountryCode(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCountryCode(this: &Self::This, newcountrycodeval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAnalogTVTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAnalogTVTuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MinChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newminchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinChannel(this, ::core::mem::transmute_copy(&newminchannelval)).into())
        }
        unsafe extern "system" fn MaxChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newmaxchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxChannel(this, ::core::mem::transmute_copy(&newmaxchannelval)).into())
        }
        unsafe extern "system" fn InputType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputtypeval: *mut super::TunerInputType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InputType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(inputtypeval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newinputtypeval: super::TunerInputType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputType(this, ::core::mem::transmute_copy(&newinputtypeval)).into())
        }
        unsafe extern "system" fn CountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CountryCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(countrycodeval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAnalogTVTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCountryCode(this, ::core::mem::transmute_copy(&newcountrycodeval)).into())
        }
        IAnalogTVTuningSpace_Vtbl {
            base__: <ITuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MinChannel: MinChannel::<Identity, Impl, OFFSET>,
            SetMinChannel: SetMinChannel::<Identity, Impl, OFFSET>,
            MaxChannel: MaxChannel::<Identity, Impl, OFFSET>,
            SetMaxChannel: SetMaxChannel::<Identity, Impl, OFFSET>,
            InputType: InputType::<Identity, Impl, OFFSET>,
            SetInputType: SetInputType::<Identity, Impl, OFFSET>,
            CountryCode: CountryCode::<Identity, Impl, OFFSET>,
            SetCountryCode: SetCountryCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAtscContentAdvisoryDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRatingRegionCount(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordRatingRegion(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordRatedDimensions(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordRatingDimension(this: &Self::This, bindexouter: u8, bindexinner: u8) -> ::windows_core::Result<u8>;
    fn GetRecordRatingValue(this: &Self::This, bindexouter: u8, bindexinner: u8) -> ::windows_core::Result<u8>;
    fn GetRecordRatingDescriptionText(this: &Self::This, bindex: u8, pblength: *mut u8, pptext: *mut *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAtscContentAdvisoryDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAtscContentAdvisoryDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRatingRegionCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRatingRegionCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRatingRegion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRatingRegion(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRatedDimensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRatedDimensions(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRatingDimension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindexouter: u8, bindexinner: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRatingDimension(this, ::core::mem::transmute_copy(&bindexouter), ::core::mem::transmute_copy(&bindexinner)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRatingValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindexouter: u8, bindexinner: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRatingValue(this, ::core::mem::transmute_copy(&bindexouter), ::core::mem::transmute_copy(&bindexinner)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRatingDescriptionText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscContentAdvisoryDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pblength: *mut u8, pptext: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordRatingDescriptionText(this, ::core::mem::transmute_copy(&bindex), ::core::mem::transmute_copy(&pblength), ::core::mem::transmute_copy(&pptext)).into())
        }
        IAtscContentAdvisoryDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetRatingRegionCount: GetRatingRegionCount::<Identity, Impl, OFFSET>,
            GetRecordRatingRegion: GetRecordRatingRegion::<Identity, Impl, OFFSET>,
            GetRecordRatedDimensions: GetRecordRatedDimensions::<Identity, Impl, OFFSET>,
            GetRecordRatingDimension: GetRecordRatingDimension::<Identity, Impl, OFFSET>,
            GetRecordRatingValue: GetRecordRatingValue::<Identity, Impl, OFFSET>,
            GetRecordRatingDescriptionText: GetRecordRatingDescriptionText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IAtscPsipParser_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, punkmpeg2data: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetPAT(this: &Self::This) -> ::windows_core::Result<IPAT>;
    fn GetCAT(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<ICAT>;
    fn GetPMT(this: &Self::This, pid: u16, pwprogramnumber: *const u16) -> ::windows_core::Result<IPMT>;
    fn GetTSDT(this: &Self::This) -> ::windows_core::Result<ITSDT>;
    fn GetMGT(this: &Self::This) -> ::windows_core::Result<IATSC_MGT>;
    fn GetVCT(this: &Self::This, tableid: u8, fgetnexttable: super::super::super::Foundation::BOOL) -> ::windows_core::Result<IATSC_VCT>;
    fn GetEIT(this: &Self::This, pid: u16, pwsourceid: *const u16, dwtimeout: u32) -> ::windows_core::Result<IATSC_EIT>;
    fn GetETT(this: &Self::This, pid: u16, wsourceid: *const u16, pweventid: *const u16) -> ::windows_core::Result<IATSC_ETT>;
    fn GetSTT(this: &Self::This) -> ::windows_core::Result<IATSC_STT>;
    fn GetEAS(this: &Self::This, pid: u16) -> ::windows_core::Result<ISCTE_EAS>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IAtscPsipParser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAtscPsipParser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkmpeg2data: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&punkmpeg2data)).into())
        }
        unsafe extern "system" fn GetPAT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPAT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAT(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPMT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, pwprogramnumber: *const u16, pppmt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPMT(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&pwprogramnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppmt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTSDT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptsdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTSDT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptsdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMGT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmgt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMGT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmgt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVCT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, fgetnexttable: super::super::super::Foundation::BOOL, ppvct: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVCT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&fgetnexttable)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvct, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, pwsourceid: *const u16, dwtimeout: u32, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEIT(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&pwsourceid), ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppeit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetETT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, wsourceid: *const u16, pweventid: *const u16, ppett: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetETT(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&wsourceid), ::core::mem::transmute_copy(&pweventid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppett, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSTT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSTT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEAS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAtscPsipParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, ppeas: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEAS(this, ::core::mem::transmute_copy(&pid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppeas, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAtscPsipParser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetPAT: GetPAT::<Identity, Impl, OFFSET>,
            GetCAT: GetCAT::<Identity, Impl, OFFSET>,
            GetPMT: GetPMT::<Identity, Impl, OFFSET>,
            GetTSDT: GetTSDT::<Identity, Impl, OFFSET>,
            GetMGT: GetMGT::<Identity, Impl, OFFSET>,
            GetVCT: GetVCT::<Identity, Impl, OFFSET>,
            GetEIT: GetEIT::<Identity, Impl, OFFSET>,
            GetETT: GetETT::<Identity, Impl, OFFSET>,
            GetSTT: GetSTT::<Identity, Impl, OFFSET>,
            GetEAS: GetEAS::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAttributeGet_Impl: ::windows_core::BaseImpl {
    fn GetCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetAttribIndexed(this: &Self::This, lindex: i32, pguidattribute: *mut ::windows_core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows_core::Result<()>;
    fn GetAttrib(this: &Self::This, guidattribute: &::windows_core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAttributeGet {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttributeGet_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAttributeGet {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttributeGet_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAttribIndexed<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttributeGet_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lindex: i32, pguidattribute: *mut ::windows_core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttribIndexed(this, ::core::mem::transmute_copy(&lindex), ::core::mem::transmute_copy(&pguidattribute), ::core::mem::transmute_copy(&pbattribute), ::core::mem::transmute_copy(&pdwattributelength)).into())
        }
        unsafe extern "system" fn GetAttrib<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttributeGet_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidattribute: ::windows_core::GUID, pbattribute: *mut u8, pdwattributelength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttrib(this, ::core::mem::transmute(&guidattribute), ::core::mem::transmute_copy(&pbattribute), ::core::mem::transmute_copy(&pdwattributelength)).into())
        }
        IAttributeGet_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetAttribIndexed: GetAttribIndexed::<Identity, Impl, OFFSET>,
            GetAttrib: GetAttrib::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IAttributeSet_Impl: ::windows_core::BaseImpl {
    fn SetAttrib(this: &Self::This, guidattribute: &::windows_core::GUID, pbattribute: *const u8, dwattributelength: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IAttributeSet {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttributeSet_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAttributeSet {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAttrib<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAttributeSet_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guidattribute: ::windows_core::GUID, pbattribute: *const u8, dwattributelength: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAttrib(this, ::core::mem::transmute(&guidattribute), ::core::mem::transmute_copy(&pbattribute), ::core::mem::transmute_copy(&dwattributelength)).into())
        }
        IAttributeSet_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetAttrib: SetAttrib::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAuxInTuningSpace_Impl: ::windows_core::BaseImpl + ITuningSpace_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAuxInTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAuxInTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAuxInTuningSpace {
    const VTABLE: Self::Vtable = { IAuxInTuningSpace_Vtbl { base__: <ITuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAuxInTuningSpace2_Impl: ::windows_core::BaseImpl + IAuxInTuningSpace_Impl {
    fn CountryCode(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCountryCode(this: &Self::This, newcountrycodeval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAuxInTuningSpace2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IAuxInTuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAuxInTuningSpace2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAuxInTuningSpace2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAuxInTuningSpace2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, countrycodeval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CountryCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(countrycodeval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAuxInTuningSpace2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcountrycodeval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCountryCode(this, ::core::mem::transmute_copy(&newcountrycodeval)).into())
        }
        IAuxInTuningSpace2_Vtbl {
            base__: <IAuxInTuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CountryCode: CountryCode::<Identity, Impl, OFFSET>,
            SetCountryCode: SetCountryCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IBDAComparable_Impl: ::windows_core::BaseImpl {
    fn CompareExact(this: &Self::This, compareto: ::core::option::Option<&super::super::super::System::Com::IDispatch>) -> ::windows_core::Result<i32>;
    fn CompareEquivalent(this: &Self::This, compareto: ::core::option::Option<&super::super::super::System::Com::IDispatch>, dwflags: u32) -> ::windows_core::Result<i32>;
    fn HashExact(this: &Self::This) -> ::windows_core::Result<i64>;
    fn HashExactIncremental(this: &Self::This, partialresult: i64) -> ::windows_core::Result<i64>;
    fn HashEquivalent(this: &Self::This, dwflags: u32) -> ::windows_core::Result<i64>;
    fn HashEquivalentIncremental(this: &Self::This, partialresult: i64, dwflags: u32) -> ::windows_core::Result<i64>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IBDAComparable {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBDAComparable {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CompareExact<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compareto: *mut ::core::ffi::c_void, result: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CompareExact(this, ::windows_core::from_raw_borrowed(&compareto)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CompareEquivalent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compareto: *mut ::core::ffi::c_void, dwflags: u32, result: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CompareEquivalent(this, ::windows_core::from_raw_borrowed(&compareto), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HashExact<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, result: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashExact(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HashExactIncremental<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, partialresult: i64, result: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashExactIncremental(this, ::core::mem::transmute_copy(&partialresult)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HashEquivalent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, result: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashEquivalent(this, ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HashEquivalentIncremental<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDAComparable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, partialresult: i64, dwflags: u32, result: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashEquivalentIncremental(this, ::core::mem::transmute_copy(&partialresult), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(result, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBDAComparable_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CompareExact: CompareExact::<Identity, Impl, OFFSET>,
            CompareEquivalent: CompareEquivalent::<Identity, Impl, OFFSET>,
            HashExact: HashExact::<Identity, Impl, OFFSET>,
            HashExactIncremental: HashExactIncremental::<Identity, Impl, OFFSET>,
            HashEquivalent: HashEquivalent::<Identity, Impl, OFFSET>,
            HashEquivalentIncremental: HashEquivalentIncremental::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IBDACreateTuneRequestEx_Impl: ::windows_core::BaseImpl {
    fn CreateTuneRequestEx(this: &Self::This, tunerequestiid: *const ::windows_core::GUID) -> ::windows_core::Result<ITuneRequest>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IBDACreateTuneRequestEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDACreateTuneRequestEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBDACreateTuneRequestEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateTuneRequestEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDACreateTuneRequestEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tunerequestiid: *const ::windows_core::GUID, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTuneRequestEx(this, ::core::mem::transmute_copy(&tunerequestiid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBDACreateTuneRequestEx_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateTuneRequestEx: CreateTuneRequestEx::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IBDA_TIF_REGISTRATION_Impl: ::windows_core::BaseImpl {
    fn RegisterTIFEx(this: &Self::This, ptifinputpin: ::core::option::Option<&super::IPin>, ppvregistrationcontext: *mut u32, ppmpeg2datacontrol: *mut ::core::option::Option<::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn UnregisterTIF(this: &Self::This, pvregistrationcontext: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IBDA_TIF_REGISTRATION {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDA_TIF_REGISTRATION_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBDA_TIF_REGISTRATION {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterTIFEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDA_TIF_REGISTRATION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptifinputpin: *mut ::core::ffi::c_void, ppvregistrationcontext: *mut u32, ppmpeg2datacontrol: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterTIFEx(this, ::windows_core::from_raw_borrowed(&ptifinputpin), ::core::mem::transmute_copy(&ppvregistrationcontext), ::core::mem::transmute_copy(&ppmpeg2datacontrol)).into())
        }
        unsafe extern "system" fn UnregisterTIF<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBDA_TIF_REGISTRATION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterTIF(this, ::core::mem::transmute_copy(&pvregistrationcontext)).into())
        }
        IBDA_TIF_REGISTRATION_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterTIFEx: RegisterTIFEx::<Identity, Impl, OFFSET>,
            UnregisterTIF: UnregisterTIF::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ICAT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<ICAT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ICAT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICAT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        ICAT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICaptionServiceDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetNumberOfServices(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLanguageCode(this: &Self::This, bindex: u8, langcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetCaptionServiceNumber(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
    fn GetCCType(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
    fn GetEasyReader(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
    fn GetWideAspectRatio(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for ICaptionServiceDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICaptionServiceDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetNumberOfServices<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfServices(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, langcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode(this, ::core::mem::transmute_copy(&bindex), ::core::mem::transmute_copy(&langcode)).into())
        }
        unsafe extern "system" fn GetCaptionServiceNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCaptionServiceNumber(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCCType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCCType(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEasyReader<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEasyReader(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetWideAspectRatio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICaptionServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWideAspectRatio(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICaptionServiceDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetNumberOfServices: GetNumberOfServices::<Identity, Impl, OFFSET>,
            GetLanguageCode: GetLanguageCode::<Identity, Impl, OFFSET>,
            GetCaptionServiceNumber: GetCaptionServiceNumber::<Identity, Impl, OFFSET>,
            GetCCType: GetCCType::<Identity, Impl, OFFSET>,
            GetEasyReader: GetEasyReader::<Identity, Impl, OFFSET>,
            GetWideAspectRatio: GetWideAspectRatio::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IChannelIDTuneRequest_Impl: ::windows_core::BaseImpl + ITuneRequest_Impl {
    fn ChannelID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetChannelID(this: &Self::This, channelid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IChannelIDTuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuneRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IChannelIDTuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IChannelIDTuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ChannelID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IChannelIDTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channelid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ChannelID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(channelid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetChannelID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IChannelIDTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channelid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetChannelID(this, ::core::mem::transmute(&channelid)).into())
        }
        IChannelIDTuneRequest_Vtbl {
            base__: <ITuneRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ChannelID: ChannelID::<Identity, Impl, OFFSET>,
            SetChannelID: SetChannelID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IChannelTuneRequest_Impl: ::windows_core::BaseImpl + ITuneRequest_Impl {
    fn Channel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetChannel(this: &Self::This, channel: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IChannelTuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuneRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IChannelTuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IChannelTuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Channel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IChannelTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Channel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(channel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IChannelTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channel: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetChannel(this, ::core::mem::transmute_copy(&channel)).into())
        }
        IChannelTuneRequest_Vtbl {
            base__: <ITuneRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Channel: Channel::<Identity, Impl, OFFSET>,
            SetChannel: SetChannel::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IComponent_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Type(this: &Self::This) -> ::windows_core::Result<IComponentType>;
    fn SetType(this: &Self::This, ct: ::core::option::Option<&IComponentType>) -> ::windows_core::Result<()>;
    fn DescLangID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetDescLangID(this: &Self::This, langid: i32) -> ::windows_core::Result<()>;
    fn Status(this: &Self::This) -> ::windows_core::Result<super::ComponentStatus>;
    fn SetStatus(this: &Self::This, status: super::ComponentStatus) -> ::windows_core::Result<()>;
    fn Description(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetDescription(this: &Self::This, description: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IComponent>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IComponent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComponent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ct: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ct, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ct: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetType(this, ::windows_core::from_raw_borrowed(&ct)).into())
        }
        unsafe extern "system" fn DescLangID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, langid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DescLangID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(langid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDescLangID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, langid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescLangID(this, ::core::mem::transmute_copy(&langid)).into())
        }
        unsafe extern "system" fn Status<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut super::ComponentStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Status(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: super::ComponentStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatus(this, ::core::mem::transmute_copy(&status)).into())
        }
        unsafe extern "system" fn Description<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, description: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Description(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(description, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, description: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescription(this, ::core::mem::transmute(&description)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcomponent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newcomponent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IComponent_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Type: Type::<Identity, Impl, OFFSET>,
            SetType: SetType::<Identity, Impl, OFFSET>,
            DescLangID: DescLangID::<Identity, Impl, OFFSET>,
            SetDescLangID: SetDescLangID::<Identity, Impl, OFFSET>,
            Status: Status::<Identity, Impl, OFFSET>,
            SetStatus: SetStatus::<Identity, Impl, OFFSET>,
            Description: Description::<Identity, Impl, OFFSET>,
            SetDescription: SetDescription::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IComponentType_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Category(this: &Self::This) -> ::windows_core::Result<super::ComponentCategory>;
    fn SetCategory(this: &Self::This, category: super::ComponentCategory) -> ::windows_core::Result<()>;
    fn MediaMajorType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetMediaMajorType(this: &Self::This, mediamajortype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn _MediaMajorType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn Set_MediaMajorType(this: &Self::This, mediamajortypeguid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn MediaSubType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetMediaSubType(this: &Self::This, mediasubtype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn _MediaSubType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn Set_MediaSubType(this: &Self::This, mediasubtypeguid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn MediaFormatType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetMediaFormatType(this: &Self::This, mediaformattype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn _MediaFormatType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn Set_MediaFormatType(this: &Self::This, mediaformattypeguid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn MediaType(this: &Self::This) -> ::windows_core::Result<super::super::MediaFoundation::AM_MEDIA_TYPE>;
    fn SetMediaType(this: &Self::This, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IComponentType>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IComponentType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComponentType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Category<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, category: *mut super::ComponentCategory) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Category(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(category, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCategory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, category: super::ComponentCategory) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCategory(this, ::core::mem::transmute_copy(&category)).into())
        }
        unsafe extern "system" fn MediaMajorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediamajortype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MediaMajorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediamajortype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMediaMajorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediamajortype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaMajorType(this, ::core::mem::transmute(&mediamajortype)).into())
        }
        unsafe extern "system" fn _MediaMajorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediamajortypeguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_MediaMajorType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediamajortypeguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_MediaMajorType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediamajortypeguid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_MediaMajorType(this, ::core::mem::transmute_copy(&mediamajortypeguid)).into())
        }
        unsafe extern "system" fn MediaSubType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediasubtype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MediaSubType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediasubtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMediaSubType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediasubtype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaSubType(this, ::core::mem::transmute(&mediasubtype)).into())
        }
        unsafe extern "system" fn _MediaSubType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediasubtypeguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_MediaSubType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediasubtypeguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_MediaSubType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediasubtypeguid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_MediaSubType(this, ::core::mem::transmute_copy(&mediasubtypeguid)).into())
        }
        unsafe extern "system" fn MediaFormatType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediaformattype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MediaFormatType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediaformattype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMediaFormatType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediaformattype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaFormatType(this, ::core::mem::transmute(&mediaformattype)).into())
        }
        unsafe extern "system" fn _MediaFormatType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediaformattypeguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_MediaFormatType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediaformattypeguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_MediaFormatType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediaformattypeguid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_MediaFormatType(this, ::core::mem::transmute_copy(&mediaformattypeguid)).into())
        }
        unsafe extern "system" fn MediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediatype: *mut super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MediaType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMediaType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMediaType(this, ::core::mem::transmute_copy(&mediatype)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newct: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newct, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IComponentType_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Category: Category::<Identity, Impl, OFFSET>,
            SetCategory: SetCategory::<Identity, Impl, OFFSET>,
            MediaMajorType: MediaMajorType::<Identity, Impl, OFFSET>,
            SetMediaMajorType: SetMediaMajorType::<Identity, Impl, OFFSET>,
            _MediaMajorType: _MediaMajorType::<Identity, Impl, OFFSET>,
            Set_MediaMajorType: Set_MediaMajorType::<Identity, Impl, OFFSET>,
            MediaSubType: MediaSubType::<Identity, Impl, OFFSET>,
            SetMediaSubType: SetMediaSubType::<Identity, Impl, OFFSET>,
            _MediaSubType: _MediaSubType::<Identity, Impl, OFFSET>,
            Set_MediaSubType: Set_MediaSubType::<Identity, Impl, OFFSET>,
            MediaFormatType: MediaFormatType::<Identity, Impl, OFFSET>,
            SetMediaFormatType: SetMediaFormatType::<Identity, Impl, OFFSET>,
            _MediaFormatType: _MediaFormatType::<Identity, Impl, OFFSET>,
            Set_MediaFormatType: Set_MediaFormatType::<Identity, Impl, OFFSET>,
            MediaType: MediaType::<Identity, Impl, OFFSET>,
            SetMediaType: SetMediaType::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IComponentTypes_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn EnumComponentTypes(this: &Self::This) -> ::windows_core::Result<IEnumComponentTypes>;
    fn get_Item(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IComponentType>;
    fn put_Item(this: &Self::This, index: &super::super::super::System::Variant::VARIANT, componenttype: ::core::option::Option<&IComponentType>) -> ::windows_core::Result<()>;
    fn Add(this: &Self::This, componenttype: ::core::option::Option<&IComponentType>) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn Remove(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IComponentTypes>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IComponentTypes {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComponentTypes {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumComponentTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumComponentTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT, componenttype: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(componenttype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT, componenttype: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Item(this, ::core::mem::transmute(&index), ::windows_core::from_raw_borrowed(&componenttype)).into())
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, componenttype: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Add(this, ::windows_core::from_raw_borrowed(&componenttype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&index)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IComponentTypes_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            EnumComponentTypes: EnumComponentTypes::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            put_Item: put_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IComponents_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn EnumComponents(this: &Self::This) -> ::windows_core::Result<IEnumComponents>;
    fn get_Item(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IComponent>;
    fn Add(this: &Self::This, component: ::core::option::Option<&IComponent>) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn Remove(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IComponents>;
    fn put_Item(this: &Self::This, index: &super::super::super::System::Variant::VARIANT, ppcomponent: ::core::option::Option<&IComponent>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IComponents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComponents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumComponents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumComponents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT, ppcomponent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcomponent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, component: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Add(this, ::windows_core::from_raw_borrowed(&component)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&index)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT, ppcomponent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Item(this, ::core::mem::transmute(&index), ::windows_core::from_raw_borrowed(&ppcomponent)).into())
        }
        IComponents_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            EnumComponents: EnumComponents::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
            put_Item: put_Item::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IComponentsOld_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn EnumComponents(this: &Self::This) -> ::windows_core::Result<IEnumComponents>;
    fn get_Item(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IComponent>;
    fn Add(this: &Self::This, component: ::core::option::Option<&IComponent>) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn Remove(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IComponents>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IComponentsOld {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IComponentsOld {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumComponents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumComponents(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT, ppcomponent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcomponent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, component: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Add(this, ::windows_core::from_raw_borrowed(&component)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&index)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IComponentsOld_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IComponentsOld_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            EnumComponents: EnumComponents::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Registry\"`"]
#[cfg(feature = "Win32_System_Registry")]
pub trait ICreatePropBagOnRegKey_Impl: ::windows_core::BaseImpl {
    fn Create(this: &Self::This, hkey: super::super::super::System::Registry::HKEY, subkey: &::windows_core::PCWSTR, uloptions: u32, samdesired: u32, iid: *const ::windows_core::GUID, ppbag: *mut *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Registry")]
impl ::windows_core::Iids for ICreatePropBagOnRegKey {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Registry")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreatePropBagOnRegKey_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICreatePropBagOnRegKey {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Create<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICreatePropBagOnRegKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hkey: super::super::super::System::Registry::HKEY, subkey: ::windows_core::PCWSTR, uloptions: u32, samdesired: u32, iid: *const ::windows_core::GUID, ppbag: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Create(this, ::core::mem::transmute_copy(&hkey), ::core::mem::transmute(&subkey), ::core::mem::transmute_copy(&uloptions), ::core::mem::transmute_copy(&samdesired), ::core::mem::transmute_copy(&iid), ::core::mem::transmute_copy(&ppbag)).into())
        }
        ICreatePropBagOnRegKey_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Create: Create::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilter_Impl: ::windows_core::BaseImpl {
    fn EvalRatObjOK(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
    fn GetCurrRating(this: &Self::This, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::Result<()>;
    fn get_BlockedRatingAttributes(this: &Self::This, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel) -> ::windows_core::Result<i32>;
    fn put_BlockedRatingAttributes(this: &Self::This, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows_core::Result<()>;
    fn BlockUnRated(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetBlockUnRated(this: &Self::This, fblockunratedshows: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn BlockUnRatedDelay(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetBlockUnRatedDelay(this: &Self::This, msecsdelaybeforeblock: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDTFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDTFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EvalRatObjOK<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EvalRatObjOK(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phrcocreateretval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrRating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrRating(this, ::core::mem::transmute_copy(&pensystem), ::core::mem::transmute_copy(&penrating), ::core::mem::transmute_copy(&plbfenattr)).into())
        }
        unsafe extern "system" fn get_BlockedRatingAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_BlockedRatingAttributes(this, ::core::mem::transmute_copy(&ensystem), ::core::mem::transmute_copy(&enlevel)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plbfenattr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_BlockedRatingAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_BlockedRatingAttributes(this, ::core::mem::transmute_copy(&ensystem), ::core::mem::transmute_copy(&enlevel), ::core::mem::transmute_copy(&lbfattrs)).into())
        }
        unsafe extern "system" fn BlockUnRated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfblockunratedshows: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BlockUnRated(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfblockunratedshows, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBlockUnRated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fblockunratedshows: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBlockUnRated(this, ::core::mem::transmute_copy(&fblockunratedshows)).into())
        }
        unsafe extern "system" fn BlockUnRatedDelay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmsecsdelaybeforeblock: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BlockUnRatedDelay(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmsecsdelaybeforeblock, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBlockUnRatedDelay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, msecsdelaybeforeblock: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBlockUnRatedDelay(this, ::core::mem::transmute_copy(&msecsdelaybeforeblock)).into())
        }
        IDTFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EvalRatObjOK: EvalRatObjOK::<Identity, Impl, OFFSET>,
            GetCurrRating: GetCurrRating::<Identity, Impl, OFFSET>,
            get_BlockedRatingAttributes: get_BlockedRatingAttributes::<Identity, Impl, OFFSET>,
            put_BlockedRatingAttributes: put_BlockedRatingAttributes::<Identity, Impl, OFFSET>,
            BlockUnRated: BlockUnRated::<Identity, Impl, OFFSET>,
            SetBlockUnRated: SetBlockUnRated::<Identity, Impl, OFFSET>,
            BlockUnRatedDelay: BlockUnRatedDelay::<Identity, Impl, OFFSET>,
            SetBlockUnRatedDelay: SetBlockUnRatedDelay::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilter2_Impl: ::windows_core::BaseImpl + IDTFilter_Impl {
    fn ChallengeUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCurrLicenseExpDate(this: &Self::This, prottype: *const ProtType) -> ::windows_core::Result<i32>;
    fn GetLastErrorCode(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDTFilter2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDTFilter);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDTFilter2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ChallengeUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrchallengeurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ChallengeUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrchallengeurl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrLicenseExpDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrLicenseExpDate(this, ::core::mem::transmute_copy(&prottype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpdatetime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastErrorCode(this).into())
        }
        IDTFilter2_Vtbl {
            base__: <IDTFilter as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ChallengeUrl: ChallengeUrl::<Identity, Impl, OFFSET>,
            GetCurrLicenseExpDate: GetCurrLicenseExpDate::<Identity, Impl, OFFSET>,
            GetLastErrorCode: GetLastErrorCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDTFilter3_Impl: ::windows_core::BaseImpl + IDTFilter2_Impl {
    fn GetProtectionType(this: &Self::This) -> ::windows_core::Result<ProtType>;
    fn LicenseHasExpirationDate(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetRights(this: &Self::This, bstrrights: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDTFilter3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDTFilter2);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDTFilter3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProtectionType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprotectiontype: *mut ProtType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtectionType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprotectiontype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LicenseHasExpirationDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflicensehasexpirationdate: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LicenseHasExpirationDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pflicensehasexpirationdate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRights<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilter3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrrights: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRights(this, ::core::mem::transmute(&bstrrights)).into())
        }
        IDTFilter3_Vtbl {
            base__: <IDTFilter2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProtectionType: GetProtectionType::<Identity, Impl, OFFSET>,
            LicenseHasExpirationDate: LicenseHasExpirationDate::<Identity, Impl, OFFSET>,
            SetRights: SetRights::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDTFilterConfig_Impl: ::windows_core::BaseImpl {
    fn GetSecureChannelObject(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
impl ::windows_core::Iids for IDTFilterConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilterConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDTFilterConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSecureChannelObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilterConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSecureChannelObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkdrmsecurechannel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDTFilterConfig_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSecureChannelObject: GetSecureChannelObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDTFilterEvents_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDTFilterEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilterEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDTFilterEvents {
    const VTABLE: Self::Vtable = { IDTFilterEvents_Vtbl { base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDTFilterLicenseRenewal_Impl: ::windows_core::BaseImpl {
    fn GetLicenseRenewalData(this: &Self::This, ppwszfilename: *mut ::windows_core::PWSTR, ppwszexpiredkid: *mut ::windows_core::PWSTR, ppwsztunerid: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDTFilterLicenseRenewal {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilterLicenseRenewal_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDTFilterLicenseRenewal {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLicenseRenewalData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDTFilterLicenseRenewal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppwszfilename: *mut ::windows_core::PWSTR, ppwszexpiredkid: *mut ::windows_core::PWSTR, ppwsztunerid: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLicenseRenewalData(this, ::core::mem::transmute_copy(&ppwszfilename), ::core::mem::transmute_copy(&ppwszexpiredkid), ::core::mem::transmute_copy(&ppwsztunerid)).into())
        }
        IDTFilterLicenseRenewal_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLicenseRenewalData: GetLicenseRenewalData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBCLocator_Impl: ::windows_core::BaseImpl + IDigitalLocator_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBCLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDigitalLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBCLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBCLocator {
    const VTABLE: Self::Vtable = { IDVBCLocator_Vtbl { base__: <IDigitalLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBSLocator_Impl: ::windows_core::BaseImpl + IDigitalLocator_Impl {
    fn SignalPolarisation(this: &Self::This) -> ::windows_core::Result<super::Polarisation>;
    fn SetSignalPolarisation(this: &Self::This, polarisationval: super::Polarisation) -> ::windows_core::Result<()>;
    fn WestPosition(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetWestPosition(this: &Self::This, westlongitude: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn OrbitalPosition(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetOrbitalPosition(this: &Self::This, longitude: i32) -> ::windows_core::Result<()>;
    fn Azimuth(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetAzimuth(this: &Self::This, azimuth: i32) -> ::windows_core::Result<()>;
    fn Elevation(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetElevation(this: &Self::This, elevation: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBSLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDigitalLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBSLocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SignalPolarisation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, polarisationval: *mut super::Polarisation) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignalPolarisation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(polarisationval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignalPolarisation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, polarisationval: super::Polarisation) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignalPolarisation(this, ::core::mem::transmute_copy(&polarisationval)).into())
        }
        unsafe extern "system" fn WestPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, westlongitude: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::WestPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(westlongitude, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWestPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, westlongitude: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWestPosition(this, ::core::mem::transmute_copy(&westlongitude)).into())
        }
        unsafe extern "system" fn OrbitalPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, longitude: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OrbitalPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(longitude, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOrbitalPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, longitude: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOrbitalPosition(this, ::core::mem::transmute_copy(&longitude)).into())
        }
        unsafe extern "system" fn Azimuth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, azimuth: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Azimuth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(azimuth, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAzimuth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, azimuth: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAzimuth(this, ::core::mem::transmute_copy(&azimuth)).into())
        }
        unsafe extern "system" fn Elevation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, elevation: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Elevation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(elevation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetElevation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, elevation: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetElevation(this, ::core::mem::transmute_copy(&elevation)).into())
        }
        IDVBSLocator_Vtbl {
            base__: <IDigitalLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SignalPolarisation: SignalPolarisation::<Identity, Impl, OFFSET>,
            SetSignalPolarisation: SetSignalPolarisation::<Identity, Impl, OFFSET>,
            WestPosition: WestPosition::<Identity, Impl, OFFSET>,
            SetWestPosition: SetWestPosition::<Identity, Impl, OFFSET>,
            OrbitalPosition: OrbitalPosition::<Identity, Impl, OFFSET>,
            SetOrbitalPosition: SetOrbitalPosition::<Identity, Impl, OFFSET>,
            Azimuth: Azimuth::<Identity, Impl, OFFSET>,
            SetAzimuth: SetAzimuth::<Identity, Impl, OFFSET>,
            Elevation: Elevation::<Identity, Impl, OFFSET>,
            SetElevation: SetElevation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBSLocator2_Impl: ::windows_core::BaseImpl + IDVBSLocator_Impl {
    fn DiseqLNBSource(this: &Self::This) -> ::windows_core::Result<super::LNB_Source>;
    fn SetDiseqLNBSource(this: &Self::This, diseqlnbsourceval: super::LNB_Source) -> ::windows_core::Result<()>;
    fn LocalOscillatorOverrideLow(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLocalOscillatorOverrideLow(this: &Self::This, localoscillatoroverridelowval: i32) -> ::windows_core::Result<()>;
    fn LocalOscillatorOverrideHigh(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLocalOscillatorOverrideHigh(this: &Self::This, localoscillatoroverridehighval: i32) -> ::windows_core::Result<()>;
    fn LocalLNBSwitchOverride(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLocalLNBSwitchOverride(this: &Self::This, locallnbswitchoverrideval: i32) -> ::windows_core::Result<()>;
    fn LocalSpectralInversionOverride(this: &Self::This) -> ::windows_core::Result<super::SpectralInversion>;
    fn SetLocalSpectralInversionOverride(this: &Self::This, localspectralinversionoverrideval: super::SpectralInversion) -> ::windows_core::Result<()>;
    fn SignalRollOff(this: &Self::This) -> ::windows_core::Result<super::RollOff>;
    fn SetSignalRollOff(this: &Self::This, rolloffval: super::RollOff) -> ::windows_core::Result<()>;
    fn SignalPilot(this: &Self::This) -> ::windows_core::Result<super::Pilot>;
    fn SetSignalPilot(this: &Self::This, pilotval: super::Pilot) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBSLocator2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVBSLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBSLocator2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DiseqLNBSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, diseqlnbsourceval: *mut super::LNB_Source) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DiseqLNBSource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(diseqlnbsourceval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDiseqLNBSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, diseqlnbsourceval: super::LNB_Source) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDiseqLNBSource(this, ::core::mem::transmute_copy(&diseqlnbsourceval)).into())
        }
        unsafe extern "system" fn LocalOscillatorOverrideLow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localoscillatoroverridelowval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocalOscillatorOverrideLow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(localoscillatoroverridelowval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLocalOscillatorOverrideLow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localoscillatoroverridelowval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocalOscillatorOverrideLow(this, ::core::mem::transmute_copy(&localoscillatoroverridelowval)).into())
        }
        unsafe extern "system" fn LocalOscillatorOverrideHigh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localoscillatoroverridehighval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocalOscillatorOverrideHigh(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(localoscillatoroverridehighval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLocalOscillatorOverrideHigh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localoscillatoroverridehighval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocalOscillatorOverrideHigh(this, ::core::mem::transmute_copy(&localoscillatoroverridehighval)).into())
        }
        unsafe extern "system" fn LocalLNBSwitchOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locallnbswitchoverrideval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocalLNBSwitchOverride(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locallnbswitchoverrideval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLocalLNBSwitchOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locallnbswitchoverrideval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocalLNBSwitchOverride(this, ::core::mem::transmute_copy(&locallnbswitchoverrideval)).into())
        }
        unsafe extern "system" fn LocalSpectralInversionOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localspectralinversionoverrideval: *mut super::SpectralInversion) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocalSpectralInversionOverride(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(localspectralinversionoverrideval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLocalSpectralInversionOverride<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, localspectralinversionoverrideval: super::SpectralInversion) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocalSpectralInversionOverride(this, ::core::mem::transmute_copy(&localspectralinversionoverrideval)).into())
        }
        unsafe extern "system" fn SignalRollOff<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rolloffval: *mut super::RollOff) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignalRollOff(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rolloffval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignalRollOff<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rolloffval: super::RollOff) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignalRollOff(this, ::core::mem::transmute_copy(&rolloffval)).into())
        }
        unsafe extern "system" fn SignalPilot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pilotval: *mut super::Pilot) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignalPilot(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pilotval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignalPilot<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pilotval: super::Pilot) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignalPilot(this, ::core::mem::transmute_copy(&pilotval)).into())
        }
        IDVBSLocator2_Vtbl {
            base__: <IDVBSLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DiseqLNBSource: DiseqLNBSource::<Identity, Impl, OFFSET>,
            SetDiseqLNBSource: SetDiseqLNBSource::<Identity, Impl, OFFSET>,
            LocalOscillatorOverrideLow: LocalOscillatorOverrideLow::<Identity, Impl, OFFSET>,
            SetLocalOscillatorOverrideLow: SetLocalOscillatorOverrideLow::<Identity, Impl, OFFSET>,
            LocalOscillatorOverrideHigh: LocalOscillatorOverrideHigh::<Identity, Impl, OFFSET>,
            SetLocalOscillatorOverrideHigh: SetLocalOscillatorOverrideHigh::<Identity, Impl, OFFSET>,
            LocalLNBSwitchOverride: LocalLNBSwitchOverride::<Identity, Impl, OFFSET>,
            SetLocalLNBSwitchOverride: SetLocalLNBSwitchOverride::<Identity, Impl, OFFSET>,
            LocalSpectralInversionOverride: LocalSpectralInversionOverride::<Identity, Impl, OFFSET>,
            SetLocalSpectralInversionOverride: SetLocalSpectralInversionOverride::<Identity, Impl, OFFSET>,
            SignalRollOff: SignalRollOff::<Identity, Impl, OFFSET>,
            SetSignalRollOff: SetSignalRollOff::<Identity, Impl, OFFSET>,
            SignalPilot: SignalPilot::<Identity, Impl, OFFSET>,
            SetSignalPilot: SetSignalPilot::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBSTuningSpace_Impl: ::windows_core::BaseImpl + IDVBTuningSpace2_Impl {
    fn LowOscillator(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLowOscillator(this: &Self::This, lowoscillator: i32) -> ::windows_core::Result<()>;
    fn HighOscillator(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetHighOscillator(this: &Self::This, highoscillator: i32) -> ::windows_core::Result<()>;
    fn LNBSwitch(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLNBSwitch(this: &Self::This, lnbswitch: i32) -> ::windows_core::Result<()>;
    fn InputRange(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetInputRange(this: &Self::This, inputrange: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SpectralInversion(this: &Self::This) -> ::windows_core::Result<super::SpectralInversion>;
    fn SetSpectralInversion(this: &Self::This, spectralinversionval: super::SpectralInversion) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBSTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVBTuningSpace2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBSTuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LowOscillator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lowoscillator: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LowOscillator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lowoscillator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLowOscillator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lowoscillator: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLowOscillator(this, ::core::mem::transmute_copy(&lowoscillator)).into())
        }
        unsafe extern "system" fn HighOscillator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, highoscillator: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HighOscillator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(highoscillator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHighOscillator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, highoscillator: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHighOscillator(this, ::core::mem::transmute_copy(&highoscillator)).into())
        }
        unsafe extern "system" fn LNBSwitch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lnbswitch: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LNBSwitch(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lnbswitch, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLNBSwitch<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lnbswitch: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLNBSwitch(this, ::core::mem::transmute_copy(&lnbswitch)).into())
        }
        unsafe extern "system" fn InputRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputrange: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InputRange(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(inputrange, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputrange: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputRange(this, ::core::mem::transmute(&inputrange)).into())
        }
        unsafe extern "system" fn SpectralInversion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, spectralinversionval: *mut super::SpectralInversion) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SpectralInversion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(spectralinversionval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSpectralInversion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBSTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, spectralinversionval: super::SpectralInversion) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSpectralInversion(this, ::core::mem::transmute_copy(&spectralinversionval)).into())
        }
        IDVBSTuningSpace_Vtbl {
            base__: <IDVBTuningSpace2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LowOscillator: LowOscillator::<Identity, Impl, OFFSET>,
            SetLowOscillator: SetLowOscillator::<Identity, Impl, OFFSET>,
            HighOscillator: HighOscillator::<Identity, Impl, OFFSET>,
            SetHighOscillator: SetHighOscillator::<Identity, Impl, OFFSET>,
            LNBSwitch: LNBSwitch::<Identity, Impl, OFFSET>,
            SetLNBSwitch: SetLNBSwitch::<Identity, Impl, OFFSET>,
            InputRange: InputRange::<Identity, Impl, OFFSET>,
            SetInputRange: SetInputRange::<Identity, Impl, OFFSET>,
            SpectralInversion: SpectralInversion::<Identity, Impl, OFFSET>,
            SetSpectralInversion: SetSpectralInversion::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBTLocator_Impl: ::windows_core::BaseImpl + IDigitalLocator_Impl {
    fn Bandwidth(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetBandwidth(this: &Self::This, bandwidthval: i32) -> ::windows_core::Result<()>;
    fn LPInnerFEC(this: &Self::This) -> ::windows_core::Result<super::FECMethod>;
    fn SetLPInnerFEC(this: &Self::This, fec: super::FECMethod) -> ::windows_core::Result<()>;
    fn LPInnerFECRate(this: &Self::This) -> ::windows_core::Result<super::BinaryConvolutionCodeRate>;
    fn SetLPInnerFECRate(this: &Self::This, fec: super::BinaryConvolutionCodeRate) -> ::windows_core::Result<()>;
    fn HAlpha(this: &Self::This) -> ::windows_core::Result<super::HierarchyAlpha>;
    fn SetHAlpha(this: &Self::This, alpha: super::HierarchyAlpha) -> ::windows_core::Result<()>;
    fn Guard(this: &Self::This) -> ::windows_core::Result<super::GuardInterval>;
    fn SetGuard(this: &Self::This, gi: super::GuardInterval) -> ::windows_core::Result<()>;
    fn Mode(this: &Self::This) -> ::windows_core::Result<super::TransmissionMode>;
    fn SetMode(this: &Self::This, mode: super::TransmissionMode) -> ::windows_core::Result<()>;
    fn OtherFrequencyInUse(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetOtherFrequencyInUse(this: &Self::This, otherfrequencyinuseval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBTLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDigitalLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBTLocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Bandwidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bandwidthval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Bandwidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bandwidthval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBandwidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bandwidthval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBandwidth(this, ::core::mem::transmute_copy(&bandwidthval)).into())
        }
        unsafe extern "system" fn LPInnerFEC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: *mut super::FECMethod) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LPInnerFEC(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLPInnerFEC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: super::FECMethod) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLPInnerFEC(this, ::core::mem::transmute_copy(&fec)).into())
        }
        unsafe extern "system" fn LPInnerFECRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: *mut super::BinaryConvolutionCodeRate) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LPInnerFECRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLPInnerFECRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: super::BinaryConvolutionCodeRate) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLPInnerFECRate(this, ::core::mem::transmute_copy(&fec)).into())
        }
        unsafe extern "system" fn HAlpha<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, alpha: *mut super::HierarchyAlpha) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HAlpha(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(alpha, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHAlpha<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, alpha: super::HierarchyAlpha) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHAlpha(this, ::core::mem::transmute_copy(&alpha)).into())
        }
        unsafe extern "system" fn Guard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, gi: *mut super::GuardInterval) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Guard(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(gi, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetGuard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, gi: super::GuardInterval) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGuard(this, ::core::mem::transmute_copy(&gi)).into())
        }
        unsafe extern "system" fn Mode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mode: *mut super::TransmissionMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Mode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mode: super::TransmissionMode) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMode(this, ::core::mem::transmute_copy(&mode)).into())
        }
        unsafe extern "system" fn OtherFrequencyInUse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, otherfrequencyinuseval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OtherFrequencyInUse(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(otherfrequencyinuseval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOtherFrequencyInUse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, otherfrequencyinuseval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOtherFrequencyInUse(this, ::core::mem::transmute_copy(&otherfrequencyinuseval)).into())
        }
        IDVBTLocator_Vtbl {
            base__: <IDigitalLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Bandwidth: Bandwidth::<Identity, Impl, OFFSET>,
            SetBandwidth: SetBandwidth::<Identity, Impl, OFFSET>,
            LPInnerFEC: LPInnerFEC::<Identity, Impl, OFFSET>,
            SetLPInnerFEC: SetLPInnerFEC::<Identity, Impl, OFFSET>,
            LPInnerFECRate: LPInnerFECRate::<Identity, Impl, OFFSET>,
            SetLPInnerFECRate: SetLPInnerFECRate::<Identity, Impl, OFFSET>,
            HAlpha: HAlpha::<Identity, Impl, OFFSET>,
            SetHAlpha: SetHAlpha::<Identity, Impl, OFFSET>,
            Guard: Guard::<Identity, Impl, OFFSET>,
            SetGuard: SetGuard::<Identity, Impl, OFFSET>,
            Mode: Mode::<Identity, Impl, OFFSET>,
            SetMode: SetMode::<Identity, Impl, OFFSET>,
            OtherFrequencyInUse: OtherFrequencyInUse::<Identity, Impl, OFFSET>,
            SetOtherFrequencyInUse: SetOtherFrequencyInUse::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBTLocator2_Impl: ::windows_core::BaseImpl + IDVBTLocator_Impl {
    fn PhysicalLayerPipeId(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetPhysicalLayerPipeId(this: &Self::This, physicallayerpipeidval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBTLocator2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVBTLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBTLocator2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PhysicalLayerPipeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, physicallayerpipeidval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PhysicalLayerPipeId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(physicallayerpipeidval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPhysicalLayerPipeId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTLocator2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, physicallayerpipeidval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPhysicalLayerPipeId(this, ::core::mem::transmute_copy(&physicallayerpipeidval)).into())
        }
        IDVBTLocator2_Vtbl {
            base__: <IDVBTLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PhysicalLayerPipeId: PhysicalLayerPipeId::<Identity, Impl, OFFSET>,
            SetPhysicalLayerPipeId: SetPhysicalLayerPipeId::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBTuneRequest_Impl: ::windows_core::BaseImpl + ITuneRequest_Impl {
    fn ONID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetONID(this: &Self::This, onid: i32) -> ::windows_core::Result<()>;
    fn TSID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetTSID(this: &Self::This, tsid: i32) -> ::windows_core::Result<()>;
    fn SID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetSID(this: &Self::This, sid: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBTuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuneRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBTuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ONID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, onid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ONID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(onid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetONID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, onid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetONID(this, ::core::mem::transmute_copy(&onid)).into())
        }
        unsafe extern "system" fn TSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TSID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTSID(this, ::core::mem::transmute_copy(&tsid)).into())
        }
        unsafe extern "system" fn SID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSID(this, ::core::mem::transmute_copy(&sid)).into())
        }
        IDVBTuneRequest_Vtbl {
            base__: <ITuneRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ONID: ONID::<Identity, Impl, OFFSET>,
            SetONID: SetONID::<Identity, Impl, OFFSET>,
            TSID: TSID::<Identity, Impl, OFFSET>,
            SetTSID: SetTSID::<Identity, Impl, OFFSET>,
            SID: SID::<Identity, Impl, OFFSET>,
            SetSID: SetSID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBTuningSpace_Impl: ::windows_core::BaseImpl + ITuningSpace_Impl {
    fn SystemType(this: &Self::This) -> ::windows_core::Result<super::DVBSystemType>;
    fn SetSystemType(this: &Self::This, systype: super::DVBSystemType) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBTuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SystemType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, systype: *mut super::DVBSystemType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SystemType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(systype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSystemType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, systype: super::DVBSystemType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSystemType(this, ::core::mem::transmute_copy(&systype)).into())
        }
        IDVBTuningSpace_Vtbl {
            base__: <ITuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SystemType: SystemType::<Identity, Impl, OFFSET>,
            SetSystemType: SetSystemType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDVBTuningSpace2_Impl: ::windows_core::BaseImpl + IDVBTuningSpace_Impl {
    fn NetworkID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetNetworkID(this: &Self::This, networkid: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDVBTuningSpace2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVBTuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuningSpace2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVBTuningSpace2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn NetworkID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuningSpace2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, networkid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NetworkID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(networkid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNetworkID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVBTuningSpace2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, networkid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNetworkID(this, ::core::mem::transmute_copy(&networkid)).into())
        }
        IDVBTuningSpace2_Vtbl {
            base__: <IDVBTuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            NetworkID: NetworkID::<Identity, Impl, OFFSET>,
            SetNetworkID: SetNetworkID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_BAT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetBouquetId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32, ppdescriptor: *const ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordTransportStreamId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordOriginalNetworkId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<IDVB_BAT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_BAT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_BAT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBouquetId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBouquetId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *const *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTransportStreamId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordOriginalNetworkId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_BAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        IDVB_BAT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetBouquetId: GetBouquetId::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordTransportStreamId: GetRecordTransportStreamId::<Identity, Impl, OFFSET>,
            GetRecordOriginalNetworkId: GetRecordOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_DIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>) -> ::windows_core::Result<()>;
    fn GetTransitionFlag(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_DIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_DIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_DIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_DIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist)).into())
        }
        unsafe extern "system" fn GetTransitionFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_DIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransitionFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_DIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetTransitionFlag: GetTransitionFlag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_EIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetServiceId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetTransportStreamId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetSegmentLastSectionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLastTableId(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordEventId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordStartTime(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
    fn GetRecordDuration(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<MPEG_TIME>;
    fn GetRecordRunningStatus(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordFreeCAMode(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<IDVB_EIT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_EIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_EIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransportStreamId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSegmentLastSectionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSegmentLastSectionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastTableId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastTableId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEventId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEventId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordStartTime(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDuration(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRunningStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRunningStatus(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordFreeCAMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordFreeCAMode(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppeit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_EIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetServiceId: GetServiceId::<Identity, Impl, OFFSET>,
            GetTransportStreamId: GetTransportStreamId::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetSegmentLastSectionNumber: GetSegmentLastSectionNumber::<Identity, Impl, OFFSET>,
            GetLastTableId: GetLastTableId::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordEventId: GetRecordEventId::<Identity, Impl, OFFSET>,
            GetRecordStartTime: GetRecordStartTime::<Identity, Impl, OFFSET>,
            GetRecordDuration: GetRecordDuration::<Identity, Impl, OFFSET>,
            GetRecordRunningStatus: GetRecordRunningStatus::<Identity, Impl, OFFSET>,
            GetRecordFreeCAMode: GetRecordFreeCAMode::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_EIT2_Impl: ::windows_core::BaseImpl + IDVB_EIT_Impl {
    fn GetSegmentInfo(this: &Self::This, pbtid: *mut u8, pbsegment: *mut u8) -> ::windows_core::Result<()>;
    fn GetRecordSection(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_EIT2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVB_EIT);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_EIT2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSegmentInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbtid: *mut u8, pbsegment: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSegmentInfo(this, ::core::mem::transmute_copy(&pbtid), ::core::mem::transmute_copy(&pbsegment)).into())
        }
        unsafe extern "system" fn GetRecordSection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_EIT2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordSection(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_EIT2_Vtbl {
            base__: <IDVB_EIT as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSegmentInfo: GetSegmentInfo::<Identity, Impl, OFFSET>,
            GetRecordSection: GetRecordSection::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_NIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordTransportStreamId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordOriginalNetworkId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<IDVB_NIT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_NIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_NIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTransportStreamId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordOriginalNetworkId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppnit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_NIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_NIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetNetworkId: GetNetworkId::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordTransportStreamId: GetRecordTransportStreamId::<Identity, Impl, OFFSET>,
            GetRecordOriginalNetworkId: GetRecordOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDVB_RST_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordTransportStreamId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordOriginalNetworkId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordServiceId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordEventId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordRunningStatus(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDVB_RST {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_RST {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTransportStreamId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordOriginalNetworkId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEventId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEventId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRunningStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_RST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRunningStatus(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_RST_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordTransportStreamId: GetRecordTransportStreamId::<Identity, Impl, OFFSET>,
            GetRecordOriginalNetworkId: GetRecordOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetRecordServiceId: GetRecordServiceId::<Identity, Impl, OFFSET>,
            GetRecordEventId: GetRecordEventId::<Identity, Impl, OFFSET>,
            GetRecordRunningStatus: GetRecordRunningStatus::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_SDT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTransportStreamId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordServiceId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordEITScheduleFlag(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordEITPresentFollowingFlag(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordRunningStatus(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordFreeCAMode(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<IDVB_SDT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_SDT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_SDT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransportStreamId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEITScheduleFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEITScheduleFlag(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEITPresentFollowingFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEITPresentFollowingFlag(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRunningStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRunningStatus(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordFreeCAMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordFreeCAMode(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_SDT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetTransportStreamId: GetTransportStreamId::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordServiceId: GetRecordServiceId::<Identity, Impl, OFFSET>,
            GetRecordEITScheduleFlag: GetRecordEITScheduleFlag::<Identity, Impl, OFFSET>,
            GetRecordEITPresentFollowingFlag: GetRecordEITPresentFollowingFlag::<Identity, Impl, OFFSET>,
            GetRecordRunningStatus: GetRecordRunningStatus::<Identity, Impl, OFFSET>,
            GetRecordFreeCAMode: GetRecordFreeCAMode::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDVB_SIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordServiceId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordRunningStatus(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<IDVB_SIT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDVB_SIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_SIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRunningStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordRunningStatus(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_SIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        IDVB_SIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordServiceId: GetRecordServiceId::<Identity, Impl, OFFSET>,
            GetRecordRunningStatus: GetRecordRunningStatus::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDVB_ST_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>) -> ::windows_core::Result<()>;
    fn GetDataLength(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetData(this: &Self::This) -> ::windows_core::Result<*mut u8>;
}
impl ::windows_core::Iids for IDVB_ST {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_ST_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_ST {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_ST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist)).into())
        }
        unsafe extern "system" fn GetDataLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_ST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_ST_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdata: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_ST_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetDataLength: GetDataLength::<Identity, Impl, OFFSET>,
            GetData: GetData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDVB_TDT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>) -> ::windows_core::Result<()>;
    fn GetUTCTime(this: &Self::This) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
}
impl ::windows_core::Iids for IDVB_TDT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TDT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_TDT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist)).into())
        }
        unsafe extern "system" fn GetUTCTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUTCTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDVB_TDT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetUTCTime: GetUTCTime::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDVB_TOT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>) -> ::windows_core::Result<()>;
    fn GetUTCTime(this: &Self::This) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDVB_TOT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TOT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDVB_TOT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TOT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist)).into())
        }
        unsafe extern "system" fn GetUTCTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TOT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUTCTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TOT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TOT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDVB_TOT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        IDVB_TOT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetUTCTime: GetUTCTime::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDigitalCableLocator_Impl: ::windows_core::BaseImpl + IATSCLocator2_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDigitalCableLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IATSCLocator2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDigitalCableLocator {
    const VTABLE: Self::Vtable = { IDigitalCableLocator_Vtbl { base__: <IATSCLocator2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDigitalCableTuneRequest_Impl: ::windows_core::BaseImpl + IATSCChannelTuneRequest_Impl {
    fn MajorChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMajorChannel(this: &Self::This, majorchannel: i32) -> ::windows_core::Result<()>;
    fn SourceID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetSourceID(this: &Self::This, sourceid: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDigitalCableTuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IATSCChannelTuneRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDigitalCableTuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MajorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmajorchannel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MajorChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmajorchannel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMajorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, majorchannel: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMajorChannel(this, ::core::mem::transmute_copy(&majorchannel)).into())
        }
        unsafe extern "system" fn SourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psourceid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SourceID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psourceid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sourceid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourceID(this, ::core::mem::transmute_copy(&sourceid)).into())
        }
        IDigitalCableTuneRequest_Vtbl {
            base__: <IATSCChannelTuneRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MajorChannel: MajorChannel::<Identity, Impl, OFFSET>,
            SetMajorChannel: SetMajorChannel::<Identity, Impl, OFFSET>,
            SourceID: SourceID::<Identity, Impl, OFFSET>,
            SetSourceID: SetSourceID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDigitalCableTuningSpace_Impl: ::windows_core::BaseImpl + IATSCTuningSpace_Impl {
    fn MinMajorChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinMajorChannel(this: &Self::This, newminmajorchannelval: i32) -> ::windows_core::Result<()>;
    fn MaxMajorChannel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxMajorChannel(this: &Self::This, newmaxmajorchannelval: i32) -> ::windows_core::Result<()>;
    fn MinSourceID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMinSourceID(this: &Self::This, newminsourceidval: i32) -> ::windows_core::Result<()>;
    fn MaxSourceID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxSourceID(this: &Self::This, newmaxsourceidval: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDigitalCableTuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IATSCTuningSpace);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDigitalCableTuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MinMajorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minmajorchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinMajorChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minmajorchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinMajorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newminmajorchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinMajorChannel(this, ::core::mem::transmute_copy(&newminmajorchannelval)).into())
        }
        unsafe extern "system" fn MaxMajorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxmajorchannelval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxMajorChannel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxmajorchannelval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxMajorChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newmaxmajorchannelval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxMajorChannel(this, ::core::mem::transmute_copy(&newmaxmajorchannelval)).into())
        }
        unsafe extern "system" fn MinSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, minsourceidval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinSourceID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(minsourceidval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMinSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newminsourceidval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMinSourceID(this, ::core::mem::transmute_copy(&newminsourceidval)).into())
        }
        unsafe extern "system" fn MaxSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxsourceidval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxSourceID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxsourceidval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalCableTuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newmaxsourceidval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxSourceID(this, ::core::mem::transmute_copy(&newmaxsourceidval)).into())
        }
        IDigitalCableTuningSpace_Vtbl {
            base__: <IATSCTuningSpace as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MinMajorChannel: MinMajorChannel::<Identity, Impl, OFFSET>,
            SetMinMajorChannel: SetMinMajorChannel::<Identity, Impl, OFFSET>,
            MaxMajorChannel: MaxMajorChannel::<Identity, Impl, OFFSET>,
            SetMaxMajorChannel: SetMaxMajorChannel::<Identity, Impl, OFFSET>,
            MinSourceID: MinSourceID::<Identity, Impl, OFFSET>,
            SetMinSourceID: SetMinSourceID::<Identity, Impl, OFFSET>,
            MaxSourceID: MaxSourceID::<Identity, Impl, OFFSET>,
            SetMaxSourceID: SetMaxSourceID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IDigitalLocator_Impl: ::windows_core::BaseImpl + ILocator_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IDigitalLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ILocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDigitalLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDigitalLocator {
    const VTABLE: Self::Vtable = { IDigitalLocator_Vtbl { base__: <ILocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbCableDeliverySystemDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetFrequency(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFECOuter(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetModulation(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSymbolRate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFECInner(this: &Self::This) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDvbCableDeliverySystemDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbCableDeliverySystemDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFECOuter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFECOuter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModulation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModulation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFECInner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbCableDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFECInner(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbCableDeliverySystemDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetFrequency: GetFrequency::<Identity, Impl, OFFSET>,
            GetFECOuter: GetFECOuter::<Identity, Impl, OFFSET>,
            GetModulation: GetModulation::<Identity, Impl, OFFSET>,
            GetSymbolRate: GetSymbolRate::<Identity, Impl, OFFSET>,
            GetFECInner: GetFECInner::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbComponentDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetStreamContent(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetComponentType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetComponentTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLanguageCode(this: &Self::This, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetTextW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDvbComponentDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbComponentDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamContent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode(this, ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbComponentDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetStreamContent: GetStreamContent::<Identity, Impl, OFFSET>,
            GetComponentType: GetComponentType::<Identity, Impl, OFFSET>,
            GetComponentTag: GetComponentTag::<Identity, Impl, OFFSET>,
            GetLanguageCode: GetLanguageCode::<Identity, Impl, OFFSET>,
            GetTextW: GetTextW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbContentDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordContentNibbles(this: &Self::This, brecordindex: u8, pbvallevel1: *mut u8, pbvallevel2: *mut u8) -> ::windows_core::Result<()>;
    fn GetRecordUserNibbles(this: &Self::This, brecordindex: u8, pbval1: *mut u8, pbval2: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbContentDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbContentDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordContentNibbles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbvallevel1: *mut u8, pbvallevel2: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordContentNibbles(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pbvallevel1), ::core::mem::transmute_copy(&pbvallevel2)).into())
        }
        unsafe extern "system" fn GetRecordUserNibbles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval1: *mut u8, pbval2: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordUserNibbles(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pbval1), ::core::mem::transmute_copy(&pbval2)).into())
        }
        IDvbContentDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordContentNibbles: GetRecordContentNibbles::<Identity, Impl, OFFSET>,
            GetRecordUserNibbles: GetRecordUserNibbles::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbContentIdentifierDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordCrid(this: &Self::This, brecordindex: u8, pbtype: *mut u8, pblocation: *mut u8, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbContentIdentifierDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentIdentifierDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbContentIdentifierDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentIdentifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentIdentifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentIdentifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCrid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbContentIdentifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbtype: *mut u8, pblocation: *mut u8, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordCrid(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pbtype), ::core::mem::transmute_copy(&pblocation), ::core::mem::transmute_copy(&pblength), ::core::mem::transmute_copy(&ppbbytes)).into())
        }
        IDvbContentIdentifierDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordCrid: GetRecordCrid::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbDataBroadcastDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDataBroadcastID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetComponentTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSelectorLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSelectorBytes(this: &Self::This, pblen: *mut u8, pbval: *mut u8) -> ::windows_core::Result<()>;
    fn GetLangID(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTextLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetText(this: &Self::This, pblen: *mut u8, pbval: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbDataBroadcastDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbDataBroadcastDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataBroadcastID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataBroadcastID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectorLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectorLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectorBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSelectorBytes(this, ::core::mem::transmute_copy(&pblen), ::core::mem::transmute_copy(&pbval)).into())
        }
        unsafe extern "system" fn GetLangID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLangID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pulval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetText(this, ::core::mem::transmute_copy(&pblen), ::core::mem::transmute_copy(&pbval)).into())
        }
        IDvbDataBroadcastDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetDataBroadcastID: GetDataBroadcastID::<Identity, Impl, OFFSET>,
            GetComponentTag: GetComponentTag::<Identity, Impl, OFFSET>,
            GetSelectorLength: GetSelectorLength::<Identity, Impl, OFFSET>,
            GetSelectorBytes: GetSelectorBytes::<Identity, Impl, OFFSET>,
            GetLangID: GetLangID::<Identity, Impl, OFFSET>,
            GetTextLength: GetTextLength::<Identity, Impl, OFFSET>,
            GetText: GetText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbDataBroadcastIDDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDataBroadcastID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetIDSelectorBytes(this: &Self::This, pblen: *mut u8, pbval: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbDataBroadcastIDDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastIDDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbDataBroadcastIDDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastIDDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastIDDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataBroadcastID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastIDDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataBroadcastID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIDSelectorBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDataBroadcastIDDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIDSelectorBytes(this, ::core::mem::transmute_copy(&pblen), ::core::mem::transmute_copy(&pbval)).into())
        }
        IDvbDataBroadcastIDDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetDataBroadcastID: GetDataBroadcastID::<Identity, Impl, OFFSET>,
            GetIDSelectorBytes: GetIDSelectorBytes::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbDefaultAuthorityDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDefaultAuthority(this: &Self::This, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbDefaultAuthorityDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDefaultAuthorityDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbDefaultAuthorityDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDefaultAuthorityDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDefaultAuthorityDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDefaultAuthority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbDefaultAuthorityDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblength: *mut u8, ppbbytes: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDefaultAuthority(this, ::core::mem::transmute_copy(&pblength), ::core::mem::transmute_copy(&ppbbytes)).into())
        }
        IDvbDefaultAuthorityDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetDefaultAuthority: GetDefaultAuthority::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbExtendedEventDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDescriptorNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLastDescriptorNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLanguageCode(this: &Self::This, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordItemW(this: &Self::This, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::windows_core::BSTR, pbstritem: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetConcatenatedItemW(this: &Self::This, pfollowingdescriptor: ::core::option::Option<&IDvbExtendedEventDescriptor>, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::windows_core::BSTR, pbstritem: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetTextW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetConcatenatedTextW(this: &Self::This, followingdescriptor: ::core::option::Option<&IDvbExtendedEventDescriptor>, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetRecordItemRawBytes(this: &Self::This, brecordindex: u8, ppbrawitem: *mut *mut u8, pbitemlength: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbExtendedEventDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbExtendedEventDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescriptorNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDescriptorNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastDescriptorNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastDescriptorNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode(this, ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordItemW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, pbstritem: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordItemW(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&convmode), ::core::mem::transmute_copy(&pbstrdesc), ::core::mem::transmute_copy(&pbstritem)).into())
        }
        unsafe extern "system" fn GetConcatenatedItemW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfollowingdescriptor: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrdesc: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, pbstritem: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConcatenatedItemW(this, ::windows_core::from_raw_borrowed(&pfollowingdescriptor), ::core::mem::transmute_copy(&convmode), ::core::mem::transmute_copy(&pbstrdesc), ::core::mem::transmute_copy(&pbstritem)).into())
        }
        unsafe extern "system" fn GetTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConcatenatedTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, followingdescriptor: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConcatenatedTextW(this, ::windows_core::from_raw_borrowed(&followingdescriptor), ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordItemRawBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbExtendedEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, ppbrawitem: *mut *mut u8, pbitemlength: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordItemRawBytes(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&ppbrawitem), ::core::mem::transmute_copy(&pbitemlength)).into())
        }
        IDvbExtendedEventDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetDescriptorNumber: GetDescriptorNumber::<Identity, Impl, OFFSET>,
            GetLastDescriptorNumber: GetLastDescriptorNumber::<Identity, Impl, OFFSET>,
            GetLanguageCode: GetLanguageCode::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordItemW: GetRecordItemW::<Identity, Impl, OFFSET>,
            GetConcatenatedItemW: GetConcatenatedItemW::<Identity, Impl, OFFSET>,
            GetTextW: GetTextW::<Identity, Impl, OFFSET>,
            GetConcatenatedTextW: GetConcatenatedTextW::<Identity, Impl, OFFSET>,
            GetRecordItemRawBytes: GetRecordItemRawBytes::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbFrequencyListDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCodingType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordCentreFrequency(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IDvbFrequencyListDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbFrequencyListDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbFrequencyListDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbFrequencyListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbFrequencyListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCodingType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbFrequencyListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodingType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbFrequencyListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCentreFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbFrequencyListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCentreFrequency(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbFrequencyListDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCodingType: GetCodingType::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordCentreFrequency: GetRecordCentreFrequency::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbHDSimulcastLogicalChannelDescriptor_Impl: ::windows_core::BaseImpl + IDvbLogicalChannelDescriptor2_Impl {}
impl ::windows_core::Iids for IDvbHDSimulcastLogicalChannelDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDvbLogicalChannelDescriptor2);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbHDSimulcastLogicalChannelDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbHDSimulcastLogicalChannelDescriptor {
    const VTABLE: Self::Vtable = { IDvbHDSimulcastLogicalChannelDescriptor_Vtbl { base__: <IDvbLogicalChannelDescriptor2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbLinkageDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTSId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetONId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetServiceId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetLinkageType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetPrivateDataLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetPrivateData(this: &Self::This, pblen: *mut u8, pbdata: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbLinkageDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbLinkageDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTSId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTSId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetONId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetONId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLinkageType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLinkageType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPrivateDataLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPrivateDataLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPrivateData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLinkageDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblen: *mut u8, pbdata: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPrivateData(this, ::core::mem::transmute_copy(&pblen), ::core::mem::transmute_copy(&pbdata)).into())
        }
        IDvbLinkageDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetTSId: GetTSId::<Identity, Impl, OFFSET>,
            GetONId: GetONId::<Identity, Impl, OFFSET>,
            GetServiceId: GetServiceId::<Identity, Impl, OFFSET>,
            GetLinkageType: GetLinkageType::<Identity, Impl, OFFSET>,
            GetPrivateDataLength: GetPrivateDataLength::<Identity, Impl, OFFSET>,
            GetPrivateData: GetPrivateData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbLogicalChannel2Descriptor_Impl: ::windows_core::BaseImpl + IDvbLogicalChannelDescriptor2_Impl {
    fn GetCountOfLists(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetListId(this: &Self::This, blistindex: u8) -> ::windows_core::Result<u8>;
    fn GetListNameW(this: &Self::This, blistindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetListCountryCode(this: &Self::This, blistindex: u8, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetListCountOfRecords(this: &Self::This, bchannellistindex: u8) -> ::windows_core::Result<u8>;
    fn GetListRecordServiceId(this: &Self::This, blistindex: u8, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetListRecordLogicalChannelNumber(this: &Self::This, blistindex: u8, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetListRecordLogicalChannelAndVisibility(this: &Self::This, blistindex: u8, brecordindex: u8) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IDvbLogicalChannel2Descriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDvbLogicalChannelDescriptor2);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbLogicalChannel2Descriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCountOfLists<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfLists(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetListId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, blistindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetListId(this, ::core::mem::transmute_copy(&blistindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetListNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, blistindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetListNameW(this, ::core::mem::transmute_copy(&blistindex), ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetListCountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, blistindex: u8, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetListCountryCode(this, ::core::mem::transmute_copy(&blistindex), ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetListCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bchannellistindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetListCountOfRecords(this, ::core::mem::transmute_copy(&bchannellistindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetListRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetListRecordServiceId(this, ::core::mem::transmute_copy(&blistindex), ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetListRecordLogicalChannelNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetListRecordLogicalChannelNumber(this, ::core::mem::transmute_copy(&blistindex), ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetListRecordLogicalChannelAndVisibility<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannel2Descriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, blistindex: u8, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetListRecordLogicalChannelAndVisibility(this, ::core::mem::transmute_copy(&blistindex), ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbLogicalChannel2Descriptor_Vtbl {
            base__: <IDvbLogicalChannelDescriptor2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCountOfLists: GetCountOfLists::<Identity, Impl, OFFSET>,
            GetListId: GetListId::<Identity, Impl, OFFSET>,
            GetListNameW: GetListNameW::<Identity, Impl, OFFSET>,
            GetListCountryCode: GetListCountryCode::<Identity, Impl, OFFSET>,
            GetListCountOfRecords: GetListCountOfRecords::<Identity, Impl, OFFSET>,
            GetListRecordServiceId: GetListRecordServiceId::<Identity, Impl, OFFSET>,
            GetListRecordLogicalChannelNumber: GetListRecordLogicalChannelNumber::<Identity, Impl, OFFSET>,
            GetListRecordLogicalChannelAndVisibility: GetListRecordLogicalChannelAndVisibility::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbLogicalChannelDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordServiceId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetRecordLogicalChannelNumber(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IDvbLogicalChannelDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbLogicalChannelDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordLogicalChannelNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordLogicalChannelNumber(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbLogicalChannelDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordServiceId: GetRecordServiceId::<Identity, Impl, OFFSET>,
            GetRecordLogicalChannelNumber: GetRecordLogicalChannelNumber::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbLogicalChannelDescriptor2_Impl: ::windows_core::BaseImpl + IDvbLogicalChannelDescriptor_Impl {
    fn GetRecordLogicalChannelAndVisibility(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IDvbLogicalChannelDescriptor2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDvbLogicalChannelDescriptor);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbLogicalChannelDescriptor2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRecordLogicalChannelAndVisibility<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbLogicalChannelDescriptor2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordLogicalChannelAndVisibility(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbLogicalChannelDescriptor2_Vtbl {
            base__: <IDvbLogicalChannelDescriptor as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRecordLogicalChannelAndVisibility: GetRecordLogicalChannelAndVisibility::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbMultilingualServiceNameDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordLangId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u32>;
    fn GetRecordServiceProviderNameW(this: &Self::This, brecordindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetRecordServiceNameW(this: &Self::This, brecordindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDvbMultilingualServiceNameDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbMultilingualServiceNameDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordLangId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, ulval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordLangId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ulval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceProviderNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceProviderNameW(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbMultilingualServiceNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceNameW(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbMultilingualServiceNameDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordLangId: GetRecordLangId::<Identity, Impl, OFFSET>,
            GetRecordServiceProviderNameW: GetRecordServiceProviderNameW::<Identity, Impl, OFFSET>,
            GetRecordServiceNameW: GetRecordServiceNameW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbNetworkNameDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetNetworkName(this: &Self::This) -> ::windows_core::Result<*mut u8>;
    fn GetNetworkNameW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDvbNetworkNameDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbNetworkNameDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbNetworkNameDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbNetworkNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbNetworkNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNetworkName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbNetworkNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNetworkName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNetworkNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbNetworkNameDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNetworkNameW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbNetworkNameDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetNetworkName: GetNetworkName::<Identity, Impl, OFFSET>,
            GetNetworkNameW: GetNetworkNameW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbParentalRatingDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordRating(this: &Self::This, brecordindex: u8, pszcountrycode: *mut u8, pbval: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IDvbParentalRatingDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbParentalRatingDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbParentalRatingDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbParentalRatingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbParentalRatingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbParentalRatingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordRating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbParentalRatingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pszcountrycode: *mut u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordRating(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pszcountrycode), ::core::mem::transmute_copy(&pbval)).into())
        }
        IDvbParentalRatingDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordRating: GetRecordRating::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbPrivateDataSpecifierDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetPrivateDataSpecifier(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IDvbPrivateDataSpecifierDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbPrivateDataSpecifierDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbPrivateDataSpecifierDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbPrivateDataSpecifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbPrivateDataSpecifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPrivateDataSpecifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbPrivateDataSpecifierDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPrivateDataSpecifier(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbPrivateDataSpecifierDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetPrivateDataSpecifier: GetPrivateDataSpecifier::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbSatelliteDeliverySystemDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetFrequency(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetOrbitalPosition(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetWestEastFlag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetPolarization(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetModulation(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSymbolRate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFECInner(this: &Self::This) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDvbSatelliteDeliverySystemDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbSatelliteDeliverySystemDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOrbitalPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOrbitalPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetWestEastFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetWestEastFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolarization<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolarization(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetModulation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetModulation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSymbolRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSymbolRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFECInner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSatelliteDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFECInner(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbSatelliteDeliverySystemDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetFrequency: GetFrequency::<Identity, Impl, OFFSET>,
            GetOrbitalPosition: GetOrbitalPosition::<Identity, Impl, OFFSET>,
            GetWestEastFlag: GetWestEastFlag::<Identity, Impl, OFFSET>,
            GetPolarization: GetPolarization::<Identity, Impl, OFFSET>,
            GetModulation: GetModulation::<Identity, Impl, OFFSET>,
            GetSymbolRate: GetSymbolRate::<Identity, Impl, OFFSET>,
            GetFECInner: GetFECInner::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IDvbServiceAttributeDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordServiceId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetRecordNumericSelectionFlag(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetRecordVisibleServiceFlag(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IDvbServiceAttributeDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbServiceAttributeDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordNumericSelectionFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordNumericSelectionFlag(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordVisibleServiceFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceAttributeDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordVisibleServiceFlag(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbServiceAttributeDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordServiceId: GetRecordServiceId::<Identity, Impl, OFFSET>,
            GetRecordNumericSelectionFlag: GetRecordNumericSelectionFlag::<Identity, Impl, OFFSET>,
            GetRecordVisibleServiceFlag: GetRecordVisibleServiceFlag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbServiceDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetServiceType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetServiceProviderName(this: &Self::This) -> ::windows_core::Result<*mut u8>;
    fn GetServiceProviderNameW(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetServiceName(this: &Self::This) -> ::windows_core::Result<*mut u8>;
    fn GetProcessedServiceName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetServiceNameEmphasized(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDvbServiceDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbServiceDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceProviderName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceProviderNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceProviderNameW(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszname: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProcessedServiceName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProcessedServiceName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceNameEmphasized<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceNameEmphasized(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbServiceDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetServiceType: GetServiceType::<Identity, Impl, OFFSET>,
            GetServiceProviderName: GetServiceProviderName::<Identity, Impl, OFFSET>,
            GetServiceProviderNameW: GetServiceProviderNameW::<Identity, Impl, OFFSET>,
            GetServiceName: GetServiceName::<Identity, Impl, OFFSET>,
            GetProcessedServiceName: GetProcessedServiceName::<Identity, Impl, OFFSET>,
            GetServiceNameEmphasized: GetServiceNameEmphasized::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbServiceDescriptor2_Impl: ::windows_core::BaseImpl + IDvbServiceDescriptor_Impl {
    fn GetServiceProviderNameW2(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetServiceNameW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDvbServiceDescriptor2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDvbServiceDescriptor);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbServiceDescriptor2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetServiceProviderNameW2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceProviderNameW2(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceDescriptor2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceNameW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbServiceDescriptor2_Vtbl {
            base__: <IDvbServiceDescriptor as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetServiceProviderNameW2: GetServiceProviderNameW2::<Identity, Impl, OFFSET>,
            GetServiceNameW: GetServiceNameW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbServiceListDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordServiceId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetRecordServiceType(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDvbServiceListDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceListDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbServiceListDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbServiceListDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceType(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbServiceListDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordServiceId: GetRecordServiceId::<Identity, Impl, OFFSET>,
            GetRecordServiceType: GetRecordServiceType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbShortEventDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLanguageCode(this: &Self::This, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetEventNameW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetTextW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IDvbShortEventDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbShortEventDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbShortEventDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbShortEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbShortEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbShortEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode(this, ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetEventNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbShortEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEventNameW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbShortEventDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbShortEventDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetLanguageCode: GetLanguageCode::<Identity, Impl, OFFSET>,
            GetEventNameW: GetEventNameW::<Identity, Impl, OFFSET>,
            GetTextW: GetTextW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbSiParser_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, punkmpeg2data: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetPAT(this: &Self::This) -> ::windows_core::Result<IPAT>;
    fn GetCAT(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<ICAT>;
    fn GetPMT(this: &Self::This, pid: u16, pwprogramnumber: *const u16) -> ::windows_core::Result<IPMT>;
    fn GetTSDT(this: &Self::This) -> ::windows_core::Result<ITSDT>;
    fn GetNIT(this: &Self::This, tableid: u8, pwnetworkid: *const u16) -> ::windows_core::Result<IDVB_NIT>;
    fn GetSDT(this: &Self::This, tableid: u8, pwtransportstreamid: *const u16) -> ::windows_core::Result<IDVB_SDT>;
    fn GetEIT(this: &Self::This, tableid: u8, pwserviceid: *const u16) -> ::windows_core::Result<IDVB_EIT>;
    fn GetBAT(this: &Self::This, pwbouquetid: *const u16) -> ::windows_core::Result<IDVB_BAT>;
    fn GetRST(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<IDVB_RST>;
    fn GetST(this: &Self::This, pid: u16, dwtimeout: u32) -> ::windows_core::Result<IDVB_ST>;
    fn GetTDT(this: &Self::This) -> ::windows_core::Result<IDVB_TDT>;
    fn GetTOT(this: &Self::This) -> ::windows_core::Result<IDVB_TOT>;
    fn GetDIT(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<IDVB_DIT>;
    fn GetSIT(this: &Self::This, dwtimeout: u32) -> ::windows_core::Result<IDVB_SIT>;
}
impl ::windows_core::Iids for IDvbSiParser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbSiParser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkmpeg2data: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&punkmpeg2data)).into())
        }
        unsafe extern "system" fn GetPAT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPAT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppcat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAT(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPMT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, pwprogramnumber: *const u16, pppmt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPMT(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&pwprogramnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppmt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTSDT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptsdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTSDT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptsdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pwnetworkid: *const u16, ppnit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNIT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pwnetworkid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSDT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pwtransportstreamid: *const u16, ppsdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSDT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pwtransportstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pwserviceid: *const u16, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEIT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pwserviceid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppeit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBAT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwbouquetid: *const u16, ppbat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBAT(this, ::core::mem::transmute_copy(&pwbouquetid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRST<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, pprst: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRST(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprst, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetST<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, dwtimeout: u32, ppst: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetST(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppst, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTDT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTDT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTOT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptot: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTOT(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptot, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppdit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDIT(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtimeout: u32, ppsit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSIT(this, ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbSiParser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetPAT: GetPAT::<Identity, Impl, OFFSET>,
            GetCAT: GetCAT::<Identity, Impl, OFFSET>,
            GetPMT: GetPMT::<Identity, Impl, OFFSET>,
            GetTSDT: GetTSDT::<Identity, Impl, OFFSET>,
            GetNIT: GetNIT::<Identity, Impl, OFFSET>,
            GetSDT: GetSDT::<Identity, Impl, OFFSET>,
            GetEIT: GetEIT::<Identity, Impl, OFFSET>,
            GetBAT: GetBAT::<Identity, Impl, OFFSET>,
            GetRST: GetRST::<Identity, Impl, OFFSET>,
            GetST: GetST::<Identity, Impl, OFFSET>,
            GetTDT: GetTDT::<Identity, Impl, OFFSET>,
            GetTOT: GetTOT::<Identity, Impl, OFFSET>,
            GetDIT: GetDIT::<Identity, Impl, OFFSET>,
            GetSIT: GetSIT::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbSiParser2_Impl: ::windows_core::BaseImpl + IDvbSiParser_Impl {
    fn GetEIT2(this: &Self::This, tableid: u8, pwserviceid: *const u16, pbsegment: *const u8) -> ::windows_core::Result<IDVB_EIT2>;
}
impl ::windows_core::Iids for IDvbSiParser2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDvbSiParser);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbSiParser2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEIT2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pwserviceid: *const u16, pbsegment: *const u8, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEIT2(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pwserviceid), ::core::mem::transmute_copy(&pbsegment)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppeit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbSiParser2_Vtbl { base__: <IDvbSiParser as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetEIT2: GetEIT2::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbSubtitlingDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordLangId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u32>;
    fn GetRecordSubtitlingType(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordCompositionPageID(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetRecordAncillaryPageID(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IDvbSubtitlingDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbSubtitlingDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordLangId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pulval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordLangId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pulval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordSubtitlingType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordSubtitlingType(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCompositionPageID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCompositionPageID(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordAncillaryPageID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbSubtitlingDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordAncillaryPageID(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbSubtitlingDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordLangId: GetRecordLangId::<Identity, Impl, OFFSET>,
            GetRecordSubtitlingType: GetRecordSubtitlingType::<Identity, Impl, OFFSET>,
            GetRecordCompositionPageID: GetRecordCompositionPageID::<Identity, Impl, OFFSET>,
            GetRecordAncillaryPageID: GetRecordAncillaryPageID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbTeletextDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordLangId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u32>;
    fn GetRecordTeletextType(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordMagazineNumber(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordPageNumber(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDvbTeletextDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbTeletextDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordLangId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pulval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordLangId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pulval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTeletextType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTeletextType(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordMagazineNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordMagazineNumber(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordPageNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTeletextDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordPageNumber(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbTeletextDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordLangId: GetRecordLangId::<Identity, Impl, OFFSET>,
            GetRecordTeletextType: GetRecordTeletextType::<Identity, Impl, OFFSET>,
            GetRecordMagazineNumber: GetRecordMagazineNumber::<Identity, Impl, OFFSET>,
            GetRecordPageNumber: GetRecordPageNumber::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbTerrestrial2DeliverySystemDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTagExtension(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCentreFrequency(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPLPId(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetT2SystemId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetMultipleInputMode(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetBandwidth(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetGuardInterval(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTransmissionMode(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCellId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetOtherFrequencyFlag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTFSFlag(this: &Self::This) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDvbTerrestrial2DeliverySystemDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbTerrestrial2DeliverySystemDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTagExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTagExtension(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCentreFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCentreFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPLPId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPLPId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetT2SystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetT2SystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMultipleInputMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMultipleInputMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBandwidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBandwidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGuardInterval<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGuardInterval(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransmissionMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransmissionMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCellId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCellId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOtherFrequencyFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherFrequencyFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTFSFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrial2DeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTFSFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbTerrestrial2DeliverySystemDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetTagExtension: GetTagExtension::<Identity, Impl, OFFSET>,
            GetCentreFrequency: GetCentreFrequency::<Identity, Impl, OFFSET>,
            GetPLPId: GetPLPId::<Identity, Impl, OFFSET>,
            GetT2SystemId: GetT2SystemId::<Identity, Impl, OFFSET>,
            GetMultipleInputMode: GetMultipleInputMode::<Identity, Impl, OFFSET>,
            GetBandwidth: GetBandwidth::<Identity, Impl, OFFSET>,
            GetGuardInterval: GetGuardInterval::<Identity, Impl, OFFSET>,
            GetTransmissionMode: GetTransmissionMode::<Identity, Impl, OFFSET>,
            GetCellId: GetCellId::<Identity, Impl, OFFSET>,
            GetOtherFrequencyFlag: GetOtherFrequencyFlag::<Identity, Impl, OFFSET>,
            GetTFSFlag: GetTFSFlag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IDvbTerrestrialDeliverySystemDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCentreFrequency(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetBandwidth(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetConstellation(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetHierarchyInformation(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCodeRateHPStream(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCodeRateLPStream(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetGuardInterval(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTransmissionMode(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetOtherFrequencyFlag(this: &Self::This) -> ::windows_core::Result<u8>;
}
impl ::windows_core::Iids for IDvbTerrestrialDeliverySystemDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IDvbTerrestrialDeliverySystemDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCentreFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCentreFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBandwidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBandwidth(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConstellation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConstellation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHierarchyInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHierarchyInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCodeRateHPStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeRateHPStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCodeRateLPStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCodeRateLPStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGuardInterval<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGuardInterval(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransmissionMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransmissionMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOtherFrequencyFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IDvbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOtherFrequencyFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IDvbTerrestrialDeliverySystemDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCentreFrequency: GetCentreFrequency::<Identity, Impl, OFFSET>,
            GetBandwidth: GetBandwidth::<Identity, Impl, OFFSET>,
            GetConstellation: GetConstellation::<Identity, Impl, OFFSET>,
            GetHierarchyInformation: GetHierarchyInformation::<Identity, Impl, OFFSET>,
            GetCodeRateHPStream: GetCodeRateHPStream::<Identity, Impl, OFFSET>,
            GetCodeRateLPStream: GetCodeRateLPStream::<Identity, Impl, OFFSET>,
            GetGuardInterval: GetGuardInterval::<Identity, Impl, OFFSET>,
            GetTransmissionMode: GetTransmissionMode::<Identity, Impl, OFFSET>,
            GetOtherFrequencyFlag: GetOtherFrequencyFlag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IESCloseMmiEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetDialogNumber(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IESCloseMmiEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESCloseMmiEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESCloseMmiEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDialogNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESCloseMmiEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdialognumber: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDialogNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdialognumber, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESCloseMmiEvent_Vtbl { base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetDialogNumber: GetDialogNumber::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IESEventFactory_Impl: ::windows_core::BaseImpl {
    fn CreateESEvent(this: &Self::This, pserviceprovider: ::core::option::Option<&::windows_core::IUnknown>, dweventid: u32, guideventtype: &::windows_core::GUID, dweventdatalength: u32, peventdata: *const u8, bstrbaseurl: &::windows_core::BSTR, pinitcontext: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<super::IESEvent>;
}
impl ::windows_core::Iids for IESEventFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESEventFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateESEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pserviceprovider: *mut ::core::ffi::c_void, dweventid: u32, guideventtype: ::windows_core::GUID, dweventdatalength: u32, peventdata: *const u8, bstrbaseurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, pinitcontext: *mut ::core::ffi::c_void, ppesevent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateESEvent(this, ::windows_core::from_raw_borrowed(&pserviceprovider), ::core::mem::transmute_copy(&dweventid), ::core::mem::transmute(&guideventtype), ::core::mem::transmute_copy(&dweventdatalength), ::core::mem::transmute_copy(&peventdata), ::core::mem::transmute(&bstrbaseurl), ::windows_core::from_raw_borrowed(&pinitcontext)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppesevent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESEventFactory_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, CreateESEvent: CreateESEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IESEventService_Impl: ::windows_core::BaseImpl {
    fn FireESEvent(this: &Self::This, pesevent: ::core::option::Option<&super::IESEvent>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IESEventService {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventService_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESEventService {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FireESEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventService_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pesevent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::FireESEvent(this, ::windows_core::from_raw_borrowed(&pesevent)).into())
        }
        IESEventService_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, FireESEvent: FireESEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IESEventServiceConfiguration_Impl: ::windows_core::BaseImpl {
    fn SetParent(this: &Self::This, peventservice: ::core::option::Option<&IESEventService>) -> ::windows_core::Result<()>;
    fn RemoveParent(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetOwner(this: &Self::This, pesevents: ::core::option::Option<&super::IESEvents>) -> ::windows_core::Result<()>;
    fn RemoveOwner(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetGraph(this: &Self::This, pgraph: ::core::option::Option<&super::IFilterGraph>) -> ::windows_core::Result<()>;
    fn RemoveGraph(this: &Self::This, pgraph: ::core::option::Option<&super::IFilterGraph>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IESEventServiceConfiguration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESEventServiceConfiguration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetParent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peventservice: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParent(this, ::windows_core::from_raw_borrowed(&peventservice)).into())
        }
        unsafe extern "system" fn RemoveParent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveParent(this).into())
        }
        unsafe extern "system" fn SetOwner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pesevents: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOwner(this, ::windows_core::from_raw_borrowed(&pesevents)).into())
        }
        unsafe extern "system" fn RemoveOwner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveOwner(this).into())
        }
        unsafe extern "system" fn SetGraph<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pgraph: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGraph(this, ::windows_core::from_raw_borrowed(&pgraph)).into())
        }
        unsafe extern "system" fn RemoveGraph<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESEventServiceConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pgraph: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveGraph(this, ::windows_core::from_raw_borrowed(&pgraph)).into())
        }
        IESEventServiceConfiguration_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetParent: SetParent::<Identity, Impl, OFFSET>,
            RemoveParent: RemoveParent::<Identity, Impl, OFFSET>,
            SetOwner: SetOwner::<Identity, Impl, OFFSET>,
            RemoveOwner: RemoveOwner::<Identity, Impl, OFFSET>,
            SetGraph: SetGraph::<Identity, Impl, OFFSET>,
            RemoveGraph: RemoveGraph::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESFileExpiryDateEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetTunerId(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetExpiryDate(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetFinalExpiryDate(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetMaxRenewalCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn IsEntitlementTokenPresent(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn DoesExpireAfterFirstUse(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IESFileExpiryDateEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESFileExpiryDateEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTunerId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidtunerid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTunerId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguidtunerid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpiryDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpiryDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwexpirydate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFinalExpiryDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFinalExpiryDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwexpirydate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMaxRenewalCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmaxrenewalcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMaxRenewalCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dwmaxrenewalcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsEntitlementTokenPresent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfenttokenpresent: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsEntitlementTokenPresent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfenttokenpresent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DoesExpireAfterFirstUse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESFileExpiryDateEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfexpireafterfirstuse: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DoesExpireAfterFirstUse(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfexpireafterfirstuse, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESFileExpiryDateEvent_Vtbl {
            base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTunerId: GetTunerId::<Identity, Impl, OFFSET>,
            GetExpiryDate: GetExpiryDate::<Identity, Impl, OFFSET>,
            GetFinalExpiryDate: GetFinalExpiryDate::<Identity, Impl, OFFSET>,
            GetMaxRenewalCount: GetMaxRenewalCount::<Identity, Impl, OFFSET>,
            IsEntitlementTokenPresent: IsEntitlementTokenPresent::<Identity, Impl, OFFSET>,
            DoesExpireAfterFirstUse: DoesExpireAfterFirstUse::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IESIsdbCasResponseEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetRequestId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDataLength(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetResponseData(this: &Self::This) -> ::windows_core::Result<*mut super::super::super::System::Com::SAFEARRAY>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IESIsdbCasResponseEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESIsdbCasResponseEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESIsdbCasResponseEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRequestId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESIsdbCasResponseEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prequestid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prequestid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESIsdbCasResponseEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatus: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESIsdbCasResponseEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prequestlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prequestlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetResponseData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESIsdbCasResponseEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetResponseData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESIsdbCasResponseEvent_Vtbl {
            base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRequestId: GetRequestId::<Identity, Impl, OFFSET>,
            GetStatus: GetStatus::<Identity, Impl, OFFSET>,
            GetDataLength: GetDataLength::<Identity, Impl, OFFSET>,
            GetResponseData: GetResponseData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IESLicenseRenewalResultEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetCallersId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetFileName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn IsRenewalSuccessful(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn IsCheckEntitlementCallRequired(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetDescrambledStatus(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRenewalResultCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetCASFailureCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRenewalHResult(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
    fn GetEntitlementTokenLength(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetEntitlementToken(this: &Self::This) -> ::windows_core::Result<*mut super::super::super::System::Com::SAFEARRAY>;
    fn GetExpiryDate(this: &Self::This) -> ::windows_core::Result<u64>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IESLicenseRenewalResultEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESLicenseRenewalResultEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCallersId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcallersid: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCallersId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcallersid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrfilename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFileName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrfilename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsRenewalSuccessful<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfrenewalsuccessful: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsRenewalSuccessful(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfrenewalsuccessful, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsCheckEntitlementCallRequired<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfcheckenttokencallneeded: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsCheckEntitlementCallRequired(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcheckenttokencallneeded, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescrambledStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdescrambledstatus: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDescrambledStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdescrambledstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRenewalResultCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwrenewalresultcode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRenewalResultCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwrenewalresultcode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCASFailureCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwcasfailurecode: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCASFailureCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwcasfailurecode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRenewalHResult<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phr: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRenewalHResult(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEntitlementTokenLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEntitlementTokenLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEntitlementToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEntitlementToken(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpiryDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESLicenseRenewalResultEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pqwexpirydate: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExpiryDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pqwexpirydate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESLicenseRenewalResultEvent_Vtbl {
            base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCallersId: GetCallersId::<Identity, Impl, OFFSET>,
            GetFileName: GetFileName::<Identity, Impl, OFFSET>,
            IsRenewalSuccessful: IsRenewalSuccessful::<Identity, Impl, OFFSET>,
            IsCheckEntitlementCallRequired: IsCheckEntitlementCallRequired::<Identity, Impl, OFFSET>,
            GetDescrambledStatus: GetDescrambledStatus::<Identity, Impl, OFFSET>,
            GetRenewalResultCode: GetRenewalResultCode::<Identity, Impl, OFFSET>,
            GetCASFailureCode: GetCASFailureCode::<Identity, Impl, OFFSET>,
            GetRenewalHResult: GetRenewalHResult::<Identity, Impl, OFFSET>,
            GetEntitlementTokenLength: GetEntitlementTokenLength::<Identity, Impl, OFFSET>,
            GetEntitlementToken: GetEntitlementToken::<Identity, Impl, OFFSET>,
            GetExpiryDate: GetExpiryDate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IESOpenMmiEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetDialogNumber(this: &Self::This, pdialogrequest: *mut u32, pdialognumber: *mut u32) -> ::windows_core::Result<()>;
    fn GetDialogType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn GetDialogData(this: &Self::This) -> ::windows_core::Result<*mut super::super::super::System::Com::SAFEARRAY>;
    fn GetDialogStringData(this: &Self::This, pbstrbaseurl: *mut ::windows_core::BSTR, pbstrdata: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IESOpenMmiEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESOpenMmiEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESOpenMmiEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetDialogNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESOpenMmiEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdialogrequest: *mut u32, pdialognumber: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDialogNumber(this, ::core::mem::transmute_copy(&pdialogrequest), ::core::mem::transmute_copy(&pdialognumber)).into())
        }
        unsafe extern "system" fn GetDialogType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESOpenMmiEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guiddialogtype: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDialogType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(guiddialogtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDialogData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESOpenMmiEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDialogData(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDialogStringData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESOpenMmiEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrbaseurl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, pbstrdata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDialogStringData(this, ::core::mem::transmute_copy(&pbstrbaseurl), ::core::mem::transmute_copy(&pbstrdata)).into())
        }
        IESOpenMmiEvent_Vtbl {
            base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetDialogNumber: GetDialogNumber::<Identity, Impl, OFFSET>,
            GetDialogType: GetDialogType::<Identity, Impl, OFFSET>,
            GetDialogData: GetDialogData::<Identity, Impl, OFFSET>,
            GetDialogStringData: GetDialogStringData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IESRequestTunerEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetPriority(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetReason(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetConsequences(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetEstimatedTime(this: &Self::This) -> ::windows_core::Result<u32>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IESRequestTunerEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESRequestTunerEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESRequestTunerEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPriority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESRequestTunerEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbypriority: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPriority(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbypriority, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReason<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESRequestTunerEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbyreason: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReason(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbyreason, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConsequences<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESRequestTunerEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbyconsequences: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConsequences(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbyconsequences, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEstimatedTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESRequestTunerEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwestimatedtime: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEstimatedTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwestimatedtime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESRequestTunerEvent_Vtbl {
            base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPriority: GetPriority::<Identity, Impl, OFFSET>,
            GetReason: GetReason::<Identity, Impl, OFFSET>,
            GetConsequences: GetConsequences::<Identity, Impl, OFFSET>,
            GetEstimatedTime: GetEstimatedTime::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IESValueUpdatedEvent_Impl: ::windows_core::BaseImpl + super::IESEvent_Impl {
    fn GetValueNames(this: &Self::This) -> ::windows_core::Result<*mut super::super::super::System::Com::SAFEARRAY>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IESValueUpdatedEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IESEvent);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESValueUpdatedEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IESValueUpdatedEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetValueNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IESValueUpdatedEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrnames: *mut *mut super::super::super::System::Com::SAFEARRAY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValueNames(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrnames, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IESValueUpdatedEvent_Vtbl { base__: <super::IESEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetValueNames: GetValueNames::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IETFilter_Impl: ::windows_core::BaseImpl {
    fn EvalRatObjOK(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
    fn GetCurrRating(this: &Self::This, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::Result<()>;
    fn GetCurrLicenseExpDate(this: &Self::This, prottype: *const ProtType) -> ::windows_core::Result<i32>;
    fn GetLastErrorCode(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetRecordingOn(this: &Self::This, frecstate: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IETFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IETFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EvalRatObjOK<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EvalRatObjOK(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phrcocreateretval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCurrRating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrRating(this, ::core::mem::transmute_copy(&pensystem), ::core::mem::transmute_copy(&penrating), ::core::mem::transmute_copy(&plbfenattr)).into())
        }
        unsafe extern "system" fn GetCurrLicenseExpDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrLicenseExpDate(this, ::core::mem::transmute_copy(&prottype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpdatetime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastErrorCode(this).into())
        }
        unsafe extern "system" fn SetRecordingOn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frecstate: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRecordingOn(this, ::core::mem::transmute_copy(&frecstate)).into())
        }
        IETFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EvalRatObjOK: EvalRatObjOK::<Identity, Impl, OFFSET>,
            GetCurrRating: GetCurrRating::<Identity, Impl, OFFSET>,
            GetCurrLicenseExpDate: GetCurrLicenseExpDate::<Identity, Impl, OFFSET>,
            GetLastErrorCode: GetLastErrorCode::<Identity, Impl, OFFSET>,
            SetRecordingOn: SetRecordingOn::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IETFilterConfig_Impl: ::windows_core::BaseImpl {
    fn InitLicense(this: &Self::This, licenseid: i32) -> ::windows_core::Result<()>;
    fn GetSecureChannelObject(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
impl ::windows_core::Iids for IETFilterConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilterConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IETFilterConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitLicense<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilterConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, licenseid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitLicense(this, ::core::mem::transmute_copy(&licenseid)).into())
        }
        unsafe extern "system" fn GetSecureChannelObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilterConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSecureChannelObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkdrmsecurechannel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IETFilterConfig_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitLicense: InitLicense::<Identity, Impl, OFFSET>,
            GetSecureChannelObject: GetSecureChannelObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IETFilterEvents_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IETFilterEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IETFilterEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IETFilterEvents {
    const VTABLE: Self::Vtable = { IETFilterEvents_Vtbl { base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumComponentTypes_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<IComponentType>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumComponentTypes>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IEnumComponentTypes {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponentTypes_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumComponentTypes {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponentTypes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumComponentTypes_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumComponents_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<IComponent>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumComponents>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IEnumComponents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumComponents {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumComponents_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumComponents_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumGuideDataProperties_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, ppprop: *mut ::core::option::Option<IGuideDataProperty>, pcelt: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumGuideDataProperties>;
}
impl ::windows_core::Iids for IEnumGuideDataProperties {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumGuideDataProperties_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumGuideDataProperties {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumGuideDataProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, ppprop: *mut *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&ppprop), ::core::mem::transmute_copy(&pcelt)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumGuideDataProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumGuideDataProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumGuideDataProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumGuideDataProperties_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumMSVidGraphSegment_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<IMSVidGraphSegment>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumMSVidGraphSegment>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IEnumMSVidGraphSegment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumMSVidGraphSegment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumMSVidGraphSegment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumMSVidGraphSegment_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IEnumStreamBufferRecordingAttrib_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, crequest: u32, pstreambufferattribute: *mut STREAMBUFFER_ATTRIBUTE, pcreceived: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, crecords: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumStreamBufferRecordingAttrib>;
}
impl ::windows_core::Iids for IEnumStreamBufferRecordingAttrib {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumStreamBufferRecordingAttrib_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumStreamBufferRecordingAttrib {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumStreamBufferRecordingAttrib_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, crequest: u32, pstreambufferattribute: *mut STREAMBUFFER_ATTRIBUTE, pcreceived: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&crequest), ::core::mem::transmute_copy(&pstreambufferattribute), ::core::mem::transmute_copy(&pcreceived)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumStreamBufferRecordingAttrib_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&crecords)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumStreamBufferRecordingAttrib_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumStreamBufferRecordingAttrib_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppienumstreambufferattrib: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppienumstreambufferattrib, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumStreamBufferRecordingAttrib_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumTuneRequests_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, ppprop: *mut ::core::option::Option<ITuneRequest>, pcelt: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumTuneRequests>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IEnumTuneRequests {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuneRequests_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumTuneRequests {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuneRequests_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, ppprop: *mut *mut ::core::ffi::c_void, pcelt: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&ppprop), ::core::mem::transmute_copy(&pcelt)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuneRequests_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuneRequests_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuneRequests_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumTuneRequests_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IEnumTuningSpaces_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, celt: u32, rgelt: *mut ::core::option::Option<ITuningSpace>, pceltfetched: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumTuningSpaces>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IEnumTuningSpaces {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuningSpaces_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumTuningSpaces {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32, rgelt: *mut *mut ::core::ffi::c_void, pceltfetched: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&celt), ::core::mem::transmute_copy(&rgelt), ::core::mem::transmute_copy(&pceltfetched)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumTuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumTuningSpaces_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IEvalRat_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_BlockedRatingAttributes(this: &Self::This, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel) -> ::windows_core::Result<i32>;
    fn put_BlockedRatingAttributes(this: &Self::This, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows_core::Result<()>;
    fn BlockUnRated(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetBlockUnRated(this: &Self::This, fblockunratedshows: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn MostRestrictiveRating(this: &Self::This, ensystem1: EnTvRat_System, enenlevel1: EnTvRat_GenericLevel, lbfenattr1: i32, ensystem2: EnTvRat_System, enenlevel2: EnTvRat_GenericLevel, lbfenattr2: i32, pensystem: *mut EnTvRat_System, penenlevel: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::Result<()>;
    fn TestRating(this: &Self::This, enshowsystem: EnTvRat_System, enshowlevel: EnTvRat_GenericLevel, lbfenshowattributes: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IEvalRat {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEvalRat {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_BlockedRatingAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, plbfattrs: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_BlockedRatingAttributes(this, ::core::mem::transmute_copy(&ensystem), ::core::mem::transmute_copy(&enlevel)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plbfattrs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_BlockedRatingAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enlevel: EnTvRat_GenericLevel, lbfattrs: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_BlockedRatingAttributes(this, ::core::mem::transmute_copy(&ensystem), ::core::mem::transmute_copy(&enlevel), ::core::mem::transmute_copy(&lbfattrs)).into())
        }
        unsafe extern "system" fn BlockUnRated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfblockunratedshows: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BlockUnRated(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfblockunratedshows, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBlockUnRated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fblockunratedshows: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBlockUnRated(this, ::core::mem::transmute_copy(&fblockunratedshows)).into())
        }
        unsafe extern "system" fn MostRestrictiveRating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ensystem1: EnTvRat_System, enenlevel1: EnTvRat_GenericLevel, lbfenattr1: i32, ensystem2: EnTvRat_System, enenlevel2: EnTvRat_GenericLevel, lbfenattr2: i32, pensystem: *mut EnTvRat_System, penenlevel: *mut EnTvRat_GenericLevel, plbfenattr: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MostRestrictiveRating(this, ::core::mem::transmute_copy(&ensystem1), ::core::mem::transmute_copy(&enenlevel1), ::core::mem::transmute_copy(&lbfenattr1), ::core::mem::transmute_copy(&ensystem2), ::core::mem::transmute_copy(&enenlevel2), ::core::mem::transmute_copy(&lbfenattr2), ::core::mem::transmute_copy(&pensystem), ::core::mem::transmute_copy(&penenlevel), ::core::mem::transmute_copy(&plbfenattr)).into())
        }
        unsafe extern "system" fn TestRating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEvalRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, enshowsystem: EnTvRat_System, enshowlevel: EnTvRat_GenericLevel, lbfenshowattributes: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TestRating(this, ::core::mem::transmute_copy(&enshowsystem), ::core::mem::transmute_copy(&enshowlevel), ::core::mem::transmute_copy(&lbfenshowattributes)).into())
        }
        IEvalRat_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_BlockedRatingAttributes: get_BlockedRatingAttributes::<Identity, Impl, OFFSET>,
            put_BlockedRatingAttributes: put_BlockedRatingAttributes::<Identity, Impl, OFFSET>,
            BlockUnRated: BlockUnRated::<Identity, Impl, OFFSET>,
            SetBlockUnRated: SetBlockUnRated::<Identity, Impl, OFFSET>,
            MostRestrictiveRating: MostRestrictiveRating::<Identity, Impl, OFFSET>,
            TestRating: TestRating::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IGenericDescriptor_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, pbdesc: *const u8, bcount: i32) -> ::windows_core::Result<()>;
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetBody(this: &Self::This) -> ::windows_core::Result<*mut u8>;
}
impl ::windows_core::Iids for IGenericDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGenericDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdesc: *const u8, bcount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&pbdesc), ::core::mem::transmute_copy(&bcount)).into())
        }
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBody<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbval: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBody(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IGenericDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetBody: GetBody::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IGenericDescriptor2_Impl: ::windows_core::BaseImpl + IGenericDescriptor_Impl {
    fn Initialize2(this: &Self::This, pbdesc: *const u8, wcount: u16) -> ::windows_core::Result<()>;
    fn GetLength2(this: &Self::This) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IGenericDescriptor2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IGenericDescriptor);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGenericDescriptor2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdesc: *const u8, wcount: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize2(this, ::core::mem::transmute_copy(&pbdesc), ::core::mem::transmute_copy(&wcount)).into())
        }
        unsafe extern "system" fn GetLength2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGenericDescriptor2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength2(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IGenericDescriptor2_Vtbl {
            base__: <IGenericDescriptor as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize2: Initialize2::<Identity, Impl, OFFSET>,
            GetLength2: GetLength2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IGpnvsCommonBase_Impl: ::windows_core::BaseImpl {
    fn GetValueUpdateName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IGpnvsCommonBase {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGpnvsCommonBase_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGpnvsCommonBase {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetValueUpdateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGpnvsCommonBase_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValueUpdateName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IGpnvsCommonBase_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetValueUpdateName: GetValueUpdateName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IGuideData_Impl: ::windows_core::BaseImpl {
    fn GetServices(this: &Self::This) -> ::windows_core::Result<IEnumTuneRequests>;
    fn GetServiceProperties(this: &Self::This, ptunerequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<IEnumGuideDataProperties>;
    fn GetGuideProgramIDs(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn GetProgramProperties(this: &Self::This, varprogramdescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IEnumGuideDataProperties>;
    fn GetScheduleEntryIDs(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn GetScheduleEntryProperties(this: &Self::This, varscheduleentrydescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IEnumGuideDataProperties>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IGuideData {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGuideData {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetServices<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenumtunerequests: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServices(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumtunerequests, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptunerequest: *mut ::core::ffi::c_void, ppenumproperties: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceProperties(this, ::windows_core::from_raw_borrowed(&ptunerequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumproperties, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGuideProgramIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, penumprograms: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGuideProgramIDs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(penumprograms, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProgramProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varprogramdescriptionid: super::super::super::System::Variant::VARIANT, ppenumproperties: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProgramProperties(this, ::core::mem::transmute(&varprogramdescriptionid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumproperties, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetScheduleEntryIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, penumscheduleentries: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScheduleEntryIDs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(penumscheduleentries, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetScheduleEntryProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideData_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: super::super::super::System::Variant::VARIANT, ppenumproperties: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetScheduleEntryProperties(this, ::core::mem::transmute(&varscheduleentrydescriptionid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenumproperties, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IGuideData_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetServices: GetServices::<Identity, Impl, OFFSET>,
            GetServiceProperties: GetServiceProperties::<Identity, Impl, OFFSET>,
            GetGuideProgramIDs: GetGuideProgramIDs::<Identity, Impl, OFFSET>,
            GetProgramProperties: GetProgramProperties::<Identity, Impl, OFFSET>,
            GetScheduleEntryIDs: GetScheduleEntryIDs::<Identity, Impl, OFFSET>,
            GetScheduleEntryProperties: GetScheduleEntryProperties::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IGuideDataEvent_Impl: ::windows_core::BaseImpl {
    fn GuideDataAcquired(this: &Self::This) -> ::windows_core::Result<()>;
    fn ProgramChanged(this: &Self::This, varprogramdescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ServiceChanged(this: &Self::This, varservicedescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ScheduleEntryChanged(this: &Self::This, varscheduleentrydescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ProgramDeleted(this: &Self::This, varprogramdescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ServiceDeleted(this: &Self::This, varservicedescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ScheduleDeleted(this: &Self::This, varscheduleentrydescriptionid: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IGuideDataEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGuideDataEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GuideDataAcquired<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GuideDataAcquired(this).into())
        }
        unsafe extern "system" fn ProgramChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varprogramdescriptionid: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProgramChanged(this, ::core::mem::transmute(&varprogramdescriptionid)).into())
        }
        unsafe extern "system" fn ServiceChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varservicedescriptionid: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ServiceChanged(this, ::core::mem::transmute(&varservicedescriptionid)).into())
        }
        unsafe extern "system" fn ScheduleEntryChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ScheduleEntryChanged(this, ::core::mem::transmute(&varscheduleentrydescriptionid)).into())
        }
        unsafe extern "system" fn ProgramDeleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varprogramdescriptionid: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProgramDeleted(this, ::core::mem::transmute(&varprogramdescriptionid)).into())
        }
        unsafe extern "system" fn ServiceDeleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varservicedescriptionid: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ServiceDeleted(this, ::core::mem::transmute(&varservicedescriptionid)).into())
        }
        unsafe extern "system" fn ScheduleDeleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varscheduleentrydescriptionid: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ScheduleDeleted(this, ::core::mem::transmute(&varscheduleentrydescriptionid)).into())
        }
        IGuideDataEvent_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GuideDataAcquired: GuideDataAcquired::<Identity, Impl, OFFSET>,
            ProgramChanged: ProgramChanged::<Identity, Impl, OFFSET>,
            ServiceChanged: ServiceChanged::<Identity, Impl, OFFSET>,
            ScheduleEntryChanged: ScheduleEntryChanged::<Identity, Impl, OFFSET>,
            ProgramDeleted: ProgramDeleted::<Identity, Impl, OFFSET>,
            ServiceDeleted: ServiceDeleted::<Identity, Impl, OFFSET>,
            ScheduleDeleted: ScheduleDeleted::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IGuideDataLoader_Impl: ::windows_core::BaseImpl {
    fn Init(this: &Self::This, pguidestore: ::core::option::Option<&IGuideData>) -> ::windows_core::Result<()>;
    fn Terminate(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IGuideDataLoader {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataLoader_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGuideDataLoader {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataLoader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguidestore: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Init(this, ::windows_core::from_raw_borrowed(&pguidestore)).into())
        }
        unsafe extern "system" fn Terminate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataLoader_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Terminate(this).into())
        }
        IGuideDataLoader_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Init: Init::<Identity, Impl, OFFSET>,
            Terminate: Terminate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IGuideDataProperty_Impl: ::windows_core::BaseImpl {
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Language(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Value(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IGuideDataProperty {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataProperty_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IGuideDataProperty {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Language<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idlang: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Language(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(idlang, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Value<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IGuideDataProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvar: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Value(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IGuideDataProperty_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Name: Name::<Identity, Impl, OFFSET>,
            Language: Language::<Identity, Impl, OFFSET>,
            Value: Value::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IISDBSLocator_Impl: ::windows_core::BaseImpl + IDVBSLocator_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IISDBSLocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVBSLocator);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDBSLocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDBSLocator {
    const VTABLE: Self::Vtable = { IISDBSLocator_Vtbl { base__: <IDVBSLocator as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IISDB_BIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetBroadcastViewPropriety(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordBroadcasterId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IISDB_BIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_BIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBroadcastViewPropriety<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBroadcastViewPropriety(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordBroadcasterId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordBroadcasterId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_BIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_BIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetBroadcastViewPropriety: GetBroadcastViewPropriety::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordBroadcasterId: GetRecordBroadcasterId::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IISDB_CDT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>, bsectionnumber: u8) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDownloadDataId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetSectionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetDataType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetSizeOfDataModule(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDataModule(this: &Self::This) -> ::windows_core::Result<*mut u8>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IISDB_CDT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_CDT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void, bsectionnumber: u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata), ::core::mem::transmute_copy(&bsectionnumber)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDownloadDataId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDownloadDataId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSectionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSectionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetSizeOfDataModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSizeOfDataModule(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdata: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataModule(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_CDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_CDT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetDownloadDataId: GetDownloadDataId::<Identity, Impl, OFFSET>,
            GetSectionNumber: GetSectionNumber::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetDataType: GetDataType::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            GetSizeOfDataModule: GetSizeOfDataModule::<Identity, Impl, OFFSET>,
            GetDataModule: GetDataModule::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IISDB_EMM_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTableIdExtension(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetDataBytes(this: &Self::This, pwbufferlength: *mut u16, pbbuffer: *mut u8) -> ::windows_core::Result<()>;
    fn GetSharedEmmMessage(this: &Self::This, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows_core::Result<()>;
    fn GetIndividualEmmMessage(this: &Self::This, punknown: ::core::option::Option<&::windows_core::IUnknown>, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IISDB_EMM {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_EMM {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableIdExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableIdExtension(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwbufferlength: *mut u16, pbbuffer: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDataBytes(this, ::core::mem::transmute_copy(&pwbufferlength), ::core::mem::transmute_copy(&pbbuffer)).into())
        }
        unsafe extern "system" fn GetSharedEmmMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSharedEmmMessage(this, ::core::mem::transmute_copy(&pwlength), ::core::mem::transmute_copy(&ppbmessage)).into())
        }
        unsafe extern "system" fn GetIndividualEmmMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punknown: *mut ::core::ffi::c_void, pwlength: *mut u16, ppbmessage: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetIndividualEmmMessage(this, ::windows_core::from_raw_borrowed(&punknown), ::core::mem::transmute_copy(&pwlength), ::core::mem::transmute_copy(&ppbmessage)).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_EMM_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_EMM_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetTableIdExtension: GetTableIdExtension::<Identity, Impl, OFFSET>,
            GetDataBytes: GetDataBytes::<Identity, Impl, OFFSET>,
            GetSharedEmmMessage: GetSharedEmmMessage::<Identity, Impl, OFFSET>,
            GetIndividualEmmMessage: GetIndividualEmmMessage::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IISDB_LDT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetOriginalServiceId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetTransportStreamId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptionId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IISDB_LDT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_LDT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalServiceId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransportStreamId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptionId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_LDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_LDT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetOriginalServiceId: GetOriginalServiceId::<Identity, Impl, OFFSET>,
            GetTransportStreamId: GetTransportStreamId::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordDescriptionId: GetRecordDescriptionId::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IISDB_NBIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordInformationId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordInformationType(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordDescriptionBodyLocation(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordMessageSectionNumber(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordUserDefined(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordNumberOfKeys(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordKeys(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<*mut u8>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IISDB_NBIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_NBIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordInformationId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordInformationId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordInformationType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordInformationType(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptionBodyLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptionBodyLocation(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordMessageSectionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordMessageSectionNumber(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordUserDefined<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordUserDefined(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordNumberOfKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordNumberOfKeys(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordKeys<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbkeys: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordKeys(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbkeys, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_NBIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_NBIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordInformationId: GetRecordInformationId::<Identity, Impl, OFFSET>,
            GetRecordInformationType: GetRecordInformationType::<Identity, Impl, OFFSET>,
            GetRecordDescriptionBodyLocation: GetRecordDescriptionBodyLocation::<Identity, Impl, OFFSET>,
            GetRecordMessageSectionNumber: GetRecordMessageSectionNumber::<Identity, Impl, OFFSET>,
            GetRecordUserDefined: GetRecordUserDefined::<Identity, Impl, OFFSET>,
            GetRecordNumberOfKeys: GetRecordNumberOfKeys::<Identity, Impl, OFFSET>,
            GetRecordKeys: GetRecordKeys::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IISDB_SDT_Impl: ::windows_core::BaseImpl + IDVB_SDT_Impl {
    fn GetRecordEITUserDefinedFlags(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IISDB_SDT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDVB_SDT);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_SDT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetRecordEITUserDefinedFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEITUserDefinedFlags(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_SDT_Vtbl {
            base__: <IDVB_SDT as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetRecordEITUserDefinedFlags: GetRecordEITUserDefinedFlags::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IISDB_SDTT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTableIdExt(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetTransportStreamId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetOriginalNetworkId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetServiceId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordGroup(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordTargetVersion(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordNewVersion(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordDownloadLevel(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordVersionIndicator(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordScheduleTimeShiftInformation(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordCountOfSchedules(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordStartTimeByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
    fn GetRecordDurationByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<MPEG_TIME>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetVersionHash(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IISDB_SDTT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IISDB_SDTT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableIdExt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableIdExt(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransportStreamId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginalNetworkId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginalNetworkId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordGroup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordGroup(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTargetVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTargetVersion(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordNewVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordNewVersion(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDownloadLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDownloadLevel(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordVersionIndicator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordVersionIndicator(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordScheduleTimeShiftInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordScheduleTimeShiftInformation(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfSchedules<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfSchedules(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordStartTimeByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordStartTimeByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDurationByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, pmdval: *mut MPEG_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDurationByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetVersionHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IISDB_SDTT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwversionhash: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionHash(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwversionhash, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IISDB_SDTT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetTableIdExt: GetTableIdExt::<Identity, Impl, OFFSET>,
            GetTransportStreamId: GetTransportStreamId::<Identity, Impl, OFFSET>,
            GetOriginalNetworkId: GetOriginalNetworkId::<Identity, Impl, OFFSET>,
            GetServiceId: GetServiceId::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordGroup: GetRecordGroup::<Identity, Impl, OFFSET>,
            GetRecordTargetVersion: GetRecordTargetVersion::<Identity, Impl, OFFSET>,
            GetRecordNewVersion: GetRecordNewVersion::<Identity, Impl, OFFSET>,
            GetRecordDownloadLevel: GetRecordDownloadLevel::<Identity, Impl, OFFSET>,
            GetRecordVersionIndicator: GetRecordVersionIndicator::<Identity, Impl, OFFSET>,
            GetRecordScheduleTimeShiftInformation: GetRecordScheduleTimeShiftInformation::<Identity, Impl, OFFSET>,
            GetRecordCountOfSchedules: GetRecordCountOfSchedules::<Identity, Impl, OFFSET>,
            GetRecordStartTimeByIndex: GetRecordStartTimeByIndex::<Identity, Impl, OFFSET>,
            GetRecordDurationByIndex: GetRecordDurationByIndex::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            GetVersionHash: GetVersionHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbAudioComponentDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetStreamContent(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetComponentType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetComponentTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetStreamType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSimulcastGroupTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetESMultiLingualFlag(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetMainComponentFlag(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn GetQualityIndicator(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSamplingRate(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLanguageCode(this: &Self::This, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetLanguageCode2(this: &Self::This, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetTextW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IIsdbAudioComponentDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbAudioComponentDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamContent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSimulcastGroupTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSimulcastGroupTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetESMultiLingualFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetESMultiLingualFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMainComponentFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfval: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMainComponentFlag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQualityIndicator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetQualityIndicator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSamplingRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSamplingRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode(this, ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetLanguageCode2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode2(this, ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbAudioComponentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbAudioComponentDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetStreamContent: GetStreamContent::<Identity, Impl, OFFSET>,
            GetComponentType: GetComponentType::<Identity, Impl, OFFSET>,
            GetComponentTag: GetComponentTag::<Identity, Impl, OFFSET>,
            GetStreamType: GetStreamType::<Identity, Impl, OFFSET>,
            GetSimulcastGroupTag: GetSimulcastGroupTag::<Identity, Impl, OFFSET>,
            GetESMultiLingualFlag: GetESMultiLingualFlag::<Identity, Impl, OFFSET>,
            GetMainComponentFlag: GetMainComponentFlag::<Identity, Impl, OFFSET>,
            GetQualityIndicator: GetQualityIndicator::<Identity, Impl, OFFSET>,
            GetSamplingRate: GetSamplingRate::<Identity, Impl, OFFSET>,
            GetLanguageCode: GetLanguageCode::<Identity, Impl, OFFSET>,
            GetLanguageCode2: GetLanguageCode2::<Identity, Impl, OFFSET>,
            GetTextW: GetTextW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbCAContractInformationDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCASystemId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCAUnitId(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordComponentTag(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetContractVerificationInfoLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetContractVerificationInfo(this: &Self::This, bbuflength: u8) -> ::windows_core::Result<u8>;
    fn GetFeeNameW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IIsdbCAContractInformationDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbCAContractInformationDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCASystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCASystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAUnitId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAUnitId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordComponentTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordComponentTag(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContractVerificationInfoLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContractVerificationInfoLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContractVerificationInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bbuflength: u8, pbbuf: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetContractVerificationInfo(this, ::core::mem::transmute_copy(&bbuflength)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbbuf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFeeNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAContractInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFeeNameW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbCAContractInformationDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCASystemId: GetCASystemId::<Identity, Impl, OFFSET>,
            GetCAUnitId: GetCAUnitId::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordComponentTag: GetRecordComponentTag::<Identity, Impl, OFFSET>,
            GetContractVerificationInfoLength: GetContractVerificationInfoLength::<Identity, Impl, OFFSET>,
            GetContractVerificationInfo: GetContractVerificationInfo::<Identity, Impl, OFFSET>,
            GetFeeNameW: GetFeeNameW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbCADescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCASystemId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetReservedBits(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCAPID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetPrivateDataBytes(this: &Self::This, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIsdbCADescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbCADescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCASystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCASystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReservedBits<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReservedBits(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAPID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAPID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPrivateDataBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCADescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPrivateDataBytes(this, ::core::mem::transmute_copy(&pbbufferlength), ::core::mem::transmute_copy(&pbbuffer)).into())
        }
        IIsdbCADescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCASystemId: GetCASystemId::<Identity, Impl, OFFSET>,
            GetReservedBits: GetReservedBits::<Identity, Impl, OFFSET>,
            GetCAPID: GetCAPID::<Identity, Impl, OFFSET>,
            GetPrivateDataBytes: GetPrivateDataBytes::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbCAServiceDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCASystemId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCABroadcasterGroupId(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetMessageControl(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetServiceIds(this: &Self::This, pbnumserviceids: *mut u8, pwserviceids: *mut u16) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIsdbCAServiceDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbCAServiceDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCASystemId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCASystemId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCABroadcasterGroupId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCABroadcasterGroupId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMessageControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMessageControl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceIds<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbCAServiceDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbnumserviceids: *mut u8, pwserviceids: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetServiceIds(this, ::core::mem::transmute_copy(&pbnumserviceids), ::core::mem::transmute_copy(&pwserviceids)).into())
        }
        IIsdbCAServiceDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCASystemId: GetCASystemId::<Identity, Impl, OFFSET>,
            GetCABroadcasterGroupId: GetCABroadcasterGroupId::<Identity, Impl, OFFSET>,
            GetMessageControl: GetMessageControl::<Identity, Impl, OFFSET>,
            GetServiceIds: GetServiceIds::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbComponentGroupDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetComponentGroupType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordGroupId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordNumberOfCAUnit(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordCAUnitCAUnitId(this: &Self::This, brecordindex: u8, bcaunitindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordCAUnitNumberOfComponents(this: &Self::This, brecordindex: u8, bcaunitindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordCAUnitComponentTag(this: &Self::This, brecordindex: u8, bcaunitindex: u8, bcomponentindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordTotalBitRate(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordTextW(this: &Self::This, brecordindex: u8, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IIsdbComponentGroupDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbComponentGroupDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentGroupType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentGroupType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordGroupId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordGroupId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordNumberOfCAUnit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordNumberOfCAUnit(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCAUnitCAUnitId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCAUnitCAUnitId(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&bcaunitindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCAUnitNumberOfComponents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCAUnitNumberOfComponents(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&bcaunitindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCAUnitComponentTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bcaunitindex: u8, bcomponentindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCAUnitComponentTag(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&bcaunitindex), ::core::mem::transmute_copy(&bcomponentindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTotalBitRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTotalBitRate(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbComponentGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTextW(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbComponentGroupDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetComponentGroupType: GetComponentGroupType::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordGroupId: GetRecordGroupId::<Identity, Impl, OFFSET>,
            GetRecordNumberOfCAUnit: GetRecordNumberOfCAUnit::<Identity, Impl, OFFSET>,
            GetRecordCAUnitCAUnitId: GetRecordCAUnitCAUnitId::<Identity, Impl, OFFSET>,
            GetRecordCAUnitNumberOfComponents: GetRecordCAUnitNumberOfComponents::<Identity, Impl, OFFSET>,
            GetRecordCAUnitComponentTag: GetRecordCAUnitComponentTag::<Identity, Impl, OFFSET>,
            GetRecordTotalBitRate: GetRecordTotalBitRate::<Identity, Impl, OFFSET>,
            GetRecordTextW: GetRecordTextW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbDataContentDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDataComponentId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetEntryComponent(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSelectorLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSelectorBytes(this: &Self::This, bbuflength: u8) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordComponentRef(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetLanguageCode(this: &Self::This, pszcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetTextW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IIsdbDataContentDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbDataContentDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDataComponentId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDataComponentId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEntryComponent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEntryComponent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectorLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectorLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSelectorBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bbuflength: u8, pbbuf: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSelectorBytes(this, ::core::mem::transmute_copy(&bbuflength)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbbuf, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordComponentRef<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordComponentRef(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLanguageCode(this, ::core::mem::transmute_copy(&pszcode)).into())
        }
        unsafe extern "system" fn GetTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDataContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbDataContentDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetDataComponentId: GetDataComponentId::<Identity, Impl, OFFSET>,
            GetEntryComponent: GetEntryComponent::<Identity, Impl, OFFSET>,
            GetSelectorLength: GetSelectorLength::<Identity, Impl, OFFSET>,
            GetSelectorBytes: GetSelectorBytes::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordComponentRef: GetRecordComponentRef::<Identity, Impl, OFFSET>,
            GetLanguageCode: GetLanguageCode::<Identity, Impl, OFFSET>,
            GetTextW: GetTextW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbDigitalCopyControlDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCopyControl(this: &Self::This, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordCopyControl(this: &Self::This, brecordindex: u8, pbcomponenttag: *mut u8, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIsdbDigitalCopyControlDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDigitalCopyControlDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbDigitalCopyControlDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDigitalCopyControlDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDigitalCopyControlDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCopyControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDigitalCopyControlDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCopyControl(this, ::core::mem::transmute_copy(&pbdigitalrecordingcontroldata), ::core::mem::transmute_copy(&pbcopycontroltype), ::core::mem::transmute_copy(&pbapscontroldata), ::core::mem::transmute_copy(&pbmaximumbitrate)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDigitalCopyControlDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCopyControl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDigitalCopyControlDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbcomponenttag: *mut u8, pbdigitalrecordingcontroldata: *mut u8, pbcopycontroltype: *mut u8, pbapscontroldata: *mut u8, pbmaximumbitrate: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordCopyControl(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pbcomponenttag), ::core::mem::transmute_copy(&pbdigitalrecordingcontroldata), ::core::mem::transmute_copy(&pbcopycontroltype), ::core::mem::transmute_copy(&pbapscontroldata), ::core::mem::transmute_copy(&pbmaximumbitrate)).into())
        }
        IIsdbDigitalCopyControlDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCopyControl: GetCopyControl::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordCopyControl: GetRecordCopyControl::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbDownloadContentDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetFlags(this: &Self::This, pfreboot: *mut super::super::super::Foundation::BOOL, pfaddon: *mut super::super::super::Foundation::BOOL, pfcompatibility: *mut super::super::super::Foundation::BOOL, pfmoduleinfo: *mut super::super::super::Foundation::BOOL, pftextinfo: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetComponentSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDownloadId(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTimeOutValueDII(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetLeakRate(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetComponentTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCompatiblityDescriptorLength(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCompatiblityDescriptor(this: &Self::This) -> ::windows_core::Result<*mut u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetRecordModuleId(this: &Self::This, wrecordindex: u16) -> ::windows_core::Result<u16>;
    fn GetRecordModuleSize(this: &Self::This, wrecordindex: u16) -> ::windows_core::Result<u32>;
    fn GetRecordModuleInfoLength(this: &Self::This, wrecordindex: u16) -> ::windows_core::Result<u8>;
    fn GetRecordModuleInfo(this: &Self::This, wrecordindex: u16) -> ::windows_core::Result<*mut u8>;
    fn GetTextLanguageCode(this: &Self::This, szcode: *mut u8) -> ::windows_core::Result<()>;
    fn GetTextW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IIsdbDownloadContentDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbDownloadContentDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfreboot: *mut super::super::super::Foundation::BOOL, pfaddon: *mut super::super::super::Foundation::BOOL, pfcompatibility: *mut super::super::super::Foundation::BOOL, pfmoduleinfo: *mut super::super::super::Foundation::BOOL, pftextinfo: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFlags(this, ::core::mem::transmute_copy(&pfreboot), ::core::mem::transmute_copy(&pfaddon), ::core::mem::transmute_copy(&pfcompatibility), ::core::mem::transmute_copy(&pfmoduleinfo), ::core::mem::transmute_copy(&pftextinfo)).into())
        }
        unsafe extern "system" fn GetComponentSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDownloadId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDownloadId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTimeOutValueDII<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTimeOutValueDII(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLeakRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLeakRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetComponentTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetComponentTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCompatiblityDescriptorLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwlength: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCompatiblityDescriptorLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwlength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCompatiblityDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbdata: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCompatiblityDescriptor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordModuleId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordModuleId(this, ::core::mem::transmute_copy(&wrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordModuleSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordModuleSize(this, ::core::mem::transmute_copy(&wrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordModuleInfoLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordModuleInfoLength(this, ::core::mem::transmute_copy(&wrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordModuleInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wrecordindex: u16, ppbdata: *mut *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordModuleInfo(this, ::core::mem::transmute_copy(&wrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbdata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTextLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTextLanguageCode(this, ::core::mem::transmute_copy(&szcode)).into())
        }
        unsafe extern "system" fn GetTextW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbDownloadContentDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTextW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbDownloadContentDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            GetComponentSize: GetComponentSize::<Identity, Impl, OFFSET>,
            GetDownloadId: GetDownloadId::<Identity, Impl, OFFSET>,
            GetTimeOutValueDII: GetTimeOutValueDII::<Identity, Impl, OFFSET>,
            GetLeakRate: GetLeakRate::<Identity, Impl, OFFSET>,
            GetComponentTag: GetComponentTag::<Identity, Impl, OFFSET>,
            GetCompatiblityDescriptorLength: GetCompatiblityDescriptorLength::<Identity, Impl, OFFSET>,
            GetCompatiblityDescriptor: GetCompatiblityDescriptor::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordModuleId: GetRecordModuleId::<Identity, Impl, OFFSET>,
            GetRecordModuleSize: GetRecordModuleSize::<Identity, Impl, OFFSET>,
            GetRecordModuleInfoLength: GetRecordModuleInfoLength::<Identity, Impl, OFFSET>,
            GetRecordModuleInfo: GetRecordModuleInfo::<Identity, Impl, OFFSET>,
            GetTextLanguageCode: GetTextLanguageCode::<Identity, Impl, OFFSET>,
            GetTextW: GetTextW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbEmergencyInformationDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetServiceId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u16>;
    fn GetStartEndFlag(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetSignalLevel(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetAreaCode(this: &Self::This, brecordindex: u8, ppwval: *mut *mut u16, pbnumareacodes: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIsdbEmergencyInformationDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbEmergencyInformationDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStartEndFlag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStartEndFlag(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSignalLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSignalLevel(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAreaCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEmergencyInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, ppwval: *mut *mut u16, pbnumareacodes: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAreaCode(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&ppwval), ::core::mem::transmute_copy(&pbnumareacodes)).into())
        }
        IIsdbEmergencyInformationDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetServiceId: GetServiceId::<Identity, Impl, OFFSET>,
            GetStartEndFlag: GetStartEndFlag::<Identity, Impl, OFFSET>,
            GetSignalLevel: GetSignalLevel::<Identity, Impl, OFFSET>,
            GetAreaCode: GetAreaCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbEventGroupDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetGroupType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordEvent(this: &Self::This, brecordindex: u8, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows_core::Result<()>;
    fn GetCountOfRefRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRefRecordEvent(this: &Self::This, brecordindex: u8, pworiginalnetworkid: *mut u16, pwtransportstreamid: *mut u16, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIsdbEventGroupDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbEventGroupDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGroupType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGroupType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordEvent(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pwserviceid), ::core::mem::transmute_copy(&pweventid)).into())
        }
        unsafe extern "system" fn GetCountOfRefRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRefRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRefRecordEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbEventGroupDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pworiginalnetworkid: *mut u16, pwtransportstreamid: *mut u16, pwserviceid: *mut u16, pweventid: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRefRecordEvent(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pworiginalnetworkid), ::core::mem::transmute_copy(&pwtransportstreamid), ::core::mem::transmute_copy(&pwserviceid), ::core::mem::transmute_copy(&pweventid)).into())
        }
        IIsdbEventGroupDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetGroupType: GetGroupType::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordEvent: GetRecordEvent::<Identity, Impl, OFFSET>,
            GetCountOfRefRecords: GetCountOfRefRecords::<Identity, Impl, OFFSET>,
            GetRefRecordEvent: GetRefRecordEvent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbHierarchicalTransmissionDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetFutureUse1(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetQualityLevel(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetFutureUse2(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetReferencePid(this: &Self::This) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IIsdbHierarchicalTransmissionDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbHierarchicalTransmissionDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFutureUse1<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFutureUse1(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetQualityLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetQualityLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFutureUse2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFutureUse2(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetReferencePid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbHierarchicalTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetReferencePid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbHierarchicalTransmissionDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetFutureUse1: GetFutureUse1::<Identity, Impl, OFFSET>,
            GetQualityLevel: GetQualityLevel::<Identity, Impl, OFFSET>,
            GetFutureUse2: GetFutureUse2::<Identity, Impl, OFFSET>,
            GetReferencePid: GetReferencePid::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbLogoTransmissionDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLogoTransmissionType(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLogoId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetLogoVersion(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetDownloadDataId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetLogoCharW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IIsdbLogoTransmissionDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbLogoTransmissionDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogoTransmissionType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogoTransmissionType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogoId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogoId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogoVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogoVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDownloadDataId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDownloadDataId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLogoCharW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbLogoTransmissionDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrchar: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLogoCharW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrchar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbLogoTransmissionDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetLogoTransmissionType: GetLogoTransmissionType::<Identity, Impl, OFFSET>,
            GetLogoId: GetLogoId::<Identity, Impl, OFFSET>,
            GetLogoVersion: GetLogoVersion::<Identity, Impl, OFFSET>,
            GetDownloadDataId: GetDownloadDataId::<Identity, Impl, OFFSET>,
            GetLogoCharW: GetLogoCharW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbSIParameterDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetParameterVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetUpdateTime(this: &Self::This) -> ::windows_core::Result<MPEG_DATE>;
    fn GetRecordNumberOfTable(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTableId(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetTableDescriptionLength(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetTableDescriptionBytes(this: &Self::This, brecordindex: u8, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IIsdbSIParameterDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbSIParameterDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetParameterVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetParameterVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUpdateTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut MPEG_DATE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUpdateTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordNumberOfTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordNumberOfTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableId(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptionLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptionLength(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptionBytes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSIParameterDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbbufferlength: *mut u8, pbbuffer: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptionBytes(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&pbbufferlength), ::core::mem::transmute_copy(&pbbuffer)).into())
        }
        IIsdbSIParameterDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetParameterVersion: GetParameterVersion::<Identity, Impl, OFFSET>,
            GetUpdateTime: GetUpdateTime::<Identity, Impl, OFFSET>,
            GetRecordNumberOfTable: GetRecordNumberOfTable::<Identity, Impl, OFFSET>,
            GetTableId: GetTableId::<Identity, Impl, OFFSET>,
            GetTableDescriptionLength: GetTableDescriptionLength::<Identity, Impl, OFFSET>,
            GetTableDescriptionBytes: GetTableDescriptionBytes::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IIsdbSeriesDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSeriesId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetRepeatLabel(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetProgramPattern(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetExpireDate(this: &Self::This, pfvalid: *mut super::super::super::Foundation::BOOL, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::Result<()>;
    fn GetEpisodeNumber(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetLastEpisodeNumber(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetSeriesNameW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IIsdbSeriesDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbSeriesDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSeriesId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSeriesId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRepeatLabel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRepeatLabel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProgramPattern<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProgramPattern(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExpireDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfvalid: *mut super::super::super::Foundation::BOOL, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExpireDate(this, ::core::mem::transmute_copy(&pfvalid), ::core::mem::transmute_copy(&pmdtval)).into())
        }
        unsafe extern "system" fn GetEpisodeNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEpisodeNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastEpisodeNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastEpisodeNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSeriesNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSeriesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSeriesNameW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbSeriesDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetSeriesId: GetSeriesId::<Identity, Impl, OFFSET>,
            GetRepeatLabel: GetRepeatLabel::<Identity, Impl, OFFSET>,
            GetProgramPattern: GetProgramPattern::<Identity, Impl, OFFSET>,
            GetExpireDate: GetExpireDate::<Identity, Impl, OFFSET>,
            GetEpisodeNumber: GetEpisodeNumber::<Identity, Impl, OFFSET>,
            GetLastEpisodeNumber: GetLastEpisodeNumber::<Identity, Impl, OFFSET>,
            GetSeriesNameW: GetSeriesNameW::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbSiParser2_Impl: ::windows_core::BaseImpl + IDvbSiParser2_Impl {
    fn GetSDT2(this: &Self::This, tableid: u8, pwtransportstreamid: *const u16) -> ::windows_core::Result<IISDB_SDT>;
    fn GetBIT(this: &Self::This, tableid: u8, pworiginalnetworkid: *const u16) -> ::windows_core::Result<IISDB_BIT>;
    fn GetNBIT(this: &Self::This, tableid: u8, pworiginalnetworkid: *const u16) -> ::windows_core::Result<IISDB_NBIT>;
    fn GetLDT(this: &Self::This, tableid: u8, pworiginalserviceid: *const u16) -> ::windows_core::Result<IISDB_LDT>;
    fn GetSDTT(this: &Self::This, tableid: u8, pwtableidext: *const u16) -> ::windows_core::Result<IISDB_SDTT>;
    fn GetCDT(this: &Self::This, tableid: u8, bsectionnumber: u8, pwdownloaddataid: *const u16) -> ::windows_core::Result<IISDB_CDT>;
    fn GetEMM(this: &Self::This, pid: u16, wtableidext: u16) -> ::windows_core::Result<IISDB_EMM>;
}
impl ::windows_core::Iids for IIsdbSiParser2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IDvbSiParser2);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbSiParser2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSDT2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pwtransportstreamid: *const u16, ppsdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSDT2(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pwtransportstreamid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalnetworkid: *const u16, ppbit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBIT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pworiginalnetworkid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppbit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNBIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalnetworkid: *const u16, ppnbit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNBIT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pworiginalnetworkid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppnbit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLDT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pworiginalserviceid: *const u16, ppldt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLDT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pworiginalserviceid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppldt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSDTT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, pwtableidext: *const u16, ppsdtt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSDTT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&pwtableidext)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsdtt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCDT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tableid: u8, bsectionnumber: u8, pwdownloaddataid: *const u16, ppcdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCDT(this, ::core::mem::transmute_copy(&tableid), ::core::mem::transmute_copy(&bsectionnumber), ::core::mem::transmute_copy(&pwdownloaddataid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEMM<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbSiParser2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, wtableidext: u16, ppemm: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEMM(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&wtableidext)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppemm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbSiParser2_Vtbl {
            base__: <IDvbSiParser2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSDT2: GetSDT2::<Identity, Impl, OFFSET>,
            GetBIT: GetBIT::<Identity, Impl, OFFSET>,
            GetNBIT: GetNBIT::<Identity, Impl, OFFSET>,
            GetLDT: GetLDT::<Identity, Impl, OFFSET>,
            GetSDTT: GetSDTT::<Identity, Impl, OFFSET>,
            GetCDT: GetCDT::<Identity, Impl, OFFSET>,
            GetEMM: GetEMM::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbTSInformationDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRemoteControlKeyId(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTSNameW(this: &Self::This, convmode: DVB_STRCONV_MODE) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordTransmissionTypeInfo(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordNumberOfServices(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u8>;
    fn GetRecordServiceIdByIndex(this: &Self::This, brecordindex: u8, bserviceindex: u8) -> ::windows_core::Result<u16>;
}
impl ::windows_core::Iids for IIsdbTSInformationDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbTSInformationDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRemoteControlKeyId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRemoteControlKeyId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTSNameW<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, convmode: DVB_STRCONV_MODE, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTSNameW(this, ::core::mem::transmute_copy(&convmode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordTransmissionTypeInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordTransmissionTypeInfo(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordNumberOfServices<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordNumberOfServices(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordServiceIdByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTSInformationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, bserviceindex: u8, pdwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordServiceIdByIndex(this, ::core::mem::transmute_copy(&brecordindex), ::core::mem::transmute_copy(&bserviceindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbTSInformationDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetRemoteControlKeyId: GetRemoteControlKeyId::<Identity, Impl, OFFSET>,
            GetTSNameW: GetTSNameW::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordTransmissionTypeInfo: GetRecordTransmissionTypeInfo::<Identity, Impl, OFFSET>,
            GetRecordNumberOfServices: GetRecordNumberOfServices::<Identity, Impl, OFFSET>,
            GetRecordServiceIdByIndex: GetRecordServiceIdByIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IIsdbTerrestrialDeliverySystemDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetAreaCode(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetGuardInterval(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetTransmissionMode(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRecordFrequency(this: &Self::This, brecordindex: u8) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IIsdbTerrestrialDeliverySystemDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IIsdbTerrestrialDeliverySystemDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAreaCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAreaCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetGuardInterval<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetGuardInterval(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTransmissionMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransmissionMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IIsdbTerrestrialDeliverySystemDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brecordindex: u8, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordFrequency(this, ::core::mem::transmute_copy(&brecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IIsdbTerrestrialDeliverySystemDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetAreaCode: GetAreaCode::<Identity, Impl, OFFSET>,
            GetGuardInterval: GetGuardInterval::<Identity, Impl, OFFSET>,
            GetTransmissionMode: GetTransmissionMode::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordFrequency: GetRecordFrequency::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ILanguageComponentType_Impl: ::windows_core::BaseImpl + IComponentType_Impl {
    fn LangID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLangID(this: &Self::This, langid: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ILanguageComponentType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IComponentType);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILanguageComponentType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILanguageComponentType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LangID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILanguageComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, langid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LangID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(langid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLangID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILanguageComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, langid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLangID(this, ::core::mem::transmute_copy(&langid)).into())
        }
        ILanguageComponentType_Vtbl {
            base__: <IComponentType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LangID: LangID::<Identity, Impl, OFFSET>,
            SetLangID: SetLangID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ILocator_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn CarrierFrequency(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCarrierFrequency(this: &Self::This, frequency: i32) -> ::windows_core::Result<()>;
    fn InnerFEC(this: &Self::This) -> ::windows_core::Result<super::FECMethod>;
    fn SetInnerFEC(this: &Self::This, fec: super::FECMethod) -> ::windows_core::Result<()>;
    fn InnerFECRate(this: &Self::This) -> ::windows_core::Result<super::BinaryConvolutionCodeRate>;
    fn SetInnerFECRate(this: &Self::This, fec: super::BinaryConvolutionCodeRate) -> ::windows_core::Result<()>;
    fn OuterFEC(this: &Self::This) -> ::windows_core::Result<super::FECMethod>;
    fn SetOuterFEC(this: &Self::This, fec: super::FECMethod) -> ::windows_core::Result<()>;
    fn OuterFECRate(this: &Self::This) -> ::windows_core::Result<super::BinaryConvolutionCodeRate>;
    fn SetOuterFECRate(this: &Self::This, fec: super::BinaryConvolutionCodeRate) -> ::windows_core::Result<()>;
    fn Modulation(this: &Self::This) -> ::windows_core::Result<super::ModulationType>;
    fn SetModulation(this: &Self::This, modulation: super::ModulationType) -> ::windows_core::Result<()>;
    fn SymbolRate(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetSymbolRate(this: &Self::This, rate: i32) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<ILocator>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ILocator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ILocator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CarrierFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frequency: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CarrierFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(frequency, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCarrierFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, frequency: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCarrierFrequency(this, ::core::mem::transmute_copy(&frequency)).into())
        }
        unsafe extern "system" fn InnerFEC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: *mut super::FECMethod) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InnerFEC(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInnerFEC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: super::FECMethod) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInnerFEC(this, ::core::mem::transmute_copy(&fec)).into())
        }
        unsafe extern "system" fn InnerFECRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: *mut super::BinaryConvolutionCodeRate) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InnerFECRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInnerFECRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: super::BinaryConvolutionCodeRate) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInnerFECRate(this, ::core::mem::transmute_copy(&fec)).into())
        }
        unsafe extern "system" fn OuterFEC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: *mut super::FECMethod) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OuterFEC(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOuterFEC<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: super::FECMethod) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOuterFEC(this, ::core::mem::transmute_copy(&fec)).into())
        }
        unsafe extern "system" fn OuterFECRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: *mut super::BinaryConvolutionCodeRate) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OuterFECRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOuterFECRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fec: super::BinaryConvolutionCodeRate) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOuterFECRate(this, ::core::mem::transmute_copy(&fec)).into())
        }
        unsafe extern "system" fn Modulation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulation: *mut super::ModulationType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Modulation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(modulation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetModulation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modulation: super::ModulationType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetModulation(this, ::core::mem::transmute_copy(&modulation)).into())
        }
        unsafe extern "system" fn SymbolRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rate: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SymbolRate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSymbolRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rate: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSymbolRate(this, ::core::mem::transmute_copy(&rate)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ILocator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newlocator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newlocator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ILocator_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CarrierFrequency: CarrierFrequency::<Identity, Impl, OFFSET>,
            SetCarrierFrequency: SetCarrierFrequency::<Identity, Impl, OFFSET>,
            InnerFEC: InnerFEC::<Identity, Impl, OFFSET>,
            SetInnerFEC: SetInnerFEC::<Identity, Impl, OFFSET>,
            InnerFECRate: InnerFECRate::<Identity, Impl, OFFSET>,
            SetInnerFECRate: SetInnerFECRate::<Identity, Impl, OFFSET>,
            OuterFEC: OuterFEC::<Identity, Impl, OFFSET>,
            SetOuterFEC: SetOuterFEC::<Identity, Impl, OFFSET>,
            OuterFECRate: OuterFECRate::<Identity, Impl, OFFSET>,
            SetOuterFECRate: SetOuterFECRate::<Identity, Impl, OFFSET>,
            Modulation: Modulation::<Identity, Impl, OFFSET>,
            SetModulation: SetModulation::<Identity, Impl, OFFSET>,
            SymbolRate: SymbolRate::<Identity, Impl, OFFSET>,
            SetSymbolRate: SetSymbolRate::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMPEG2Component_Impl: ::windows_core::BaseImpl + IComponent_Impl {
    fn PID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetPID(this: &Self::This, pid: i32) -> ::windows_core::Result<()>;
    fn PCRPID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetPCRPID(this: &Self::This, pcrpid: i32) -> ::windows_core::Result<()>;
    fn ProgramNumber(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetProgramNumber(this: &Self::This, programnumber: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMPEG2Component {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IComponent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMPEG2Component {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPID(this, ::core::mem::transmute_copy(&pid)).into())
        }
        unsafe extern "system" fn PCRPID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcrpid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PCRPID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcrpid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPCRPID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcrpid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPCRPID(this, ::core::mem::transmute_copy(&pcrpid)).into())
        }
        unsafe extern "system" fn ProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, programnumber: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProgramNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(programnumber, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2Component_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, programnumber: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgramNumber(this, ::core::mem::transmute_copy(&programnumber)).into())
        }
        IMPEG2Component_Vtbl {
            base__: <IComponent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PID: PID::<Identity, Impl, OFFSET>,
            SetPID: SetPID::<Identity, Impl, OFFSET>,
            PCRPID: PCRPID::<Identity, Impl, OFFSET>,
            SetPCRPID: SetPCRPID::<Identity, Impl, OFFSET>,
            ProgramNumber: ProgramNumber::<Identity, Impl, OFFSET>,
            SetProgramNumber: SetProgramNumber::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMPEG2ComponentType_Impl: ::windows_core::BaseImpl + ILanguageComponentType_Impl {
    fn StreamType(this: &Self::This) -> ::windows_core::Result<super::MPEG2StreamType>;
    fn SetStreamType(this: &Self::This, mp2streamtype: super::MPEG2StreamType) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMPEG2ComponentType {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ILanguageComponentType);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2ComponentType_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMPEG2ComponentType {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StreamType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2ComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mp2streamtype: *mut super::MPEG2StreamType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StreamType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mp2streamtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStreamType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2ComponentType_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mp2streamtype: super::MPEG2StreamType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamType(this, ::core::mem::transmute_copy(&mp2streamtype)).into())
        }
        IMPEG2ComponentType_Vtbl {
            base__: <ILanguageComponentType as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StreamType: StreamType::<Identity, Impl, OFFSET>,
            SetStreamType: SetStreamType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMPEG2TuneRequest_Impl: ::windows_core::BaseImpl + ITuneRequest_Impl {
    fn TSID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetTSID(this: &Self::This, tsid: i32) -> ::windows_core::Result<()>;
    fn ProgNo(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetProgNo(this: &Self::This, progno: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMPEG2TuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuneRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMPEG2TuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tsid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TSID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tsid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTSID(this, ::core::mem::transmute_copy(&tsid)).into())
        }
        unsafe extern "system" fn ProgNo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, progno: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProgNo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(progno, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProgNo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, progno: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProgNo(this, ::core::mem::transmute_copy(&progno)).into())
        }
        IMPEG2TuneRequest_Vtbl {
            base__: <ITuneRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TSID: TSID::<Identity, Impl, OFFSET>,
            SetTSID: SetTSID::<Identity, Impl, OFFSET>,
            ProgNo: ProgNo::<Identity, Impl, OFFSET>,
            SetProgNo: SetProgNo::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMPEG2TuneRequestFactory_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn CreateTuneRequest(this: &Self::This, tuningspace: ::core::option::Option<&ITuningSpace>) -> ::windows_core::Result<IMPEG2TuneRequest>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMPEG2TuneRequestFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequestFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMPEG2TuneRequestFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateTuneRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequestFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTuneRequest(this, ::windows_core::from_raw_borrowed(&tuningspace)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMPEG2TuneRequestFactory_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateTuneRequest: CreateTuneRequest::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IMPEG2TuneRequestSupport_Impl: ::windows_core::BaseImpl {}
impl ::windows_core::Iids for IMPEG2TuneRequestSupport {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2TuneRequestSupport_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMPEG2TuneRequestSupport {
    const VTABLE: Self::Vtable = { IMPEG2TuneRequestSupport_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IMPEG2_TIF_CONTROL_Impl: ::windows_core::BaseImpl {
    fn RegisterTIF(this: &Self::This, punktif: ::core::option::Option<&::windows_core::IUnknown>, ppvregistrationcontext: *mut u32) -> ::windows_core::Result<()>;
    fn UnregisterTIF(this: &Self::This, pvregistrationcontext: u32) -> ::windows_core::Result<()>;
    fn AddPIDs(this: &Self::This, ulcpids: u32, pulpids: *const u32) -> ::windows_core::Result<()>;
    fn DeletePIDs(this: &Self::This, ulcpids: u32, pulpids: *const u32) -> ::windows_core::Result<()>;
    fn GetPIDCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetPIDs(this: &Self::This, pulcpids: *mut u32, pulpids: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMPEG2_TIF_CONTROL {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMPEG2_TIF_CONTROL {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RegisterTIF<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punktif: *mut ::core::ffi::c_void, ppvregistrationcontext: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterTIF(this, ::windows_core::from_raw_borrowed(&punktif), ::core::mem::transmute_copy(&ppvregistrationcontext)).into())
        }
        unsafe extern "system" fn UnregisterTIF<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvregistrationcontext: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnregisterTIF(this, ::core::mem::transmute_copy(&pvregistrationcontext)).into())
        }
        unsafe extern "system" fn AddPIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcpids: u32, pulpids: *const u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPIDs(this, ::core::mem::transmute_copy(&ulcpids), ::core::mem::transmute_copy(&pulpids)).into())
        }
        unsafe extern "system" fn DeletePIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcpids: u32, pulpids: *const u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeletePIDs(this, ::core::mem::transmute_copy(&ulcpids), ::core::mem::transmute_copy(&pulpids)).into())
        }
        unsafe extern "system" fn GetPIDCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulcpids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPIDCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pulcpids, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMPEG2_TIF_CONTROL_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulcpids: *mut u32, pulpids: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPIDs(this, ::core::mem::transmute_copy(&pulcpids), ::core::mem::transmute_copy(&pulpids)).into())
        }
        IMPEG2_TIF_CONTROL_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RegisterTIF: RegisterTIF::<Identity, Impl, OFFSET>,
            UnregisterTIF: UnregisterTIF::<Identity, Impl, OFFSET>,
            AddPIDs: AddPIDs::<Identity, Impl, OFFSET>,
            DeletePIDs: DeletePIDs::<Identity, Impl, OFFSET>,
            GetPIDCount: GetPIDCount::<Identity, Impl, OFFSET>,
            GetPIDs: GetPIDs::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSEventBinder_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Bind(this: &Self::This, peventobject: ::core::option::Option<&super::super::super::System::Com::IDispatch>, eventname: &::windows_core::BSTR, eventhandler: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn Unbind(this: &Self::This, cancelcookie: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSEventBinder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSEventBinder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSEventBinder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Bind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSEventBinder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, peventobject: *mut ::core::ffi::c_void, eventname: ::std::mem::MaybeUninit<::windows_core::BSTR>, eventhandler: ::std::mem::MaybeUninit<::windows_core::BSTR>, cancelid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Bind(this, ::windows_core::from_raw_borrowed(&peventobject), ::core::mem::transmute(&eventname), ::core::mem::transmute(&eventhandler)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(cancelid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Unbind<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSEventBinder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cancelcookie: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unbind(this, ::core::mem::transmute_copy(&cancelcookie)).into())
        }
        IMSEventBinder_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Bind: Bind::<Identity, Impl, OFFSET>,
            Unbind: Unbind::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAnalogTuner_Impl: ::windows_core::BaseImpl + IMSVidTuner_Impl {
    fn Channel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetChannel(this: &Self::This, channel: i32) -> ::windows_core::Result<()>;
    fn VideoFrequency(this: &Self::This) -> ::windows_core::Result<i32>;
    fn AudioFrequency(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CountryCode(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCountryCode(this: &Self::This, lcc: i32) -> ::windows_core::Result<()>;
    fn SAP(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSAP(this: &Self::This, fsapon: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ChannelAvailable(this: &Self::This, nchannel: i32, signalstrength: *mut i32, fsignalpresent: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAnalogTuner {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidTuner);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAnalogTuner {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Channel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Channel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(channel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetChannel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, channel: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetChannel(this, ::core::mem::transmute_copy(&channel)).into())
        }
        unsafe extern "system" fn VideoFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AudioFrequency<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioFrequency(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcc: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CountryCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCountryCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcc: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCountryCode(this, ::core::mem::transmute_copy(&lcc)).into())
        }
        unsafe extern "system" fn SAP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfsapon: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SAP(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfsapon, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSAP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fsapon: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSAP(this, ::core::mem::transmute_copy(&fsapon)).into())
        }
        unsafe extern "system" fn ChannelAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nchannel: i32, signalstrength: *mut i32, fsignalpresent: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChannelAvailable(this, ::core::mem::transmute_copy(&nchannel), ::core::mem::transmute_copy(&signalstrength), ::core::mem::transmute_copy(&fsignalpresent)).into())
        }
        IMSVidAnalogTuner_Vtbl {
            base__: <IMSVidTuner as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Channel: Channel::<Identity, Impl, OFFSET>,
            SetChannel: SetChannel::<Identity, Impl, OFFSET>,
            VideoFrequency: VideoFrequency::<Identity, Impl, OFFSET>,
            AudioFrequency: AudioFrequency::<Identity, Impl, OFFSET>,
            CountryCode: CountryCode::<Identity, Impl, OFFSET>,
            SetCountryCode: SetCountryCode::<Identity, Impl, OFFSET>,
            SAP: SAP::<Identity, Impl, OFFSET>,
            SetSAP: SetSAP::<Identity, Impl, OFFSET>,
            ChannelAvailable: ChannelAvailable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAnalogTuner2_Impl: ::windows_core::BaseImpl + IMSVidAnalogTuner_Impl {
    fn TVFormats(this: &Self::This) -> ::windows_core::Result<i32>;
    fn TunerModes(this: &Self::This) -> ::windows_core::Result<i32>;
    fn NumAuxInputs(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAnalogTuner2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidAnalogTuner);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAnalogTuner2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TVFormats<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, formats: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TVFormats(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(formats, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TunerModes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, modes: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TunerModes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(modes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NumAuxInputs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTuner2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, inputs: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NumAuxInputs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(inputs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidAnalogTuner2_Vtbl {
            base__: <IMSVidAnalogTuner as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TVFormats: TVFormats::<Identity, Impl, OFFSET>,
            TunerModes: TunerModes::<Identity, Impl, OFFSET>,
            NumAuxInputs: NumAuxInputs::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAnalogTunerEvent_Impl: ::windows_core::BaseImpl + IMSVidTunerEvent_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAnalogTunerEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidTunerEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAnalogTunerEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAnalogTunerEvent {
    const VTABLE: Self::Vtable = { IMSVidAnalogTunerEvent_Vtbl { base__: <IMSVidTunerEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAudioRenderer_Impl: ::windows_core::BaseImpl + IMSVidOutputDevice_Impl {
    fn SetVolume(this: &Self::This, lvol: i32) -> ::windows_core::Result<()>;
    fn Volume(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetBalance(this: &Self::This, lbal: i32) -> ::windows_core::Result<()>;
    fn Balance(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAudioRenderer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRenderer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAudioRenderer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lvol: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVolume(this, ::core::mem::transmute_copy(&lvol)).into())
        }
        unsafe extern "system" fn Volume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lvol: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Volume(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lvol, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBalance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lbal: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBalance(this, ::core::mem::transmute_copy(&lbal)).into())
        }
        unsafe extern "system" fn Balance<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lbal: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Balance(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lbal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidAudioRenderer_Vtbl {
            base__: <IMSVidOutputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetVolume: SetVolume::<Identity, Impl, OFFSET>,
            Volume: Volume::<Identity, Impl, OFFSET>,
            SetBalance: SetBalance::<Identity, Impl, OFFSET>,
            Balance: Balance::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAudioRendererDevices_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IMSVidAudioRenderer>;
    fn Add(this: &Self::This, pdb: ::core::option::Option<&IMSVidAudioRenderer>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAudioRendererDevices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererDevices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAudioRendererDevices {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&v)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pdb)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&v)).into())
        }
        IMSVidAudioRendererDevices_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAudioRendererEvent_Impl: ::windows_core::BaseImpl + IMSVidOutputDeviceEvent_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAudioRendererEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAudioRendererEvent {
    const VTABLE: Self::Vtable = { IMSVidAudioRendererEvent_Vtbl { base__: <IMSVidOutputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidAudioRendererEvent2_Impl: ::windows_core::BaseImpl + IMSVidAudioRendererEvent_Impl {
    fn AVDecAudioDualMono(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVAudioSampleRate(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVAudioChannelConfig(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVAudioChannelCount(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVDecCommonMeanBitRate(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVDDSurroundMode(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVDecCommonInputFormat(this: &Self::This) -> ::windows_core::Result<()>;
    fn AVDecCommonOutputFormat(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidAudioRendererEvent2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidAudioRendererEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidAudioRendererEvent2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AVDecAudioDualMono<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVDecAudioDualMono(this).into())
        }
        unsafe extern "system" fn AVAudioSampleRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVAudioSampleRate(this).into())
        }
        unsafe extern "system" fn AVAudioChannelConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVAudioChannelConfig(this).into())
        }
        unsafe extern "system" fn AVAudioChannelCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVAudioChannelCount(this).into())
        }
        unsafe extern "system" fn AVDecCommonMeanBitRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVDecCommonMeanBitRate(this).into())
        }
        unsafe extern "system" fn AVDDSurroundMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVDDSurroundMode(this).into())
        }
        unsafe extern "system" fn AVDecCommonInputFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVDecCommonInputFormat(this).into())
        }
        unsafe extern "system" fn AVDecCommonOutputFormat<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidAudioRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AVDecCommonOutputFormat(this).into())
        }
        IMSVidAudioRendererEvent2_Vtbl {
            base__: <IMSVidAudioRendererEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AVDecAudioDualMono: AVDecAudioDualMono::<Identity, Impl, OFFSET>,
            AVAudioSampleRate: AVAudioSampleRate::<Identity, Impl, OFFSET>,
            AVAudioChannelConfig: AVAudioChannelConfig::<Identity, Impl, OFFSET>,
            AVAudioChannelCount: AVAudioChannelCount::<Identity, Impl, OFFSET>,
            AVDecCommonMeanBitRate: AVDecCommonMeanBitRate::<Identity, Impl, OFFSET>,
            AVDDSurroundMode: AVDDSurroundMode::<Identity, Impl, OFFSET>,
            AVDecCommonInputFormat: AVDecCommonInputFormat::<Identity, Impl, OFFSET>,
            AVDecCommonOutputFormat: AVDecCommonOutputFormat::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidClosedCaptioning_Impl: ::windows_core::BaseImpl + IMSVidFeature_Impl {
    fn Enable(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetEnable(this: &Self::This, on: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidClosedCaptioning {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFeature);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidClosedCaptioning {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Enable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, on: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Enable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(on, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEnable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, on: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnable(this, ::core::mem::transmute_copy(&on)).into())
        }
        IMSVidClosedCaptioning_Vtbl {
            base__: <IMSVidFeature as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Enable: Enable::<Identity, Impl, OFFSET>,
            SetEnable: SetEnable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidClosedCaptioning2_Impl: ::windows_core::BaseImpl + IMSVidClosedCaptioning_Impl {
    fn Service(this: &Self::This) -> ::windows_core::Result<MSVidCCService>;
    fn SetService(this: &Self::This, on: MSVidCCService) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidClosedCaptioning2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidClosedCaptioning);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidClosedCaptioning2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Service<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, on: *mut MSVidCCService) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Service(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(on, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, on: MSVidCCService) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetService(this, ::core::mem::transmute_copy(&on)).into())
        }
        IMSVidClosedCaptioning2_Vtbl {
            base__: <IMSVidClosedCaptioning as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Service: Service::<Identity, Impl, OFFSET>,
            SetService: SetService::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidClosedCaptioning3_Impl: ::windows_core::BaseImpl + IMSVidClosedCaptioning2_Impl {
    fn TeleTextFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidClosedCaptioning3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidClosedCaptioning2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidClosedCaptioning3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TeleTextFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidClosedCaptioning3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkttfilter: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TeleTextFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(punkttfilter, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidClosedCaptioning3_Vtbl { base__: <IMSVidClosedCaptioning2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, TeleTextFilter: TeleTextFilter::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IMSVidCompositionSegment_Impl: ::windows_core::BaseImpl + IMSVidGraphSegment_Impl {
    fn Compose(this: &Self::This, upstream: ::core::option::Option<&IMSVidGraphSegment>, downstream: ::core::option::Option<&IMSVidGraphSegment>) -> ::windows_core::Result<()>;
    fn Up(this: &Self::This) -> ::windows_core::Result<IMSVidGraphSegment>;
    fn Down(this: &Self::This) -> ::windows_core::Result<IMSVidGraphSegment>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IMSVidCompositionSegment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidGraphSegment);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCompositionSegment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidCompositionSegment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Compose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCompositionSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, upstream: *mut ::core::ffi::c_void, downstream: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Compose(this, ::windows_core::from_raw_borrowed(&upstream), ::windows_core::from_raw_borrowed(&downstream)).into())
        }
        unsafe extern "system" fn Up<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCompositionSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, upstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Up(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(upstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Down<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCompositionSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, downstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Down(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(downstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidCompositionSegment_Vtbl {
            base__: <IMSVidGraphSegment as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Compose: Compose::<Identity, Impl, OFFSET>,
            Up: Up::<Identity, Impl, OFFSET>,
            Down: Down::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidCtl_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn AutoSize(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetAutoSize(this: &Self::This, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn BackColor(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetBackColor(this: &Self::This, backcolor: u32) -> ::windows_core::Result<()>;
    fn Enabled(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetEnabled(this: &Self::This, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn TabStop(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetTabStop(this: &Self::This, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Window(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::HWND>;
    fn Refresh(this: &Self::This) -> ::windows_core::Result<()>;
    fn DisplaySize(this: &Self::This) -> ::windows_core::Result<DisplaySizeList>;
    fn SetDisplaySize(this: &Self::This, newvalue: DisplaySizeList) -> ::windows_core::Result<()>;
    fn MaintainAspectRatio(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetMaintainAspectRatio(this: &Self::This, newvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ColorKey(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetColorKey(this: &Self::This, newvalue: u32) -> ::windows_core::Result<()>;
    fn get_InputsAvailable(this: &Self::This, categoryguid: &::windows_core::BSTR) -> ::windows_core::Result<IMSVidInputDevices>;
    fn get_OutputsAvailable(this: &Self::This, categoryguid: &::windows_core::BSTR) -> ::windows_core::Result<IMSVidOutputDevices>;
    fn get__InputsAvailable(this: &Self::This, categoryguid: *const ::windows_core::GUID) -> ::windows_core::Result<IMSVidInputDevices>;
    fn get__OutputsAvailable(this: &Self::This, categoryguid: *const ::windows_core::GUID) -> ::windows_core::Result<IMSVidOutputDevices>;
    fn VideoRenderersAvailable(this: &Self::This) -> ::windows_core::Result<IMSVidVideoRendererDevices>;
    fn AudioRenderersAvailable(this: &Self::This) -> ::windows_core::Result<IMSVidAudioRendererDevices>;
    fn FeaturesAvailable(this: &Self::This) -> ::windows_core::Result<IMSVidFeatures>;
    fn InputActive(this: &Self::This) -> ::windows_core::Result<IMSVidInputDevice>;
    fn SetInputActive(this: &Self::This, pval: ::core::option::Option<&IMSVidInputDevice>) -> ::windows_core::Result<()>;
    fn OutputsActive(this: &Self::This) -> ::windows_core::Result<IMSVidOutputDevices>;
    fn SetOutputsActive(this: &Self::This, pval: ::core::option::Option<&IMSVidOutputDevices>) -> ::windows_core::Result<()>;
    fn VideoRendererActive(this: &Self::This) -> ::windows_core::Result<IMSVidVideoRenderer>;
    fn SetVideoRendererActive(this: &Self::This, pval: ::core::option::Option<&IMSVidVideoRenderer>) -> ::windows_core::Result<()>;
    fn AudioRendererActive(this: &Self::This) -> ::windows_core::Result<IMSVidAudioRenderer>;
    fn SetAudioRendererActive(this: &Self::This, pval: ::core::option::Option<&IMSVidAudioRenderer>) -> ::windows_core::Result<()>;
    fn FeaturesActive(this: &Self::This) -> ::windows_core::Result<IMSVidFeatures>;
    fn SetFeaturesActive(this: &Self::This, pval: ::core::option::Option<&IMSVidFeatures>) -> ::windows_core::Result<()>;
    fn State(this: &Self::This) -> ::windows_core::Result<MSVidCtlStateList>;
    fn View(this: &Self::This, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Build(this: &Self::This) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
    fn Run(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn Decompose(this: &Self::This) -> ::windows_core::Result<()>;
    fn DisableVideo(this: &Self::This) -> ::windows_core::Result<()>;
    fn DisableAudio(this: &Self::This) -> ::windows_core::Result<()>;
    fn ViewNext(this: &Self::This, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidCtl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidCtl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AutoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AutoSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAutoSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAutoSize(this, ::core::mem::transmute_copy(&vbool)).into())
        }
        unsafe extern "system" fn BackColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, backcolor: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BackColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(backcolor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBackColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, backcolor: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBackColor(this, ::core::mem::transmute_copy(&backcolor)).into())
        }
        unsafe extern "system" fn Enabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Enabled(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnabled(this, ::core::mem::transmute_copy(&vbool)).into())
        }
        unsafe extern "system" fn TabStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbool: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TabStop(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTabStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, vbool: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTabStop(this, ::core::mem::transmute_copy(&vbool)).into())
        }
        unsafe extern "system" fn Window<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phwnd: *mut super::super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Window(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phwnd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Refresh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Refresh(this).into())
        }
        unsafe extern "system" fn DisplaySize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentvalue: *mut DisplaySizeList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DisplaySize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(currentvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDisplaySize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newvalue: DisplaySizeList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDisplaySize(this, ::core::mem::transmute_copy(&newvalue)).into())
        }
        unsafe extern "system" fn MaintainAspectRatio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaintainAspectRatio(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(currentvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaintainAspectRatio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaintainAspectRatio(this, ::core::mem::transmute_copy(&newvalue)).into())
        }
        unsafe extern "system" fn ColorKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ColorKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(currentvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetColorKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newvalue: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColorKey(this, ::core::mem::transmute_copy(&newvalue)).into())
        }
        unsafe extern "system" fn get_InputsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, categoryguid: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_InputsAvailable(this, ::core::mem::transmute(&categoryguid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_OutputsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, categoryguid: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_OutputsAvailable(this, ::core::mem::transmute(&categoryguid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get__InputsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, categoryguid: *const ::windows_core::GUID, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get__InputsAvailable(this, ::core::mem::transmute_copy(&categoryguid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get__OutputsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, categoryguid: *const ::windows_core::GUID, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get__OutputsAvailable(this, ::core::mem::transmute_copy(&categoryguid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VideoRenderersAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoRenderersAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AudioRenderersAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioRenderersAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FeaturesAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FeaturesAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InputActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InputActive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInputActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInputActive(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn OutputsActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OutputsActive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputsActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputsActive(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn VideoRendererActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoRendererActive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVideoRendererActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoRendererActive(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn AudioRendererActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioRendererActive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAudioRendererActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAudioRendererActive(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn FeaturesActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FeaturesActive(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFeaturesActive<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFeaturesActive(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn State<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstate: *mut MSVidCtlStateList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::State(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lstate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn View<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::View(this, ::core::mem::transmute_copy(&v)).into())
        }
        unsafe extern "system" fn Build<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Build(this).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        unsafe extern "system" fn Run<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Run(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn Decompose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decompose(this).into())
        }
        unsafe extern "system" fn DisableVideo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisableVideo(this).into())
        }
        unsafe extern "system" fn DisableAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisableAudio(this).into())
        }
        unsafe extern "system" fn ViewNext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidCtl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ViewNext(this, ::core::mem::transmute_copy(&v)).into())
        }
        IMSVidCtl_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AutoSize: AutoSize::<Identity, Impl, OFFSET>,
            SetAutoSize: SetAutoSize::<Identity, Impl, OFFSET>,
            BackColor: BackColor::<Identity, Impl, OFFSET>,
            SetBackColor: SetBackColor::<Identity, Impl, OFFSET>,
            Enabled: Enabled::<Identity, Impl, OFFSET>,
            SetEnabled: SetEnabled::<Identity, Impl, OFFSET>,
            TabStop: TabStop::<Identity, Impl, OFFSET>,
            SetTabStop: SetTabStop::<Identity, Impl, OFFSET>,
            Window: Window::<Identity, Impl, OFFSET>,
            Refresh: Refresh::<Identity, Impl, OFFSET>,
            DisplaySize: DisplaySize::<Identity, Impl, OFFSET>,
            SetDisplaySize: SetDisplaySize::<Identity, Impl, OFFSET>,
            MaintainAspectRatio: MaintainAspectRatio::<Identity, Impl, OFFSET>,
            SetMaintainAspectRatio: SetMaintainAspectRatio::<Identity, Impl, OFFSET>,
            ColorKey: ColorKey::<Identity, Impl, OFFSET>,
            SetColorKey: SetColorKey::<Identity, Impl, OFFSET>,
            get_InputsAvailable: get_InputsAvailable::<Identity, Impl, OFFSET>,
            get_OutputsAvailable: get_OutputsAvailable::<Identity, Impl, OFFSET>,
            get__InputsAvailable: get__InputsAvailable::<Identity, Impl, OFFSET>,
            get__OutputsAvailable: get__OutputsAvailable::<Identity, Impl, OFFSET>,
            VideoRenderersAvailable: VideoRenderersAvailable::<Identity, Impl, OFFSET>,
            AudioRenderersAvailable: AudioRenderersAvailable::<Identity, Impl, OFFSET>,
            FeaturesAvailable: FeaturesAvailable::<Identity, Impl, OFFSET>,
            InputActive: InputActive::<Identity, Impl, OFFSET>,
            SetInputActive: SetInputActive::<Identity, Impl, OFFSET>,
            OutputsActive: OutputsActive::<Identity, Impl, OFFSET>,
            SetOutputsActive: SetOutputsActive::<Identity, Impl, OFFSET>,
            VideoRendererActive: VideoRendererActive::<Identity, Impl, OFFSET>,
            SetVideoRendererActive: SetVideoRendererActive::<Identity, Impl, OFFSET>,
            AudioRendererActive: AudioRendererActive::<Identity, Impl, OFFSET>,
            SetAudioRendererActive: SetAudioRendererActive::<Identity, Impl, OFFSET>,
            FeaturesActive: FeaturesActive::<Identity, Impl, OFFSET>,
            SetFeaturesActive: SetFeaturesActive::<Identity, Impl, OFFSET>,
            State: State::<Identity, Impl, OFFSET>,
            View: View::<Identity, Impl, OFFSET>,
            Build: Build::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            Run: Run::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            Decompose: Decompose::<Identity, Impl, OFFSET>,
            DisableVideo: DisableVideo::<Identity, Impl, OFFSET>,
            DisableAudio: DisableAudio::<Identity, Impl, OFFSET>,
            ViewNext: ViewNext::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidDataServices_Impl: ::windows_core::BaseImpl + IMSVidFeature_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidDataServices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFeature);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDataServices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidDataServices {
    const VTABLE: Self::Vtable = { IMSVidDataServices_Vtbl { base__: <IMSVidFeature as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidDataServicesEvent_Impl: ::windows_core::BaseImpl + IMSVidDeviceEvent_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidDataServicesEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDataServicesEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidDataServicesEvent {
    const VTABLE: Self::Vtable = { IMSVidDataServicesEvent_Vtbl { base__: <IMSVidDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidDevice_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Status(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetPower(this: &Self::This, power: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Power(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn Category(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ClassID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn _Category(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn _ClassID(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn IsEqualDevice(this: &Self::This, device: ::core::option::Option<&IMSVidDevice>) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidDevice {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Status<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, status: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Status(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(status, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPower<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, power: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPower(this, ::core::mem::transmute_copy(&power)).into())
        }
        unsafe extern "system" fn Power<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, power: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Power(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(power, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Category<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Category(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(guid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ClassID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ClassID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(clsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _Category<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_Category(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(guid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _ClassID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_ClassID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(clsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsEqualDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, device: *mut ::core::ffi::c_void, isequal: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsEqualDevice(this, ::windows_core::from_raw_borrowed(&device)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(isequal, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidDevice_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Name: Name::<Identity, Impl, OFFSET>,
            Status: Status::<Identity, Impl, OFFSET>,
            SetPower: SetPower::<Identity, Impl, OFFSET>,
            Power: Power::<Identity, Impl, OFFSET>,
            Category: Category::<Identity, Impl, OFFSET>,
            ClassID: ClassID::<Identity, Impl, OFFSET>,
            _Category: _Category::<Identity, Impl, OFFSET>,
            _ClassID: _ClassID::<Identity, Impl, OFFSET>,
            IsEqualDevice: IsEqualDevice::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IMSVidDevice2_Impl: ::windows_core::BaseImpl {
    fn DevicePath(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
impl ::windows_core::Iids for IMSVidDevice2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidDevice2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DevicePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDevice2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, devpath: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DevicePath(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(devpath, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidDevice2_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, DevicePath: DevicePath::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidDeviceEvent_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn StateChange(this: &Self::This, lpd: ::core::option::Option<&IMSVidDevice>, oldstate: i32, newstate: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidDeviceEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDeviceEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidDeviceEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StateChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidDeviceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpd: *mut ::core::ffi::c_void, oldstate: i32, newstate: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StateChange(this, ::windows_core::from_raw_borrowed(&lpd), ::core::mem::transmute_copy(&oldstate), ::core::mem::transmute_copy(&newstate)).into())
        }
        IMSVidDeviceEvent_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StateChange: StateChange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_Media_MediaFoundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidEVR_Impl: ::windows_core::BaseImpl + IMSVidVideoRenderer_Impl {
    fn Presenter(this: &Self::This) -> ::windows_core::Result<super::super::MediaFoundation::IMFVideoPresenter>;
    fn SetPresenter(this: &Self::This, pallocpresent: ::core::option::Option<&super::super::MediaFoundation::IMFVideoPresenter>) -> ::windows_core::Result<()>;
    fn SetSuppressEffects(this: &Self::This, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SuppressEffects(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidEVR {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidVideoRenderer);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_Media_MediaFoundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVR_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidEVR {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Presenter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVR_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppallocpresent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Presenter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppallocpresent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPresenter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVR_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pallocpresent: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPresenter(this, ::windows_core::from_raw_borrowed(&pallocpresent)).into())
        }
        unsafe extern "system" fn SetSuppressEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVR_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSuppressEffects(this, ::core::mem::transmute_copy(&bsuppress)).into())
        }
        unsafe extern "system" fn SuppressEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVR_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsuppress: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SuppressEffects(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bsuppress, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidEVR_Vtbl {
            base__: <IMSVidVideoRenderer as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Presenter: Presenter::<Identity, Impl, OFFSET>,
            SetPresenter: SetPresenter::<Identity, Impl, OFFSET>,
            SetSuppressEffects: SetSuppressEffects::<Identity, Impl, OFFSET>,
            SuppressEffects: SuppressEffects::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidEVREvent_Impl: ::windows_core::BaseImpl + IMSVidOutputDeviceEvent_Impl {
    fn OnUserEvent(this: &Self::This, leventcode: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidEVREvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVREvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidEVREvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnUserEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEVREvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, leventcode: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnUserEvent(this, ::core::mem::transmute_copy(&leventcode)).into())
        }
        IMSVidEVREvent_Vtbl { base__: <IMSVidOutputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, OnUserEvent: OnUserEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidEncoder_Impl: ::windows_core::BaseImpl + IMSVidFeature_Impl {
    fn VideoEncoderInterface(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn AudioEncoderInterface(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidEncoder {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFeature);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEncoder_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidEncoder {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn VideoEncoderInterface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppencint: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoEncoderInterface(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppencint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AudioEncoderInterface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidEncoder_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppencint: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioEncoderInterface(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppencint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidEncoder_Vtbl {
            base__: <IMSVidFeature as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            VideoEncoderInterface: VideoEncoderInterface::<Identity, Impl, OFFSET>,
            AudioEncoderInterface: AudioEncoderInterface::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidFeature_Impl: ::windows_core::BaseImpl + IMSVidDevice_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidFeature {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeature_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidFeature {
    const VTABLE: Self::Vtable = { IMSVidFeature_Vtbl { base__: <IMSVidDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidFeatureEvent_Impl: ::windows_core::BaseImpl + IMSVidDeviceEvent_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidFeatureEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatureEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidFeatureEvent {
    const VTABLE: Self::Vtable = { IMSVidFeatureEvent_Vtbl { base__: <IMSVidDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidFeatures_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IMSVidFeature>;
    fn Add(this: &Self::This, pdb: ::core::option::Option<&IMSVidFeature>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidFeatures {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatures_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidFeatures {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatures_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatures_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatures_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&v)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatures_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pdb)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFeatures_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&v)).into())
        }
        IMSVidFeatures_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidFilePlayback_Impl: ::windows_core::BaseImpl + IMSVidPlayback_Impl {
    fn FileName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetFileName(this: &Self::This, filename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidFilePlayback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidPlayback);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlayback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidFilePlayback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn FileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FileName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(filename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFileName(this, ::core::mem::transmute(&filename)).into())
        }
        IMSVidFilePlayback_Vtbl {
            base__: <IMSVidPlayback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            FileName: FileName::<Identity, Impl, OFFSET>,
            SetFileName: SetFileName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidFilePlayback2_Impl: ::windows_core::BaseImpl + IMSVidFilePlayback_Impl {
    fn Set_SourceFilter(this: &Self::This, filename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Set__SourceFilter(this: &Self::This, filename: &::windows_core::GUID) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidFilePlayback2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFilePlayback);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlayback2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidFilePlayback2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Set_SourceFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlayback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_SourceFilter(this, ::core::mem::transmute(&filename)).into())
        }
        unsafe extern "system" fn Set__SourceFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlayback2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set__SourceFilter(this, ::core::mem::transmute(&filename)).into())
        }
        IMSVidFilePlayback2_Vtbl {
            base__: <IMSVidFilePlayback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Set_SourceFilter: Set_SourceFilter::<Identity, Impl, OFFSET>,
            Set__SourceFilter: Set__SourceFilter::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidFilePlaybackEvent_Impl: ::windows_core::BaseImpl + IMSVidPlaybackEvent_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidFilePlaybackEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidPlaybackEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidFilePlaybackEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidFilePlaybackEvent {
    const VTABLE: Self::Vtable = { IMSVidFilePlaybackEvent_Vtbl { base__: <IMSVidPlaybackEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidGenericSink_Impl: ::windows_core::BaseImpl + IMSVidOutputDevice_Impl {
    fn SetSinkFilter(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SinkStreams(this: &Self::This) -> ::windows_core::Result<MSVidSinkStreams>;
    fn SetSinkStreams(this: &Self::This, streams: MSVidSinkStreams) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidGenericSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidGenericSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSinkFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSinkFilter(this, ::core::mem::transmute(&bstrname)).into())
        }
        unsafe extern "system" fn SinkStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstreams: *mut MSVidSinkStreams) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SinkStreams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSinkStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streams: MSVidSinkStreams) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSinkStreams(this, ::core::mem::transmute_copy(&streams)).into())
        }
        IMSVidGenericSink_Vtbl {
            base__: <IMSVidOutputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetSinkFilter: SetSinkFilter::<Identity, Impl, OFFSET>,
            SinkStreams: SinkStreams::<Identity, Impl, OFFSET>,
            SetSinkStreams: SetSinkStreams::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidGenericSink2_Impl: ::windows_core::BaseImpl + IMSVidGenericSink_Impl {
    fn AddFilter(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ResetFilterList(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidGenericSink2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidGenericSink);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidGenericSink2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFilter(this, ::core::mem::transmute(&bstrname)).into())
        }
        unsafe extern "system" fn ResetFilterList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGenericSink2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetFilterList(this).into())
        }
        IMSVidGenericSink2_Vtbl {
            base__: <IMSVidGenericSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddFilter: AddFilter::<Identity, Impl, OFFSET>,
            ResetFilterList: ResetFilterList::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IMSVidGraphSegment_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IPersist_Impl {
    fn Init(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn SetInit(this: &Self::This, pinit: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn EnumFilters(this: &Self::This) -> ::windows_core::Result<super::IEnumFilters>;
    fn Container(this: &Self::This) -> ::windows_core::Result<IMSVidGraphSegmentContainer>;
    fn SetContainer(this: &Self::This, pctl: ::core::option::Option<&IMSVidGraphSegmentContainer>) -> ::windows_core::Result<()>;
    fn Type(this: &Self::This) -> ::windows_core::Result<MSVidSegmentType>;
    fn Category(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn Build(this: &Self::This) -> ::windows_core::Result<()>;
    fn PostBuild(this: &Self::This) -> ::windows_core::Result<()>;
    fn PreRun(this: &Self::This) -> ::windows_core::Result<()>;
    fn PostRun(this: &Self::This) -> ::windows_core::Result<()>;
    fn PreStop(this: &Self::This) -> ::windows_core::Result<()>;
    fn PostStop(this: &Self::This) -> ::windows_core::Result<()>;
    fn OnEventNotify(this: &Self::This, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows_core::Result<()>;
    fn Decompose(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IMSVidGraphSegment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IPersist);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidGraphSegment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Init(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pinit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetInit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinit: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetInit(this, ::windows_core::from_raw_borrowed(&pinit)).into())
        }
        unsafe extern "system" fn EnumFilters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnewenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumFilters(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnewenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Container<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppctl: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Container(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppctl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContainer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pctl: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContainer(this, ::windows_core::from_raw_borrowed(&pctl)).into())
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptype: *mut MSVidSegmentType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Category<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Category(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Build<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Build(this).into())
        }
        unsafe extern "system" fn PostBuild<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostBuild(this).into())
        }
        unsafe extern "system" fn PreRun<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreRun(this).into())
        }
        unsafe extern "system" fn PostRun<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostRun(this).into())
        }
        unsafe extern "system" fn PreStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PreStop(this).into())
        }
        unsafe extern "system" fn PostStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PostStop(this).into())
        }
        unsafe extern "system" fn OnEventNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, leventcode: i32, leventparm1: isize, leventparm2: isize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnEventNotify(this, ::core::mem::transmute_copy(&leventcode), ::core::mem::transmute_copy(&leventparm1), ::core::mem::transmute_copy(&leventparm2)).into())
        }
        unsafe extern "system" fn Decompose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decompose(this).into())
        }
        IMSVidGraphSegment_Vtbl {
            base__: <super::super::super::System::Com::IPersist as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Init: Init::<Identity, Impl, OFFSET>,
            SetInit: SetInit::<Identity, Impl, OFFSET>,
            EnumFilters: EnumFilters::<Identity, Impl, OFFSET>,
            Container: Container::<Identity, Impl, OFFSET>,
            SetContainer: SetContainer::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            Category: Category::<Identity, Impl, OFFSET>,
            Build: Build::<Identity, Impl, OFFSET>,
            PostBuild: PostBuild::<Identity, Impl, OFFSET>,
            PreRun: PreRun::<Identity, Impl, OFFSET>,
            PostRun: PostRun::<Identity, Impl, OFFSET>,
            PreStop: PreStop::<Identity, Impl, OFFSET>,
            PostStop: PostStop::<Identity, Impl, OFFSET>,
            OnEventNotify: OnEventNotify::<Identity, Impl, OFFSET>,
            Decompose: Decompose::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IMSVidGraphSegmentContainer_Impl: ::windows_core::BaseImpl {
    fn Graph(this: &Self::This) -> ::windows_core::Result<super::IGraphBuilder>;
    fn Input(this: &Self::This) -> ::windows_core::Result<IMSVidGraphSegment>;
    fn Outputs(this: &Self::This) -> ::windows_core::Result<IEnumMSVidGraphSegment>;
    fn VideoRenderer(this: &Self::This) -> ::windows_core::Result<IMSVidGraphSegment>;
    fn AudioRenderer(this: &Self::This) -> ::windows_core::Result<IMSVidGraphSegment>;
    fn Features(this: &Self::This) -> ::windows_core::Result<IEnumMSVidGraphSegment>;
    fn Composites(this: &Self::This) -> ::windows_core::Result<IEnumMSVidGraphSegment>;
    fn ParentContainer(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Decompose(this: &Self::This, psegment: ::core::option::Option<&IMSVidGraphSegment>) -> ::windows_core::Result<()>;
    fn IsWindowless(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetFocus(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IMSVidGraphSegmentContainer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidGraphSegmentContainer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Graph<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppgraph: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Graph(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppgraph, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Input<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppinput: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Input(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppinput, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Outputs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppoutputs: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Outputs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppoutputs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VideoRenderer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvr: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoRenderer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AudioRenderer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppar: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioRenderer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppar, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Features<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppfeatures: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Features(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppfeatures, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Composites<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcomposites: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Composites(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcomposites, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ParentContainer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcontainer: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParentContainer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcontainer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Decompose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psegment: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decompose(this, ::windows_core::from_raw_borrowed(&psegment)).into())
        }
        unsafe extern "system" fn IsWindowless<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsWindowless(this).into())
        }
        unsafe extern "system" fn GetFocus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFocus(this).into())
        }
        IMSVidGraphSegmentContainer_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Graph: Graph::<Identity, Impl, OFFSET>,
            Input: Input::<Identity, Impl, OFFSET>,
            Outputs: Outputs::<Identity, Impl, OFFSET>,
            VideoRenderer: VideoRenderer::<Identity, Impl, OFFSET>,
            AudioRenderer: AudioRenderer::<Identity, Impl, OFFSET>,
            Features: Features::<Identity, Impl, OFFSET>,
            Composites: Composites::<Identity, Impl, OFFSET>,
            ParentContainer: ParentContainer::<Identity, Impl, OFFSET>,
            Decompose: Decompose::<Identity, Impl, OFFSET>,
            IsWindowless: IsWindowless::<Identity, Impl, OFFSET>,
            GetFocus: GetFocus::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IMSVidGraphSegmentUserInput_Impl: ::windows_core::BaseImpl {
    fn Click(this: &Self::This) -> ::windows_core::Result<()>;
    fn DblClick(this: &Self::This) -> ::windows_core::Result<()>;
    fn KeyDown(this: &Self::This, keycode: *const i16, shiftstate: i16) -> ::windows_core::Result<()>;
    fn KeyPress(this: &Self::This, keyascii: *const i16) -> ::windows_core::Result<()>;
    fn KeyUp(this: &Self::This, keycode: *const i16, shiftstate: i16) -> ::windows_core::Result<()>;
    fn MouseDown(this: &Self::This, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows_core::Result<()>;
    fn MouseMove(this: &Self::This, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows_core::Result<()>;
    fn MouseUp(this: &Self::This, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMSVidGraphSegmentUserInput {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidGraphSegmentUserInput {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Click<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Click(this).into())
        }
        unsafe extern "system" fn DblClick<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DblClick(this).into())
        }
        unsafe extern "system" fn KeyDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keycode: *const i16, shiftstate: i16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyDown(this, ::core::mem::transmute_copy(&keycode), ::core::mem::transmute_copy(&shiftstate)).into())
        }
        unsafe extern "system" fn KeyPress<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keyascii: *const i16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyPress(this, ::core::mem::transmute_copy(&keyascii)).into())
        }
        unsafe extern "system" fn KeyUp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keycode: *const i16, shiftstate: i16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeyUp(this, ::core::mem::transmute_copy(&keycode), ::core::mem::transmute_copy(&shiftstate)).into())
        }
        unsafe extern "system" fn MouseDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MouseDown(this, ::core::mem::transmute_copy(&buttonstate), ::core::mem::transmute_copy(&shiftstate), ::core::mem::transmute_copy(&x), ::core::mem::transmute_copy(&y)).into())
        }
        unsafe extern "system" fn MouseMove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MouseMove(this, ::core::mem::transmute_copy(&buttonstate), ::core::mem::transmute_copy(&shiftstate), ::core::mem::transmute_copy(&x), ::core::mem::transmute_copy(&y)).into())
        }
        unsafe extern "system" fn MouseUp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidGraphSegmentUserInput_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, buttonstate: i16, shiftstate: i16, x: i32, y: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MouseUp(this, ::core::mem::transmute_copy(&buttonstate), ::core::mem::transmute_copy(&shiftstate), ::core::mem::transmute_copy(&x), ::core::mem::transmute_copy(&y)).into())
        }
        IMSVidGraphSegmentUserInput_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Click: Click::<Identity, Impl, OFFSET>,
            DblClick: DblClick::<Identity, Impl, OFFSET>,
            KeyDown: KeyDown::<Identity, Impl, OFFSET>,
            KeyPress: KeyPress::<Identity, Impl, OFFSET>,
            KeyUp: KeyUp::<Identity, Impl, OFFSET>,
            MouseDown: MouseDown::<Identity, Impl, OFFSET>,
            MouseMove: MouseMove::<Identity, Impl, OFFSET>,
            MouseUp: MouseUp::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidInputDevice_Impl: ::windows_core::BaseImpl + IMSVidDevice_Impl {
    fn IsViewable(this: &Self::This, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn View(this: &Self::This, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidInputDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidInputDevice {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsViewable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Variant::VARIANT, pfviewable: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsViewable(this, ::core::mem::transmute_copy(&v)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfviewable, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn View<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevice_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::View(this, ::core::mem::transmute_copy(&v)).into())
        }
        IMSVidInputDevice_Vtbl {
            base__: <IMSVidDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsViewable: IsViewable::<Identity, Impl, OFFSET>,
            View: View::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidInputDeviceEvent_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidInputDeviceEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDeviceEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidInputDeviceEvent {
    const VTABLE: Self::Vtable = { IMSVidInputDeviceEvent_Vtbl { base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidInputDevices_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IMSVidInputDevice>;
    fn Add(this: &Self::This, pdb: ::core::option::Option<&IMSVidInputDevice>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidInputDevices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidInputDevices {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&v)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pdb)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidInputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&v)).into())
        }
        IMSVidInputDevices_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidOutputDevice_Impl: ::windows_core::BaseImpl + IMSVidDevice_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidOutputDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidOutputDevice {
    const VTABLE: Self::Vtable = { IMSVidOutputDevice_Vtbl { base__: <IMSVidDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidOutputDeviceEvent_Impl: ::windows_core::BaseImpl + IMSVidDeviceEvent_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidOutputDeviceEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDeviceEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidOutputDeviceEvent {
    const VTABLE: Self::Vtable = { IMSVidOutputDeviceEvent_Vtbl { base__: <IMSVidDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidOutputDevices_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IMSVidOutputDevice>;
    fn Add(this: &Self::This, pdb: ::core::option::Option<&IMSVidOutputDevice>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidOutputDevices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidOutputDevices {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&v)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pdb)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidOutputDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&v)).into())
        }
        IMSVidOutputDevices_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidPlayback_Impl: ::windows_core::BaseImpl + IMSVidInputDevice_Impl {
    fn EnableResetOnStop(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetEnableResetOnStop(this: &Self::This, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Run(this: &Self::This) -> ::windows_core::Result<()>;
    fn Pause(this: &Self::This) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_CanStep(this: &Self::This, fbackwards: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn Step(this: &Self::This, lstep: i32) -> ::windows_core::Result<()>;
    fn SetRate(this: &Self::This, plrate: f64) -> ::windows_core::Result<()>;
    fn Rate(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetCurrentPosition(this: &Self::This, lposition: i32) -> ::windows_core::Result<()>;
    fn CurrentPosition(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetPositionMode(this: &Self::This, lpositionmode: PositionModeList) -> ::windows_core::Result<()>;
    fn PositionMode(this: &Self::This) -> ::windows_core::Result<PositionModeList>;
    fn Length(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidPlayback {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidInputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidPlayback {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnableResetOnStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnableResetOnStop(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEnableResetOnStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnableResetOnStop(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn Run<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Run(this).into())
        }
        unsafe extern "system" fn Pause<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Pause(this).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this).into())
        }
        unsafe extern "system" fn get_CanStep<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbackwards: super::super::super::Foundation::VARIANT_BOOL, pfcan: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_CanStep(this, ::core::mem::transmute_copy(&fbackwards)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfcan, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Step<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstep: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Step(this, ::core::mem::transmute_copy(&lstep)).into())
        }
        unsafe extern "system" fn SetRate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plrate: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRate(this, ::core::mem::transmute_copy(&plrate)).into())
        }
        unsafe extern "system" fn Rate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plrate: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Rate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plrate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lposition: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentPosition(this, ::core::mem::transmute_copy(&lposition)).into())
        }
        unsafe extern "system" fn CurrentPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lposition: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentPosition(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPositionMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpositionmode: PositionModeList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPositionMode(this, ::core::mem::transmute_copy(&lpositionmode)).into())
        }
        unsafe extern "system" fn PositionMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpositionmode: *mut PositionModeList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PositionMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpositionmode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Length<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlayback_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llength: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Length(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(llength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidPlayback_Vtbl {
            base__: <IMSVidInputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnableResetOnStop: EnableResetOnStop::<Identity, Impl, OFFSET>,
            SetEnableResetOnStop: SetEnableResetOnStop::<Identity, Impl, OFFSET>,
            Run: Run::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            get_CanStep: get_CanStep::<Identity, Impl, OFFSET>,
            Step: Step::<Identity, Impl, OFFSET>,
            SetRate: SetRate::<Identity, Impl, OFFSET>,
            Rate: Rate::<Identity, Impl, OFFSET>,
            SetCurrentPosition: SetCurrentPosition::<Identity, Impl, OFFSET>,
            CurrentPosition: CurrentPosition::<Identity, Impl, OFFSET>,
            SetPositionMode: SetPositionMode::<Identity, Impl, OFFSET>,
            PositionMode: PositionMode::<Identity, Impl, OFFSET>,
            Length: Length::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidPlaybackEvent_Impl: ::windows_core::BaseImpl + IMSVidInputDeviceEvent_Impl {
    fn EndOfMedia(this: &Self::This, lpd: ::core::option::Option<&IMSVidPlayback>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidPlaybackEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidInputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlaybackEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidPlaybackEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EndOfMedia<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidPlaybackEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EndOfMedia(this, ::windows_core::from_raw_borrowed(&lpd)).into())
        }
        IMSVidPlaybackEvent_Vtbl { base__: <IMSVidInputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, EndOfMedia: EndOfMedia::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidRect_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Top(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetTop(this: &Self::This, topval: i32) -> ::windows_core::Result<()>;
    fn Left(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLeft(this: &Self::This, leftval: i32) -> ::windows_core::Result<()>;
    fn Width(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetWidth(this: &Self::This, widthval: i32) -> ::windows_core::Result<()>;
    fn Height(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetHeight(this: &Self::This, heightval: i32) -> ::windows_core::Result<()>;
    fn HWnd(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::HWND>;
    fn SetHWnd(this: &Self::This, hwndval: super::super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn SetRect(this: &Self::This, rectval: ::core::option::Option<&IMSVidRect>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidRect {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidRect {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Top<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, topval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Top(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(topval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, topval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTop(this, ::core::mem::transmute_copy(&topval)).into())
        }
        unsafe extern "system" fn Left<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, leftval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Left(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(leftval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLeft<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, leftval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLeft(this, ::core::mem::transmute_copy(&leftval)).into())
        }
        unsafe extern "system" fn Width<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, widthval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Width(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(widthval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWidth<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, widthval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWidth(this, ::core::mem::transmute_copy(&widthval)).into())
        }
        unsafe extern "system" fn Height<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, heightval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Height(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(heightval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHeight<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, heightval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHeight(this, ::core::mem::transmute_copy(&heightval)).into())
        }
        unsafe extern "system" fn HWnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndval: *mut super::super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HWnd(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hwndval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHWnd<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndval: super::super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHWnd(this, ::core::mem::transmute_copy(&hwndval)).into())
        }
        unsafe extern "system" fn SetRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidRect_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rectval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRect(this, ::windows_core::from_raw_borrowed(&rectval)).into())
        }
        IMSVidRect_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Top: Top::<Identity, Impl, OFFSET>,
            SetTop: SetTop::<Identity, Impl, OFFSET>,
            Left: Left::<Identity, Impl, OFFSET>,
            SetLeft: SetLeft::<Identity, Impl, OFFSET>,
            Width: Width::<Identity, Impl, OFFSET>,
            SetWidth: SetWidth::<Identity, Impl, OFFSET>,
            Height: Height::<Identity, Impl, OFFSET>,
            SetHeight: SetHeight::<Identity, Impl, OFFSET>,
            HWnd: HWnd::<Identity, Impl, OFFSET>,
            SetHWnd: SetHWnd::<Identity, Impl, OFFSET>,
            SetRect: SetRect::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferRecordingControl_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn StartTime(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetStartTime(this: &Self::This, rtstart: i32) -> ::windows_core::Result<()>;
    fn StopTime(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetStopTime(this: &Self::This, rtstop: i32) -> ::windows_core::Result<()>;
    fn RecordingStopped(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn RecordingStarted(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn RecordingType(this: &Self::This) -> ::windows_core::Result<RecordingType>;
    fn RecordingAttribute(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferRecordingControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferRecordingControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtstart: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StartTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rtstart, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtstart: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStartTime(this, ::core::mem::transmute_copy(&rtstart)).into())
        }
        unsafe extern "system" fn StopTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtstop: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StopTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rtstop, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStopTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtstop: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStopTime(this, ::core::mem::transmute_copy(&rtstop)).into())
        }
        unsafe extern "system" fn RecordingStopped<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phresult: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecordingStopped(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RecordingStarted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phresult: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecordingStarted(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phresult, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RecordingType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtype: *mut RecordingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecordingType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(dwtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RecordingAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferRecordingControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, precordingattribute: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecordingAttribute(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(precordingattribute, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidStreamBufferRecordingControl_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartTime: StartTime::<Identity, Impl, OFFSET>,
            SetStartTime: SetStartTime::<Identity, Impl, OFFSET>,
            StopTime: StopTime::<Identity, Impl, OFFSET>,
            SetStopTime: SetStopTime::<Identity, Impl, OFFSET>,
            RecordingStopped: RecordingStopped::<Identity, Impl, OFFSET>,
            RecordingStarted: RecordingStarted::<Identity, Impl, OFFSET>,
            RecordingType: RecordingType::<Identity, Impl, OFFSET>,
            RecordingAttribute: RecordingAttribute::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSink_Impl: ::windows_core::BaseImpl + IMSVidOutputDevice_Impl {
    fn get_ContentRecorder(this: &Self::This, pszfilename: &::windows_core::BSTR) -> ::windows_core::Result<IMSVidStreamBufferRecordingControl>;
    fn get_ReferenceRecorder(this: &Self::This, pszfilename: &::windows_core::BSTR) -> ::windows_core::Result<IMSVidStreamBufferRecordingControl>;
    fn SinkName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetSinkName(this: &Self::This, name: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn NameSetLock(this: &Self::This) -> ::windows_core::Result<()>;
    fn SBESink(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ContentRecorder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfilename: ::std::mem::MaybeUninit<::windows_core::BSTR>, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ContentRecorder(this, ::core::mem::transmute(&pszfilename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(precordingiunknown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ReferenceRecorder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfilename: ::std::mem::MaybeUninit<::windows_core::BSTR>, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ReferenceRecorder(this, ::core::mem::transmute(&pszfilename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(precordingiunknown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SinkName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SinkName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSinkName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSinkName(this, ::core::mem::transmute(&name)).into())
        }
        unsafe extern "system" fn NameSetLock<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NameSetLock(this).into())
        }
        unsafe extern "system" fn SBESink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sbeconfig: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SBESink(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sbeconfig, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidStreamBufferSink_Vtbl {
            base__: <IMSVidOutputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ContentRecorder: get_ContentRecorder::<Identity, Impl, OFFSET>,
            get_ReferenceRecorder: get_ReferenceRecorder::<Identity, Impl, OFFSET>,
            SinkName: SinkName::<Identity, Impl, OFFSET>,
            SetSinkName: SetSinkName::<Identity, Impl, OFFSET>,
            NameSetLock: NameSetLock::<Identity, Impl, OFFSET>,
            SBESink: SBESink::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSink2_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSink_Impl {
    fn UnlockProfile(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSink2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSink);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSink2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UnlockProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockProfile(this).into())
        }
        IMSVidStreamBufferSink2_Vtbl { base__: <IMSVidStreamBufferSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, UnlockProfile: UnlockProfile::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSink3_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSink2_Impl {
    fn SetMinSeek(this: &Self::This) -> ::windows_core::Result<i32>;
    fn AudioCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn VideoCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn CCCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn WSTCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn SetAudioAnalysisFilter(this: &Self::This, szclsid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AudioAnalysisFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Set_AudioAnalysisFilter(this: &Self::This, guid: &::windows_core::GUID) -> ::windows_core::Result<()>;
    fn _AudioAnalysisFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetVideoAnalysisFilter(this: &Self::This, szclsid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn VideoAnalysisFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Set_VideoAnalysisFilter(this: &Self::This, guid: &::windows_core::GUID) -> ::windows_core::Result<()>;
    fn _VideoAnalysisFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn SetDataAnalysisFilter(this: &Self::This, szclsid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn DataAnalysisFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Set_DataAnalysisFilter(this: &Self::This, guid: &::windows_core::GUID) -> ::windows_core::Result<()>;
    fn _DataAnalysisFilter(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn LicenseErrorCode(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSink3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSink2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSink3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMinSeek<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmin: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SetMinSeek(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwmin, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AudioCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VideoCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CCCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CCCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn WSTCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::WSTCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAudioAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAudioAnalysisFilter(this, ::core::mem::transmute(&szclsid)).into())
        }
        unsafe extern "system" fn AudioAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszclsid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioAnalysisFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_AudioAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_AudioAnalysisFilter(this, ::core::mem::transmute(&guid)).into())
        }
        unsafe extern "system" fn _AudioAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_AudioAnalysisFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVideoAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVideoAnalysisFilter(this, ::core::mem::transmute(&szclsid)).into())
        }
        unsafe extern "system" fn VideoAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszclsid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoAnalysisFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_VideoAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_VideoAnalysisFilter(this, ::core::mem::transmute(&guid)).into())
        }
        unsafe extern "system" fn _VideoAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_VideoAnalysisFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDataAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDataAnalysisFilter(this, ::core::mem::transmute(&szclsid)).into())
        }
        unsafe extern "system" fn DataAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszclsid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DataAnalysisFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pszclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_DataAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_DataAnalysisFilter(this, ::core::mem::transmute(&guid)).into())
        }
        unsafe extern "system" fn _DataAnalysisFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_DataAnalysisFilter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LicenseErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hres: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LicenseErrorCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hres, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidStreamBufferSink3_Vtbl {
            base__: <IMSVidStreamBufferSink2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetMinSeek: SetMinSeek::<Identity, Impl, OFFSET>,
            AudioCounter: AudioCounter::<Identity, Impl, OFFSET>,
            VideoCounter: VideoCounter::<Identity, Impl, OFFSET>,
            CCCounter: CCCounter::<Identity, Impl, OFFSET>,
            WSTCounter: WSTCounter::<Identity, Impl, OFFSET>,
            SetAudioAnalysisFilter: SetAudioAnalysisFilter::<Identity, Impl, OFFSET>,
            AudioAnalysisFilter: AudioAnalysisFilter::<Identity, Impl, OFFSET>,
            Set_AudioAnalysisFilter: Set_AudioAnalysisFilter::<Identity, Impl, OFFSET>,
            _AudioAnalysisFilter: _AudioAnalysisFilter::<Identity, Impl, OFFSET>,
            SetVideoAnalysisFilter: SetVideoAnalysisFilter::<Identity, Impl, OFFSET>,
            VideoAnalysisFilter: VideoAnalysisFilter::<Identity, Impl, OFFSET>,
            Set_VideoAnalysisFilter: Set_VideoAnalysisFilter::<Identity, Impl, OFFSET>,
            _VideoAnalysisFilter: _VideoAnalysisFilter::<Identity, Impl, OFFSET>,
            SetDataAnalysisFilter: SetDataAnalysisFilter::<Identity, Impl, OFFSET>,
            DataAnalysisFilter: DataAnalysisFilter::<Identity, Impl, OFFSET>,
            Set_DataAnalysisFilter: Set_DataAnalysisFilter::<Identity, Impl, OFFSET>,
            _DataAnalysisFilter: _DataAnalysisFilter::<Identity, Impl, OFFSET>,
            LicenseErrorCode: LicenseErrorCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSinkEvent_Impl: ::windows_core::BaseImpl + IMSVidOutputDeviceEvent_Impl {
    fn CertificateFailure(this: &Self::This) -> ::windows_core::Result<()>;
    fn CertificateSuccess(this: &Self::This) -> ::windows_core::Result<()>;
    fn WriteFailure(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSinkEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSinkEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CertificateFailure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CertificateFailure(this).into())
        }
        unsafe extern "system" fn CertificateSuccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CertificateSuccess(this).into())
        }
        unsafe extern "system" fn WriteFailure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteFailure(this).into())
        }
        IMSVidStreamBufferSinkEvent_Vtbl {
            base__: <IMSVidOutputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CertificateFailure: CertificateFailure::<Identity, Impl, OFFSET>,
            CertificateSuccess: CertificateSuccess::<Identity, Impl, OFFSET>,
            WriteFailure: WriteFailure::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSinkEvent2_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSinkEvent_Impl {
    fn EncryptionOn(this: &Self::This) -> ::windows_core::Result<()>;
    fn EncryptionOff(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSinkEvent2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSinkEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSinkEvent2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EncryptionOn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EncryptionOn(this).into())
        }
        unsafe extern "system" fn EncryptionOff<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EncryptionOff(this).into())
        }
        IMSVidStreamBufferSinkEvent2_Vtbl {
            base__: <IMSVidStreamBufferSinkEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EncryptionOn: EncryptionOn::<Identity, Impl, OFFSET>,
            EncryptionOff: EncryptionOff::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSinkEvent3_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSinkEvent2_Impl {
    fn LicenseChange(this: &Self::This, dwprot: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSinkEvent3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSinkEvent2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSinkEvent3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LicenseChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwprot: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LicenseChange(this, ::core::mem::transmute_copy(&dwprot)).into())
        }
        IMSVidStreamBufferSinkEvent3_Vtbl {
            base__: <IMSVidStreamBufferSinkEvent2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LicenseChange: LicenseChange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSinkEvent4_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSinkEvent3_Impl {
    fn WriteFailureClear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSinkEvent4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSinkEvent3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSinkEvent4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn WriteFailureClear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSinkEvent4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteFailureClear(this).into())
        }
        IMSVidStreamBufferSinkEvent4_Vtbl {
            base__: <IMSVidStreamBufferSinkEvent3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            WriteFailureClear: WriteFailureClear::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSource_Impl: ::windows_core::BaseImpl + IMSVidFilePlayback_Impl {
    fn Start(this: &Self::This) -> ::windows_core::Result<i32>;
    fn RecordingAttribute(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn CurrentRatings(this: &Self::This, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, pbfenattr: *mut i32) -> ::windows_core::Result<()>;
    fn MaxRatingsLevel(this: &Self::This, ensystem: EnTvRat_System, enrating: EnTvRat_GenericLevel, lbfenattr: i32) -> ::windows_core::Result<()>;
    fn SetBlockUnrated(this: &Self::This, bblock: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SetUnratedDelay(this: &Self::This, dwdelay: i32) -> ::windows_core::Result<()>;
    fn SBESource(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFilePlayback);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstart: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Start(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lstart, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RecordingAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, precordingattribute: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RecordingAttribute(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(precordingattribute, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentRatings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pensystem: *mut EnTvRat_System, penrating: *mut EnTvRat_GenericLevel, pbfenattr: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CurrentRatings(this, ::core::mem::transmute_copy(&pensystem), ::core::mem::transmute_copy(&penrating), ::core::mem::transmute_copy(&pbfenattr)).into())
        }
        unsafe extern "system" fn MaxRatingsLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ensystem: EnTvRat_System, enrating: EnTvRat_GenericLevel, lbfenattr: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MaxRatingsLevel(this, ::core::mem::transmute_copy(&ensystem), ::core::mem::transmute_copy(&enrating), ::core::mem::transmute_copy(&lbfenattr)).into())
        }
        unsafe extern "system" fn SetBlockUnrated<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bblock: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBlockUnrated(this, ::core::mem::transmute_copy(&bblock)).into())
        }
        unsafe extern "system" fn SetUnratedDelay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwdelay: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUnratedDelay(this, ::core::mem::transmute_copy(&dwdelay)).into())
        }
        unsafe extern "system" fn SBESource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sbefilter: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SBESource(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(sbefilter, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidStreamBufferSource_Vtbl {
            base__: <IMSVidFilePlayback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Start: Start::<Identity, Impl, OFFSET>,
            RecordingAttribute: RecordingAttribute::<Identity, Impl, OFFSET>,
            CurrentRatings: CurrentRatings::<Identity, Impl, OFFSET>,
            MaxRatingsLevel: MaxRatingsLevel::<Identity, Impl, OFFSET>,
            SetBlockUnrated: SetBlockUnrated::<Identity, Impl, OFFSET>,
            SetUnratedDelay: SetUnratedDelay::<Identity, Impl, OFFSET>,
            SBESource: SBESource::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSource2_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSource_Impl {
    fn put_RateEx(this: &Self::This, dwrate: f64, dwframespersecond: u32) -> ::windows_core::Result<()>;
    fn AudioCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn VideoCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn CCCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn WSTCounter(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSource2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSource);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSource2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn put_RateEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrate: f64, dwframespersecond: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_RateEx(this, ::core::mem::transmute_copy(&dwrate), ::core::mem::transmute_copy(&dwframespersecond)).into())
        }
        unsafe extern "system" fn AudioCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VideoCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VideoCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CCCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CCCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn WSTCounter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSource2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunk: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::WSTCounter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunk, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidStreamBufferSource2_Vtbl {
            base__: <IMSVidStreamBufferSource as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            put_RateEx: put_RateEx::<Identity, Impl, OFFSET>,
            AudioCounter: AudioCounter::<Identity, Impl, OFFSET>,
            VideoCounter: VideoCounter::<Identity, Impl, OFFSET>,
            CCCounter: CCCounter::<Identity, Impl, OFFSET>,
            WSTCounter: WSTCounter::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSourceEvent_Impl: ::windows_core::BaseImpl + IMSVidFilePlaybackEvent_Impl {
    fn CertificateFailure(this: &Self::This) -> ::windows_core::Result<()>;
    fn CertificateSuccess(this: &Self::This) -> ::windows_core::Result<()>;
    fn RatingsBlocked(this: &Self::This) -> ::windows_core::Result<()>;
    fn RatingsUnblocked(this: &Self::This) -> ::windows_core::Result<()>;
    fn RatingsChanged(this: &Self::This) -> ::windows_core::Result<()>;
    fn TimeHole(this: &Self::This, streamoffsetms: i32, sizems: i32) -> ::windows_core::Result<()>;
    fn StaleDataRead(this: &Self::This) -> ::windows_core::Result<()>;
    fn ContentBecomingStale(this: &Self::This) -> ::windows_core::Result<()>;
    fn StaleFileDeleted(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSourceEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFilePlaybackEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSourceEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CertificateFailure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CertificateFailure(this).into())
        }
        unsafe extern "system" fn CertificateSuccess<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CertificateSuccess(this).into())
        }
        unsafe extern "system" fn RatingsBlocked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RatingsBlocked(this).into())
        }
        unsafe extern "system" fn RatingsUnblocked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RatingsUnblocked(this).into())
        }
        unsafe extern "system" fn RatingsChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RatingsChanged(this).into())
        }
        unsafe extern "system" fn TimeHole<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streamoffsetms: i32, sizems: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TimeHole(this, ::core::mem::transmute_copy(&streamoffsetms), ::core::mem::transmute_copy(&sizems)).into())
        }
        unsafe extern "system" fn StaleDataRead<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StaleDataRead(this).into())
        }
        unsafe extern "system" fn ContentBecomingStale<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContentBecomingStale(this).into())
        }
        unsafe extern "system" fn StaleFileDeleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StaleFileDeleted(this).into())
        }
        IMSVidStreamBufferSourceEvent_Vtbl {
            base__: <IMSVidFilePlaybackEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CertificateFailure: CertificateFailure::<Identity, Impl, OFFSET>,
            CertificateSuccess: CertificateSuccess::<Identity, Impl, OFFSET>,
            RatingsBlocked: RatingsBlocked::<Identity, Impl, OFFSET>,
            RatingsUnblocked: RatingsUnblocked::<Identity, Impl, OFFSET>,
            RatingsChanged: RatingsChanged::<Identity, Impl, OFFSET>,
            TimeHole: TimeHole::<Identity, Impl, OFFSET>,
            StaleDataRead: StaleDataRead::<Identity, Impl, OFFSET>,
            ContentBecomingStale: ContentBecomingStale::<Identity, Impl, OFFSET>,
            StaleFileDeleted: StaleFileDeleted::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSourceEvent2_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSourceEvent_Impl {
    fn RateChange(this: &Self::This, qwnewrate: f64, qwoldrate: f64) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSourceEvent2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSourceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSourceEvent2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RateChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwnewrate: f64, qwoldrate: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RateChange(this, ::core::mem::transmute_copy(&qwnewrate), ::core::mem::transmute_copy(&qwoldrate)).into())
        }
        IMSVidStreamBufferSourceEvent2_Vtbl { base__: <IMSVidStreamBufferSourceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, RateChange: RateChange::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferSourceEvent3_Impl: ::windows_core::BaseImpl + IMSVidStreamBufferSourceEvent2_Impl {
    fn BroadcastEvent(this: &Self::This, guid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn BroadcastEventEx(this: &Self::This, guid: &::windows_core::BSTR, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows_core::Result<()>;
    fn COPPBlocked(this: &Self::This) -> ::windows_core::Result<()>;
    fn COPPUnblocked(this: &Self::This) -> ::windows_core::Result<()>;
    fn ContentPrimarilyAudio(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferSourceEvent3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidStreamBufferSourceEvent2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferSourceEvent3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn BroadcastEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BroadcastEvent(this, ::core::mem::transmute(&guid)).into())
        }
        unsafe extern "system" fn BroadcastEventEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows_core::BSTR>, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BroadcastEventEx(this, ::core::mem::transmute(&guid), ::core::mem::transmute_copy(&param1), ::core::mem::transmute_copy(&param2), ::core::mem::transmute_copy(&param3), ::core::mem::transmute_copy(&param4)).into())
        }
        unsafe extern "system" fn COPPBlocked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::COPPBlocked(this).into())
        }
        unsafe extern "system" fn COPPUnblocked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::COPPUnblocked(this).into())
        }
        unsafe extern "system" fn ContentPrimarilyAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferSourceEvent3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContentPrimarilyAudio(this).into())
        }
        IMSVidStreamBufferSourceEvent3_Vtbl {
            base__: <IMSVidStreamBufferSourceEvent2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            BroadcastEvent: BroadcastEvent::<Identity, Impl, OFFSET>,
            BroadcastEventEx: BroadcastEventEx::<Identity, Impl, OFFSET>,
            COPPBlocked: COPPBlocked::<Identity, Impl, OFFSET>,
            COPPUnblocked: COPPUnblocked::<Identity, Impl, OFFSET>,
            ContentPrimarilyAudio: ContentPrimarilyAudio::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidStreamBufferV2SourceEvent_Impl: ::windows_core::BaseImpl + IMSVidFilePlaybackEvent_Impl {
    fn RatingsChanged(this: &Self::This) -> ::windows_core::Result<()>;
    fn TimeHole(this: &Self::This, streamoffsetms: i32, sizems: i32) -> ::windows_core::Result<()>;
    fn StaleDataRead(this: &Self::This) -> ::windows_core::Result<()>;
    fn ContentBecomingStale(this: &Self::This) -> ::windows_core::Result<()>;
    fn StaleFileDeleted(this: &Self::This) -> ::windows_core::Result<()>;
    fn RateChange(this: &Self::This, qwnewrate: f64, qwoldrate: f64) -> ::windows_core::Result<()>;
    fn BroadcastEvent(this: &Self::This, guid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn BroadcastEventEx(this: &Self::This, guid: &::windows_core::BSTR, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows_core::Result<()>;
    fn ContentPrimarilyAudio(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidStreamBufferV2SourceEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFilePlaybackEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidStreamBufferV2SourceEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RatingsChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RatingsChanged(this).into())
        }
        unsafe extern "system" fn TimeHole<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, streamoffsetms: i32, sizems: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TimeHole(this, ::core::mem::transmute_copy(&streamoffsetms), ::core::mem::transmute_copy(&sizems)).into())
        }
        unsafe extern "system" fn StaleDataRead<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StaleDataRead(this).into())
        }
        unsafe extern "system" fn ContentBecomingStale<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContentBecomingStale(this).into())
        }
        unsafe extern "system" fn StaleFileDeleted<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StaleFileDeleted(this).into())
        }
        unsafe extern "system" fn RateChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, qwnewrate: f64, qwoldrate: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RateChange(this, ::core::mem::transmute_copy(&qwnewrate), ::core::mem::transmute_copy(&qwoldrate)).into())
        }
        unsafe extern "system" fn BroadcastEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BroadcastEvent(this, ::core::mem::transmute(&guid)).into())
        }
        unsafe extern "system" fn BroadcastEventEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, guid: ::std::mem::MaybeUninit<::windows_core::BSTR>, param1: u32, param2: u32, param3: u32, param4: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::BroadcastEventEx(this, ::core::mem::transmute(&guid), ::core::mem::transmute_copy(&param1), ::core::mem::transmute_copy(&param2), ::core::mem::transmute_copy(&param3), ::core::mem::transmute_copy(&param4)).into())
        }
        unsafe extern "system" fn ContentPrimarilyAudio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidStreamBufferV2SourceEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContentPrimarilyAudio(this).into())
        }
        IMSVidStreamBufferV2SourceEvent_Vtbl {
            base__: <IMSVidFilePlaybackEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RatingsChanged: RatingsChanged::<Identity, Impl, OFFSET>,
            TimeHole: TimeHole::<Identity, Impl, OFFSET>,
            StaleDataRead: StaleDataRead::<Identity, Impl, OFFSET>,
            ContentBecomingStale: ContentBecomingStale::<Identity, Impl, OFFSET>,
            StaleFileDeleted: StaleFileDeleted::<Identity, Impl, OFFSET>,
            RateChange: RateChange::<Identity, Impl, OFFSET>,
            BroadcastEvent: BroadcastEvent::<Identity, Impl, OFFSET>,
            BroadcastEventEx: BroadcastEventEx::<Identity, Impl, OFFSET>,
            ContentPrimarilyAudio: ContentPrimarilyAudio::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidTuner_Impl: ::windows_core::BaseImpl + IMSVidVideoInputDevice_Impl {
    fn Tune(this: &Self::This) -> ::windows_core::Result<ITuneRequest>;
    fn SetTune(this: &Self::This, ptr: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<()>;
    fn TuningSpace(this: &Self::This) -> ::windows_core::Result<ITuningSpace>;
    fn SetTuningSpace(this: &Self::This, plts: ::core::option::Option<&ITuningSpace>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidTuner {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidVideoInputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTuner_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidTuner {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Tune<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptr: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Tune(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTune<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptr: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTune(this, ::windows_core::from_raw_borrowed(&ptr)).into())
        }
        unsafe extern "system" fn TuningSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plts: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TuningSpace(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plts, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTuningSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plts: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTuningSpace(this, ::windows_core::from_raw_borrowed(&plts)).into())
        }
        IMSVidTuner_Vtbl {
            base__: <IMSVidVideoInputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Tune: Tune::<Identity, Impl, OFFSET>,
            SetTune: SetTune::<Identity, Impl, OFFSET>,
            TuningSpace: TuningSpace::<Identity, Impl, OFFSET>,
            SetTuningSpace: SetTuningSpace::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidTunerEvent_Impl: ::windows_core::BaseImpl + IMSVidInputDeviceEvent_Impl {
    fn TuneChanged(this: &Self::This, lpd: ::core::option::Option<&IMSVidTuner>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidTunerEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidInputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTunerEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidTunerEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TuneChanged<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidTunerEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpd: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TuneChanged(this, ::windows_core::from_raw_borrowed(&lpd)).into())
        }
        IMSVidTunerEvent_Vtbl { base__: <IMSVidInputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, TuneChanged: TuneChanged::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVMR9_Impl: ::windows_core::BaseImpl + IMSVidVideoRenderer_Impl {
    fn Allocator_ID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetAllocator(this: &Self::This, allocpresent: ::core::option::Option<&::windows_core::IUnknown>, id: i32) -> ::windows_core::Result<()>;
    fn SetSuppressEffects(this: &Self::This, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SuppressEffects(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn Allocator(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVMR9 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidVideoRenderer);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVMR9_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVMR9 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Allocator_ID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVMR9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Allocator_ID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVMR9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllocator(this, ::windows_core::from_raw_borrowed(&allocpresent), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn SetSuppressEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVMR9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSuppressEffects(this, ::core::mem::transmute_copy(&bsuppress)).into())
        }
        unsafe extern "system" fn SuppressEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVMR9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsuppress: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SuppressEffects(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bsuppress, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Allocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVMR9_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Allocator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(allocpresent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidVMR9_Vtbl {
            base__: <IMSVidVideoRenderer as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Allocator_ID: Allocator_ID::<Identity, Impl, OFFSET>,
            SetAllocator: SetAllocator::<Identity, Impl, OFFSET>,
            SetSuppressEffects: SetSuppressEffects::<Identity, Impl, OFFSET>,
            SuppressEffects: SuppressEffects::<Identity, Impl, OFFSET>,
            Allocator: Allocator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
pub trait IMSVidVRGraphSegment_Impl: ::windows_core::BaseImpl + IMSVidGraphSegment_Impl {
    fn Set_VMRendererMode(this: &Self::This, dwmode: i32) -> ::windows_core::Result<()>;
    fn SetOwner(this: &Self::This, window: super::super::super::Foundation::HWND) -> ::windows_core::Result<()>;
    fn Owner(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::HWND>;
    fn UseOverlay(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetUseOverlay(this: &Self::This, useoverlayval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Visible(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetVisible(this: &Self::This, visible: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ColorKey(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetColorKey(this: &Self::This, colorkey: u32) -> ::windows_core::Result<()>;
    fn Source(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::RECT>;
    fn SetSource(this: &Self::This, r: &super::super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn Destination(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::RECT>;
    fn SetDestination(this: &Self::This, r: &super::super::super::Foundation::RECT) -> ::windows_core::Result<()>;
    fn get_NativeSize(this: &Self::This, sizeval: *mut super::super::super::Foundation::SIZE, aspectratio: *mut super::super::super::Foundation::SIZE) -> ::windows_core::Result<()>;
    fn BorderColor(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetBorderColor(this: &Self::This, color: u32) -> ::windows_core::Result<()>;
    fn MaintainAspectRatio(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetMaintainAspectRatio(this: &Self::This, fmaintain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Refresh(this: &Self::This) -> ::windows_core::Result<()>;
    fn DisplayChange(this: &Self::This) -> ::windows_core::Result<()>;
    fn RePaint(this: &Self::This, hdc: super::super::super::Graphics::Gdi::HDC) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IMSVidVRGraphSegment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidGraphSegment);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVRGraphSegment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Set_VMRendererMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmode: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_VMRendererMode(this, ::core::mem::transmute_copy(&dwmode)).into())
        }
        unsafe extern "system" fn SetOwner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, window: super::super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOwner(this, ::core::mem::transmute_copy(&window)).into())
        }
        unsafe extern "system" fn Owner<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, window: *mut super::super::super::Foundation::HWND) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Owner(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(window, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UseOverlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, useoverlayval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UseOverlay(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(useoverlayval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUseOverlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, useoverlayval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUseOverlay(this, ::core::mem::transmute_copy(&useoverlayval)).into())
        }
        unsafe extern "system" fn Visible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, visible: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Visible(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(visible, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetVisible<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, visible: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetVisible(this, ::core::mem::transmute_copy(&visible)).into())
        }
        unsafe extern "system" fn ColorKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, colorkey: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ColorKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(colorkey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetColorKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, colorkey: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetColorKey(this, ::core::mem::transmute_copy(&colorkey)).into())
        }
        unsafe extern "system" fn Source<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r: *mut super::super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Source(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSource<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r: super::super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSource(this, ::core::mem::transmute(&r)).into())
        }
        unsafe extern "system" fn Destination<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r: *mut super::super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Destination(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(r, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDestination<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r: super::super::super::Foundation::RECT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDestination(this, ::core::mem::transmute(&r)).into())
        }
        unsafe extern "system" fn get_NativeSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sizeval: *mut super::super::super::Foundation::SIZE, aspectratio: *mut super::super::super::Foundation::SIZE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::get_NativeSize(this, ::core::mem::transmute_copy(&sizeval), ::core::mem::transmute_copy(&aspectratio)).into())
        }
        unsafe extern "system" fn BorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BorderColor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(color, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBorderColor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, color: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBorderColor(this, ::core::mem::transmute_copy(&color)).into())
        }
        unsafe extern "system" fn MaintainAspectRatio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fmaintain: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaintainAspectRatio(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fmaintain, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaintainAspectRatio<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fmaintain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaintainAspectRatio(this, ::core::mem::transmute_copy(&fmaintain)).into())
        }
        unsafe extern "system" fn Refresh<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Refresh(this).into())
        }
        unsafe extern "system" fn DisplayChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DisplayChange(this).into())
        }
        unsafe extern "system" fn RePaint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVRGraphSegment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hdc: super::super::super::Graphics::Gdi::HDC) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RePaint(this, ::core::mem::transmute_copy(&hdc)).into())
        }
        IMSVidVRGraphSegment_Vtbl {
            base__: <IMSVidGraphSegment as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Set_VMRendererMode: Set_VMRendererMode::<Identity, Impl, OFFSET>,
            SetOwner: SetOwner::<Identity, Impl, OFFSET>,
            Owner: Owner::<Identity, Impl, OFFSET>,
            UseOverlay: UseOverlay::<Identity, Impl, OFFSET>,
            SetUseOverlay: SetUseOverlay::<Identity, Impl, OFFSET>,
            Visible: Visible::<Identity, Impl, OFFSET>,
            SetVisible: SetVisible::<Identity, Impl, OFFSET>,
            ColorKey: ColorKey::<Identity, Impl, OFFSET>,
            SetColorKey: SetColorKey::<Identity, Impl, OFFSET>,
            Source: Source::<Identity, Impl, OFFSET>,
            SetSource: SetSource::<Identity, Impl, OFFSET>,
            Destination: Destination::<Identity, Impl, OFFSET>,
            SetDestination: SetDestination::<Identity, Impl, OFFSET>,
            get_NativeSize: get_NativeSize::<Identity, Impl, OFFSET>,
            BorderColor: BorderColor::<Identity, Impl, OFFSET>,
            SetBorderColor: SetBorderColor::<Identity, Impl, OFFSET>,
            MaintainAspectRatio: MaintainAspectRatio::<Identity, Impl, OFFSET>,
            SetMaintainAspectRatio: SetMaintainAspectRatio::<Identity, Impl, OFFSET>,
            Refresh: Refresh::<Identity, Impl, OFFSET>,
            DisplayChange: DisplayChange::<Identity, Impl, OFFSET>,
            RePaint: RePaint::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVideoInputDevice_Impl: ::windows_core::BaseImpl + IMSVidInputDevice_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVideoInputDevice {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidInputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoInputDevice_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVideoInputDevice {
    const VTABLE: Self::Vtable = { IMSVidVideoInputDevice_Vtbl { base__: <IMSVidInputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVideoRenderer_Impl: ::windows_core::BaseImpl + IMSVidOutputDevice_Impl {
    fn CustomCompositorClass(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCustomCompositorClass(this: &Self::This, compositorclsid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn _CustomCompositorClass(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn Set_CustomCompositorClass(this: &Self::This, compositorclsid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn _CustomCompositor(this: &Self::This) -> ::windows_core::Result<super::IVMRImageCompositor>;
    fn Set_CustomCompositor(this: &Self::This, compositor: ::core::option::Option<&super::IVMRImageCompositor>) -> ::windows_core::Result<()>;
    fn MixerBitmap(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IPictureDisp>;
    fn _MixerBitmap(this: &Self::This) -> ::windows_core::Result<super::IVMRMixerBitmap>;
    fn SetMixerBitmap(this: &Self::This, mixerpicturedisp: ::core::option::Option<&super::super::super::System::Ole::IPictureDisp>) -> ::windows_core::Result<()>;
    fn Set_MixerBitmap(this: &Self::This, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows_core::Result<()>;
    fn MixerBitmapPositionRect(this: &Self::This) -> ::windows_core::Result<IMSVidRect>;
    fn SetMixerBitmapPositionRect(this: &Self::This, rdest: ::core::option::Option<&IMSVidRect>) -> ::windows_core::Result<()>;
    fn MixerBitmapOpacity(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMixerBitmapOpacity(this: &Self::This, opacity: i32) -> ::windows_core::Result<()>;
    fn SetupMixerBitmap(this: &Self::This, mixerpicturedisp: ::core::option::Option<&super::super::super::System::Ole::IPictureDisp>, opacity: i32, rdest: ::core::option::Option<&IMSVidRect>) -> ::windows_core::Result<()>;
    fn SourceSize(this: &Self::This) -> ::windows_core::Result<SourceSizeList>;
    fn SetSourceSize(this: &Self::This, newsize: SourceSizeList) -> ::windows_core::Result<()>;
    fn OverScan(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetOverScan(this: &Self::This, lpercent: i32) -> ::windows_core::Result<()>;
    fn AvailableSourceRect(this: &Self::This) -> ::windows_core::Result<IMSVidRect>;
    fn MaxVidRect(this: &Self::This) -> ::windows_core::Result<IMSVidRect>;
    fn MinVidRect(this: &Self::This) -> ::windows_core::Result<IMSVidRect>;
    fn ClippedSourceRect(this: &Self::This) -> ::windows_core::Result<IMSVidRect>;
    fn SetClippedSourceRect(this: &Self::This, prect: ::core::option::Option<&IMSVidRect>) -> ::windows_core::Result<()>;
    fn UsingOverlay(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetUsingOverlay(this: &Self::This, useoverlayval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Capture(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IPictureDisp>;
    fn FramesPerSecond(this: &Self::This) -> ::windows_core::Result<i32>;
    fn DecimateInput(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetDecimateInput(this: &Self::This, pdeci: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVideoRenderer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDevice);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVideoRenderer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CustomCompositorClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compositorclsid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CustomCompositorClass(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(compositorclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCustomCompositorClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compositorclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCustomCompositorClass(this, ::core::mem::transmute(&compositorclsid)).into())
        }
        unsafe extern "system" fn _CustomCompositorClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compositorclsid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_CustomCompositorClass(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(compositorclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_CustomCompositorClass<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compositorclsid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_CustomCompositorClass(this, ::core::mem::transmute_copy(&compositorclsid)).into())
        }
        unsafe extern "system" fn _CustomCompositor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compositor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_CustomCompositor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(compositor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_CustomCompositor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, compositor: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_CustomCompositor(this, ::windows_core::from_raw_borrowed(&compositor)).into())
        }
        unsafe extern "system" fn MixerBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MixerBitmap(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mixerpicturedisp, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _MixerBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mixerpicture: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_MixerBitmap(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(mixerpicture, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMixerBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMixerBitmap(this, ::windows_core::from_raw_borrowed(&mixerpicturedisp)).into())
        }
        unsafe extern "system" fn Set_MixerBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mixerpicture: *const super::VMRALPHABITMAP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_MixerBitmap(this, ::core::mem::transmute_copy(&mixerpicture)).into())
        }
        unsafe extern "system" fn MixerBitmapPositionRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rdest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MixerBitmapPositionRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(rdest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMixerBitmapPositionRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rdest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMixerBitmapPositionRect(this, ::windows_core::from_raw_borrowed(&rdest)).into())
        }
        unsafe extern "system" fn MixerBitmapOpacity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, opacity: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MixerBitmapOpacity(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(opacity, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMixerBitmapOpacity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, opacity: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMixerBitmapOpacity(this, ::core::mem::transmute_copy(&opacity)).into())
        }
        unsafe extern "system" fn SetupMixerBitmap<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mixerpicturedisp: *mut ::core::ffi::c_void, opacity: i32, rdest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetupMixerBitmap(this, ::windows_core::from_raw_borrowed(&mixerpicturedisp), ::core::mem::transmute_copy(&opacity), ::windows_core::from_raw_borrowed(&rdest)).into())
        }
        unsafe extern "system" fn SourceSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentsize: *mut SourceSizeList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SourceSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(currentsize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSourceSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newsize: SourceSizeList) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSourceSize(this, ::core::mem::transmute_copy(&newsize)).into())
        }
        unsafe extern "system" fn OverScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plpercent: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OverScan(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plpercent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOverScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpercent: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOverScan(this, ::core::mem::transmute_copy(&lpercent)).into())
        }
        unsafe extern "system" fn AvailableSourceRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prect: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AvailableSourceRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MaxVidRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvidrect: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxVidRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvidrect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MinVidRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvidrect: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinVidRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvidrect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ClippedSourceRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prect: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ClippedSourceRect(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetClippedSourceRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prect: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClippedSourceRect(this, ::windows_core::from_raw_borrowed(&prect)).into())
        }
        unsafe extern "system" fn UsingOverlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, useoverlayval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UsingOverlay(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(useoverlayval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUsingOverlay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, useoverlayval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUsingOverlay(this, ::core::mem::transmute_copy(&useoverlayval)).into())
        }
        unsafe extern "system" fn Capture<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentimage: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Capture(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(currentimage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FramesPerSecond<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FramesPerSecond(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DecimateInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdeci: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DecimateInput(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdeci, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDecimateInput<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdeci: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDecimateInput(this, ::core::mem::transmute_copy(&pdeci)).into())
        }
        IMSVidVideoRenderer_Vtbl {
            base__: <IMSVidOutputDevice as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CustomCompositorClass: CustomCompositorClass::<Identity, Impl, OFFSET>,
            SetCustomCompositorClass: SetCustomCompositorClass::<Identity, Impl, OFFSET>,
            _CustomCompositorClass: _CustomCompositorClass::<Identity, Impl, OFFSET>,
            Set_CustomCompositorClass: Set_CustomCompositorClass::<Identity, Impl, OFFSET>,
            _CustomCompositor: _CustomCompositor::<Identity, Impl, OFFSET>,
            Set_CustomCompositor: Set_CustomCompositor::<Identity, Impl, OFFSET>,
            MixerBitmap: MixerBitmap::<Identity, Impl, OFFSET>,
            _MixerBitmap: _MixerBitmap::<Identity, Impl, OFFSET>,
            SetMixerBitmap: SetMixerBitmap::<Identity, Impl, OFFSET>,
            Set_MixerBitmap: Set_MixerBitmap::<Identity, Impl, OFFSET>,
            MixerBitmapPositionRect: MixerBitmapPositionRect::<Identity, Impl, OFFSET>,
            SetMixerBitmapPositionRect: SetMixerBitmapPositionRect::<Identity, Impl, OFFSET>,
            MixerBitmapOpacity: MixerBitmapOpacity::<Identity, Impl, OFFSET>,
            SetMixerBitmapOpacity: SetMixerBitmapOpacity::<Identity, Impl, OFFSET>,
            SetupMixerBitmap: SetupMixerBitmap::<Identity, Impl, OFFSET>,
            SourceSize: SourceSize::<Identity, Impl, OFFSET>,
            SetSourceSize: SetSourceSize::<Identity, Impl, OFFSET>,
            OverScan: OverScan::<Identity, Impl, OFFSET>,
            SetOverScan: SetOverScan::<Identity, Impl, OFFSET>,
            AvailableSourceRect: AvailableSourceRect::<Identity, Impl, OFFSET>,
            MaxVidRect: MaxVidRect::<Identity, Impl, OFFSET>,
            MinVidRect: MinVidRect::<Identity, Impl, OFFSET>,
            ClippedSourceRect: ClippedSourceRect::<Identity, Impl, OFFSET>,
            SetClippedSourceRect: SetClippedSourceRect::<Identity, Impl, OFFSET>,
            UsingOverlay: UsingOverlay::<Identity, Impl, OFFSET>,
            SetUsingOverlay: SetUsingOverlay::<Identity, Impl, OFFSET>,
            Capture: Capture::<Identity, Impl, OFFSET>,
            FramesPerSecond: FramesPerSecond::<Identity, Impl, OFFSET>,
            DecimateInput: DecimateInput::<Identity, Impl, OFFSET>,
            SetDecimateInput: SetDecimateInput::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Graphics_DirectDraw\"`, `\"Win32_Graphics_Gdi\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVideoRenderer2_Impl: ::windows_core::BaseImpl + IMSVidVideoRenderer_Impl {
    fn Allocator(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn _Allocator(this: &Self::This) -> ::windows_core::Result<super::IVMRSurfaceAllocator>;
    fn Allocator_ID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetAllocator(this: &Self::This, allocpresent: ::core::option::Option<&::windows_core::IUnknown>, id: i32) -> ::windows_core::Result<()>;
    fn _SetAllocator2(this: &Self::This, allocpresent: ::core::option::Option<&super::IVMRSurfaceAllocator>, id: i32) -> ::windows_core::Result<()>;
    fn SetSuppressEffects(this: &Self::This, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SuppressEffects(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVideoRenderer2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidVideoRenderer);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Graphics_DirectDraw", feature = "Win32_Graphics_Gdi", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVideoRenderer2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Allocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Allocator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(allocpresent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _Allocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allocpresent: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_Allocator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(allocpresent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Allocator_ID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Allocator_ID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAllocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAllocator(this, ::windows_core::from_raw_borrowed(&allocpresent), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn _SetAllocator2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allocpresent: *mut ::core::ffi::c_void, id: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::_SetAllocator2(this, ::windows_core::from_raw_borrowed(&allocpresent), ::core::mem::transmute_copy(&id)).into())
        }
        unsafe extern "system" fn SetSuppressEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsuppress: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSuppressEffects(this, ::core::mem::transmute_copy(&bsuppress)).into())
        }
        unsafe extern "system" fn SuppressEffects<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRenderer2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bsuppress: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SuppressEffects(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(bsuppress, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidVideoRenderer2_Vtbl {
            base__: <IMSVidVideoRenderer as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Allocator: Allocator::<Identity, Impl, OFFSET>,
            _Allocator: _Allocator::<Identity, Impl, OFFSET>,
            Allocator_ID: Allocator_ID::<Identity, Impl, OFFSET>,
            SetAllocator: SetAllocator::<Identity, Impl, OFFSET>,
            _SetAllocator2: _SetAllocator2::<Identity, Impl, OFFSET>,
            SetSuppressEffects: SetSuppressEffects::<Identity, Impl, OFFSET>,
            SuppressEffects: SuppressEffects::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVideoRendererDevices_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IMSVidVideoRenderer>;
    fn Add(this: &Self::This, pdb: ::core::option::Option<&IMSVidVideoRenderer>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, v: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVideoRendererDevices {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererDevices_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVideoRendererDevices {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pd: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pd, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT, pdb: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&v)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdb, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdb: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pdb)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererDevices_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, v: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&v)).into())
        }
        IMSVidVideoRendererDevices_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVideoRendererEvent_Impl: ::windows_core::BaseImpl + IMSVidOutputDeviceEvent_Impl {
    fn OverlayUnavailable(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVideoRendererEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVideoRendererEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OverlayUnavailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OverlayUnavailable(this).into())
        }
        IMSVidVideoRendererEvent_Vtbl {
            base__: <IMSVidOutputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OverlayUnavailable: OverlayUnavailable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidVideoRendererEvent2_Impl: ::windows_core::BaseImpl + IMSVidOutputDeviceEvent_Impl {
    fn OverlayUnavailable(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidVideoRendererEvent2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidOutputDeviceEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererEvent2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidVideoRendererEvent2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OverlayUnavailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidVideoRendererEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OverlayUnavailable(this).into())
        }
        IMSVidVideoRendererEvent2_Vtbl {
            base__: <IMSVidOutputDeviceEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OverlayUnavailable: OverlayUnavailable::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidWebDVD_Impl: ::windows_core::BaseImpl + IMSVidPlayback_Impl {
    fn OnDVDEvent(this: &Self::This, levent: i32, lparam1: isize, lparam2: isize) -> ::windows_core::Result<()>;
    fn PlayTitle(this: &Self::This, ltitle: i32) -> ::windows_core::Result<()>;
    fn PlayChapterInTitle(this: &Self::This, ltitle: i32, lchapter: i32) -> ::windows_core::Result<()>;
    fn PlayChapter(this: &Self::This, lchapter: i32) -> ::windows_core::Result<()>;
    fn PlayChaptersAutoStop(this: &Self::This, ltitle: i32, lstrchapter: i32, lchaptercount: i32) -> ::windows_core::Result<()>;
    fn PlayAtTime(this: &Self::This, strtime: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn PlayAtTimeInTitle(this: &Self::This, ltitle: i32, strtime: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn PlayPeriodInTitleAutoStop(this: &Self::This, ltitle: i32, strstarttime: &::windows_core::BSTR, strendtime: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ReplayChapter(this: &Self::This) -> ::windows_core::Result<()>;
    fn PlayPrevChapter(this: &Self::This) -> ::windows_core::Result<()>;
    fn PlayNextChapter(this: &Self::This) -> ::windows_core::Result<()>;
    fn StillOff(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_AudioLanguage(this: &Self::This, lstream: i32, fformat: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ShowMenu(this: &Self::This, menuid: DVDMenuIDConstants) -> ::windows_core::Result<()>;
    fn Resume(this: &Self::This) -> ::windows_core::Result<()>;
    fn ReturnFromSubmenu(this: &Self::This) -> ::windows_core::Result<()>;
    fn ButtonsAvailable(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentButton(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SelectAndActivateButton(this: &Self::This, lbutton: i32) -> ::windows_core::Result<()>;
    fn ActivateButton(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectRightButton(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectLeftButton(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectLowerButton(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectUpperButton(this: &Self::This) -> ::windows_core::Result<()>;
    fn ActivateAtPosition(this: &Self::This, xpos: i32, ypos: i32) -> ::windows_core::Result<()>;
    fn SelectAtPosition(this: &Self::This, xpos: i32, ypos: i32) -> ::windows_core::Result<()>;
    fn get_ButtonAtPosition(this: &Self::This, xpos: i32, ypos: i32) -> ::windows_core::Result<i32>;
    fn get_NumberOfChapters(this: &Self::This, ltitle: i32) -> ::windows_core::Result<i32>;
    fn TotalTitleTime(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn TitlesAvailable(this: &Self::This) -> ::windows_core::Result<i32>;
    fn VolumesAvailable(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentVolume(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentDiscSide(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentDomain(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentChapter(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentTitle(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentTime(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn DVDTimeCode2bstr(this: &Self::This, timecode: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn DVDDirectory(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetDVDDirectory(this: &Self::This, newval: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn IsSubpictureStreamEnabled(this: &Self::This, lstream: i32) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn IsAudioStreamEnabled(this: &Self::This, lstream: i32) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn CurrentSubpictureStream(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCurrentSubpictureStream(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn get_SubpictureLanguage(this: &Self::This, lstream: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CurrentAudioStream(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCurrentAudioStream(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn AudioStreamsAvailable(this: &Self::This) -> ::windows_core::Result<i32>;
    fn AnglesAvailable(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CurrentAngle(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCurrentAngle(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn SubpictureStreamsAvailable(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SubpictureOn(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSubpictureOn(this: &Self::This, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn DVDUniqueID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn AcceptParentalLevelChange(this: &Self::This, faccept: super::super::super::Foundation::VARIANT_BOOL, strusername: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn NotifyParentalLevelChange(this: &Self::This, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SelectParentalCountry(this: &Self::This, lcountry: i32, strusername: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SelectParentalLevel(this: &Self::This, lparentallevel: i32, strusername: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_TitleParentalLevels(this: &Self::This, ltitle: i32) -> ::windows_core::Result<i32>;
    fn PlayerParentalCountry(this: &Self::This) -> ::windows_core::Result<i32>;
    fn PlayerParentalLevel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Eject(this: &Self::This) -> ::windows_core::Result<()>;
    fn UOPValid(this: &Self::This, luop: i32) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn get_SPRM(this: &Self::This, lindex: i32) -> ::windows_core::Result<i16>;
    fn get_GPRM(this: &Self::This, lindex: i32) -> ::windows_core::Result<i16>;
    fn put_GPRM(this: &Self::This, lindex: i32, svalue: i16) -> ::windows_core::Result<()>;
    fn get_DVDTextStringType(this: &Self::This, llangindex: i32, lstringindex: i32) -> ::windows_core::Result<DVDTextStringType>;
    fn get_DVDTextString(this: &Self::This, llangindex: i32, lstringindex: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_DVDTextNumberOfStrings(this: &Self::This, llangindex: i32) -> ::windows_core::Result<i32>;
    fn DVDTextNumberOfLanguages(this: &Self::This) -> ::windows_core::Result<i32>;
    fn get_DVDTextLanguageLCID(this: &Self::This, llangindex: i32) -> ::windows_core::Result<i32>;
    fn RegionChange(this: &Self::This) -> ::windows_core::Result<()>;
    fn DVDAdm(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Com::IDispatch>;
    fn DeleteBookmark(this: &Self::This) -> ::windows_core::Result<()>;
    fn RestoreBookmark(this: &Self::This) -> ::windows_core::Result<()>;
    fn SaveBookmark(this: &Self::This) -> ::windows_core::Result<()>;
    fn SelectDefaultAudioLanguage(this: &Self::This, lang: i32, ext: i32) -> ::windows_core::Result<()>;
    fn SelectDefaultSubpictureLanguage(this: &Self::This, lang: i32, ext: DVDSPExt) -> ::windows_core::Result<()>;
    fn PreferredSubpictureStream(this: &Self::This) -> ::windows_core::Result<i32>;
    fn DefaultMenuLanguage(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetDefaultMenuLanguage(this: &Self::This, lang: i32) -> ::windows_core::Result<()>;
    fn DefaultSubpictureLanguage(this: &Self::This) -> ::windows_core::Result<i32>;
    fn DefaultAudioLanguage(this: &Self::This) -> ::windows_core::Result<i32>;
    fn DefaultSubpictureLanguageExt(this: &Self::This) -> ::windows_core::Result<DVDSPExt>;
    fn DefaultAudioLanguageExt(this: &Self::This) -> ::windows_core::Result<i32>;
    fn get_LanguageFromLCID(this: &Self::This, lcid: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn KaraokeAudioPresentationMode(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetKaraokeAudioPresentationMode(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn get_KaraokeChannelContent(this: &Self::This, lstream: i32, lchan: i32) -> ::windows_core::Result<i32>;
    fn get_KaraokeChannelAssignment(this: &Self::This, lstream: i32) -> ::windows_core::Result<i32>;
    fn RestorePreferredSettings(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_ButtonRect(this: &Self::This, lbutton: i32) -> ::windows_core::Result<IMSVidRect>;
    fn DVDScreenInMouseCoordinates(this: &Self::This) -> ::windows_core::Result<IMSVidRect>;
    fn SetDVDScreenInMouseCoordinates(this: &Self::This, prect: ::core::option::Option<&IMSVidRect>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidWebDVD {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidPlayback);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidWebDVD {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OnDVDEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, levent: i32, lparam1: isize, lparam2: isize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OnDVDEvent(this, ::core::mem::transmute_copy(&levent), ::core::mem::transmute_copy(&lparam1), ::core::mem::transmute_copy(&lparam2)).into())
        }
        unsafe extern "system" fn PlayTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayTitle(this, ::core::mem::transmute_copy(&ltitle)).into())
        }
        unsafe extern "system" fn PlayChapterInTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32, lchapter: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayChapterInTitle(this, ::core::mem::transmute_copy(&ltitle), ::core::mem::transmute_copy(&lchapter)).into())
        }
        unsafe extern "system" fn PlayChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lchapter: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayChapter(this, ::core::mem::transmute_copy(&lchapter)).into())
        }
        unsafe extern "system" fn PlayChaptersAutoStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32, lstrchapter: i32, lchaptercount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayChaptersAutoStop(this, ::core::mem::transmute_copy(&ltitle), ::core::mem::transmute_copy(&lstrchapter), ::core::mem::transmute_copy(&lchaptercount)).into())
        }
        unsafe extern "system" fn PlayAtTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strtime: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayAtTime(this, ::core::mem::transmute(&strtime)).into())
        }
        unsafe extern "system" fn PlayAtTimeInTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32, strtime: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayAtTimeInTitle(this, ::core::mem::transmute_copy(&ltitle), ::core::mem::transmute(&strtime)).into())
        }
        unsafe extern "system" fn PlayPeriodInTitleAutoStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32, strstarttime: ::std::mem::MaybeUninit<::windows_core::BSTR>, strendtime: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayPeriodInTitleAutoStop(this, ::core::mem::transmute_copy(&ltitle), ::core::mem::transmute(&strstarttime), ::core::mem::transmute(&strendtime)).into())
        }
        unsafe extern "system" fn ReplayChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReplayChapter(this).into())
        }
        unsafe extern "system" fn PlayPrevChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayPrevChapter(this).into())
        }
        unsafe extern "system" fn PlayNextChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayNextChapter(this).into())
        }
        unsafe extern "system" fn StillOff<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StillOff(this).into())
        }
        unsafe extern "system" fn get_AudioLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstream: i32, fformat: super::super::super::Foundation::VARIANT_BOOL, straudiolang: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_AudioLanguage(this, ::core::mem::transmute_copy(&lstream), ::core::mem::transmute_copy(&fformat)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(straudiolang, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShowMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, menuid: DVDMenuIDConstants) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowMenu(this, ::core::mem::transmute_copy(&menuid)).into())
        }
        unsafe extern "system" fn Resume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resume(this).into())
        }
        unsafe extern "system" fn ReturnFromSubmenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnFromSubmenu(this).into())
        }
        unsafe extern "system" fn ButtonsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ButtonsAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentButton(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SelectAndActivateButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lbutton: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectAndActivateButton(this, ::core::mem::transmute_copy(&lbutton)).into())
        }
        unsafe extern "system" fn ActivateButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateButton(this).into())
        }
        unsafe extern "system" fn SelectRightButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectRightButton(this).into())
        }
        unsafe extern "system" fn SelectLeftButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectLeftButton(this).into())
        }
        unsafe extern "system" fn SelectLowerButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectLowerButton(this).into())
        }
        unsafe extern "system" fn SelectUpperButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectUpperButton(this).into())
        }
        unsafe extern "system" fn ActivateAtPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ActivateAtPosition(this, ::core::mem::transmute_copy(&xpos), ::core::mem::transmute_copy(&ypos)).into())
        }
        unsafe extern "system" fn SelectAtPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectAtPosition(this, ::core::mem::transmute_copy(&xpos), ::core::mem::transmute_copy(&ypos)).into())
        }
        unsafe extern "system" fn get_ButtonAtPosition<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, xpos: i32, ypos: i32, plbutton: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ButtonAtPosition(this, ::core::mem::transmute_copy(&xpos), ::core::mem::transmute_copy(&ypos)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plbutton, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_NumberOfChapters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_NumberOfChapters(this, ::core::mem::transmute_copy(&ltitle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TotalTitleTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TotalTitleTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TitlesAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TitlesAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VolumesAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VolumesAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentVolume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentVolume(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentDiscSide<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentDiscSide(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentDomain<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentDomain(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentChapter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentTitle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DVDTimeCode2bstr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, timecode: i32, ptimestr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DVDTimeCode2bstr(this, ::core::mem::transmute_copy(&timecode)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptimestr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DVDDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DVDDirectory(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDVDDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDVDDirectory(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn IsSubpictureStreamEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstream: i32, fenabled: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSubpictureStreamEnabled(this, ::core::mem::transmute_copy(&lstream)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsAudioStreamEnabled<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstream: i32, fenabled: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsAudioStreamEnabled(this, ::core::mem::transmute_copy(&lstream)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fenabled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentSubpictureStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentSubpictureStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentSubpictureStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentSubpictureStream(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn get_SubpictureLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstream: i32, strlanguage: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SubpictureLanguage(this, ::core::mem::transmute_copy(&lstream)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(strlanguage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentAudioStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentAudioStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentAudioStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentAudioStream(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn AudioStreamsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AudioStreamsAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AnglesAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AnglesAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CurrentAngle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CurrentAngle(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCurrentAngle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCurrentAngle(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn SubpictureStreamsAvailable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SubpictureStreamsAvailable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SubpictureOn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SubpictureOn(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSubpictureOn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSubpictureOn(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn DVDUniqueID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DVDUniqueID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AcceptParentalLevelChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, faccept: super::super::super::Foundation::VARIANT_BOOL, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AcceptParentalLevelChange(this, ::core::mem::transmute_copy(&faccept), ::core::mem::transmute(&strusername), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn NotifyParentalLevelChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::NotifyParentalLevelChange(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn SelectParentalCountry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcountry: i32, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectParentalCountry(this, ::core::mem::transmute_copy(&lcountry), ::core::mem::transmute(&strusername), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn SelectParentalLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lparentallevel: i32, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectParentalLevel(this, ::core::mem::transmute_copy(&lparentallevel), ::core::mem::transmute(&strusername), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn get_TitleParentalLevels<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltitle: i32, plparentallevels: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_TitleParentalLevels(this, ::core::mem::transmute_copy(&ltitle)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plparentallevels, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PlayerParentalCountry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plcountrycode: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PlayerParentalCountry(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcountrycode, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PlayerParentalLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plparentallevel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PlayerParentalLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plparentallevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Eject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Eject(this).into())
        }
        unsafe extern "system" fn UOPValid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, luop: i32, pfvalid: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UOPValid(this, ::core::mem::transmute_copy(&luop)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfvalid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_SPRM<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lindex: i32, pssprm: *mut i16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SPRM(this, ::core::mem::transmute_copy(&lindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pssprm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_GPRM<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lindex: i32, pssprm: *mut i16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_GPRM(this, ::core::mem::transmute_copy(&lindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pssprm, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_GPRM<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lindex: i32, svalue: i16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_GPRM(this, ::core::mem::transmute_copy(&lindex), ::core::mem::transmute_copy(&svalue)).into())
        }
        unsafe extern "system" fn get_DVDTextStringType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llangindex: i32, lstringindex: i32, ptype: *mut DVDTextStringType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_DVDTextStringType(this, ::core::mem::transmute_copy(&llangindex), ::core::mem::transmute_copy(&lstringindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_DVDTextString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llangindex: i32, lstringindex: i32, pstrtext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_DVDTextString(this, ::core::mem::transmute_copy(&llangindex), ::core::mem::transmute_copy(&lstringindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrtext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_DVDTextNumberOfStrings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llangindex: i32, plnumofstrings: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_DVDTextNumberOfStrings(this, ::core::mem::transmute_copy(&llangindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plnumofstrings, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DVDTextNumberOfLanguages<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plnumoflangs: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DVDTextNumberOfLanguages(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plnumoflangs, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_DVDTextLanguageLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llangindex: i32, lcid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_DVDTextLanguageLCID(this, ::core::mem::transmute_copy(&llangindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegionChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegionChange(this).into())
        }
        unsafe extern "system" fn DVDAdm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DVDAdm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteBookmark<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteBookmark(this).into())
        }
        unsafe extern "system" fn RestoreBookmark<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RestoreBookmark(this).into())
        }
        unsafe extern "system" fn SaveBookmark<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveBookmark(this).into())
        }
        unsafe extern "system" fn SelectDefaultAudioLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lang: i32, ext: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectDefaultAudioLanguage(this, ::core::mem::transmute_copy(&lang), ::core::mem::transmute_copy(&ext)).into())
        }
        unsafe extern "system" fn SelectDefaultSubpictureLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lang: i32, ext: DVDSPExt) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectDefaultSubpictureLanguage(this, ::core::mem::transmute_copy(&lang), ::core::mem::transmute_copy(&ext)).into())
        }
        unsafe extern "system" fn PreferredSubpictureStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PreferredSubpictureStream(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultMenuLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultMenuLanguage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lang, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultMenuLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lang: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultMenuLanguage(this, ::core::mem::transmute_copy(&lang)).into())
        }
        unsafe extern "system" fn DefaultSubpictureLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultSubpictureLanguage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lang, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultAudioLanguage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lang: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultAudioLanguage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lang, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultSubpictureLanguageExt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ext: *mut DVDSPExt) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultSubpictureLanguageExt(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultAudioLanguageExt<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ext: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultAudioLanguageExt(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_LanguageFromLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcid: i32, lang: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_LanguageFromLCID(this, ::core::mem::transmute_copy(&lcid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lang, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KaraokeAudioPresentationMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KaraokeAudioPresentationMode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetKaraokeAudioPresentationMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKaraokeAudioPresentationMode(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn get_KaraokeChannelContent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstream: i32, lchan: i32, lcontent: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_KaraokeChannelContent(this, ::core::mem::transmute_copy(&lstream), ::core::mem::transmute_copy(&lchan)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcontent, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_KaraokeChannelAssignment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lstream: i32, lchannelassignment: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_KaraokeChannelAssignment(this, ::core::mem::transmute_copy(&lstream)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lchannelassignment, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RestorePreferredSettings<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RestorePreferredSettings(this).into())
        }
        unsafe extern "system" fn get_ButtonRect<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lbutton: i32, prect: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ButtonRect(this, ::core::mem::transmute_copy(&lbutton)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DVDScreenInMouseCoordinates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprect: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DVDScreenInMouseCoordinates(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pprect, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDVDScreenInMouseCoordinates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prect: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDVDScreenInMouseCoordinates(this, ::windows_core::from_raw_borrowed(&prect)).into())
        }
        IMSVidWebDVD_Vtbl {
            base__: <IMSVidPlayback as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OnDVDEvent: OnDVDEvent::<Identity, Impl, OFFSET>,
            PlayTitle: PlayTitle::<Identity, Impl, OFFSET>,
            PlayChapterInTitle: PlayChapterInTitle::<Identity, Impl, OFFSET>,
            PlayChapter: PlayChapter::<Identity, Impl, OFFSET>,
            PlayChaptersAutoStop: PlayChaptersAutoStop::<Identity, Impl, OFFSET>,
            PlayAtTime: PlayAtTime::<Identity, Impl, OFFSET>,
            PlayAtTimeInTitle: PlayAtTimeInTitle::<Identity, Impl, OFFSET>,
            PlayPeriodInTitleAutoStop: PlayPeriodInTitleAutoStop::<Identity, Impl, OFFSET>,
            ReplayChapter: ReplayChapter::<Identity, Impl, OFFSET>,
            PlayPrevChapter: PlayPrevChapter::<Identity, Impl, OFFSET>,
            PlayNextChapter: PlayNextChapter::<Identity, Impl, OFFSET>,
            StillOff: StillOff::<Identity, Impl, OFFSET>,
            get_AudioLanguage: get_AudioLanguage::<Identity, Impl, OFFSET>,
            ShowMenu: ShowMenu::<Identity, Impl, OFFSET>,
            Resume: Resume::<Identity, Impl, OFFSET>,
            ReturnFromSubmenu: ReturnFromSubmenu::<Identity, Impl, OFFSET>,
            ButtonsAvailable: ButtonsAvailable::<Identity, Impl, OFFSET>,
            CurrentButton: CurrentButton::<Identity, Impl, OFFSET>,
            SelectAndActivateButton: SelectAndActivateButton::<Identity, Impl, OFFSET>,
            ActivateButton: ActivateButton::<Identity, Impl, OFFSET>,
            SelectRightButton: SelectRightButton::<Identity, Impl, OFFSET>,
            SelectLeftButton: SelectLeftButton::<Identity, Impl, OFFSET>,
            SelectLowerButton: SelectLowerButton::<Identity, Impl, OFFSET>,
            SelectUpperButton: SelectUpperButton::<Identity, Impl, OFFSET>,
            ActivateAtPosition: ActivateAtPosition::<Identity, Impl, OFFSET>,
            SelectAtPosition: SelectAtPosition::<Identity, Impl, OFFSET>,
            get_ButtonAtPosition: get_ButtonAtPosition::<Identity, Impl, OFFSET>,
            get_NumberOfChapters: get_NumberOfChapters::<Identity, Impl, OFFSET>,
            TotalTitleTime: TotalTitleTime::<Identity, Impl, OFFSET>,
            TitlesAvailable: TitlesAvailable::<Identity, Impl, OFFSET>,
            VolumesAvailable: VolumesAvailable::<Identity, Impl, OFFSET>,
            CurrentVolume: CurrentVolume::<Identity, Impl, OFFSET>,
            CurrentDiscSide: CurrentDiscSide::<Identity, Impl, OFFSET>,
            CurrentDomain: CurrentDomain::<Identity, Impl, OFFSET>,
            CurrentChapter: CurrentChapter::<Identity, Impl, OFFSET>,
            CurrentTitle: CurrentTitle::<Identity, Impl, OFFSET>,
            CurrentTime: CurrentTime::<Identity, Impl, OFFSET>,
            DVDTimeCode2bstr: DVDTimeCode2bstr::<Identity, Impl, OFFSET>,
            DVDDirectory: DVDDirectory::<Identity, Impl, OFFSET>,
            SetDVDDirectory: SetDVDDirectory::<Identity, Impl, OFFSET>,
            IsSubpictureStreamEnabled: IsSubpictureStreamEnabled::<Identity, Impl, OFFSET>,
            IsAudioStreamEnabled: IsAudioStreamEnabled::<Identity, Impl, OFFSET>,
            CurrentSubpictureStream: CurrentSubpictureStream::<Identity, Impl, OFFSET>,
            SetCurrentSubpictureStream: SetCurrentSubpictureStream::<Identity, Impl, OFFSET>,
            get_SubpictureLanguage: get_SubpictureLanguage::<Identity, Impl, OFFSET>,
            CurrentAudioStream: CurrentAudioStream::<Identity, Impl, OFFSET>,
            SetCurrentAudioStream: SetCurrentAudioStream::<Identity, Impl, OFFSET>,
            AudioStreamsAvailable: AudioStreamsAvailable::<Identity, Impl, OFFSET>,
            AnglesAvailable: AnglesAvailable::<Identity, Impl, OFFSET>,
            CurrentAngle: CurrentAngle::<Identity, Impl, OFFSET>,
            SetCurrentAngle: SetCurrentAngle::<Identity, Impl, OFFSET>,
            SubpictureStreamsAvailable: SubpictureStreamsAvailable::<Identity, Impl, OFFSET>,
            SubpictureOn: SubpictureOn::<Identity, Impl, OFFSET>,
            SetSubpictureOn: SetSubpictureOn::<Identity, Impl, OFFSET>,
            DVDUniqueID: DVDUniqueID::<Identity, Impl, OFFSET>,
            AcceptParentalLevelChange: AcceptParentalLevelChange::<Identity, Impl, OFFSET>,
            NotifyParentalLevelChange: NotifyParentalLevelChange::<Identity, Impl, OFFSET>,
            SelectParentalCountry: SelectParentalCountry::<Identity, Impl, OFFSET>,
            SelectParentalLevel: SelectParentalLevel::<Identity, Impl, OFFSET>,
            get_TitleParentalLevels: get_TitleParentalLevels::<Identity, Impl, OFFSET>,
            PlayerParentalCountry: PlayerParentalCountry::<Identity, Impl, OFFSET>,
            PlayerParentalLevel: PlayerParentalLevel::<Identity, Impl, OFFSET>,
            Eject: Eject::<Identity, Impl, OFFSET>,
            UOPValid: UOPValid::<Identity, Impl, OFFSET>,
            get_SPRM: get_SPRM::<Identity, Impl, OFFSET>,
            get_GPRM: get_GPRM::<Identity, Impl, OFFSET>,
            put_GPRM: put_GPRM::<Identity, Impl, OFFSET>,
            get_DVDTextStringType: get_DVDTextStringType::<Identity, Impl, OFFSET>,
            get_DVDTextString: get_DVDTextString::<Identity, Impl, OFFSET>,
            get_DVDTextNumberOfStrings: get_DVDTextNumberOfStrings::<Identity, Impl, OFFSET>,
            DVDTextNumberOfLanguages: DVDTextNumberOfLanguages::<Identity, Impl, OFFSET>,
            get_DVDTextLanguageLCID: get_DVDTextLanguageLCID::<Identity, Impl, OFFSET>,
            RegionChange: RegionChange::<Identity, Impl, OFFSET>,
            DVDAdm: DVDAdm::<Identity, Impl, OFFSET>,
            DeleteBookmark: DeleteBookmark::<Identity, Impl, OFFSET>,
            RestoreBookmark: RestoreBookmark::<Identity, Impl, OFFSET>,
            SaveBookmark: SaveBookmark::<Identity, Impl, OFFSET>,
            SelectDefaultAudioLanguage: SelectDefaultAudioLanguage::<Identity, Impl, OFFSET>,
            SelectDefaultSubpictureLanguage: SelectDefaultSubpictureLanguage::<Identity, Impl, OFFSET>,
            PreferredSubpictureStream: PreferredSubpictureStream::<Identity, Impl, OFFSET>,
            DefaultMenuLanguage: DefaultMenuLanguage::<Identity, Impl, OFFSET>,
            SetDefaultMenuLanguage: SetDefaultMenuLanguage::<Identity, Impl, OFFSET>,
            DefaultSubpictureLanguage: DefaultSubpictureLanguage::<Identity, Impl, OFFSET>,
            DefaultAudioLanguage: DefaultAudioLanguage::<Identity, Impl, OFFSET>,
            DefaultSubpictureLanguageExt: DefaultSubpictureLanguageExt::<Identity, Impl, OFFSET>,
            DefaultAudioLanguageExt: DefaultAudioLanguageExt::<Identity, Impl, OFFSET>,
            get_LanguageFromLCID: get_LanguageFromLCID::<Identity, Impl, OFFSET>,
            KaraokeAudioPresentationMode: KaraokeAudioPresentationMode::<Identity, Impl, OFFSET>,
            SetKaraokeAudioPresentationMode: SetKaraokeAudioPresentationMode::<Identity, Impl, OFFSET>,
            get_KaraokeChannelContent: get_KaraokeChannelContent::<Identity, Impl, OFFSET>,
            get_KaraokeChannelAssignment: get_KaraokeChannelAssignment::<Identity, Impl, OFFSET>,
            RestorePreferredSettings: RestorePreferredSettings::<Identity, Impl, OFFSET>,
            get_ButtonRect: get_ButtonRect::<Identity, Impl, OFFSET>,
            DVDScreenInMouseCoordinates: DVDScreenInMouseCoordinates::<Identity, Impl, OFFSET>,
            SetDVDScreenInMouseCoordinates: SetDVDScreenInMouseCoordinates::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidWebDVD2_Impl: ::windows_core::BaseImpl + IMSVidWebDVD_Impl {
    fn get_Bookmark(this: &Self::This, ppdata: *mut *mut u8, pdatalength: *mut u32) -> ::windows_core::Result<()>;
    fn put_Bookmark(this: &Self::This, pdata: *const u8, dwdatalength: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidWebDVD2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidWebDVD);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidWebDVD2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_Bookmark<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdata: *mut *mut u8, pdatalength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::get_Bookmark(this, ::core::mem::transmute_copy(&ppdata), ::core::mem::transmute_copy(&pdatalength)).into())
        }
        unsafe extern "system" fn put_Bookmark<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVD2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdata: *const u8, dwdatalength: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Bookmark(this, ::core::mem::transmute_copy(&pdata), ::core::mem::transmute_copy(&dwdatalength)).into())
        }
        IMSVidWebDVD2_Vtbl {
            base__: <IMSVidWebDVD as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_Bookmark: get_Bookmark::<Identity, Impl, OFFSET>,
            put_Bookmark: put_Bookmark::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidWebDVDAdm_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn ChangePassword(this: &Self::This, strusername: &::windows_core::BSTR, strold: &::windows_core::BSTR, strnew: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SaveParentalLevel(this: &Self::This, level: i32, strusername: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SaveParentalCountry(this: &Self::This, country: i32, strusername: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ConfirmPassword(this: &Self::This, strusername: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn GetParentalLevel(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetParentalCountry(this: &Self::This) -> ::windows_core::Result<i32>;
    fn DefaultAudioLCID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetDefaultAudioLCID(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn DefaultSubpictureLCID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetDefaultSubpictureLCID(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn DefaultMenuLCID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetDefaultMenuLCID(this: &Self::This, newval: i32) -> ::windows_core::Result<()>;
    fn BookmarkOnStop(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetBookmarkOnStop(this: &Self::This, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidWebDVDAdm {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidWebDVDAdm {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ChangePassword<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strold: ::std::mem::MaybeUninit<::windows_core::BSTR>, strnew: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangePassword(this, ::core::mem::transmute(&strusername), ::core::mem::transmute(&strold), ::core::mem::transmute(&strnew)).into())
        }
        unsafe extern "system" fn SaveParentalLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: i32, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveParentalLevel(this, ::core::mem::transmute_copy(&level), ::core::mem::transmute(&strusername), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn SaveParentalCountry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, country: i32, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SaveParentalCountry(this, ::core::mem::transmute_copy(&country), ::core::mem::transmute(&strusername), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn ConfirmPassword<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strusername: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ConfirmPassword(this, ::core::mem::transmute(&strusername), ::core::mem::transmute(&strpassword)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetParentalLevel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, llevel: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetParentalLevel(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(llevel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetParentalCountry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lcountry: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetParentalCountry(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lcountry, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultAudioLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultAudioLCID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultAudioLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultAudioLCID(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn DefaultSubpictureLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultSubpictureLCID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultSubpictureLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultSubpictureLCID(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn DefaultMenuLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultMenuLCID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultMenuLCID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultMenuLCID(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn BookmarkOnStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BookmarkOnStop(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBookmarkOnStop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDAdm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBookmarkOnStop(this, ::core::mem::transmute_copy(&newval)).into())
        }
        IMSVidWebDVDAdm_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ChangePassword: ChangePassword::<Identity, Impl, OFFSET>,
            SaveParentalLevel: SaveParentalLevel::<Identity, Impl, OFFSET>,
            SaveParentalCountry: SaveParentalCountry::<Identity, Impl, OFFSET>,
            ConfirmPassword: ConfirmPassword::<Identity, Impl, OFFSET>,
            GetParentalLevel: GetParentalLevel::<Identity, Impl, OFFSET>,
            GetParentalCountry: GetParentalCountry::<Identity, Impl, OFFSET>,
            DefaultAudioLCID: DefaultAudioLCID::<Identity, Impl, OFFSET>,
            SetDefaultAudioLCID: SetDefaultAudioLCID::<Identity, Impl, OFFSET>,
            DefaultSubpictureLCID: DefaultSubpictureLCID::<Identity, Impl, OFFSET>,
            SetDefaultSubpictureLCID: SetDefaultSubpictureLCID::<Identity, Impl, OFFSET>,
            DefaultMenuLCID: DefaultMenuLCID::<Identity, Impl, OFFSET>,
            SetDefaultMenuLCID: SetDefaultMenuLCID::<Identity, Impl, OFFSET>,
            BookmarkOnStop: BookmarkOnStop::<Identity, Impl, OFFSET>,
            SetBookmarkOnStop: SetBookmarkOnStop::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidWebDVDEvent_Impl: ::windows_core::BaseImpl + IMSVidPlaybackEvent_Impl {
    fn DVDNotify(this: &Self::This, leventcode: i32, lparam1: &super::super::super::System::Variant::VARIANT, lparam2: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn PlayForwards(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayBackwards(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ShowMenu(this: &Self::This, menuid: DVDMenuIDConstants, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Resume(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SelectOrActivateButton(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn StillOff(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PauseOn(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ChangeCurrentAudioStream(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ChangeCurrentSubpictureStream(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ChangeCurrentAngle(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayAtTimeInTitle(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayAtTime(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayChapterInTitle(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayChapter(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ReplayChapter(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayNextChapter(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ReturnFromSubmenu(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayTitle(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn PlayPrevChapter(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ChangeKaraokePresMode(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ChangeVideoPresMode(this: &Self::This, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidWebDVDEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidPlaybackEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidWebDVDEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DVDNotify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, leventcode: i32, lparam1: super::super::super::System::Variant::VARIANT, lparam2: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DVDNotify(this, ::core::mem::transmute_copy(&leventcode), ::core::mem::transmute(&lparam1), ::core::mem::transmute(&lparam2)).into())
        }
        unsafe extern "system" fn PlayForwards<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayForwards(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayBackwards<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayBackwards(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ShowMenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, menuid: DVDMenuIDConstants, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShowMenu(this, ::core::mem::transmute_copy(&menuid), ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn Resume<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Resume(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn SelectOrActivateButton<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SelectOrActivateButton(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn StillOff<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StillOff(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PauseOn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PauseOn(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ChangeCurrentAudioStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeCurrentAudioStream(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ChangeCurrentSubpictureStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeCurrentSubpictureStream(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ChangeCurrentAngle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeCurrentAngle(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayAtTimeInTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayAtTimeInTitle(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayAtTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayAtTime(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayChapterInTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayChapterInTitle(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayChapter(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ReplayChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReplayChapter(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayNextChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayNextChapter(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ReturnFromSubmenu<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReturnFromSubmenu(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayTitle<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayTitle(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn PlayPrevChapter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PlayPrevChapter(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ChangeKaraokePresMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeKaraokePresMode(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        unsafe extern "system" fn ChangeVideoPresMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidWebDVDEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, benabled: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ChangeVideoPresMode(this, ::core::mem::transmute_copy(&benabled)).into())
        }
        IMSVidWebDVDEvent_Vtbl {
            base__: <IMSVidPlaybackEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DVDNotify: DVDNotify::<Identity, Impl, OFFSET>,
            PlayForwards: PlayForwards::<Identity, Impl, OFFSET>,
            PlayBackwards: PlayBackwards::<Identity, Impl, OFFSET>,
            ShowMenu: ShowMenu::<Identity, Impl, OFFSET>,
            Resume: Resume::<Identity, Impl, OFFSET>,
            SelectOrActivateButton: SelectOrActivateButton::<Identity, Impl, OFFSET>,
            StillOff: StillOff::<Identity, Impl, OFFSET>,
            PauseOn: PauseOn::<Identity, Impl, OFFSET>,
            ChangeCurrentAudioStream: ChangeCurrentAudioStream::<Identity, Impl, OFFSET>,
            ChangeCurrentSubpictureStream: ChangeCurrentSubpictureStream::<Identity, Impl, OFFSET>,
            ChangeCurrentAngle: ChangeCurrentAngle::<Identity, Impl, OFFSET>,
            PlayAtTimeInTitle: PlayAtTimeInTitle::<Identity, Impl, OFFSET>,
            PlayAtTime: PlayAtTime::<Identity, Impl, OFFSET>,
            PlayChapterInTitle: PlayChapterInTitle::<Identity, Impl, OFFSET>,
            PlayChapter: PlayChapter::<Identity, Impl, OFFSET>,
            ReplayChapter: ReplayChapter::<Identity, Impl, OFFSET>,
            PlayNextChapter: PlayNextChapter::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            ReturnFromSubmenu: ReturnFromSubmenu::<Identity, Impl, OFFSET>,
            PlayTitle: PlayTitle::<Identity, Impl, OFFSET>,
            PlayPrevChapter: PlayPrevChapter::<Identity, Impl, OFFSET>,
            ChangeKaraokePresMode: ChangeKaraokePresMode::<Identity, Impl, OFFSET>,
            ChangeVideoPresMode: ChangeVideoPresMode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidXDS_Impl: ::windows_core::BaseImpl + IMSVidFeature_Impl {
    fn ChannelChangeInterface(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidXDS {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFeature);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidXDS_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidXDS {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ChannelChangeInterface<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidXDS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punkcc: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ChannelChangeInterface(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(punkcc, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMSVidXDS_Vtbl {
            base__: <IMSVidFeature as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ChannelChangeInterface: ChannelChangeInterface::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IMSVidXDSEvent_Impl: ::windows_core::BaseImpl + IMSVidFeatureEvent_Impl {
    fn RatingChange(this: &Self::This, prevratingsystem: EnTvRat_System, prevlevel: EnTvRat_GenericLevel, prevattributes: BfEnTvRat_GenericAttributes, newratingsystem: EnTvRat_System, newlevel: EnTvRat_GenericLevel, newattributes: BfEnTvRat_GenericAttributes) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IMSVidXDSEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IMSVidFeatureEvent);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidXDSEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMSVidXDSEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RatingChange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMSVidXDSEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prevratingsystem: EnTvRat_System, prevlevel: EnTvRat_GenericLevel, prevattributes: BfEnTvRat_GenericAttributes, newratingsystem: EnTvRat_System, newlevel: EnTvRat_GenericLevel, newattributes: BfEnTvRat_GenericAttributes) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RatingChange(this, ::core::mem::transmute_copy(&prevratingsystem), ::core::mem::transmute_copy(&prevlevel), ::core::mem::transmute_copy(&prevattributes), ::core::mem::transmute_copy(&newratingsystem), ::core::mem::transmute_copy(&newlevel), ::core::mem::transmute_copy(&newattributes)).into())
        }
        IMSVidXDSEvent_Vtbl { base__: <IMSVidFeatureEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, RatingChange: RatingChange::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IMceBurnerControl_Impl: ::windows_core::BaseImpl {
    fn GetBurnerNoDecryption(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMceBurnerControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMceBurnerControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMceBurnerControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetBurnerNoDecryption<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMceBurnerControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBurnerNoDecryption(this).into())
        }
        IMceBurnerControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetBurnerNoDecryption: GetBurnerNoDecryption::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMpeg2Data_Impl: ::windows_core::BaseImpl {
    fn GetSection(this: &Self::This, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32) -> ::windows_core::Result<ISectionList>;
    fn GetTable(this: &Self::This, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32) -> ::windows_core::Result<ISectionList>;
    fn GetStreamOfSections(this: &Self::This, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<IMpeg2Stream>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMpeg2Data {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Data_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMpeg2Data {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Data_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32, ppsectionlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSection(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&tid), ::core::mem::transmute_copy(&pfilter), ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsectionlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Data_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, dwtimeout: u32, ppsectionlist: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTable(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&tid), ::core::mem::transmute_copy(&pfilter), ::core::mem::transmute_copy(&dwtimeout)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsectionlist, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStreamOfSections<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Data_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::super::Foundation::HANDLE, ppmpegstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamOfSections(this, ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&tid), ::core::mem::transmute_copy(&pfilter), ::core::mem::transmute_copy(&hdatareadyevent)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmpegstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IMpeg2Data_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSection: GetSection::<Identity, Impl, OFFSET>,
            GetTable: GetTable::<Identity, Impl, OFFSET>,
            GetStreamOfSections: GetStreamOfSections::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IMpeg2Stream_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: ::core::option::Option<&IMpeg2Data>, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn SupplyDataBuffer(this: &Self::This, pstreambuffer: *const MPEG_STREAM_BUFFER) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IMpeg2Stream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Stream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMpeg2Stream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Stream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: *mut ::core::ffi::c_void, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, hdatareadyevent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&requesttype), ::windows_core::from_raw_borrowed(&pmpeg2data), ::core::mem::transmute_copy(&pcontext), ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&tid), ::core::mem::transmute_copy(&pfilter), ::core::mem::transmute_copy(&hdatareadyevent)).into())
        }
        unsafe extern "system" fn SupplyDataBuffer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2Stream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstreambuffer: *const MPEG_STREAM_BUFFER) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SupplyDataBuffer(this, ::core::mem::transmute_copy(&pstreambuffer)).into())
        }
        IMpeg2Stream_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            SupplyDataBuffer: SupplyDataBuffer::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IMpeg2TableFilter_Impl: ::windows_core::BaseImpl {
    fn AddPID(this: &Self::This, p: u16) -> ::windows_core::Result<()>;
    fn AddTable(this: &Self::This, p: u16, t: u8) -> ::windows_core::Result<()>;
    fn AddExtension(this: &Self::This, p: u16, t: u8, e: u16) -> ::windows_core::Result<()>;
    fn RemovePID(this: &Self::This, p: u16) -> ::windows_core::Result<()>;
    fn RemoveTable(this: &Self::This, p: u16, t: u8) -> ::windows_core::Result<()>;
    fn RemoveExtension(this: &Self::This, p: u16, t: u8, e: u16) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IMpeg2TableFilter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IMpeg2TableFilter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddPID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, p: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPID(this, ::core::mem::transmute_copy(&p)).into())
        }
        unsafe extern "system" fn AddTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, p: u16, t: u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddTable(this, ::core::mem::transmute_copy(&p), ::core::mem::transmute_copy(&t)).into())
        }
        unsafe extern "system" fn AddExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, p: u16, t: u8, e: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddExtension(this, ::core::mem::transmute_copy(&p), ::core::mem::transmute_copy(&t), ::core::mem::transmute_copy(&e)).into())
        }
        unsafe extern "system" fn RemovePID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, p: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemovePID(this, ::core::mem::transmute_copy(&p)).into())
        }
        unsafe extern "system" fn RemoveTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, p: u16, t: u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveTable(this, ::core::mem::transmute_copy(&p), ::core::mem::transmute_copy(&t)).into())
        }
        unsafe extern "system" fn RemoveExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IMpeg2TableFilter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, p: u16, t: u8, e: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveExtension(this, ::core::mem::transmute_copy(&p), ::core::mem::transmute_copy(&t), ::core::mem::transmute_copy(&e)).into())
        }
        IMpeg2TableFilter_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddPID: AddPID::<Identity, Impl, OFFSET>,
            AddTable: AddTable::<Identity, Impl, OFFSET>,
            AddExtension: AddExtension::<Identity, Impl, OFFSET>,
            RemovePID: RemovePID::<Identity, Impl, OFFSET>,
            RemoveTable: RemoveTable::<Identity, Impl, OFFSET>,
            RemoveExtension: RemoveExtension::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IPAT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetTransportStreamId(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordProgramNumber(this: &Self::This, dwindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordProgramMapPid(this: &Self::This, dwindex: u32) -> ::windows_core::Result<u16>;
    fn FindRecordProgramMapPid(this: &Self::This, wprogramnumber: u16) -> ::windows_core::Result<u16>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<IPAT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IPAT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPAT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetTransportStreamId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTransportStreamId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordProgramNumber(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordProgramMapPid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordProgramMapPid(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindRecordProgramMapPid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wprogramnumber: u16, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindRecordProgramMapPid(this, ::core::mem::transmute_copy(&wprogramnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppat: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppat, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPAT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        IPAT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetTransportStreamId: GetTransportStreamId::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordProgramNumber: GetRecordProgramNumber::<Identity, Impl, OFFSET>,
            GetRecordProgramMapPid: GetRecordProgramMapPid::<Identity, Impl, OFFSET>,
            FindRecordProgramMapPid: FindRecordProgramMapPid::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPBDAAttributesDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetAttributePayload(this: &Self::This, ppbattributebuffer: *mut *mut u8, pdwattributelength: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPBDAAttributesDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAAttributesDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPBDAAttributesDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAAttributesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAAttributesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAttributePayload<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAAttributesDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbattributebuffer: *mut *mut u8, pdwattributelength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttributePayload(this, ::core::mem::transmute_copy(&ppbattributebuffer), ::core::mem::transmute_copy(&pdwattributelength)).into())
        }
        IPBDAAttributesDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetAttributePayload: GetAttributePayload::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPBDAEntitlementDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetTag(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLength(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetToken(this: &Self::This, ppbtokenbuffer: *mut *mut u8, pdwtokenlength: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPBDAEntitlementDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAEntitlementDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPBDAEntitlementDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAEntitlementDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTag(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAEntitlementDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetToken<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDAEntitlementDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppbtokenbuffer: *mut *mut u8, pdwtokenlength: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetToken(this, ::core::mem::transmute_copy(&ppbtokenbuffer), ::core::mem::transmute_copy(&pdwtokenlength)).into())
        }
        IPBDAEntitlementDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetTag: GetTag::<Identity, Impl, OFFSET>,
            GetLength: GetLength::<Identity, Impl, OFFSET>,
            GetToken: GetToken::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPBDASiParser_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, punk: ::core::option::Option<&::windows_core::IUnknown>) -> ::windows_core::Result<()>;
    fn GetEIT(this: &Self::This, dwsize: u32, pbuffer: *const u8) -> ::windows_core::Result<IPBDA_EIT>;
    fn GetServices(this: &Self::This, dwsize: u32, pbuffer: *const u8) -> ::windows_core::Result<IPBDA_Services>;
}
impl ::windows_core::Iids for IPBDASiParser {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDASiParser_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPBDASiParser {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDASiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, punk: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&punk)).into())
        }
        unsafe extern "system" fn GetEIT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDASiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsize: u32, pbuffer: *const u8, ppeit: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEIT(this, ::core::mem::transmute_copy(&dwsize), ::core::mem::transmute_copy(&pbuffer)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppeit, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServices<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDASiParser_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwsize: u32, pbuffer: *const u8, ppservices: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServices(this, ::core::mem::transmute_copy(&dwsize), ::core::mem::transmute_copy(&pbuffer)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppservices, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPBDASiParser_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetEIT: GetEIT::<Identity, Impl, OFFSET>,
            GetServices: GetServices::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPBDA_EIT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, size: u32, pbuffer: *const u8) -> ::windows_core::Result<()>;
    fn GetTableId(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetServiceIdx(this: &Self::This) -> ::windows_core::Result<u64>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordEventId(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u64>;
    fn GetRecordStartTime(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<MPEG_DATE_AND_TIME>;
    fn GetRecordDuration(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<MPEG_TIME>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IPBDA_EIT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPBDA_EIT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, pbuffer: *const u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pbuffer)).into())
        }
        unsafe extern "system" fn GetTableId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetServiceIdx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plwval: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetServiceIdx(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordEventId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, plwval: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordEventId(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdtval: *mut MPEG_DATE_AND_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordStartTime(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdtval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pmdval: *mut MPEG_TIME) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDuration(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmdval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_EIT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        IPBDA_EIT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetTableId: GetTableId::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetServiceIdx: GetServiceIdx::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordEventId: GetRecordEventId::<Identity, Impl, OFFSET>,
            GetRecordStartTime: GetRecordStartTime::<Identity, Impl, OFFSET>,
            GetRecordDuration: GetRecordDuration::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPBDA_Services_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, size: u32, pbuffer: *const u8) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetRecordByIndex(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u64>;
}
impl ::windows_core::Iids for IPBDA_Services {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_Services_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPBDA_Services {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_Services_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, size: u32, pbuffer: *const u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&size), ::core::mem::transmute_copy(&pbuffer)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_Services_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPBDA_Services_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pul64serviceidx: *mut u64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordByIndex(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pul64serviceidx, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPBDA_Services_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordByIndex: GetRecordByIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IPMT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetProgramNumber(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetPcrPid(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn GetCountOfRecords(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetRecordStreamType(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u8>;
    fn GetRecordElementaryPid(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u16>;
    fn GetRecordCountOfDescriptors(this: &Self::This, dwrecordindex: u32) -> ::windows_core::Result<u32>;
    fn GetRecordDescriptorByIndex(this: &Self::This, dwrecordindex: u32, dwdescindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetRecordDescriptorByTag(this: &Self::This, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn QueryServiceGatewayInfo(this: &Self::This, ppdsmcclist: *mut *mut DSMCC_ELEMENT, puicount: *mut u32) -> ::windows_core::Result<()>;
    fn QueryMPEInfo(this: &Self::This, ppmpelist: *mut *mut MPE_ELEMENT, puicount: *mut u32) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<IPMT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IPMT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPMT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetProgramNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProgramNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPcrPid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppidval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPcrPid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn GetCountOfRecords<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfRecords(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordStreamType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordStreamType(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordElementaryPid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, ppidval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordElementaryPid(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppidval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordCountOfDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordCountOfDescriptors(this, ::core::mem::transmute_copy(&dwrecordindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, dwdescindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRecordDescriptorByIndex(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&dwdescindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRecordDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwrecordindex: u32, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordDescriptorByTag(this, ::core::mem::transmute_copy(&dwrecordindex), ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn QueryServiceGatewayInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppdsmcclist: *mut *mut DSMCC_ELEMENT, puicount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryServiceGatewayInfo(this, ::core::mem::transmute_copy(&ppdsmcclist), ::core::mem::transmute_copy(&puicount)).into())
        }
        unsafe extern "system" fn QueryMPEInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmpelist: *mut *mut MPE_ELEMENT, puicount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::QueryMPEInfo(this, ::core::mem::transmute_copy(&ppmpelist), ::core::mem::transmute_copy(&puicount)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppmt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppmt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPMT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        IPMT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetProgramNumber: GetProgramNumber::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetPcrPid: GetPcrPid::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            GetCountOfRecords: GetCountOfRecords::<Identity, Impl, OFFSET>,
            GetRecordStreamType: GetRecordStreamType::<Identity, Impl, OFFSET>,
            GetRecordElementaryPid: GetRecordElementaryPid::<Identity, Impl, OFFSET>,
            GetRecordCountOfDescriptors: GetRecordCountOfDescriptors::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByIndex: GetRecordDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetRecordDescriptorByTag: GetRecordDescriptorByTag::<Identity, Impl, OFFSET>,
            QueryServiceGatewayInfo: QueryServiceGatewayInfo::<Identity, Impl, OFFSET>,
            QueryMPEInfo: QueryMPEInfo::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IPSITables_Impl: ::windows_core::BaseImpl {
    fn GetTable(this: &Self::This, dwtsid: u32, dwtid_pid: u32, dwhashedver: u32, dwpara4: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
}
impl ::windows_core::Iids for IPSITables {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPSITables_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPSITables {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPSITables_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtsid: u32, dwtid_pid: u32, dwhashedver: u32, dwpara4: u32, ppiunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTable(this, ::core::mem::transmute_copy(&dwtsid), ::core::mem::transmute_copy(&dwtid_pid), ::core::mem::transmute_copy(&dwhashedver), ::core::mem::transmute_copy(&dwpara4)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiunknown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPSITables_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetTable: GetTable::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IPTFilterLicenseRenewal_Impl: ::windows_core::BaseImpl {
    fn RenewLicenses(this: &Self::This, wszfilename: &::windows_core::PCWSTR, wszexpiredkid: &::windows_core::PCWSTR, dwcallersid: u32, bhighpriority: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn CancelLicenseRenewal(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IPTFilterLicenseRenewal {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPTFilterLicenseRenewal_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPTFilterLicenseRenewal {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RenewLicenses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPTFilterLicenseRenewal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszfilename: ::windows_core::PCWSTR, wszexpiredkid: ::windows_core::PCWSTR, dwcallersid: u32, bhighpriority: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RenewLicenses(this, ::core::mem::transmute(&wszfilename), ::core::mem::transmute(&wszexpiredkid), ::core::mem::transmute_copy(&dwcallersid), ::core::mem::transmute_copy(&bhighpriority)).into())
        }
        unsafe extern "system" fn CancelLicenseRenewal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPTFilterLicenseRenewal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelLicenseRenewal(this).into())
        }
        IPTFilterLicenseRenewal_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            RenewLicenses: RenewLicenses::<Identity, Impl, OFFSET>,
            CancelLicenseRenewal: CancelLicenseRenewal::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IPersistTuneXml_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IPersist_Impl {
    fn InitNew(this: &Self::This) -> ::windows_core::Result<()>;
    fn Load(this: &Self::This, varvalue: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Save(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IPersistTuneXml {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IPersist);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXml_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistTuneXml {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitNew<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXml_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitNew(this).into())
        }
        unsafe extern "system" fn Load<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXml_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varvalue: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Load(this, ::core::mem::transmute(&varvalue)).into())
        }
        unsafe extern "system" fn Save<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXml_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarfragment: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Save(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarfragment, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPersistTuneXml_Vtbl {
            base__: <super::super::super::System::Com::IPersist as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitNew: InitNew::<Identity, Impl, OFFSET>,
            Load: Load::<Identity, Impl, OFFSET>,
            Save: Save::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IPersistTuneXmlUtility_Impl: ::windows_core::BaseImpl {
    fn Deserialize(this: &Self::This, varvalue: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IPersistTuneXmlUtility {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXmlUtility_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistTuneXmlUtility {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Deserialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXmlUtility_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varvalue: super::super::super::System::Variant::VARIANT, ppobject: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Deserialize(this, ::core::mem::transmute(&varvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppobject, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPersistTuneXmlUtility_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Deserialize: Deserialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IPersistTuneXmlUtility2_Impl: ::windows_core::BaseImpl + IPersistTuneXmlUtility_Impl {
    fn Serialize(this: &Self::This, pitunerequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IPersistTuneXmlUtility2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IPersistTuneXmlUtility);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXmlUtility2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPersistTuneXmlUtility2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Serialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPersistTuneXmlUtility2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pitunerequest: *mut ::core::ffi::c_void, pstring: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Serialize(this, ::windows_core::from_raw_borrowed(&pitunerequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstring, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPersistTuneXmlUtility2_Vtbl { base__: <IPersistTuneXmlUtility as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, Serialize: Serialize::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IRegisterTuner_Impl: ::windows_core::BaseImpl {
    fn Register(this: &Self::This, ptuner: ::core::option::Option<&ITuner>, pgraph: ::core::option::Option<&super::IGraphBuilder>) -> ::windows_core::Result<()>;
    fn Unregister(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IRegisterTuner {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRegisterTuner_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IRegisterTuner {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Register<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRegisterTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptuner: *mut ::core::ffi::c_void, pgraph: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Register(this, ::windows_core::from_raw_borrowed(&ptuner), ::windows_core::from_raw_borrowed(&pgraph)).into())
        }
        unsafe extern "system" fn Unregister<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IRegisterTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Unregister(this).into())
        }
        IRegisterTuner_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Register: Register::<Identity, Impl, OFFSET>,
            Unregister: Unregister::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISBE2Crossbar_Impl: ::windows_core::BaseImpl {
    fn EnableDefaultMode(this: &Self::This, defaultflags: u32) -> ::windows_core::Result<()>;
    fn GetInitialProfile(this: &Self::This) -> ::windows_core::Result<ISBE2MediaTypeProfile>;
    fn SetOutputProfile(this: &Self::This, pprofile: ::core::option::Option<&ISBE2MediaTypeProfile>, pcoutputpins: *mut u32, ppoutputpins: *mut ::core::option::Option<super::IPin>) -> ::windows_core::Result<()>;
    fn EnumStreams(this: &Self::This) -> ::windows_core::Result<ISBE2EnumStream>;
}
impl ::windows_core::Iids for ISBE2Crossbar {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2Crossbar_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2Crossbar {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn EnableDefaultMode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2Crossbar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, defaultflags: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableDefaultMode(this, ::core::mem::transmute_copy(&defaultflags)).into())
        }
        unsafe extern "system" fn GetInitialProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2Crossbar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppprofile: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInitialProfile(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppprofile, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOutputProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2Crossbar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprofile: *mut ::core::ffi::c_void, pcoutputpins: *mut u32, ppoutputpins: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOutputProfile(this, ::windows_core::from_raw_borrowed(&pprofile), ::core::mem::transmute_copy(&pcoutputpins), ::core::mem::transmute_copy(&ppoutputpins)).into())
        }
        unsafe extern "system" fn EnumStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2Crossbar_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstreams: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumStreams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISBE2Crossbar_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            EnableDefaultMode: EnableDefaultMode::<Identity, Impl, OFFSET>,
            GetInitialProfile: GetInitialProfile::<Identity, Impl, OFFSET>,
            SetOutputProfile: SetOutputProfile::<Identity, Impl, OFFSET>,
            EnumStreams: EnumStreams::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISBE2EnumStream_Impl: ::windows_core::BaseImpl {
    fn Next(this: &Self::This, crequest: u32, pstreamdesc: *mut SBE2_STREAM_DESC, pcreceived: *mut u32) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, crecords: u32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<ISBE2EnumStream>;
}
impl ::windows_core::Iids for ISBE2EnumStream {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2EnumStream_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2EnumStream {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2EnumStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, crequest: u32, pstreamdesc: *mut SBE2_STREAM_DESC, pcreceived: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&crequest), ::core::mem::transmute_copy(&pstreamdesc), ::core::mem::transmute_copy(&pcreceived)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2EnumStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, crecords: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&crecords)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2EnumStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2EnumStream_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppienumstream: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppienumstream, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISBE2EnumStream_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISBE2FileScan_Impl: ::windows_core::BaseImpl {
    fn RepairFile(this: &Self::This, filename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISBE2FileScan {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2FileScan_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2FileScan {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn RepairFile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2FileScan_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, filename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RepairFile(this, ::core::mem::transmute(&filename)).into())
        }
        ISBE2FileScan_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, RepairFile: RepairFile::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISBE2GlobalEvent_Impl: ::windows_core::BaseImpl {
    fn GetEvent(this: &Self::This, idevt: *const ::windows_core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISBE2GlobalEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2GlobalEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2GlobalEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2GlobalEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idevt: *const ::windows_core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEvent(this, ::core::mem::transmute_copy(&idevt), ::core::mem::transmute_copy(&param1), ::core::mem::transmute_copy(&param2), ::core::mem::transmute_copy(&param3), ::core::mem::transmute_copy(&param4), ::core::mem::transmute_copy(&pspanning), ::core::mem::transmute_copy(&pcb), ::core::mem::transmute_copy(&pb)).into())
        }
        ISBE2GlobalEvent_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetEvent: GetEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISBE2GlobalEvent2_Impl: ::windows_core::BaseImpl + ISBE2GlobalEvent_Impl {
    fn GetEventEx(this: &Self::This, idevt: *const ::windows_core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8, pstreamtime: *mut i64) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISBE2GlobalEvent2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ISBE2GlobalEvent);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2GlobalEvent2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2GlobalEvent2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEventEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2GlobalEvent2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idevt: *const ::windows_core::GUID, param1: u32, param2: u32, param3: u32, param4: u32, pspanning: *mut super::super::super::Foundation::BOOL, pcb: *mut u32, pb: *mut u8, pstreamtime: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEventEx(this, ::core::mem::transmute_copy(&idevt), ::core::mem::transmute_copy(&param1), ::core::mem::transmute_copy(&param2), ::core::mem::transmute_copy(&param3), ::core::mem::transmute_copy(&param4), ::core::mem::transmute_copy(&pspanning), ::core::mem::transmute_copy(&pcb), ::core::mem::transmute_copy(&pb), ::core::mem::transmute_copy(&pstreamtime)).into())
        }
        ISBE2GlobalEvent2_Vtbl { base__: <ISBE2GlobalEvent as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetEventEx: GetEventEx::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_Media_MediaFoundation\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
pub trait ISBE2MediaTypeProfile_Impl: ::windows_core::BaseImpl {
    fn GetStreamCount(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetStream(this: &Self::This, index: u32) -> ::windows_core::Result<*mut super::super::MediaFoundation::AM_MEDIA_TYPE>;
    fn AddStream(this: &Self::This, pmediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows_core::Result<()>;
    fn DeleteStream(this: &Self::This, index: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl ::windows_core::Iids for ISBE2MediaTypeProfile {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_Media_MediaFoundation"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2MediaTypeProfile_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2MediaTypeProfile {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetStreamCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2MediaTypeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStreamCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2MediaTypeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32, ppmediatype: *mut *mut super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStream(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmediatype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2MediaTypeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmediatype: *const super::super::MediaFoundation::AM_MEDIA_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddStream(this, ::core::mem::transmute_copy(&pmediatype)).into())
        }
        unsafe extern "system" fn DeleteStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2MediaTypeProfile_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteStream(this, ::core::mem::transmute_copy(&index)).into())
        }
        ISBE2MediaTypeProfile_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetStreamCount: GetStreamCount::<Identity, Impl, OFFSET>,
            GetStream: GetStream::<Identity, Impl, OFFSET>,
            AddStream: AddStream::<Identity, Impl, OFFSET>,
            DeleteStream: DeleteStream::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISBE2SpanningEvent_Impl: ::windows_core::BaseImpl {
    fn GetEvent(this: &Self::This, idevt: *const ::windows_core::GUID, streamid: u32, pcb: *mut u32, pb: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISBE2SpanningEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2SpanningEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2SpanningEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2SpanningEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, idevt: *const ::windows_core::GUID, streamid: u32, pcb: *mut u32, pb: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetEvent(this, ::core::mem::transmute_copy(&idevt), ::core::mem::transmute_copy(&streamid), ::core::mem::transmute_copy(&pcb), ::core::mem::transmute_copy(&pb)).into())
        }
        ISBE2SpanningEvent_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetEvent: GetEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISBE2StreamMap_Impl: ::windows_core::BaseImpl {
    fn MapStream(this: &Self::This, stream: u32) -> ::windows_core::Result<()>;
    fn UnmapStream(this: &Self::This, stream: u32) -> ::windows_core::Result<()>;
    fn EnumMappedStreams(this: &Self::This) -> ::windows_core::Result<ISBE2EnumStream>;
}
impl ::windows_core::Iids for ISBE2StreamMap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2StreamMap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISBE2StreamMap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn MapStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2StreamMap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stream: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MapStream(this, ::core::mem::transmute_copy(&stream)).into())
        }
        unsafe extern "system" fn UnmapStream<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2StreamMap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, stream: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnmapStream(this, ::core::mem::transmute_copy(&stream)).into())
        }
        unsafe extern "system" fn EnumMappedStreams<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISBE2StreamMap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppstreams: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumMappedStreams(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppstreams, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISBE2StreamMap_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            MapStream: MapStream::<Identity, Impl, OFFSET>,
            UnmapStream: UnmapStream::<Identity, Impl, OFFSET>,
            EnumMappedStreams: EnumMappedStreams::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISCTE_EAS_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetSequencyNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetProtocolVersion(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetEASEventID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetOriginatorCode(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetEASEventCodeLen(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetEASEventCode(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRawNatureOfActivationTextLen(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetRawNatureOfActivationText(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetNatureOfActivationText(this: &Self::This, bstris0639code: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetTimeRemaining(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetStartTime(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetDuration(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetAlertPriority(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetDetailsOOBSourceID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetDetailsMajor(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetDetailsMinor(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetDetailsAudioOOBSourceID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetAlertText(this: &Self::This, bstris0639code: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetRawAlertTextLen(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetRawAlertText(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLocationCount(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetLocationCodes(this: &Self::This, bindex: u8, pbstate: *mut u8, pbcountysubdivision: *mut u8, pwcounty: *mut u16) -> ::windows_core::Result<()>;
    fn GetExceptionCount(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetExceptionService(this: &Self::This, bindex: u8, pbibref: *mut u8, pwfirst: *mut u16, pwsecond: *mut u16) -> ::windows_core::Result<()>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISCTE_EAS {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISCTE_EAS {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSequencyNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSequencyNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetProtocolVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProtocolVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEASEventID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEASEventID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetOriginatorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetOriginatorCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEASEventCodeLen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEASEventCodeLen(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEASEventCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEASEventCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRawNatureOfActivationTextLen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRawNatureOfActivationTextLen(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRawNatureOfActivationText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRawNatureOfActivationText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNatureOfActivationText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstris0639code: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbstrstring: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNatureOfActivationText(this, ::core::mem::transmute(&bstris0639code)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrstring, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTimeRemaining<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTimeRemaining(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetStartTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStartTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDuration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAlertPriority<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAlertPriority(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDetailsOOBSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDetailsOOBSourceID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDetailsMajor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDetailsMajor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDetailsMinor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDetailsMinor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDetailsAudioOOBSourceID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDetailsAudioOOBSourceID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAlertText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstris0639code: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbstrstring: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAlertText(this, ::core::mem::transmute(&bstris0639code)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrstring, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRawAlertTextLen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRawAlertTextLen(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRawAlertText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRawAlertText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLocationCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLocationCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLocationCodes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbstate: *mut u8, pbcountysubdivision: *mut u8, pwcounty: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLocationCodes(this, ::core::mem::transmute_copy(&bindex), ::core::mem::transmute_copy(&pbstate), ::core::mem::transmute_copy(&pbcountysubdivision), ::core::mem::transmute_copy(&pwcounty)).into())
        }
        unsafe extern "system" fn GetExceptionCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetExceptionCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetExceptionService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbibref: *mut u8, pwfirst: *mut u16, pwsecond: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetExceptionService(this, ::core::mem::transmute_copy(&bindex), ::core::mem::transmute_copy(&pbibref), ::core::mem::transmute_copy(&pwfirst), ::core::mem::transmute_copy(&pwsecond)).into())
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISCTE_EAS_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        ISCTE_EAS_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetSequencyNumber: GetSequencyNumber::<Identity, Impl, OFFSET>,
            GetProtocolVersion: GetProtocolVersion::<Identity, Impl, OFFSET>,
            GetEASEventID: GetEASEventID::<Identity, Impl, OFFSET>,
            GetOriginatorCode: GetOriginatorCode::<Identity, Impl, OFFSET>,
            GetEASEventCodeLen: GetEASEventCodeLen::<Identity, Impl, OFFSET>,
            GetEASEventCode: GetEASEventCode::<Identity, Impl, OFFSET>,
            GetRawNatureOfActivationTextLen: GetRawNatureOfActivationTextLen::<Identity, Impl, OFFSET>,
            GetRawNatureOfActivationText: GetRawNatureOfActivationText::<Identity, Impl, OFFSET>,
            GetNatureOfActivationText: GetNatureOfActivationText::<Identity, Impl, OFFSET>,
            GetTimeRemaining: GetTimeRemaining::<Identity, Impl, OFFSET>,
            GetStartTime: GetStartTime::<Identity, Impl, OFFSET>,
            GetDuration: GetDuration::<Identity, Impl, OFFSET>,
            GetAlertPriority: GetAlertPriority::<Identity, Impl, OFFSET>,
            GetDetailsOOBSourceID: GetDetailsOOBSourceID::<Identity, Impl, OFFSET>,
            GetDetailsMajor: GetDetailsMajor::<Identity, Impl, OFFSET>,
            GetDetailsMinor: GetDetailsMinor::<Identity, Impl, OFFSET>,
            GetDetailsAudioOOBSourceID: GetDetailsAudioOOBSourceID::<Identity, Impl, OFFSET>,
            GetAlertText: GetAlertText::<Identity, Impl, OFFSET>,
            GetRawAlertTextLen: GetRawAlertTextLen::<Identity, Impl, OFFSET>,
            GetRawAlertText: GetRawAlertText::<Identity, Impl, OFFSET>,
            GetLocationCount: GetLocationCount::<Identity, Impl, OFFSET>,
            GetLocationCodes: GetLocationCodes::<Identity, Impl, OFFSET>,
            GetExceptionCount: GetExceptionCount::<Identity, Impl, OFFSET>,
            GetExceptionService: GetExceptionService::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISIInbandEPG_Impl: ::windows_core::BaseImpl {
    fn StartSIEPGScan(this: &Self::This) -> ::windows_core::Result<()>;
    fn StopSIEPGScan(this: &Self::This) -> ::windows_core::Result<()>;
    fn IsSIEPGScanRunning(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISIInbandEPG {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISIInbandEPG_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISIInbandEPG {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StartSIEPGScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISIInbandEPG_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StartSIEPGScan(this).into())
        }
        unsafe extern "system" fn StopSIEPGScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISIInbandEPG_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::StopSIEPGScan(this).into())
        }
        unsafe extern "system" fn IsSIEPGScanRunning<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISIInbandEPG_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, brunning: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSIEPGScanRunning(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(brunning, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISIInbandEPG_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StartSIEPGScan: StartSIEPGScan::<Identity, Impl, OFFSET>,
            StopSIEPGScan: StopSIEPGScan::<Identity, Impl, OFFSET>,
            IsSIEPGScanRunning: IsSIEPGScanRunning::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ISIInbandEPGEvent_Impl: ::windows_core::BaseImpl {
    fn SIObjectEvent(this: &Self::This, pidvb_eit: ::core::option::Option<&IDVB_EIT2>, dwtable_id: u32, dwservice_id: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ISIInbandEPGEvent {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISIInbandEPGEvent_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISIInbandEPGEvent {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SIObjectEvent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISIInbandEPGEvent_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pidvb_eit: *mut ::core::ffi::c_void, dwtable_id: u32, dwservice_id: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SIObjectEvent(this, ::windows_core::from_raw_borrowed(&pidvb_eit), ::core::mem::transmute_copy(&dwtable_id), ::core::mem::transmute_copy(&dwservice_id)).into())
        }
        ISIInbandEPGEvent_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SIObjectEvent: SIObjectEvent::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait IScanningTuner_Impl: ::windows_core::BaseImpl + ITuner_Impl {
    fn SeekUp(this: &Self::This) -> ::windows_core::Result<()>;
    fn SeekDown(this: &Self::This) -> ::windows_core::Result<()>;
    fn ScanUp(this: &Self::This, millisecondspause: i32) -> ::windows_core::Result<()>;
    fn ScanDown(this: &Self::This, millisecondspause: i32) -> ::windows_core::Result<()>;
    fn AutoProgram(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for IScanningTuner {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuner);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTuner_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IScanningTuner {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SeekUp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SeekUp(this).into())
        }
        unsafe extern "system" fn SeekDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SeekDown(this).into())
        }
        unsafe extern "system" fn ScanUp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, millisecondspause: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ScanUp(this, ::core::mem::transmute_copy(&millisecondspause)).into())
        }
        unsafe extern "system" fn ScanDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, millisecondspause: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ScanDown(this, ::core::mem::transmute_copy(&millisecondspause)).into())
        }
        unsafe extern "system" fn AutoProgram<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AutoProgram(this).into())
        }
        IScanningTuner_Vtbl {
            base__: <ITuner as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SeekUp: SeekUp::<Identity, Impl, OFFSET>,
            SeekDown: SeekDown::<Identity, Impl, OFFSET>,
            ScanUp: ScanUp::<Identity, Impl, OFFSET>,
            ScanDown: ScanDown::<Identity, Impl, OFFSET>,
            AutoProgram: AutoProgram::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
pub trait IScanningTunerEx_Impl: ::windows_core::BaseImpl + IScanningTuner_Impl {
    fn GetCurrentLocator(this: &Self::This, pilocator: *const ::core::option::Option<ILocator>) -> ::windows_core::Result<()>;
    fn PerformExhaustiveScan(this: &Self::This, dwlowerfreq: i32, dwhigherfreq: i32, bfinetune: super::super::super::Foundation::VARIANT_BOOL, hevent: usize) -> ::windows_core::Result<()>;
    fn TerminateCurrentScan(this: &Self::This) -> ::windows_core::Result<i32>;
    fn ResumeCurrentScan(this: &Self::This, hevent: usize) -> ::windows_core::Result<()>;
    fn GetTunerScanningCapability(this: &Self::This, hardwareassistedscanning: *mut i32, numstandardssupported: *mut i32, broadcaststandards: *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn GetTunerStatus(this: &Self::This, secondsleft: *mut i32, currentlocktype: *mut i32, autodetect: *mut i32, currentfreq: *mut i32) -> ::windows_core::Result<()>;
    fn GetCurrentTunerStandardCapability(this: &Self::This, currentbroadcaststandard: &::windows_core::GUID, settlingtime: *mut i32, tvstandardssupported: *mut i32) -> ::windows_core::Result<()>;
    fn SetScanSignalTypeFilter(this: &Self::This, scanmodulationtypes: i32, analogvideostandard: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl ::windows_core::Iids for IScanningTunerEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IScanningTuner);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IScanningTunerEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetCurrentLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pilocator: *const *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentLocator(this, ::core::mem::transmute_copy(&pilocator)).into())
        }
        unsafe extern "system" fn PerformExhaustiveScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwlowerfreq: i32, dwhigherfreq: i32, bfinetune: super::super::super::Foundation::VARIANT_BOOL, hevent: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PerformExhaustiveScan(this, ::core::mem::transmute_copy(&dwlowerfreq), ::core::mem::transmute_copy(&dwhigherfreq), ::core::mem::transmute_copy(&bfinetune), ::core::mem::transmute_copy(&hevent)).into())
        }
        unsafe extern "system" fn TerminateCurrentScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcurrentfreq: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TerminateCurrentScan(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcurrentfreq, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResumeCurrentScan<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hevent: usize) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResumeCurrentScan(this, ::core::mem::transmute_copy(&hevent)).into())
        }
        unsafe extern "system" fn GetTunerScanningCapability<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hardwareassistedscanning: *mut i32, numstandardssupported: *mut i32, broadcaststandards: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTunerScanningCapability(this, ::core::mem::transmute_copy(&hardwareassistedscanning), ::core::mem::transmute_copy(&numstandardssupported), ::core::mem::transmute_copy(&broadcaststandards)).into())
        }
        unsafe extern "system" fn GetTunerStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, secondsleft: *mut i32, currentlocktype: *mut i32, autodetect: *mut i32, currentfreq: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTunerStatus(this, ::core::mem::transmute_copy(&secondsleft), ::core::mem::transmute_copy(&currentlocktype), ::core::mem::transmute_copy(&autodetect), ::core::mem::transmute_copy(&currentfreq)).into())
        }
        unsafe extern "system" fn GetCurrentTunerStandardCapability<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentbroadcaststandard: ::windows_core::GUID, settlingtime: *mut i32, tvstandardssupported: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCurrentTunerStandardCapability(this, ::core::mem::transmute(&currentbroadcaststandard), ::core::mem::transmute_copy(&settlingtime), ::core::mem::transmute_copy(&tvstandardssupported)).into())
        }
        unsafe extern "system" fn SetScanSignalTypeFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IScanningTunerEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, scanmodulationtypes: i32, analogvideostandard: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetScanSignalTypeFilter(this, ::core::mem::transmute_copy(&scanmodulationtypes), ::core::mem::transmute_copy(&analogvideostandard)).into())
        }
        IScanningTunerEx_Vtbl {
            base__: <IScanningTuner as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetCurrentLocator: GetCurrentLocator::<Identity, Impl, OFFSET>,
            PerformExhaustiveScan: PerformExhaustiveScan::<Identity, Impl, OFFSET>,
            TerminateCurrentScan: TerminateCurrentScan::<Identity, Impl, OFFSET>,
            ResumeCurrentScan: ResumeCurrentScan::<Identity, Impl, OFFSET>,
            GetTunerScanningCapability: GetTunerScanningCapability::<Identity, Impl, OFFSET>,
            GetTunerStatus: GetTunerStatus::<Identity, Impl, OFFSET>,
            GetCurrentTunerStandardCapability: GetCurrentTunerStandardCapability::<Identity, Impl, OFFSET>,
            SetScanSignalTypeFilter: SetScanSignalTypeFilter::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ISectionList_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: ::core::option::Option<&IMpeg2Data>, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, timeout: u32, hdoneevent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn InitializeWithRawSections(this: &Self::This, pmplsections: *const MPEG_PACKET_LIST) -> ::windows_core::Result<()>;
    fn CancelPendingRequest(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetNumberOfSections(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetSectionData(this: &Self::This, sectionnumber: u16, pdwrawpacketlength: *mut u32, ppsection: *mut *mut SECTION) -> ::windows_core::Result<()>;
    fn GetProgramIdentifier(this: &Self::This, ppid: *const u16) -> ::windows_core::Result<()>;
    fn GetTableIdentifier(this: &Self::This, ptableid: *const u8) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ISectionList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISectionList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, requesttype: MPEG_REQUEST_TYPE, pmpeg2data: *mut ::core::ffi::c_void, pcontext: *const MPEG_CONTEXT, pid: u16, tid: u8, pfilter: *const MPEG2_FILTER, timeout: u32, hdoneevent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&requesttype), ::windows_core::from_raw_borrowed(&pmpeg2data), ::core::mem::transmute_copy(&pcontext), ::core::mem::transmute_copy(&pid), ::core::mem::transmute_copy(&tid), ::core::mem::transmute_copy(&pfilter), ::core::mem::transmute_copy(&timeout), ::core::mem::transmute_copy(&hdoneevent)).into())
        }
        unsafe extern "system" fn InitializeWithRawSections<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmplsections: *const MPEG_PACKET_LIST) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeWithRawSections(this, ::core::mem::transmute_copy(&pmplsections)).into())
        }
        unsafe extern "system" fn CancelPendingRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CancelPendingRequest(this).into())
        }
        unsafe extern "system" fn GetNumberOfSections<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfSections(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSectionData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, sectionnumber: u16, pdwrawpacketlength: *mut u32, ppsection: *mut *mut SECTION) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSectionData(this, ::core::mem::transmute_copy(&sectionnumber), ::core::mem::transmute_copy(&pdwrawpacketlength), ::core::mem::transmute_copy(&ppsection)).into())
        }
        unsafe extern "system" fn GetProgramIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppid: *const u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetProgramIdentifier(this, ::core::mem::transmute_copy(&ppid)).into())
        }
        unsafe extern "system" fn GetTableIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISectionList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptableid: *const u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableIdentifier(this, ::core::mem::transmute_copy(&ptableid)).into())
        }
        ISectionList_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeWithRawSections: InitializeWithRawSections::<Identity, Impl, OFFSET>,
            CancelPendingRequest: CancelPendingRequest::<Identity, Impl, OFFSET>,
            GetNumberOfSections: GetNumberOfSections::<Identity, Impl, OFFSET>,
            GetSectionData: GetSectionData::<Identity, Impl, OFFSET>,
            GetProgramIdentifier: GetProgramIdentifier::<Identity, Impl, OFFSET>,
            GetTableIdentifier: GetTableIdentifier::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IServiceLocationDescriptor_Impl: ::windows_core::BaseImpl {
    fn GetPCR_PID(this: &Self::This) -> ::windows_core::Result<u16>;
    fn GetNumberOfElements(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetElementStreamType(this: &Self::This, bindex: u8) -> ::windows_core::Result<u8>;
    fn GetElementPID(this: &Self::This, bindex: u8) -> ::windows_core::Result<u16>;
    fn GetElementLanguageCode(this: &Self::This, bindex: u8, langcode: *mut u8) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IServiceLocationDescriptor {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IServiceLocationDescriptor_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IServiceLocationDescriptor {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetPCR_PID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IServiceLocationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPCR_PID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNumberOfElements<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IServiceLocationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNumberOfElements(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetElementStreamType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IServiceLocationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetElementStreamType(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetElementPID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IServiceLocationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, pwval: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetElementPID(this, ::core::mem::transmute_copy(&bindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetElementLanguageCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IServiceLocationDescriptor_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bindex: u8, langcode: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetElementLanguageCode(this, ::core::mem::transmute_copy(&bindex), ::core::mem::transmute_copy(&langcode)).into())
        }
        IServiceLocationDescriptor_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetPCR_PID: GetPCR_PID::<Identity, Impl, OFFSET>,
            GetNumberOfElements: GetNumberOfElements::<Identity, Impl, OFFSET>,
            GetElementStreamType: GetElementStreamType::<Identity, Impl, OFFSET>,
            GetElementPID: GetElementPID::<Identity, Impl, OFFSET>,
            GetElementLanguageCode: GetElementLanguageCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferConfigure_Impl: ::windows_core::BaseImpl {
    fn SetDirectory(this: &Self::This, pszdirectoryname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetDirectory(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn SetBackingFileCount(this: &Self::This, dwmin: u32, dwmax: u32) -> ::windows_core::Result<()>;
    fn GetBackingFileCount(this: &Self::This, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows_core::Result<()>;
    fn SetBackingFileDuration(this: &Self::This, dwseconds: u32) -> ::windows_core::Result<()>;
    fn GetBackingFileDuration(this: &Self::This) -> ::windows_core::Result<u32>;
}
impl ::windows_core::Iids for IStreamBufferConfigure {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferConfigure {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszdirectoryname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDirectory(this, ::core::mem::transmute(&pszdirectoryname)).into())
        }
        unsafe extern "system" fn GetDirectory<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppszdirectoryname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDirectory(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppszdirectoryname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetBackingFileCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmin: u32, dwmax: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBackingFileCount(this, ::core::mem::transmute_copy(&dwmin), ::core::mem::transmute_copy(&dwmax)).into())
        }
        unsafe extern "system" fn GetBackingFileCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmin: *mut u32, pdwmax: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetBackingFileCount(this, ::core::mem::transmute_copy(&pdwmin), ::core::mem::transmute_copy(&pdwmax)).into())
        }
        unsafe extern "system" fn SetBackingFileDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwseconds: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetBackingFileDuration(this, ::core::mem::transmute_copy(&dwseconds)).into())
        }
        unsafe extern "system" fn GetBackingFileDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwseconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBackingFileDuration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwseconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStreamBufferConfigure_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetDirectory: SetDirectory::<Identity, Impl, OFFSET>,
            GetDirectory: GetDirectory::<Identity, Impl, OFFSET>,
            SetBackingFileCount: SetBackingFileCount::<Identity, Impl, OFFSET>,
            GetBackingFileCount: GetBackingFileCount::<Identity, Impl, OFFSET>,
            SetBackingFileDuration: SetBackingFileDuration::<Identity, Impl, OFFSET>,
            GetBackingFileDuration: GetBackingFileDuration::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferConfigure2_Impl: ::windows_core::BaseImpl + IStreamBufferConfigure_Impl {
    fn SetMultiplexedPacketSize(this: &Self::This, cbbytesperpacket: u32) -> ::windows_core::Result<()>;
    fn GetMultiplexedPacketSize(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetFFTransitionRates(this: &Self::This, dwmaxfullframerate: u32, dwmaxnonskippingrate: u32) -> ::windows_core::Result<()>;
    fn GetFFTransitionRates(this: &Self::This, pdwmaxfullframerate: *mut u32, pdwmaxnonskippingrate: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferConfigure2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IStreamBufferConfigure);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferConfigure2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetMultiplexedPacketSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cbbytesperpacket: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMultiplexedPacketSize(this, ::core::mem::transmute_copy(&cbbytesperpacket)).into())
        }
        unsafe extern "system" fn GetMultiplexedPacketSize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcbbytesperpacket: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMultiplexedPacketSize(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcbbytesperpacket, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFFTransitionRates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwmaxfullframerate: u32, dwmaxnonskippingrate: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFFTransitionRates(this, ::core::mem::transmute_copy(&dwmaxfullframerate), ::core::mem::transmute_copy(&dwmaxnonskippingrate)).into())
        }
        unsafe extern "system" fn GetFFTransitionRates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwmaxfullframerate: *mut u32, pdwmaxnonskippingrate: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFFTransitionRates(this, ::core::mem::transmute_copy(&pdwmaxfullframerate), ::core::mem::transmute_copy(&pdwmaxnonskippingrate)).into())
        }
        IStreamBufferConfigure2_Vtbl {
            base__: <IStreamBufferConfigure as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetMultiplexedPacketSize: SetMultiplexedPacketSize::<Identity, Impl, OFFSET>,
            GetMultiplexedPacketSize: GetMultiplexedPacketSize::<Identity, Impl, OFFSET>,
            SetFFTransitionRates: SetFFTransitionRates::<Identity, Impl, OFFSET>,
            GetFFTransitionRates: GetFFTransitionRates::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferConfigure3_Impl: ::windows_core::BaseImpl + IStreamBufferConfigure2_Impl {
    fn SetStartRecConfig(this: &Self::This, fstartstopscur: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GetStartRecConfig(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetNamespace(this: &Self::This, psznamespace: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn GetNamespace(this: &Self::This) -> ::windows_core::Result<::windows_core::PWSTR>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IStreamBufferConfigure3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IStreamBufferConfigure2);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferConfigure3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetStartRecConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fstartstopscur: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStartRecConfig(this, ::core::mem::transmute_copy(&fstartstopscur)).into())
        }
        unsafe extern "system" fn GetStartRecConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfstartstopscur: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStartRecConfig(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfstartstopscur, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNamespace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psznamespace: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNamespace(this, ::core::mem::transmute(&psznamespace)).into())
        }
        unsafe extern "system" fn GetNamespace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferConfigure3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppsznamespace: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNamespace(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppsznamespace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStreamBufferConfigure3_Vtbl {
            base__: <IStreamBufferConfigure2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetStartRecConfig: SetStartRecConfig::<Identity, Impl, OFFSET>,
            GetStartRecConfig: GetStartRecConfig::<Identity, Impl, OFFSET>,
            SetNamespace: SetNamespace::<Identity, Impl, OFFSET>,
            GetNamespace: GetNamespace::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferDataCounters_Impl: ::windows_core::BaseImpl {
    fn GetData(this: &Self::This, ppindata: *mut SBE_PIN_DATA) -> ::windows_core::Result<()>;
    fn ResetData(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferDataCounters {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferDataCounters_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferDataCounters {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferDataCounters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppindata: *mut SBE_PIN_DATA) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetData(this, ::core::mem::transmute_copy(&ppindata)).into())
        }
        unsafe extern "system" fn ResetData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferDataCounters_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetData(this).into())
        }
        IStreamBufferDataCounters_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetData: GetData::<Identity, Impl, OFFSET>,
            ResetData: ResetData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Registry\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
pub trait IStreamBufferInitialize_Impl: ::windows_core::BaseImpl {
    fn SetHKEY(this: &Self::This, hkeyroot: super::super::super::System::Registry::HKEY) -> ::windows_core::Result<()>;
    fn SetSIDs(this: &Self::This, csids: u32, ppsid: *mut super::super::super::Foundation::PSID) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl ::windows_core::Iids for IStreamBufferInitialize {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Registry"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferInitialize_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferInitialize {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetHKEY<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferInitialize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hkeyroot: super::super::super::System::Registry::HKEY) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHKEY(this, ::core::mem::transmute_copy(&hkeyroot)).into())
        }
        unsafe extern "system" fn SetSIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferInitialize_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, csids: u32, ppsid: *mut super::super::super::Foundation::PSID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSIDs(this, ::core::mem::transmute_copy(&csids), ::core::mem::transmute_copy(&ppsid)).into())
        }
        IStreamBufferInitialize_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetHKEY: SetHKEY::<Identity, Impl, OFFSET>,
            SetSIDs: SetSIDs::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferMediaSeeking_Impl: ::windows_core::BaseImpl + super::IMediaSeeking_Impl {}
impl ::windows_core::Iids for IStreamBufferMediaSeeking {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::IMediaSeeking);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferMediaSeeking_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferMediaSeeking {
    const VTABLE: Self::Vtable = { IStreamBufferMediaSeeking_Vtbl { base__: <super::IMediaSeeking as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferMediaSeeking2_Impl: ::windows_core::BaseImpl + IStreamBufferMediaSeeking_Impl {
    fn SetRateEx(this: &Self::This, drate: f64, dwframespersec: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferMediaSeeking2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IStreamBufferMediaSeeking);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferMediaSeeking2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferMediaSeeking2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetRateEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferMediaSeeking2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, drate: f64, dwframespersec: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRateEx(this, ::core::mem::transmute_copy(&drate), ::core::mem::transmute_copy(&dwframespersec)).into())
        }
        IStreamBufferMediaSeeking2_Vtbl { base__: <IStreamBufferMediaSeeking as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetRateEx: SetRateEx::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferRecComp_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psztargetfilename: &::windows_core::PCWSTR, pszsbrecprofileref: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn Append(this: &Self::This, pszsbrecording: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AppendEx(this: &Self::This, pszsbrecording: &::windows_core::PCWSTR, rtstart: i64, rtstop: i64) -> ::windows_core::Result<()>;
    fn GetCurrentLength(this: &Self::This) -> ::windows_core::Result<u32>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Cancel(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferRecComp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferRecComp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psztargetfilename: ::windows_core::PCWSTR, pszsbrecprofileref: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&psztargetfilename), ::core::mem::transmute(&pszsbrecprofileref)).into())
        }
        unsafe extern "system" fn Append<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszsbrecording: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Append(this, ::core::mem::transmute(&pszsbrecording)).into())
        }
        unsafe extern "system" fn AppendEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszsbrecording: ::windows_core::PCWSTR, rtstart: i64, rtstop: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendEx(this, ::core::mem::transmute(&pszsbrecording), ::core::mem::transmute_copy(&rtstart), ::core::mem::transmute_copy(&rtstop)).into())
        }
        unsafe extern "system" fn GetCurrentLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcseconds: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrentLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcseconds, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Cancel<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecComp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Cancel(this).into())
        }
        IStreamBufferRecComp_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Append: Append::<Identity, Impl, OFFSET>,
            AppendEx: AppendEx::<Identity, Impl, OFFSET>,
            GetCurrentLength: GetCurrentLength::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IStreamBufferRecordControl_Impl: ::windows_core::BaseImpl {
    fn Start(this: &Self::This, prtstart: *mut i64) -> ::windows_core::Result<()>;
    fn Stop(this: &Self::This, rtstop: i64) -> ::windows_core::Result<()>;
    fn GetRecordingStatus(this: &Self::This, phresult: *mut ::windows_core::HRESULT, pbstarted: *mut super::super::super::Foundation::BOOL, pbstopped: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IStreamBufferRecordControl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordControl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferRecordControl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Start<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prtstart: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Start(this, ::core::mem::transmute_copy(&prtstart)).into())
        }
        unsafe extern "system" fn Stop<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, rtstop: i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Stop(this, ::core::mem::transmute_copy(&rtstop)).into())
        }
        unsafe extern "system" fn GetRecordingStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordControl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phresult: *mut ::windows_core::HRESULT, pbstarted: *mut super::super::super::Foundation::BOOL, pbstopped: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetRecordingStatus(this, ::core::mem::transmute_copy(&phresult), ::core::mem::transmute_copy(&pbstarted), ::core::mem::transmute_copy(&pbstopped)).into())
        }
        IStreamBufferRecordControl_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Start: Start::<Identity, Impl, OFFSET>,
            Stop: Stop::<Identity, Impl, OFFSET>,
            GetRecordingStatus: GetRecordingStatus::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferRecordingAttribute_Impl: ::windows_core::BaseImpl {
    fn SetAttribute(this: &Self::This, ulreserved: u32, pszattributename: &::windows_core::PCWSTR, streambufferattributetype: STREAMBUFFER_ATTR_DATATYPE, pbattribute: *const u8, cbattributelength: u16) -> ::windows_core::Result<()>;
    fn GetAttributeCount(this: &Self::This, ulreserved: u32) -> ::windows_core::Result<u16>;
    fn GetAttributeByName(this: &Self::This, pszattributename: &::windows_core::PCWSTR, pulreserved: *const u32, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows_core::Result<()>;
    fn GetAttributeByIndex(this: &Self::This, windex: u16, pulreserved: *const u32, pszattributename: ::windows_core::PWSTR, pcchnamelength: *mut u16, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows_core::Result<()>;
    fn EnumAttributes(this: &Self::This) -> ::windows_core::Result<IEnumStreamBufferRecordingAttrib>;
}
impl ::windows_core::Iids for IStreamBufferRecordingAttribute {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordingAttribute_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferRecordingAttribute {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordingAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulreserved: u32, pszattributename: ::windows_core::PCWSTR, streambufferattributetype: STREAMBUFFER_ATTR_DATATYPE, pbattribute: *const u8, cbattributelength: u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAttribute(this, ::core::mem::transmute_copy(&ulreserved), ::core::mem::transmute(&pszattributename), ::core::mem::transmute_copy(&streambufferattributetype), ::core::mem::transmute_copy(&pbattribute), ::core::mem::transmute_copy(&cbattributelength)).into())
        }
        unsafe extern "system" fn GetAttributeCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordingAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulreserved: u32, pcattributes: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAttributeCount(this, ::core::mem::transmute_copy(&ulreserved)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcattributes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAttributeByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordingAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszattributename: ::windows_core::PCWSTR, pulreserved: *const u32, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttributeByName(this, ::core::mem::transmute(&pszattributename), ::core::mem::transmute_copy(&pulreserved), ::core::mem::transmute_copy(&pstreambufferattributetype), ::core::mem::transmute_copy(&pbattribute), ::core::mem::transmute_copy(&pcblength)).into())
        }
        unsafe extern "system" fn GetAttributeByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordingAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, windex: u16, pulreserved: *const u32, pszattributename: ::windows_core::PWSTR, pcchnamelength: *mut u16, pstreambufferattributetype: *mut STREAMBUFFER_ATTR_DATATYPE, pbattribute: *mut u8, pcblength: *mut u16) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAttributeByIndex(this, ::core::mem::transmute_copy(&windex), ::core::mem::transmute_copy(&pulreserved), ::core::mem::transmute_copy(&pszattributename), ::core::mem::transmute_copy(&pcchnamelength), ::core::mem::transmute_copy(&pstreambufferattributetype), ::core::mem::transmute_copy(&pbattribute), ::core::mem::transmute_copy(&pcblength)).into())
        }
        unsafe extern "system" fn EnumAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferRecordingAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppienumstreambufferattrib: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppienumstreambufferattrib, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IStreamBufferRecordingAttribute_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAttribute: SetAttribute::<Identity, Impl, OFFSET>,
            GetAttributeCount: GetAttributeCount::<Identity, Impl, OFFSET>,
            GetAttributeByName: GetAttributeByName::<Identity, Impl, OFFSET>,
            GetAttributeByIndex: GetAttributeByIndex::<Identity, Impl, OFFSET>,
            EnumAttributes: EnumAttributes::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferSink_Impl: ::windows_core::BaseImpl {
    fn LockProfile(this: &Self::This, pszstreambufferfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CreateRecorder(this: &Self::This, pszfilename: &::windows_core::PCWSTR, dwrecordtype: u32) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn IsProfileLocked(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferSink {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferSink {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn LockProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszstreambufferfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LockProfile(this, ::core::mem::transmute(&pszstreambufferfilename)).into())
        }
        unsafe extern "system" fn CreateRecorder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pszfilename: ::windows_core::PCWSTR, dwrecordtype: u32, precordingiunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateRecorder(this, ::core::mem::transmute(&pszfilename), ::core::mem::transmute_copy(&dwrecordtype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(precordingiunknown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsProfileLocked<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsProfileLocked(this).into())
        }
        IStreamBufferSink_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            LockProfile: LockProfile::<Identity, Impl, OFFSET>,
            CreateRecorder: CreateRecorder::<Identity, Impl, OFFSET>,
            IsProfileLocked: IsProfileLocked::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferSink2_Impl: ::windows_core::BaseImpl + IStreamBufferSink_Impl {
    fn UnlockProfile(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferSink2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IStreamBufferSink);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferSink2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UnlockProfile<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UnlockProfile(this).into())
        }
        IStreamBufferSink2_Vtbl { base__: <IStreamBufferSink as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, UnlockProfile: UnlockProfile::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferSink3_Impl: ::windows_core::BaseImpl + IStreamBufferSink2_Impl {
    fn SetAvailableFilter(this: &Self::This, prtmin: *mut i64) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferSink3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IStreamBufferSink2);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferSink3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetAvailableFilter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSink3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prtmin: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAvailableFilter(this, ::core::mem::transmute_copy(&prtmin)).into())
        }
        IStreamBufferSink3_Vtbl {
            base__: <IStreamBufferSink2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetAvailableFilter: SetAvailableFilter::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IStreamBufferSource_Impl: ::windows_core::BaseImpl {
    fn SetStreamSink(this: &Self::This, pistreambuffersink: ::core::option::Option<&IStreamBufferSink>) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IStreamBufferSource {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSource_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IStreamBufferSource {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetStreamSink<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IStreamBufferSource_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pistreambuffersink: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStreamSink(this, ::windows_core::from_raw_borrowed(&pistreambuffersink)).into())
        }
        IStreamBufferSource_Vtbl { base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetStreamSink: SetStreamSink::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ITSDT_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This, psectionlist: ::core::option::Option<&ISectionList>, pmpegdata: ::core::option::Option<&IMpeg2Data>) -> ::windows_core::Result<()>;
    fn GetVersionNumber(this: &Self::This) -> ::windows_core::Result<u8>;
    fn GetCountOfTableDescriptors(this: &Self::This) -> ::windows_core::Result<u32>;
    fn GetTableDescriptorByIndex(this: &Self::This, dwindex: u32) -> ::windows_core::Result<IGenericDescriptor>;
    fn GetTableDescriptorByTag(this: &Self::This, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut ::core::option::Option<IGenericDescriptor>) -> ::windows_core::Result<()>;
    fn RegisterForNextTable(this: &Self::This, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn GetNextTable(this: &Self::This) -> ::windows_core::Result<ITSDT>;
    fn RegisterForWhenCurrent(this: &Self::This, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::Result<()>;
    fn ConvertNextToCurrent(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ITSDT {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITSDT {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psectionlist: *mut ::core::ffi::c_void, pmpegdata: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&psectionlist), ::windows_core::from_raw_borrowed(&pmpegdata)).into())
        }
        unsafe extern "system" fn GetVersionNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbval: *mut u8) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetVersionNumber(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCountOfTableDescriptors<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCountOfTableDescriptors(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTableDescriptorByIndex(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppdescriptor, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetTableDescriptorByTag<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, btag: u8, pdwcookie: *mut u32, ppdescriptor: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetTableDescriptorByTag(this, ::core::mem::transmute_copy(&btag), ::core::mem::transmute_copy(&pdwcookie), ::core::mem::transmute_copy(&ppdescriptor)).into())
        }
        unsafe extern "system" fn RegisterForNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableavailable: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForNextTable(this, ::core::mem::transmute_copy(&hnexttableavailable)).into())
        }
        unsafe extern "system" fn GetNextTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptsdt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextTable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptsdt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RegisterForWhenCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hnexttableiscurrent: super::super::super::Foundation::HANDLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RegisterForWhenCurrent(this, ::core::mem::transmute_copy(&hnexttableiscurrent)).into())
        }
        unsafe extern "system" fn ConvertNextToCurrent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITSDT_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ConvertNextToCurrent(this).into())
        }
        ITSDT_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetVersionNumber: GetVersionNumber::<Identity, Impl, OFFSET>,
            GetCountOfTableDescriptors: GetCountOfTableDescriptors::<Identity, Impl, OFFSET>,
            GetTableDescriptorByIndex: GetTableDescriptorByIndex::<Identity, Impl, OFFSET>,
            GetTableDescriptorByTag: GetTableDescriptorByTag::<Identity, Impl, OFFSET>,
            RegisterForNextTable: RegisterForNextTable::<Identity, Impl, OFFSET>,
            GetNextTable: GetNextTable::<Identity, Impl, OFFSET>,
            RegisterForWhenCurrent: RegisterForWhenCurrent::<Identity, Impl, OFFSET>,
            ConvertNextToCurrent: ConvertNextToCurrent::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ITuneRequest_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn TuningSpace(this: &Self::This) -> ::windows_core::Result<ITuningSpace>;
    fn Components(this: &Self::This) -> ::windows_core::Result<IComponents>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<ITuneRequest>;
    fn Locator(this: &Self::This) -> ::windows_core::Result<ILocator>;
    fn SetLocator(this: &Self::This, locator: ::core::option::Option<&ILocator>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ITuneRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuneRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TuningSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TuningSpace(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tuningspace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Components<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, components: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Components(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(components, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newtunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newtunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Locator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locator: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Locator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locator, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locator: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocator(this, ::windows_core::from_raw_borrowed(&locator)).into())
        }
        ITuneRequest_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TuningSpace: TuningSpace::<Identity, Impl, OFFSET>,
            Components: Components::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
            Locator: Locator::<Identity, Impl, OFFSET>,
            SetLocator: SetLocator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ITuneRequestInfo_Impl: ::windows_core::BaseImpl {
    fn GetLocatorData(this: &Self::This, request: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<()>;
    fn GetComponentData(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<()>;
    fn CreateComponentList(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<()>;
    fn GetNextProgram(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<ITuneRequest>;
    fn GetPreviousProgram(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<ITuneRequest>;
    fn GetNextLocator(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<ITuneRequest>;
    fn GetPreviousLocator(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<ITuneRequest>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ITuneRequestInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuneRequestInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetLocatorData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, request: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLocatorData(this, ::windows_core::from_raw_borrowed(&request)).into())
        }
        unsafe extern "system" fn GetComponentData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetComponentData(this, ::windows_core::from_raw_borrowed(&currentrequest)).into())
        }
        unsafe extern "system" fn CreateComponentList<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreateComponentList(this, ::windows_core::from_raw_borrowed(&currentrequest)).into())
        }
        unsafe extern "system" fn GetNextProgram<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextProgram(this, ::windows_core::from_raw_borrowed(&currentrequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPreviousProgram<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPreviousProgram(this, ::windows_core::from_raw_borrowed(&currentrequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextLocator(this, ::windows_core::from_raw_borrowed(&currentrequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPreviousLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPreviousLocator(this, ::windows_core::from_raw_borrowed(&currentrequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITuneRequestInfo_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetLocatorData: GetLocatorData::<Identity, Impl, OFFSET>,
            GetComponentData: GetComponentData::<Identity, Impl, OFFSET>,
            CreateComponentList: CreateComponentList::<Identity, Impl, OFFSET>,
            GetNextProgram: GetNextProgram::<Identity, Impl, OFFSET>,
            GetPreviousProgram: GetPreviousProgram::<Identity, Impl, OFFSET>,
            GetNextLocator: GetNextLocator::<Identity, Impl, OFFSET>,
            GetPreviousLocator: GetPreviousLocator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ITuneRequestInfoEx_Impl: ::windows_core::BaseImpl + ITuneRequestInfo_Impl {
    fn CreateComponentListEx(this: &Self::This, currentrequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ITuneRequestInfoEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ITuneRequestInfo);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfoEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuneRequestInfoEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateComponentListEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuneRequestInfoEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, currentrequest: *mut ::core::ffi::c_void, ppcurpmt: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateComponentListEx(this, ::windows_core::from_raw_borrowed(&currentrequest)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcurpmt, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITuneRequestInfoEx_Vtbl {
            base__: <ITuneRequestInfo as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateComponentListEx: CreateComponentListEx::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_System_Com\"`"]
#[cfg(feature = "Win32_System_Com")]
pub trait ITuner_Impl: ::windows_core::BaseImpl {
    fn TuningSpace(this: &Self::This) -> ::windows_core::Result<ITuningSpace>;
    fn SetTuningSpace(this: &Self::This, tuningspace: ::core::option::Option<&ITuningSpace>) -> ::windows_core::Result<()>;
    fn EnumTuningSpaces(this: &Self::This) -> ::windows_core::Result<IEnumTuningSpaces>;
    fn TuneRequest(this: &Self::This) -> ::windows_core::Result<ITuneRequest>;
    fn SetTuneRequest(this: &Self::This, tunerequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<()>;
    fn Validate(this: &Self::This, tunerequest: ::core::option::Option<&ITuneRequest>) -> ::windows_core::Result<()>;
    fn PreferredComponentTypes(this: &Self::This) -> ::windows_core::Result<IComponentTypes>;
    fn SetPreferredComponentTypes(this: &Self::This, componenttypes: ::core::option::Option<&IComponentTypes>) -> ::windows_core::Result<()>;
    fn SignalStrength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn TriggerSignalEvents(this: &Self::This, interval: i32) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_System_Com")]
impl ::windows_core::Iids for ITuner {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_System_Com")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuner {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn TuningSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TuningSpace(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tuningspace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTuningSpace<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTuningSpace(this, ::windows_core::from_raw_borrowed(&tuningspace)).into())
        }
        unsafe extern "system" fn EnumTuningSpaces<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumTuningSpaces(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TuneRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TuneRequest(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTuneRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tunerequest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTuneRequest(this, ::windows_core::from_raw_borrowed(&tunerequest)).into())
        }
        unsafe extern "system" fn Validate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tunerequest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Validate(this, ::windows_core::from_raw_borrowed(&tunerequest)).into())
        }
        unsafe extern "system" fn PreferredComponentTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, componenttypes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PreferredComponentTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(componenttypes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPreferredComponentTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, componenttypes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPreferredComponentTypes(this, ::windows_core::from_raw_borrowed(&componenttypes)).into())
        }
        unsafe extern "system" fn SignalStrength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strength: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignalStrength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(strength, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TriggerSignalEvents<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuner_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, interval: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::TriggerSignalEvents(this, ::core::mem::transmute_copy(&interval)).into())
        }
        ITuner_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            TuningSpace: TuningSpace::<Identity, Impl, OFFSET>,
            SetTuningSpace: SetTuningSpace::<Identity, Impl, OFFSET>,
            EnumTuningSpaces: EnumTuningSpaces::<Identity, Impl, OFFSET>,
            TuneRequest: TuneRequest::<Identity, Impl, OFFSET>,
            SetTuneRequest: SetTuneRequest::<Identity, Impl, OFFSET>,
            Validate: Validate::<Identity, Impl, OFFSET>,
            PreferredComponentTypes: PreferredComponentTypes::<Identity, Impl, OFFSET>,
            SetPreferredComponentTypes: SetPreferredComponentTypes::<Identity, Impl, OFFSET>,
            SignalStrength: SignalStrength::<Identity, Impl, OFFSET>,
            TriggerSignalEvents: TriggerSignalEvents::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ITunerCap_Impl: ::windows_core::BaseImpl {
    fn get_SupportedNetworkTypes(this: &Self::This, ulcnetworktypesmax: u32, pulcnetworktypes: *mut u32, pguidnetworktypes: *mut ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn get_SupportedVideoFormats(this: &Self::This, pulamtunermodetype: *mut u32, pulanalogvideostandard: *mut u32) -> ::windows_core::Result<()>;
    fn get_AuxInputCount(this: &Self::This, pulcompositecount: *mut u32, pulsvideocount: *mut u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ITunerCap {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITunerCap_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITunerCap {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_SupportedNetworkTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITunerCap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ulcnetworktypesmax: u32, pulcnetworktypes: *mut u32, pguidnetworktypes: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::get_SupportedNetworkTypes(this, ::core::mem::transmute_copy(&ulcnetworktypesmax), ::core::mem::transmute_copy(&pulcnetworktypes), ::core::mem::transmute_copy(&pguidnetworktypes)).into())
        }
        unsafe extern "system" fn get_SupportedVideoFormats<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITunerCap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulamtunermodetype: *mut u32, pulanalogvideostandard: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::get_SupportedVideoFormats(this, ::core::mem::transmute_copy(&pulamtunermodetype), ::core::mem::transmute_copy(&pulanalogvideostandard)).into())
        }
        unsafe extern "system" fn get_AuxInputCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITunerCap_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pulcompositecount: *mut u32, pulsvideocount: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::get_AuxInputCount(this, ::core::mem::transmute_copy(&pulcompositecount), ::core::mem::transmute_copy(&pulsvideocount)).into())
        }
        ITunerCap_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_SupportedNetworkTypes: get_SupportedNetworkTypes::<Identity, Impl, OFFSET>,
            get_SupportedVideoFormats: get_SupportedVideoFormats::<Identity, Impl, OFFSET>,
            get_AuxInputCount: get_AuxInputCount::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait ITunerCapEx_Impl: ::windows_core::BaseImpl {
    fn Has608_708Caption(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for ITunerCapEx {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITunerCapEx_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITunerCapEx {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Has608_708Caption<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITunerCapEx_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbhascaption: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Has608_708Caption(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbhascaption, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITunerCapEx_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Has608_708Caption: Has608_708Caption::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ITuningSpace_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn UniqueName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetUniqueName(this: &Self::This, name: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn FriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetFriendlyName(this: &Self::This, name: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CLSID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn NetworkType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetNetworkType(this: &Self::This, networktypeguid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn _NetworkType(this: &Self::This) -> ::windows_core::Result<::windows_core::GUID>;
    fn Set_NetworkType(this: &Self::This, networktypeguid: *const ::windows_core::GUID) -> ::windows_core::Result<()>;
    fn CreateTuneRequest(this: &Self::This) -> ::windows_core::Result<ITuneRequest>;
    fn EnumCategoryGUIDs(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Com::IEnumGUID>;
    fn EnumDeviceMonikers(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Com::IEnumMoniker>;
    fn DefaultPreferredComponentTypes(this: &Self::This) -> ::windows_core::Result<IComponentTypes>;
    fn SetDefaultPreferredComponentTypes(this: &Self::This, newcomponenttypes: ::core::option::Option<&IComponentTypes>) -> ::windows_core::Result<()>;
    fn FrequencyMapping(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetFrequencyMapping(this: &Self::This, mapping: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn DefaultLocator(this: &Self::This) -> ::windows_core::Result<ILocator>;
    fn SetDefaultLocator(this: &Self::This, locatorval: ::core::option::Option<&ILocator>) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<ITuningSpace>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ITuningSpace {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuningSpace {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn UniqueName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UniqueName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUniqueName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUniqueName(this, ::core::mem::transmute(&name)).into())
        }
        unsafe extern "system" fn FriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(name, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFriendlyName(this, ::core::mem::transmute(&name)).into())
        }
        unsafe extern "system" fn CLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, spaceclsid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CLSID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(spaceclsid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NetworkType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, networktypeguid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NetworkType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(networktypeguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNetworkType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, networktypeguid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNetworkType(this, ::core::mem::transmute(&networktypeguid)).into())
        }
        unsafe extern "system" fn _NetworkType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, networktypeguid: *mut ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NetworkType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(networktypeguid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Set_NetworkType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, networktypeguid: *const ::windows_core::GUID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Set_NetworkType(this, ::core::mem::transmute_copy(&networktypeguid)).into())
        }
        unsafe extern "system" fn CreateTuneRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tunerequest: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateTuneRequest(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tunerequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumCategoryGUIDs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumCategoryGUIDs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumDeviceMonikers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumDeviceMonikers(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultPreferredComponentTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, componenttypes: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultPreferredComponentTypes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(componenttypes, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultPreferredComponentTypes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newcomponenttypes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultPreferredComponentTypes(this, ::windows_core::from_raw_borrowed(&newcomponenttypes)).into())
        }
        unsafe extern "system" fn FrequencyMapping<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmapping: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FrequencyMapping(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pmapping, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFrequencyMapping<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, mapping: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFrequencyMapping(this, ::core::mem::transmute(&mapping)).into())
        }
        unsafe extern "system" fn DefaultLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locatorval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultLocator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(locatorval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultLocator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, locatorval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultLocator(this, ::windows_core::from_raw_borrowed(&locatorval)).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpace_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newts: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newts, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITuningSpace_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            UniqueName: UniqueName::<Identity, Impl, OFFSET>,
            SetUniqueName: SetUniqueName::<Identity, Impl, OFFSET>,
            FriendlyName: FriendlyName::<Identity, Impl, OFFSET>,
            SetFriendlyName: SetFriendlyName::<Identity, Impl, OFFSET>,
            CLSID: CLSID::<Identity, Impl, OFFSET>,
            NetworkType: NetworkType::<Identity, Impl, OFFSET>,
            SetNetworkType: SetNetworkType::<Identity, Impl, OFFSET>,
            _NetworkType: _NetworkType::<Identity, Impl, OFFSET>,
            Set_NetworkType: Set_NetworkType::<Identity, Impl, OFFSET>,
            CreateTuneRequest: CreateTuneRequest::<Identity, Impl, OFFSET>,
            EnumCategoryGUIDs: EnumCategoryGUIDs::<Identity, Impl, OFFSET>,
            EnumDeviceMonikers: EnumDeviceMonikers::<Identity, Impl, OFFSET>,
            DefaultPreferredComponentTypes: DefaultPreferredComponentTypes::<Identity, Impl, OFFSET>,
            SetDefaultPreferredComponentTypes: SetDefaultPreferredComponentTypes::<Identity, Impl, OFFSET>,
            FrequencyMapping: FrequencyMapping::<Identity, Impl, OFFSET>,
            SetFrequencyMapping: SetFrequencyMapping::<Identity, Impl, OFFSET>,
            DefaultLocator: DefaultLocator::<Identity, Impl, OFFSET>,
            SetDefaultLocator: SetDefaultLocator::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ITuningSpaceContainer_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, varindex: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<ITuningSpace>;
    fn put_Item(this: &Self::This, varindex: &super::super::super::System::Variant::VARIANT, tuningspace: ::core::option::Option<&ITuningSpace>) -> ::windows_core::Result<()>;
    fn TuningSpacesForCLSID(this: &Self::This, spaceclsid: &::windows_core::BSTR) -> ::windows_core::Result<ITuningSpaces>;
    fn _TuningSpacesForCLSID2(this: &Self::This, spaceclsid: *const ::windows_core::GUID) -> ::windows_core::Result<ITuningSpaces>;
    fn TuningSpacesForName(this: &Self::This, name: &::windows_core::BSTR) -> ::windows_core::Result<ITuningSpaces>;
    fn FindID(this: &Self::This, tuningspace: ::core::option::Option<&ITuningSpace>) -> ::windows_core::Result<i32>;
    fn Add(this: &Self::This, tuningspace: ::core::option::Option<&ITuningSpace>) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn EnumTuningSpaces(this: &Self::This) -> ::windows_core::Result<IEnumTuningSpaces>;
    fn Remove(this: &Self::This, index: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn MaxCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMaxCount(this: &Self::This, maxcount: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ITuningSpaceContainer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuningSpaceContainer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varindex: super::super::super::System::Variant::VARIANT, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&varindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tuningspace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varindex: super::super::super::System::Variant::VARIANT, tuningspace: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Item(this, ::core::mem::transmute(&varindex), ::windows_core::from_raw_borrowed(&tuningspace)).into())
        }
        unsafe extern "system" fn TuningSpacesForCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, spaceclsid: ::std::mem::MaybeUninit<::windows_core::BSTR>, newcoll: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TuningSpacesForCLSID(this, ::core::mem::transmute(&spaceclsid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newcoll, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _TuningSpacesForCLSID2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, spaceclsid: *const ::windows_core::GUID, newcoll: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_TuningSpacesForCLSID2(this, ::core::mem::transmute_copy(&spaceclsid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newcoll, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TuningSpacesForName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>, newcoll: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TuningSpacesForName(this, ::core::mem::transmute(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newcoll, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FindID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void, id: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FindID(this, ::windows_core::from_raw_borrowed(&tuningspace)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(id, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, tuningspace: *mut ::core::ffi::c_void, newindex: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Add(this, ::windows_core::from_raw_borrowed(&tuningspace)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumTuningSpaces<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumTuningSpaces(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute(&index)).into())
        }
        unsafe extern "system" fn MaxCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(maxcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMaxCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaceContainer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, maxcount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMaxCount(this, ::core::mem::transmute_copy(&maxcount)).into())
        }
        ITuningSpaceContainer_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            put_Item: put_Item::<Identity, Impl, OFFSET>,
            TuningSpacesForCLSID: TuningSpacesForCLSID::<Identity, Impl, OFFSET>,
            _TuningSpacesForCLSID2: _TuningSpacesForCLSID2::<Identity, Impl, OFFSET>,
            TuningSpacesForName: TuningSpacesForName::<Identity, Impl, OFFSET>,
            FindID: FindID::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            EnumTuningSpaces: EnumTuningSpaces::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            MaxCount: MaxCount::<Identity, Impl, OFFSET>,
            SetMaxCount: SetMaxCount::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ITuningSpaces_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Ole::IEnumVARIANT>;
    fn get_Item(this: &Self::This, varindex: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<ITuningSpace>;
    fn EnumTuningSpaces(this: &Self::This) -> ::windows_core::Result<IEnumTuningSpaces>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ITuningSpaces {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaces_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ITuningSpaces {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(count, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, varindex: super::super::super::System::Variant::VARIANT, tuningspace: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute(&varindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(tuningspace, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumTuningSpaces<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ITuningSpaces_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumTuningSpaces(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(newenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ITuningSpaces_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            EnumTuningSpaces: EnumTuningSpaces::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IXDSCodec_Impl: ::windows_core::BaseImpl {
    fn XDSToRatObjOK(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
    fn SetCCSubstreamService(this: &Self::This, substreammask: i32) -> ::windows_core::Result<()>;
    fn CCSubstreamService(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetContentAdvisoryRating(this: &Self::This, prat: *mut i32, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows_core::Result<()>;
    fn GetXDSPacket(this: &Self::This, pxdsclasspkt: *mut i32, pxdstypepkt: *mut i32, pbstrxdspkt: *mut ::windows_core::BSTR, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows_core::Result<()>;
    fn GetCurrLicenseExpDate(this: &Self::This, prottype: *const ProtType) -> ::windows_core::Result<i32>;
    fn GetLastErrorCode(this: &Self::This) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IXDSCodec {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IXDSCodec {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn XDSToRatObjOK<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, phrcocreateretval: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::XDSToRatObjOK(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(phrcocreateretval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCCSubstreamService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, substreammask: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCCSubstreamService(this, ::core::mem::transmute_copy(&substreammask)).into())
        }
        unsafe extern "system" fn CCSubstreamService<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psubstreammask: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CCSubstreamService(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(psubstreammask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetContentAdvisoryRating<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prat: *mut i32, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetContentAdvisoryRating(this, ::core::mem::transmute_copy(&prat), ::core::mem::transmute_copy(&ppktseqid), ::core::mem::transmute_copy(&pcallseqid), ::core::mem::transmute_copy(&ptimestart), ::core::mem::transmute_copy(&ptimeend)).into())
        }
        unsafe extern "system" fn GetXDSPacket<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pxdsclasspkt: *mut i32, pxdstypepkt: *mut i32, pbstrxdspkt: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>, ppktseqid: *mut i32, pcallseqid: *mut i32, ptimestart: *mut i64, ptimeend: *mut i64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetXDSPacket(this, ::core::mem::transmute_copy(&pxdsclasspkt), ::core::mem::transmute_copy(&pxdstypepkt), ::core::mem::transmute_copy(&pbstrxdspkt), ::core::mem::transmute_copy(&ppktseqid), ::core::mem::transmute_copy(&pcallseqid), ::core::mem::transmute_copy(&ptimestart), ::core::mem::transmute_copy(&ptimeend)).into())
        }
        unsafe extern "system" fn GetCurrLicenseExpDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prottype: *const ProtType, lpdatetime: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCurrLicenseExpDate(this, ::core::mem::transmute_copy(&prottype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(lpdatetime, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodec_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetLastErrorCode(this).into())
        }
        IXDSCodec_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            XDSToRatObjOK: XDSToRatObjOK::<Identity, Impl, OFFSET>,
            SetCCSubstreamService: SetCCSubstreamService::<Identity, Impl, OFFSET>,
            CCSubstreamService: CCSubstreamService::<Identity, Impl, OFFSET>,
            GetContentAdvisoryRating: GetContentAdvisoryRating::<Identity, Impl, OFFSET>,
            GetXDSPacket: GetXDSPacket::<Identity, Impl, OFFSET>,
            GetCurrLicenseExpDate: GetCurrLicenseExpDate::<Identity, Impl, OFFSET>,
            GetLastErrorCode: GetLastErrorCode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait IXDSCodecConfig_Impl: ::windows_core::BaseImpl {
    fn GetSecureChannelObject(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn SetPauseBufferTime(this: &Self::This, dwpausebuffertime: u32) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for IXDSCodecConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodecConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IXDSCodecConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetSecureChannelObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodecConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppunkdrmsecurechannel: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSecureChannelObject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppunkdrmsecurechannel, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPauseBufferTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodecConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwpausebuffertime: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPauseBufferTime(this, ::core::mem::transmute_copy(&dwpausebuffertime)).into())
        }
        IXDSCodecConfig_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetSecureChannelObject: GetSecureChannelObject::<Identity, Impl, OFFSET>,
            SetPauseBufferTime: SetPauseBufferTime::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IXDSCodecEvents_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IXDSCodecEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSCodecEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IXDSCodecEvents {
    const VTABLE: Self::Vtable = { IXDSCodecEvents_Vtbl { base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IXDSToRat_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Init(this: &Self::This) -> ::windows_core::Result<()>;
    fn ParseXDSBytePair(this: &Self::This, byte1: u8, byte2: u8, pensystem: *mut EnTvRat_System, penlevel: *mut EnTvRat_GenericLevel, plbfenattributes: *mut i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IXDSToRat {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSToRat_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IXDSToRat {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Init<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSToRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Init(this).into())
        }
        unsafe extern "system" fn ParseXDSBytePair<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IXDSToRat_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, byte1: u8, byte2: u8, pensystem: *mut EnTvRat_System, penlevel: *mut EnTvRat_GenericLevel, plbfenattributes: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ParseXDSBytePair(this, ::core::mem::transmute_copy(&byte1), ::core::mem::transmute_copy(&byte2), ::core::mem::transmute_copy(&pensystem), ::core::mem::transmute_copy(&penlevel), ::core::mem::transmute_copy(&plbfenattributes)).into())
        }
        IXDSToRat_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Init: Init::<Identity, Impl, OFFSET>,
            ParseXDSBytePair: ParseXDSBytePair::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait _IMSVidCtlEvents_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for _IMSVidCtlEvents {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: _IMSVidCtlEvents_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for _IMSVidCtlEvents {
    const VTABLE: Self::Vtable = { _IMSVidCtlEvents_Vtbl { base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE } };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
