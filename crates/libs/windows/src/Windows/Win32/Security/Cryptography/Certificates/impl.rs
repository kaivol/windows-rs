#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAlternativeName_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn InitializeFromString(this: &Self::This, r#type: AlternativeNameType, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromRawData(this: &Self::This, r#type: AlternativeNameType, encoding: EncodingType, strrawdata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromOtherName(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>, encoding: EncodingType, strrawdata: &::windows_core::BSTR, tobewrapped: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Type(this: &Self::This) -> ::windows_core::Result<AlternativeNameType>;
    fn StrValue(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAlternativeName {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAlternativeName {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: AlternativeNameType, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromString(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn InitializeFromRawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: AlternativeNameType, encoding: EncodingType, strrawdata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromRawData(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strrawdata)).into())
        }
        unsafe extern "system" fn InitializeFromOtherName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, encoding: EncodingType, strrawdata: ::std::mem::MaybeUninit<::windows_core::BSTR>, tobewrapped: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromOtherName(this, ::windows_core::from_raw_borrowed(&pobjectid), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strrawdata), ::core::mem::transmute_copy(&tobewrapped)).into())
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut AlternativeNameType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StrValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StrValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IAlternativeName_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromString: InitializeFromString::<Identity, Impl, OFFSET>,
            InitializeFromRawData: InitializeFromRawData::<Identity, Impl, OFFSET>,
            InitializeFromOtherName: InitializeFromOtherName::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            StrValue: StrValue::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IAlternativeNames_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IAlternativeName>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IAlternativeName>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IAlternativeNames {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IAlternativeNames {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        IAlternativeNames_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IBinaryConverter_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn StringToString(this: &Self::This, strencodedin: &::windows_core::BSTR, encodingin: EncodingType, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn VariantByteArrayToString(this: &Self::This, pvarbytearray: *const super::super::super::System::Variant::VARIANT, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn StringToVariantByteArray(this: &Self::This, strencoded: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IBinaryConverter {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBinaryConverter {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StringToString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodedin: ::std::mem::MaybeUninit<::windows_core::BSTR>, encodingin: EncodingType, encoding: EncodingType, pstrencoded: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StringToString(this, ::core::mem::transmute(&strencodedin), ::core::mem::transmute_copy(&encodingin), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencoded, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VariantByteArrayToString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarbytearray: *const super::super::super::System::Variant::VARIANT, encoding: EncodingType, pstrencoded: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VariantByteArrayToString(this, ::core::mem::transmute_copy(&pvarbytearray), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencoded, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn StringToVariantByteArray<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencoded: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, pvarbytearray: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StringToVariantByteArray(this, ::core::mem::transmute(&strencoded), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarbytearray, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBinaryConverter_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StringToString: StringToString::<Identity, Impl, OFFSET>,
            VariantByteArrayToString: VariantByteArrayToString::<Identity, Impl, OFFSET>,
            StringToVariantByteArray: StringToVariantByteArray::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IBinaryConverter2_Impl: ::windows_core::BaseImpl + IBinaryConverter_Impl {
    fn StringArrayToVariantArray(this: &Self::This, pvarstringarray: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn VariantArrayToStringArray(this: &Self::This, pvarvariantarray: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IBinaryConverter2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IBinaryConverter);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IBinaryConverter2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn StringArrayToVariantArray<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarstringarray: *const super::super::super::System::Variant::VARIANT, pvarvariantarray: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::StringArrayToVariantArray(this, ::core::mem::transmute_copy(&pvarstringarray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarvariantarray, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VariantArrayToStringArray<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IBinaryConverter2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarvariantarray: *const super::super::super::System::Variant::VARIANT, pvarstringarray: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VariantArrayToStringArray(this, ::core::mem::transmute_copy(&pvarvariantarray)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarstringarray, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IBinaryConverter2_Vtbl {
            base__: <IBinaryConverter as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            StringArrayToVariantArray: StringArrayToVariantArray::<Identity, Impl, OFFSET>,
            VariantArrayToStringArray: VariantArrayToStringArray::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICEnroll_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn createFilePKCS10(this: &Self::This, dnname: &::windows_core::BSTR, usage: &::windows_core::BSTR, wszpkcs10filename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn acceptFilePKCS7(this: &Self::This, wszpkcs7filename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn createPKCS10(this: &Self::This, dnname: &::windows_core::BSTR, usage: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn acceptPKCS7(this: &Self::This, pkcs7: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn getCertFromPKCS7(this: &Self::This, wszpkcs7: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn enumProviders(this: &Self::This, dwindex: i32, dwflags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn enumContainers(this: &Self::This, dwindex: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn freeRequestInfo(this: &Self::This, pkcs7orpkcs10: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn MyStoreName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetMyStoreName(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn MyStoreType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetMyStoreType(this: &Self::This, bstrtype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn MyStoreFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetMyStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn CAStoreName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCAStoreName(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CAStoreType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCAStoreType(this: &Self::This, bstrtype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CAStoreFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCAStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn RootStoreName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetRootStoreName(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RootStoreType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetRootStoreType(this: &Self::This, bstrtype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RootStoreFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetRootStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn RequestStoreName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetRequestStoreName(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RequestStoreType(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetRequestStoreType(this: &Self::This, bstrtype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RequestStoreFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetRequestStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn ContainerName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetContainerName(this: &Self::This, bstrcontainer: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ProviderName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetProviderName(this: &Self::This, bstrprovider: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ProviderType(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetProviderType(this: &Self::This, dwtype: i32) -> ::windows_core::Result<()>;
    fn KeySpec(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetKeySpec(this: &Self::This, dw: i32) -> ::windows_core::Result<()>;
    fn ProviderFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetProviderFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn UseExistingKeySet(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetUseExistingKeySet(this: &Self::This, fuseexistingkeys: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GenKeyFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetGenKeyFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn DeleteRequestCert(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetDeleteRequestCert(this: &Self::This, fdelete: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn WriteCertToCSP(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetWriteCertToCSP(this: &Self::This, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SPCFileName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetSPCFileName(this: &Self::This, bstr: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn PVKFileName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetPVKFileName(this: &Self::This, bstr: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn HashAlgorithm(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetHashAlgorithm(this: &Self::This, bstr: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICEnroll {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICEnroll {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn createFilePKCS10<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dnname: ::std::mem::MaybeUninit<::windows_core::BSTR>, usage: ::std::mem::MaybeUninit<::windows_core::BSTR>, wszpkcs10filename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createFilePKCS10(this, ::core::mem::transmute(&dnname), ::core::mem::transmute(&usage), ::core::mem::transmute(&wszpkcs10filename)).into())
        }
        unsafe extern "system" fn acceptFilePKCS7<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszpkcs7filename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptFilePKCS7(this, ::core::mem::transmute(&wszpkcs7filename)).into())
        }
        unsafe extern "system" fn createPKCS10<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dnname: ::std::mem::MaybeUninit<::windows_core::BSTR>, usage: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppkcs10: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::createPKCS10(this, ::core::mem::transmute(&dnname), ::core::mem::transmute(&usage)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppkcs10, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn acceptPKCS7<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkcs7: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptPKCS7(this, ::core::mem::transmute(&pkcs7)).into())
        }
        unsafe extern "system" fn getCertFromPKCS7<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszpkcs7: ::std::mem::MaybeUninit<::windows_core::BSTR>, pbstrcert: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getCertFromPKCS7(this, ::core::mem::transmute(&wszpkcs7)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrcert, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn enumProviders<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: i32, dwflags: i32, pbstrprovname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::enumProviders(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&dwflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrprovname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn enumContainers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: i32, pbstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::enumContainers(this, ::core::mem::transmute_copy(&dwindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn freeRequestInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkcs7orpkcs10: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::freeRequestInfo(this, ::core::mem::transmute(&pkcs7orpkcs10)).into())
        }
        unsafe extern "system" fn MyStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MyStoreName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMyStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMyStoreName(this, ::core::mem::transmute(&bstrname)).into())
        }
        unsafe extern "system" fn MyStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrtype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MyStoreType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMyStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrtype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMyStoreType(this, ::core::mem::transmute(&bstrtype)).into())
        }
        unsafe extern "system" fn MyStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MyStoreFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMyStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMyStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn CAStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAStoreName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCAStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAStoreName(this, ::core::mem::transmute(&bstrname)).into())
        }
        unsafe extern "system" fn CAStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrtype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAStoreType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCAStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrtype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAStoreType(this, ::core::mem::transmute(&bstrtype)).into())
        }
        unsafe extern "system" fn CAStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAStoreFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCAStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn RootStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RootStoreName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRootStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRootStoreName(this, ::core::mem::transmute(&bstrname)).into())
        }
        unsafe extern "system" fn RootStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrtype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RootStoreType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRootStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrtype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRootStoreType(this, ::core::mem::transmute(&bstrtype)).into())
        }
        unsafe extern "system" fn RootStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RootStoreFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRootStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRootStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn RequestStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestStoreName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRequestStoreName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestStoreName(this, ::core::mem::transmute(&bstrname)).into())
        }
        unsafe extern "system" fn RequestStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrtype: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestStoreType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRequestStoreType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrtype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestStoreType(this, ::core::mem::transmute(&bstrtype)).into())
        }
        unsafe extern "system" fn RequestStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestStoreFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRequestStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn ContainerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrcontainer: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ContainerName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrcontainer, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContainerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrcontainer: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContainerName(this, ::core::mem::transmute(&bstrcontainer)).into())
        }
        unsafe extern "system" fn ProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrprovider: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrprovider, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrprovider: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderName(this, ::core::mem::transmute(&bstrprovider)).into())
        }
        unsafe extern "system" fn ProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwtype: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtype: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderType(this, ::core::mem::transmute_copy(&dwtype)).into())
        }
        unsafe extern "system" fn KeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdw: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySpec(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdw, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetKeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dw: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeySpec(this, ::core::mem::transmute_copy(&dw)).into())
        }
        unsafe extern "system" fn ProviderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn UseExistingKeySet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fuseexistingkeys: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UseExistingKeySet(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fuseexistingkeys, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUseExistingKeySet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fuseexistingkeys: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUseExistingKeySet(this, ::core::mem::transmute_copy(&fuseexistingkeys)).into())
        }
        unsafe extern "system" fn GenKeyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GenKeyFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetGenKeyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGenKeyFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn DeleteRequestCert<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fdelete: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DeleteRequestCert(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fdelete, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDeleteRequestCert<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fdelete: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDeleteRequestCert(this, ::core::mem::transmute_copy(&fdelete)).into())
        }
        unsafe extern "system" fn WriteCertToCSP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::WriteCertToCSP(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWriteCertToCSP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWriteCertToCSP(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn SPCFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SPCFileName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSPCFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstr: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSPCFileName(this, ::core::mem::transmute(&bstr)).into())
        }
        unsafe extern "system" fn PVKFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PVKFileName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPVKFileName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstr: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPVKFileName(this, ::core::mem::transmute(&bstr)).into())
        }
        unsafe extern "system" fn HashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstr: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgorithm(this, ::core::mem::transmute(&bstr)).into())
        }
        ICEnroll_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            createFilePKCS10: createFilePKCS10::<Identity, Impl, OFFSET>,
            acceptFilePKCS7: acceptFilePKCS7::<Identity, Impl, OFFSET>,
            createPKCS10: createPKCS10::<Identity, Impl, OFFSET>,
            acceptPKCS7: acceptPKCS7::<Identity, Impl, OFFSET>,
            getCertFromPKCS7: getCertFromPKCS7::<Identity, Impl, OFFSET>,
            enumProviders: enumProviders::<Identity, Impl, OFFSET>,
            enumContainers: enumContainers::<Identity, Impl, OFFSET>,
            freeRequestInfo: freeRequestInfo::<Identity, Impl, OFFSET>,
            MyStoreName: MyStoreName::<Identity, Impl, OFFSET>,
            SetMyStoreName: SetMyStoreName::<Identity, Impl, OFFSET>,
            MyStoreType: MyStoreType::<Identity, Impl, OFFSET>,
            SetMyStoreType: SetMyStoreType::<Identity, Impl, OFFSET>,
            MyStoreFlags: MyStoreFlags::<Identity, Impl, OFFSET>,
            SetMyStoreFlags: SetMyStoreFlags::<Identity, Impl, OFFSET>,
            CAStoreName: CAStoreName::<Identity, Impl, OFFSET>,
            SetCAStoreName: SetCAStoreName::<Identity, Impl, OFFSET>,
            CAStoreType: CAStoreType::<Identity, Impl, OFFSET>,
            SetCAStoreType: SetCAStoreType::<Identity, Impl, OFFSET>,
            CAStoreFlags: CAStoreFlags::<Identity, Impl, OFFSET>,
            SetCAStoreFlags: SetCAStoreFlags::<Identity, Impl, OFFSET>,
            RootStoreName: RootStoreName::<Identity, Impl, OFFSET>,
            SetRootStoreName: SetRootStoreName::<Identity, Impl, OFFSET>,
            RootStoreType: RootStoreType::<Identity, Impl, OFFSET>,
            SetRootStoreType: SetRootStoreType::<Identity, Impl, OFFSET>,
            RootStoreFlags: RootStoreFlags::<Identity, Impl, OFFSET>,
            SetRootStoreFlags: SetRootStoreFlags::<Identity, Impl, OFFSET>,
            RequestStoreName: RequestStoreName::<Identity, Impl, OFFSET>,
            SetRequestStoreName: SetRequestStoreName::<Identity, Impl, OFFSET>,
            RequestStoreType: RequestStoreType::<Identity, Impl, OFFSET>,
            SetRequestStoreType: SetRequestStoreType::<Identity, Impl, OFFSET>,
            RequestStoreFlags: RequestStoreFlags::<Identity, Impl, OFFSET>,
            SetRequestStoreFlags: SetRequestStoreFlags::<Identity, Impl, OFFSET>,
            ContainerName: ContainerName::<Identity, Impl, OFFSET>,
            SetContainerName: SetContainerName::<Identity, Impl, OFFSET>,
            ProviderName: ProviderName::<Identity, Impl, OFFSET>,
            SetProviderName: SetProviderName::<Identity, Impl, OFFSET>,
            ProviderType: ProviderType::<Identity, Impl, OFFSET>,
            SetProviderType: SetProviderType::<Identity, Impl, OFFSET>,
            KeySpec: KeySpec::<Identity, Impl, OFFSET>,
            SetKeySpec: SetKeySpec::<Identity, Impl, OFFSET>,
            ProviderFlags: ProviderFlags::<Identity, Impl, OFFSET>,
            SetProviderFlags: SetProviderFlags::<Identity, Impl, OFFSET>,
            UseExistingKeySet: UseExistingKeySet::<Identity, Impl, OFFSET>,
            SetUseExistingKeySet: SetUseExistingKeySet::<Identity, Impl, OFFSET>,
            GenKeyFlags: GenKeyFlags::<Identity, Impl, OFFSET>,
            SetGenKeyFlags: SetGenKeyFlags::<Identity, Impl, OFFSET>,
            DeleteRequestCert: DeleteRequestCert::<Identity, Impl, OFFSET>,
            SetDeleteRequestCert: SetDeleteRequestCert::<Identity, Impl, OFFSET>,
            WriteCertToCSP: WriteCertToCSP::<Identity, Impl, OFFSET>,
            SetWriteCertToCSP: SetWriteCertToCSP::<Identity, Impl, OFFSET>,
            SPCFileName: SPCFileName::<Identity, Impl, OFFSET>,
            SetSPCFileName: SetSPCFileName::<Identity, Impl, OFFSET>,
            PVKFileName: PVKFileName::<Identity, Impl, OFFSET>,
            SetPVKFileName: SetPVKFileName::<Identity, Impl, OFFSET>,
            HashAlgorithm: HashAlgorithm::<Identity, Impl, OFFSET>,
            SetHashAlgorithm: SetHashAlgorithm::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICEnroll2_Impl: ::windows_core::BaseImpl + ICEnroll_Impl {
    fn addCertTypeToRequest(this: &Self::This, certtype: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn addNameValuePairToSignature(this: &Self::This, name: &::windows_core::BSTR, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn WriteCertToUserDS(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetWriteCertToUserDS(this: &Self::This, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn EnableT61DNEncoding(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetEnableT61DNEncoding(this: &Self::This, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICEnroll2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICEnroll);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICEnroll2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn addCertTypeToRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, certtype: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addCertTypeToRequest(this, ::core::mem::transmute(&certtype)).into())
        }
        unsafe extern "system" fn addNameValuePairToSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::std::mem::MaybeUninit<::windows_core::BSTR>, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addNameValuePairToSignature(this, ::core::mem::transmute(&name), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn WriteCertToUserDS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::WriteCertToUserDS(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetWriteCertToUserDS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWriteCertToUserDS(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn EnableT61DNEncoding<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnableT61DNEncoding(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fbool, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEnableT61DNEncoding<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnableT61DNEncoding(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        ICEnroll2_Vtbl {
            base__: <ICEnroll as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            addCertTypeToRequest: addCertTypeToRequest::<Identity, Impl, OFFSET>,
            addNameValuePairToSignature: addNameValuePairToSignature::<Identity, Impl, OFFSET>,
            WriteCertToUserDS: WriteCertToUserDS::<Identity, Impl, OFFSET>,
            SetWriteCertToUserDS: SetWriteCertToUserDS::<Identity, Impl, OFFSET>,
            EnableT61DNEncoding: EnableT61DNEncoding::<Identity, Impl, OFFSET>,
            SetEnableT61DNEncoding: SetEnableT61DNEncoding::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICEnroll3_Impl: ::windows_core::BaseImpl + ICEnroll2_Impl {
    fn InstallPKCS7(this: &Self::This, pkcs7: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetSupportedKeySpec(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetKeyLen(this: &Self::This, fmin: super::super::super::Foundation::BOOL, fexchange: super::super::super::Foundation::BOOL) -> ::windows_core::Result<i32>;
    fn EnumAlgs(this: &Self::This, dwindex: i32, algclass: i32) -> ::windows_core::Result<i32>;
    fn GetAlgName(this: &Self::This, algid: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetReuseHardwareKeyIfUnableToGenNew(this: &Self::This, freusehardwarekeyifunabletogennew: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn ReuseHardwareKeyIfUnableToGenNew(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetHashAlgID(this: &Self::This, hashalgid: i32) -> ::windows_core::Result<()>;
    fn HashAlgID(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLimitExchangeKeyToEncipherment(this: &Self::This, flimitexchangekeytoencipherment: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn LimitExchangeKeyToEncipherment(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
    fn SetEnableSMIMECapabilities(this: &Self::This, fenablesmimecapabilities: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn EnableSMIMECapabilities(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICEnroll3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICEnroll2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICEnroll3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InstallPKCS7<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkcs7: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InstallPKCS7(this, ::core::mem::transmute(&pkcs7)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetSupportedKeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwkeyspec: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSupportedKeySpec(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwkeyspec, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetKeyLen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fmin: super::super::super::Foundation::BOOL, fexchange: super::super::super::Foundation::BOOL, pdwkeysize: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeyLen(this, ::core::mem::transmute_copy(&fmin), ::core::mem::transmute_copy(&fexchange)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwkeysize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumAlgs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: i32, algclass: i32, pdwalgid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumAlgs(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&algclass)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwalgid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAlgName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, algid: i32, pbstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAlgName(this, ::core::mem::transmute_copy(&algid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetReuseHardwareKeyIfUnableToGenNew<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, freusehardwarekeyifunabletogennew: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReuseHardwareKeyIfUnableToGenNew(this, ::core::mem::transmute_copy(&freusehardwarekeyifunabletogennew)).into())
        }
        unsafe extern "system" fn ReuseHardwareKeyIfUnableToGenNew<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, freusehardwarekeyifunabletogennew: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReuseHardwareKeyIfUnableToGenNew(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(freusehardwarekeyifunabletogennew, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHashAlgID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashalgid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgID(this, ::core::mem::transmute_copy(&hashalgid)).into())
        }
        unsafe extern "system" fn HashAlgID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashalgid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashAlgID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(hashalgid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLimitExchangeKeyToEncipherment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flimitexchangekeytoencipherment: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLimitExchangeKeyToEncipherment(this, ::core::mem::transmute_copy(&flimitexchangekeytoencipherment)).into())
        }
        unsafe extern "system" fn LimitExchangeKeyToEncipherment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flimitexchangekeytoencipherment: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LimitExchangeKeyToEncipherment(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(flimitexchangekeytoencipherment, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEnableSMIMECapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenablesmimecapabilities: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnableSMIMECapabilities(this, ::core::mem::transmute_copy(&fenablesmimecapabilities)).into())
        }
        unsafe extern "system" fn EnableSMIMECapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenablesmimecapabilities: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnableSMIMECapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(fenablesmimecapabilities, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICEnroll3_Vtbl {
            base__: <ICEnroll2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InstallPKCS7: InstallPKCS7::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetSupportedKeySpec: GetSupportedKeySpec::<Identity, Impl, OFFSET>,
            GetKeyLen: GetKeyLen::<Identity, Impl, OFFSET>,
            EnumAlgs: EnumAlgs::<Identity, Impl, OFFSET>,
            GetAlgName: GetAlgName::<Identity, Impl, OFFSET>,
            SetReuseHardwareKeyIfUnableToGenNew: SetReuseHardwareKeyIfUnableToGenNew::<Identity, Impl, OFFSET>,
            ReuseHardwareKeyIfUnableToGenNew: ReuseHardwareKeyIfUnableToGenNew::<Identity, Impl, OFFSET>,
            SetHashAlgID: SetHashAlgID::<Identity, Impl, OFFSET>,
            HashAlgID: HashAlgID::<Identity, Impl, OFFSET>,
            SetLimitExchangeKeyToEncipherment: SetLimitExchangeKeyToEncipherment::<Identity, Impl, OFFSET>,
            LimitExchangeKeyToEncipherment: LimitExchangeKeyToEncipherment::<Identity, Impl, OFFSET>,
            SetEnableSMIMECapabilities: SetEnableSMIMECapabilities::<Identity, Impl, OFFSET>,
            EnableSMIMECapabilities: EnableSMIMECapabilities::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICEnroll4_Impl: ::windows_core::BaseImpl + ICEnroll3_Impl {
    fn SetPrivateKeyArchiveCertificate(this: &Self::This, bstrcert: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn PrivateKeyArchiveCertificate(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetThumbPrint(this: &Self::This, bstrthumbprint: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ThumbPrint(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn binaryToString(this: &Self::This, flags: i32, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn stringToBinary(this: &Self::This, flags: i32, strencoded: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn addExtensionToRequest(this: &Self::This, flags: i32, strname: &::windows_core::BSTR, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn addAttributeToRequest(this: &Self::This, flags: i32, strname: &::windows_core::BSTR, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn addNameValuePairToRequest(this: &Self::This, flags: i32, strname: &::windows_core::BSTR, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn resetExtensions(this: &Self::This) -> ::windows_core::Result<()>;
    fn resetAttributes(this: &Self::This) -> ::windows_core::Result<()>;
    fn createRequest(this: &Self::This, flags: CERT_CREATE_REQUEST_FLAGS, strdnname: &::windows_core::BSTR, usage: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn createFileRequest(this: &Self::This, flags: CERT_CREATE_REQUEST_FLAGS, strdnname: &::windows_core::BSTR, strusage: &::windows_core::BSTR, strrequestfilename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn acceptResponse(this: &Self::This, strresponse: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn acceptFileResponse(this: &Self::This, strresponsefilename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn getCertFromResponse(this: &Self::This, strresponse: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn getCertFromFileResponse(this: &Self::This, strresponsefilename: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn createPFX(this: &Self::This, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn createFilePFX(this: &Self::This, strpassword: &::windows_core::BSTR, strpfxfilename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn setPendingRequestInfo(this: &Self::This, lrequestid: i32, strcadns: &::windows_core::BSTR, strcaname: &::windows_core::BSTR, strfriendlyname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn enumPendingRequest(this: &Self::This, lindex: i32, ldesiredproperty: PENDING_REQUEST_DESIRED_PROPERTY) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn removePendingRequest(this: &Self::This, strthumbprint: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetKeyLenEx(this: &Self::This, lsizespec: XEKL_KEYSIZE, lkeyspec: XEKL_KEYSPEC) -> ::windows_core::Result<i32>;
    fn InstallPKCS7Ex(this: &Self::This, pkcs7: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn addCertTypeToRequestEx(this: &Self::This, ltype: ADDED_CERT_TYPE, bstroidorname: &::windows_core::BSTR, lmajorversion: i32, fminorversion: super::super::super::Foundation::BOOL, lminorversion: i32) -> ::windows_core::Result<()>;
    fn getProviderType(this: &Self::This, strprovname: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn SetSignerCertificate(this: &Self::This, bstrcert: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetClientId(this: &Self::This, lclientid: i32) -> ::windows_core::Result<()>;
    fn ClientId(this: &Self::This) -> ::windows_core::Result<i32>;
    fn addBlobPropertyToCertificate(this: &Self::This, lpropertyid: i32, lreserved: i32, bstrproperty: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn resetBlobProperties(this: &Self::This) -> ::windows_core::Result<()>;
    fn SetIncludeSubjectKeyID(this: &Self::This, finclude: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn IncludeSubjectKeyID(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICEnroll4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICEnroll3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICEnroll4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetPrivateKeyArchiveCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrcert: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPrivateKeyArchiveCertificate(this, ::core::mem::transmute(&bstrcert)).into())
        }
        unsafe extern "system" fn PrivateKeyArchiveCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrcert: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PrivateKeyArchiveCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrcert, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetThumbPrint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrthumbprint: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThumbPrint(this, ::core::mem::transmute(&bstrthumbprint)).into())
        }
        unsafe extern "system" fn ThumbPrint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbstrthumbprint: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ThumbPrint(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbstrthumbprint, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn binaryToString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrencoded: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::binaryToString(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strbinary)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencoded, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn stringToBinary<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, strencoded: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::stringToBinary(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strencoded)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn addExtensionToRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addExtensionToRequest(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strname), ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn addAttributeToRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addAttributeToRequest(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strname), ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn addNameValuePairToRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addNameValuePairToRequest(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strname), ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn resetExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::resetExtensions(this).into())
        }
        unsafe extern "system" fn resetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::resetAttributes(this).into())
        }
        unsafe extern "system" fn createRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: CERT_CREATE_REQUEST_FLAGS, strdnname: ::std::mem::MaybeUninit<::windows_core::BSTR>, usage: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrrequest: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::createRequest(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strdnname), ::core::mem::transmute(&usage)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrrequest, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn createFileRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: CERT_CREATE_REQUEST_FLAGS, strdnname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strusage: ::std::mem::MaybeUninit<::windows_core::BSTR>, strrequestfilename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createFileRequest(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strdnname), ::core::mem::transmute(&strusage), ::core::mem::transmute(&strrequestfilename)).into())
        }
        unsafe extern "system" fn acceptResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strresponse: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptResponse(this, ::core::mem::transmute(&strresponse)).into())
        }
        unsafe extern "system" fn acceptFileResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strresponsefilename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptFileResponse(this, ::core::mem::transmute(&strresponsefilename)).into())
        }
        unsafe extern "system" fn getCertFromResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strresponse: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrcert: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getCertFromResponse(this, ::core::mem::transmute(&strresponse)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrcert, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn getCertFromFileResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strresponsefilename: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrcert: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getCertFromFileResponse(this, ::core::mem::transmute(&strresponsefilename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrcert, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn createPFX<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrpfx: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::createPFX(this, ::core::mem::transmute(&strpassword)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrpfx, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn createFilePFX<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpfxfilename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createFilePFX(this, ::core::mem::transmute(&strpassword), ::core::mem::transmute(&strpfxfilename)).into())
        }
        unsafe extern "system" fn setPendingRequestInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lrequestid: i32, strcadns: ::std::mem::MaybeUninit<::windows_core::BSTR>, strcaname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strfriendlyname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::setPendingRequestInfo(this, ::core::mem::transmute_copy(&lrequestid), ::core::mem::transmute(&strcadns), ::core::mem::transmute(&strcaname), ::core::mem::transmute(&strfriendlyname)).into())
        }
        unsafe extern "system" fn enumPendingRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lindex: i32, ldesiredproperty: PENDING_REQUEST_DESIRED_PROPERTY, pvarproperty: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::enumPendingRequest(this, ::core::mem::transmute_copy(&lindex), ::core::mem::transmute_copy(&ldesiredproperty)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarproperty, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn removePendingRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strthumbprint: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::removePendingRequest(this, ::core::mem::transmute(&strthumbprint)).into())
        }
        unsafe extern "system" fn GetKeyLenEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lsizespec: XEKL_KEYSIZE, lkeyspec: XEKL_KEYSPEC, pdwkeysize: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetKeyLenEx(this, ::core::mem::transmute_copy(&lsizespec), ::core::mem::transmute_copy(&lkeyspec)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdwkeysize, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InstallPKCS7Ex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkcs7: ::std::mem::MaybeUninit<::windows_core::BSTR>, plcertinstalled: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::InstallPKCS7Ex(this, ::core::mem::transmute(&pkcs7)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plcertinstalled, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn addCertTypeToRequestEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltype: ADDED_CERT_TYPE, bstroidorname: ::std::mem::MaybeUninit<::windows_core::BSTR>, lmajorversion: i32, fminorversion: super::super::super::Foundation::BOOL, lminorversion: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addCertTypeToRequestEx(this, ::core::mem::transmute_copy(&ltype), ::core::mem::transmute(&bstroidorname), ::core::mem::transmute_copy(&lmajorversion), ::core::mem::transmute_copy(&fminorversion), ::core::mem::transmute_copy(&lminorversion)).into())
        }
        unsafe extern "system" fn getProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strprovname: ::std::mem::MaybeUninit<::windows_core::BSTR>, plprovtype: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::getProviderType(this, ::core::mem::transmute(&strprovname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plprovtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrcert: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignerCertificate(this, ::core::mem::transmute(&bstrcert)).into())
        }
        unsafe extern "system" fn SetClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lclientid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientId(this, ::core::mem::transmute_copy(&lclientid)).into())
        }
        unsafe extern "system" fn ClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plclientid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ClientId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(plclientid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn addBlobPropertyToCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpropertyid: i32, lreserved: i32, bstrproperty: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addBlobPropertyToCertificate(this, ::core::mem::transmute_copy(&lpropertyid), ::core::mem::transmute_copy(&lreserved), ::core::mem::transmute(&bstrproperty)).into())
        }
        unsafe extern "system" fn resetBlobProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::resetBlobProperties(this).into())
        }
        unsafe extern "system" fn SetIncludeSubjectKeyID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, finclude: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIncludeSubjectKeyID(this, ::core::mem::transmute_copy(&finclude)).into())
        }
        unsafe extern "system" fn IncludeSubjectKeyID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfinclude: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IncludeSubjectKeyID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pfinclude, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICEnroll4_Vtbl {
            base__: <ICEnroll3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetPrivateKeyArchiveCertificate: SetPrivateKeyArchiveCertificate::<Identity, Impl, OFFSET>,
            PrivateKeyArchiveCertificate: PrivateKeyArchiveCertificate::<Identity, Impl, OFFSET>,
            SetThumbPrint: SetThumbPrint::<Identity, Impl, OFFSET>,
            ThumbPrint: ThumbPrint::<Identity, Impl, OFFSET>,
            binaryToString: binaryToString::<Identity, Impl, OFFSET>,
            stringToBinary: stringToBinary::<Identity, Impl, OFFSET>,
            addExtensionToRequest: addExtensionToRequest::<Identity, Impl, OFFSET>,
            addAttributeToRequest: addAttributeToRequest::<Identity, Impl, OFFSET>,
            addNameValuePairToRequest: addNameValuePairToRequest::<Identity, Impl, OFFSET>,
            resetExtensions: resetExtensions::<Identity, Impl, OFFSET>,
            resetAttributes: resetAttributes::<Identity, Impl, OFFSET>,
            createRequest: createRequest::<Identity, Impl, OFFSET>,
            createFileRequest: createFileRequest::<Identity, Impl, OFFSET>,
            acceptResponse: acceptResponse::<Identity, Impl, OFFSET>,
            acceptFileResponse: acceptFileResponse::<Identity, Impl, OFFSET>,
            getCertFromResponse: getCertFromResponse::<Identity, Impl, OFFSET>,
            getCertFromFileResponse: getCertFromFileResponse::<Identity, Impl, OFFSET>,
            createPFX: createPFX::<Identity, Impl, OFFSET>,
            createFilePFX: createFilePFX::<Identity, Impl, OFFSET>,
            setPendingRequestInfo: setPendingRequestInfo::<Identity, Impl, OFFSET>,
            enumPendingRequest: enumPendingRequest::<Identity, Impl, OFFSET>,
            removePendingRequest: removePendingRequest::<Identity, Impl, OFFSET>,
            GetKeyLenEx: GetKeyLenEx::<Identity, Impl, OFFSET>,
            InstallPKCS7Ex: InstallPKCS7Ex::<Identity, Impl, OFFSET>,
            addCertTypeToRequestEx: addCertTypeToRequestEx::<Identity, Impl, OFFSET>,
            getProviderType: getProviderType::<Identity, Impl, OFFSET>,
            SetSignerCertificate: SetSignerCertificate::<Identity, Impl, OFFSET>,
            SetClientId: SetClientId::<Identity, Impl, OFFSET>,
            ClientId: ClientId::<Identity, Impl, OFFSET>,
            addBlobPropertyToCertificate: addBlobPropertyToCertificate::<Identity, Impl, OFFSET>,
            resetBlobProperties: resetBlobProperties::<Identity, Impl, OFFSET>,
            SetIncludeSubjectKeyID: SetIncludeSubjectKeyID::<Identity, Impl, OFFSET>,
            IncludeSubjectKeyID: IncludeSubjectKeyID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertAdmin_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn IsValidCertificate(this: &Self::This, strconfig: &::windows_core::BSTR, strserialnumber: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn GetRevocationReason(this: &Self::This) -> ::windows_core::Result<i32>;
    fn RevokeCertificate(this: &Self::This, strconfig: &::windows_core::BSTR, strserialnumber: &::windows_core::BSTR, reason: i32, date: f64) -> ::windows_core::Result<()>;
    fn SetRequestAttributes(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32, strattributes: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetCertificateExtension(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32, strextensionname: &::windows_core::BSTR, r#type: CERT_PROPERTY_TYPE, flags: i32, pvarvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn DenyRequest(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32) -> ::windows_core::Result<()>;
    fn ResubmitRequest(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32) -> ::windows_core::Result<i32>;
    fn PublishCRL(this: &Self::This, strconfig: &::windows_core::BSTR, date: f64) -> ::windows_core::Result<()>;
    fn GetCRL(this: &Self::This, strconfig: &::windows_core::BSTR, flags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ImportCertificate(this: &Self::This, strconfig: &::windows_core::BSTR, strcertificate: &::windows_core::BSTR, flags: CERT_IMPORT_FLAGS) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertAdmin {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertAdmin {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn IsValidCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strserialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdisposition: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsValidCertificate(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strserialnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRevocationReason<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, preason: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRevocationReason(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(preason, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RevokeCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strserialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, reason: i32, date: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RevokeCertificate(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strserialnumber), ::core::mem::transmute_copy(&reason), ::core::mem::transmute_copy(&date)).into())
        }
        unsafe extern "system" fn SetRequestAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32, strattributes: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestAttributes(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid), ::core::mem::transmute(&strattributes)).into())
        }
        unsafe extern "system" fn SetCertificateExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32, strextensionname: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: CERT_PROPERTY_TYPE, flags: i32, pvarvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCertificateExtension(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid), ::core::mem::transmute(&strextensionname), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pvarvalue)).into())
        }
        unsafe extern "system" fn DenyRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DenyRequest(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid)).into())
        }
        unsafe extern "system" fn ResubmitRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32, pdisposition: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ResubmitRequest(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PublishCRL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, date: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PublishCRL(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&date)).into())
        }
        unsafe extern "system" fn GetCRL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: i32, pstrcrl: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCRL(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrcrl, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ImportCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: CERT_IMPORT_FLAGS, prequestid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ImportCertificate(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strcertificate), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prequestid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertAdmin_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            IsValidCertificate: IsValidCertificate::<Identity, Impl, OFFSET>,
            GetRevocationReason: GetRevocationReason::<Identity, Impl, OFFSET>,
            RevokeCertificate: RevokeCertificate::<Identity, Impl, OFFSET>,
            SetRequestAttributes: SetRequestAttributes::<Identity, Impl, OFFSET>,
            SetCertificateExtension: SetCertificateExtension::<Identity, Impl, OFFSET>,
            DenyRequest: DenyRequest::<Identity, Impl, OFFSET>,
            ResubmitRequest: ResubmitRequest::<Identity, Impl, OFFSET>,
            PublishCRL: PublishCRL::<Identity, Impl, OFFSET>,
            GetCRL: GetCRL::<Identity, Impl, OFFSET>,
            ImportCertificate: ImportCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertAdmin2_Impl: ::windows_core::BaseImpl + ICertAdmin_Impl {
    fn PublishCRLs(this: &Self::This, strconfig: &::windows_core::BSTR, date: f64, crlflags: i32) -> ::windows_core::Result<()>;
    fn GetCAProperty(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32, propindex: i32, proptype: i32, flags: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetCAProperty(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32, propindex: i32, proptype: CERT_PROPERTY_TYPE, pvarpropertyvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn GetCAPropertyFlags(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32) -> ::windows_core::Result<i32>;
    fn GetCAPropertyDisplayName(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetArchivedKey(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32, flags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetConfigEntry(this: &Self::This, strconfig: &::windows_core::BSTR, strnodepath: &::windows_core::BSTR, strentryname: &::windows_core::BSTR) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetConfigEntry(this: &Self::This, strconfig: &::windows_core::BSTR, strnodepath: &::windows_core::BSTR, strentryname: &::windows_core::BSTR, pvarentry: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ImportKey(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32, strcerthash: &::windows_core::BSTR, flags: CERT_IMPORT_FLAGS, strkey: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetMyRoles(this: &Self::This, strconfig: &::windows_core::BSTR) -> ::windows_core::Result<CERTADMIN_GET_ROLES_FLAGS>;
    fn DeleteRow(this: &Self::This, strconfig: &::windows_core::BSTR, flags: CERT_DELETE_ROW_FLAGS, date: f64, table: CVRC_TABLE, rowid: i32) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertAdmin2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertAdmin);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertAdmin2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn PublishCRLs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, date: f64, crlflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PublishCRLs(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&date), ::core::mem::transmute_copy(&crlflags)).into())
        }
        unsafe extern "system" fn GetCAProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, propindex: i32, proptype: i32, flags: i32, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAProperty(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid), ::core::mem::transmute_copy(&propindex), ::core::mem::transmute_copy(&proptype), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCAProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, propindex: i32, proptype: CERT_PROPERTY_TYPE, pvarpropertyvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAProperty(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid), ::core::mem::transmute_copy(&propindex), ::core::mem::transmute_copy(&proptype), ::core::mem::transmute_copy(&pvarpropertyvalue)).into())
        }
        unsafe extern "system" fn GetCAPropertyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, ppropflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAPropertyFlags(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAPropertyDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, pstrdisplayname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAPropertyDisplayName(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrdisplayname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetArchivedKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32, flags: i32, pstrarchivedkey: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetArchivedKey(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrarchivedkey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConfigEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strnodepath: ::std::mem::MaybeUninit<::windows_core::BSTR>, strentryname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarentry: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConfigEntry(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strnodepath), ::core::mem::transmute(&strentryname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarentry, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetConfigEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strnodepath: ::std::mem::MaybeUninit<::windows_core::BSTR>, strentryname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarentry: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConfigEntry(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strnodepath), ::core::mem::transmute(&strentryname), ::core::mem::transmute_copy(&pvarentry)).into())
        }
        unsafe extern "system" fn ImportKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32, strcerthash: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: CERT_IMPORT_FLAGS, strkey: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ImportKey(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid), ::core::mem::transmute(&strcerthash), ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strkey)).into())
        }
        unsafe extern "system" fn GetMyRoles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, proles: *mut CERTADMIN_GET_ROLES_FLAGS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMyRoles(this, ::core::mem::transmute(&strconfig)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(proles, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteRow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertAdmin2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: CERT_DELETE_ROW_FLAGS, date: f64, table: CVRC_TABLE, rowid: i32, pcdeleted: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DeleteRow(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&date), ::core::mem::transmute_copy(&table), ::core::mem::transmute_copy(&rowid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcdeleted, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertAdmin2_Vtbl {
            base__: <ICertAdmin as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            PublishCRLs: PublishCRLs::<Identity, Impl, OFFSET>,
            GetCAProperty: GetCAProperty::<Identity, Impl, OFFSET>,
            SetCAProperty: SetCAProperty::<Identity, Impl, OFFSET>,
            GetCAPropertyFlags: GetCAPropertyFlags::<Identity, Impl, OFFSET>,
            GetCAPropertyDisplayName: GetCAPropertyDisplayName::<Identity, Impl, OFFSET>,
            GetArchivedKey: GetArchivedKey::<Identity, Impl, OFFSET>,
            GetConfigEntry: GetConfigEntry::<Identity, Impl, OFFSET>,
            SetConfigEntry: SetConfigEntry::<Identity, Impl, OFFSET>,
            ImportKey: ImportKey::<Identity, Impl, OFFSET>,
            GetMyRoles: GetMyRoles::<Identity, Impl, OFFSET>,
            DeleteRow: DeleteRow::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertConfig_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Reset(this: &Self::This, index: i32) -> ::windows_core::Result<i32>;
    fn Next(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetField(this: &Self::This, strfieldname: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetConfig(this: &Self::This, flags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Reset(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Next(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetField<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strfieldname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetField(this, ::core::mem::transmute(&strfieldname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConfig(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertConfig_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Next: Next::<Identity, Impl, OFFSET>,
            GetField: GetField::<Identity, Impl, OFFSET>,
            GetConfig: GetConfig::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertConfig2_Impl: ::windows_core::BaseImpl + ICertConfig_Impl {
    fn SetSharedFolder(this: &Self::This, strsharedfolder: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertConfig2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertConfig);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertConfig2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetSharedFolder<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertConfig2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strsharedfolder: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSharedFolder(this, ::core::mem::transmute(&strsharedfolder)).into())
        }
        ICertConfig2_Vtbl { base__: <ICertConfig as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetSharedFolder: SetSharedFolder::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeAltName_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetNameCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetNameChoice(this: &Self::This, nameindex: i32) -> ::windows_core::Result<i32>;
    fn GetName(this: &Self::This, nameindex: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Reset(this: &Self::This, namecount: i32) -> ::windows_core::Result<()>;
    fn SetNameEntry(this: &Self::This, nameindex: i32, namechoice: CERT_ALT_NAME, strname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeAltName {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeAltName {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strbinary)).into())
        }
        unsafe extern "system" fn GetNameCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pnamecount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNameCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnamecount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNameChoice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nameindex: i32, pnamechoice: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNameChoice(this, ::core::mem::transmute_copy(&nameindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnamechoice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nameindex: i32, pstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this, ::core::mem::transmute_copy(&nameindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, namecount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::core::mem::transmute_copy(&namecount)).into())
        }
        unsafe extern "system" fn SetNameEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nameindex: i32, namechoice: CERT_ALT_NAME, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNameEntry(this, ::core::mem::transmute_copy(&nameindex), ::core::mem::transmute_copy(&namechoice), ::core::mem::transmute(&strname)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Encode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeAltName_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            GetNameCount: GetNameCount::<Identity, Impl, OFFSET>,
            GetNameChoice: GetNameChoice::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            SetNameEntry: SetNameEntry::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeAltName2_Impl: ::windows_core::BaseImpl + ICertEncodeAltName_Impl {
    fn DecodeBlob(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn EncodeBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetNameBlob(this: &Self::This, nameindex: i32, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetNameEntryBlob(this: &Self::This, nameindex: i32, namechoice: i32, strname: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeAltName2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertEncodeAltName);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeAltName2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeBlob(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn EncodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrencodeddata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncodeBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodeddata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNameBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nameindex: i32, encoding: EncodingType, pstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNameBlob(this, ::core::mem::transmute_copy(&nameindex), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNameEntryBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeAltName2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, nameindex: i32, namechoice: i32, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNameEntryBlob(this, ::core::mem::transmute_copy(&nameindex), ::core::mem::transmute_copy(&namechoice), ::core::mem::transmute(&strname), ::core::mem::transmute_copy(&encoding)).into())
        }
        ICertEncodeAltName2_Vtbl {
            base__: <ICertEncodeAltName as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DecodeBlob: DecodeBlob::<Identity, Impl, OFFSET>,
            EncodeBlob: EncodeBlob::<Identity, Impl, OFFSET>,
            GetNameBlob: GetNameBlob::<Identity, Impl, OFFSET>,
            SetNameEntryBlob: SetNameEntryBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeBitString_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetBitCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetBitString(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Encode(this: &Self::This, bitcount: i32, strbitstring: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeBitString {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeBitString {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strbinary)).into())
        }
        unsafe extern "system" fn GetBitCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pbitcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBitCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pbitcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBitString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrbitstring: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBitString(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbitstring, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bitcount: i32, strbitstring: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Encode(this, ::core::mem::transmute_copy(&bitcount), ::core::mem::transmute(&strbitstring)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeBitString_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            GetBitCount: GetBitCount::<Identity, Impl, OFFSET>,
            GetBitString: GetBitString::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeBitString2_Impl: ::windows_core::BaseImpl + ICertEncodeBitString_Impl {
    fn DecodeBlob(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn EncodeBlob(this: &Self::This, bitcount: i32, strbitstring: &::windows_core::BSTR, encodingin: EncodingType, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetBitStringBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeBitString2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertEncodeBitString);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeBitString2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeBlob(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn EncodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bitcount: i32, strbitstring: ::std::mem::MaybeUninit<::windows_core::BSTR>, encodingin: EncodingType, encoding: EncodingType, pstrencodeddata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncodeBlob(this, ::core::mem::transmute_copy(&bitcount), ::core::mem::transmute(&strbitstring), ::core::mem::transmute_copy(&encodingin), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodeddata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetBitStringBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeBitString2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrbitstring: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetBitStringBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbitstring, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeBitString2_Vtbl {
            base__: <ICertEncodeBitString as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DecodeBlob: DecodeBlob::<Identity, Impl, OFFSET>,
            EncodeBlob: EncodeBlob::<Identity, Impl, OFFSET>,
            GetBitStringBlob: GetBitStringBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeCRLDistInfo_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetDistPointCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetNameCount(this: &Self::This, distpointindex: i32) -> ::windows_core::Result<i32>;
    fn GetNameChoice(this: &Self::This, distpointindex: i32, nameindex: i32) -> ::windows_core::Result<i32>;
    fn GetName(this: &Self::This, distpointindex: i32, nameindex: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Reset(this: &Self::This, distpointcount: i32) -> ::windows_core::Result<()>;
    fn SetNameCount(this: &Self::This, distpointindex: i32, namecount: i32) -> ::windows_core::Result<()>;
    fn SetNameEntry(this: &Self::This, distpointindex: i32, nameindex: i32, namechoice: CERT_ALT_NAME, strname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeCRLDistInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeCRLDistInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strbinary)).into())
        }
        unsafe extern "system" fn GetDistPointCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdistpointcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDistPointCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdistpointcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNameCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, distpointindex: i32, pnamecount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNameCount(this, ::core::mem::transmute_copy(&distpointindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnamecount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNameChoice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, distpointindex: i32, nameindex: i32, pnamechoice: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNameChoice(this, ::core::mem::transmute_copy(&distpointindex), ::core::mem::transmute_copy(&nameindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pnamechoice, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, distpointindex: i32, nameindex: i32, pstrname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetName(this, ::core::mem::transmute_copy(&distpointindex), ::core::mem::transmute_copy(&nameindex)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, distpointcount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::core::mem::transmute_copy(&distpointcount)).into())
        }
        unsafe extern "system" fn SetNameCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, distpointindex: i32, namecount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNameCount(this, ::core::mem::transmute_copy(&distpointindex), ::core::mem::transmute_copy(&namecount)).into())
        }
        unsafe extern "system" fn SetNameEntry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, distpointindex: i32, nameindex: i32, namechoice: CERT_ALT_NAME, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNameEntry(this, ::core::mem::transmute_copy(&distpointindex), ::core::mem::transmute_copy(&nameindex), ::core::mem::transmute_copy(&namechoice), ::core::mem::transmute(&strname)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Encode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeCRLDistInfo_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            GetDistPointCount: GetDistPointCount::<Identity, Impl, OFFSET>,
            GetNameCount: GetNameCount::<Identity, Impl, OFFSET>,
            GetNameChoice: GetNameChoice::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            SetNameCount: SetNameCount::<Identity, Impl, OFFSET>,
            SetNameEntry: SetNameEntry::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeCRLDistInfo2_Impl: ::windows_core::BaseImpl + ICertEncodeCRLDistInfo_Impl {
    fn DecodeBlob(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn EncodeBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeCRLDistInfo2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertEncodeCRLDistInfo);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeCRLDistInfo2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeBlob(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn EncodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeCRLDistInfo2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrencodeddata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncodeBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodeddata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeCRLDistInfo2_Vtbl {
            base__: <ICertEncodeCRLDistInfo as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DecodeBlob: DecodeBlob::<Identity, Impl, OFFSET>,
            EncodeBlob: EncodeBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeDateArray_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetValue(this: &Self::This, index: i32) -> ::windows_core::Result<f64>;
    fn Reset(this: &Self::This, count: i32) -> ::windows_core::Result<()>;
    fn SetValue(this: &Self::This, index: i32, value: f64) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeDateArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeDateArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strbinary)).into())
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, value: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Encode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeDateArray_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeDateArray2_Impl: ::windows_core::BaseImpl + ICertEncodeDateArray_Impl {
    fn DecodeBlob(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn EncodeBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeDateArray2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertEncodeDateArray);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeDateArray2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeBlob(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn EncodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeDateArray2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrencodeddata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncodeBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodeddata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeDateArray2_Vtbl {
            base__: <ICertEncodeDateArray as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DecodeBlob: DecodeBlob::<Identity, Impl, OFFSET>,
            EncodeBlob: EncodeBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeLongArray_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetValue(this: &Self::This, index: i32) -> ::windows_core::Result<i32>;
    fn Reset(this: &Self::This, count: i32) -> ::windows_core::Result<()>;
    fn SetValue(this: &Self::This, index: i32, value: i32) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeLongArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeLongArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strbinary)).into())
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::core::mem::transmute_copy(&count)).into())
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Encode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeLongArray_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeLongArray2_Impl: ::windows_core::BaseImpl + ICertEncodeLongArray_Impl {
    fn DecodeBlob(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn EncodeBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeLongArray2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertEncodeLongArray);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeLongArray2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeBlob(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn EncodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeLongArray2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrencodeddata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncodeBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodeddata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeLongArray2_Vtbl {
            base__: <ICertEncodeLongArray as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DecodeBlob: DecodeBlob::<Identity, Impl, OFFSET>,
            EncodeBlob: EncodeBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeStringArray_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strbinary: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetStringType(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetCount(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetValue(this: &Self::This, index: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Reset(this: &Self::This, count: i32, stringtype: super::CERT_RDN_ATTR_VALUE_TYPE) -> ::windows_core::Result<()>;
    fn SetValue(this: &Self::This, index: i32, str: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeStringArray {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeStringArray {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strbinary: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strbinary)).into())
        }
        unsafe extern "system" fn GetStringType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstringtype: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStringType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstringtype, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pstr: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetValue(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstr, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, count: i32, stringtype: super::CERT_RDN_ATTR_VALUE_TYPE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this, ::core::mem::transmute_copy(&count), ::core::mem::transmute_copy(&stringtype)).into())
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, str: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute_copy(&index), ::core::mem::transmute(&str)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrbinary: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Encode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrbinary, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeStringArray_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            GetStringType: GetStringType::<Identity, Impl, OFFSET>,
            GetCount: GetCount::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertEncodeStringArray2_Impl: ::windows_core::BaseImpl + ICertEncodeStringArray_Impl {
    fn DecodeBlob(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn EncodeBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertEncodeStringArray2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertEncodeStringArray);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertEncodeStringArray2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn DecodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DecodeBlob(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn EncodeBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertEncodeStringArray2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrencodeddata: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncodeBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodeddata, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertEncodeStringArray2_Vtbl {
            base__: <ICertEncodeStringArray as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            DecodeBlob: DecodeBlob::<Identity, Impl, OFFSET>,
            EncodeBlob: EncodeBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertExit_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, strconfig: &::windows_core::BSTR) -> ::windows_core::Result<CERT_EXIT_EVENT_MASK>;
    fn Notify(this: &Self::This, exitevent: i32, context: i32) -> ::windows_core::Result<()>;
    fn GetDescription(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertExit {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertExit_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertExit {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, peventmask: *mut CERT_EXIT_EVENT_MASK) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Initialize(this, ::core::mem::transmute(&strconfig)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(peventmask, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Notify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exitevent: i32, context: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Notify(this, ::core::mem::transmute_copy(&exitevent), ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrdescription: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDescription(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrdescription, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertExit_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Notify: Notify::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertExit2_Impl: ::windows_core::BaseImpl + ICertExit_Impl {
    fn GetManageModule(this: &Self::This) -> ::windows_core::Result<ICertManageModule>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertExit2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertExit);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertExit2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertExit2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetManageModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertExit2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmanagemodule: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetManageModule(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmanagemodule, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertExit2_Vtbl { base__: <ICertExit as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetManageModule: GetManageModule::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertGetConfig_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn GetConfig(this: &Self::This, flags: CERT_GET_CONFIG_FLAGS) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertGetConfig {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertGetConfig_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertGetConfig {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertGetConfig_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: CERT_GET_CONFIG_FLAGS, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetConfig(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertGetConfig_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetConfig: GetConfig::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertManageModule_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn GetProperty(this: &Self::This, strconfig: &::windows_core::BSTR, strstoragelocation: &::windows_core::BSTR, strpropertyname: &::windows_core::BSTR, flags: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetProperty(this: &Self::This, strconfig: &::windows_core::BSTR, strstoragelocation: &::windows_core::BSTR, strpropertyname: &::windows_core::BSTR, flags: i32, pvarproperty: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Configure(this: &Self::This, strconfig: &::windows_core::BSTR, strstoragelocation: &::windows_core::BSTR, flags: i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertManageModule {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertManageModule_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertManageModule {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertManageModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strstoragelocation: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: i32, pvarproperty: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetProperty(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strstoragelocation), ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarproperty, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertManageModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strstoragelocation: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: i32, pvarproperty: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProperty(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strstoragelocation), ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pvarproperty)).into())
        }
        unsafe extern "system" fn Configure<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertManageModule_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strstoragelocation: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Configure(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strstoragelocation), ::core::mem::transmute_copy(&flags)).into())
        }
        ICertManageModule_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetProperty: GetProperty::<Identity, Impl, OFFSET>,
            SetProperty: SetProperty::<Identity, Impl, OFFSET>,
            Configure: Configure::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPolicy_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, strconfig: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn VerifyRequest(this: &Self::This, strconfig: &::windows_core::BSTR, context: i32, bnewrequest: i32, flags: i32) -> ::windows_core::Result<i32>;
    fn GetDescription(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ShutDown(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPolicy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPolicy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strconfig)).into())
        }
        unsafe extern "system" fn VerifyRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, context: i32, bnewrequest: i32, flags: i32, pdisposition: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::VerifyRequest(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&bnewrequest), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrdescription: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDescription(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrdescription, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ShutDown<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ShutDown(this).into())
        }
        ICertPolicy_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            VerifyRequest: VerifyRequest::<Identity, Impl, OFFSET>,
            GetDescription: GetDescription::<Identity, Impl, OFFSET>,
            ShutDown: ShutDown::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPolicy2_Impl: ::windows_core::BaseImpl + ICertPolicy_Impl {
    fn GetManageModule(this: &Self::This) -> ::windows_core::Result<ICertManageModule>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPolicy2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertPolicy);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPolicy2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetManageModule<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPolicy2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppmanagemodule: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetManageModule(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppmanagemodule, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPolicy2_Vtbl { base__: <ICertPolicy as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, GetManageModule: GetManageModule::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertProperties_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICertProperty>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICertProperty>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn InitializeFromCertificate(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertProperties {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertProperties {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn InitializeFromCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperties_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromCertificate(this, ::core::mem::transmute_copy(&machinecontext), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        ICertProperties_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            InitializeFromCertificate: InitializeFromCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertProperty_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn InitializeFromCertificate(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn PropertyId(this: &Self::This) -> ::windows_core::Result<CERTENROLL_PROPERTYID>;
    fn SetPropertyId(this: &Self::This, value: CERTENROLL_PROPERTYID) -> ::windows_core::Result<()>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn RemoveFromCertificate(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetValueOnCertificate(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertProperty {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertProperty {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromCertificate(this, ::core::mem::transmute_copy(&machinecontext), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn PropertyId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut CERTENROLL_PROPERTYID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PropertyId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPropertyId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: CERTENROLL_PROPERTYID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPropertyId(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RemoveFromCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFromCertificate(this, ::core::mem::transmute_copy(&machinecontext), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        unsafe extern "system" fn SetValueOnCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValueOnCertificate(this, ::core::mem::transmute_copy(&machinecontext), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        ICertProperty_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromCertificate: InitializeFromCertificate::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            PropertyId: PropertyId::<Identity, Impl, OFFSET>,
            SetPropertyId: SetPropertyId::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
            RemoveFromCertificate: RemoveFromCertificate::<Identity, Impl, OFFSET>,
            SetValueOnCertificate: SetValueOnCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyArchived_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, archivedvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Archived(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyArchived {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyArchived_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyArchived {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyArchived_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, archivedvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&archivedvalue)).into())
        }
        unsafe extern "system" fn Archived<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyArchived_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Archived(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyArchived_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Archived: Archived::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyArchivedKeyHash_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, encoding: EncodingType, strarchivedkeyhashvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_ArchivedKeyHash(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyArchivedKeyHash {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyArchivedKeyHash_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyArchivedKeyHash {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyArchivedKeyHash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strarchivedkeyhashvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strarchivedkeyhashvalue)).into())
        }
        unsafe extern "system" fn get_ArchivedKeyHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyArchivedKeyHash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ArchivedKeyHash(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyArchivedKeyHash_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            get_ArchivedKeyHash: get_ArchivedKeyHash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyAutoEnroll_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn TemplateName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyAutoEnroll {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyAutoEnroll_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyAutoEnroll {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyAutoEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn TemplateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyAutoEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TemplateName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyAutoEnroll_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            TemplateName: TemplateName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyBackedUp_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn InitializeFromCurrentTime(this: &Self::This, backedupvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Initialize(this: &Self::This, backedupvalue: super::super::super::Foundation::VARIANT_BOOL, date: f64) -> ::windows_core::Result<()>;
    fn BackedUpValue(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn BackedUpTime(this: &Self::This) -> ::windows_core::Result<f64>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyBackedUp {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyBackedUp_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyBackedUp {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromCurrentTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyBackedUp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, backedupvalue: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromCurrentTime(this, ::core::mem::transmute_copy(&backedupvalue)).into())
        }
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyBackedUp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, backedupvalue: super::super::super::Foundation::VARIANT_BOOL, date: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&backedupvalue), ::core::mem::transmute_copy(&date)).into())
        }
        unsafe extern "system" fn BackedUpValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyBackedUp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BackedUpValue(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BackedUpTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyBackedUp_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdate: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BackedUpTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyBackedUp_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromCurrentTime: InitializeFromCurrentTime::<Identity, Impl, OFFSET>,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            BackedUpValue: BackedUpValue::<Identity, Impl, OFFSET>,
            BackedUpTime: BackedUpTime::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyDescription_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, strdescription: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Description(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyDescription {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyDescription_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyDescription {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyDescription_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strdescription: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strdescription)).into())
        }
        unsafe extern "system" fn Description<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyDescription_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Description(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyDescription_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Description: Description::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyEnrollment_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, requestid: i32, strcadnsname: &::windows_core::BSTR, strcaname: &::windows_core::BSTR, strfriendlyname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RequestId(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CADnsName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CAName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn FriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyEnrollment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyEnrollment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, requestid: i32, strcadnsname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strcaname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strfriendlyname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&requestid), ::core::mem::transmute(&strcadnsname), ::core::mem::transmute(&strcaname), ::core::mem::transmute(&strfriendlyname)).into())
        }
        unsafe extern "system" fn RequestId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CADnsName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CADnsName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CAName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyEnrollment_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            RequestId: RequestId::<Identity, Impl, OFFSET>,
            CADnsName: CADnsName::<Identity, Impl, OFFSET>,
            CAName: CAName::<Identity, Impl, OFFSET>,
            FriendlyName: FriendlyName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyEnrollmentPolicyServer_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, propertyflags: EnrollmentPolicyServerPropertyFlags, authflags: X509EnrollmentAuthFlags, enrollmentserverauthflags: X509EnrollmentAuthFlags, urlflags: PolicyServerUrlFlags, strrequestid: &::windows_core::BSTR, strurl: &::windows_core::BSTR, strid: &::windows_core::BSTR, strenrollmentserverurl: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetPolicyServerUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetPolicyServerId(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetEnrollmentServerUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetRequestIdString(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetPropertyFlags(this: &Self::This) -> ::windows_core::Result<EnrollmentPolicyServerPropertyFlags>;
    fn GetUrlFlags(this: &Self::This) -> ::windows_core::Result<PolicyServerUrlFlags>;
    fn GetAuthentication(this: &Self::This) -> ::windows_core::Result<X509EnrollmentAuthFlags>;
    fn GetEnrollmentServerAuthentication(this: &Self::This) -> ::windows_core::Result<X509EnrollmentAuthFlags>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyEnrollmentPolicyServer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyEnrollmentPolicyServer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propertyflags: EnrollmentPolicyServerPropertyFlags, authflags: X509EnrollmentAuthFlags, enrollmentserverauthflags: X509EnrollmentAuthFlags, urlflags: PolicyServerUrlFlags, strrequestid: ::std::mem::MaybeUninit<::windows_core::BSTR>, strurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, strid: ::std::mem::MaybeUninit<::windows_core::BSTR>, strenrollmentserverurl: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&propertyflags), ::core::mem::transmute_copy(&authflags), ::core::mem::transmute_copy(&enrollmentserverauthflags), ::core::mem::transmute_copy(&urlflags), ::core::mem::transmute(&strrequestid), ::core::mem::transmute(&strurl), ::core::mem::transmute(&strid), ::core::mem::transmute(&strenrollmentserverurl)).into())
        }
        unsafe extern "system" fn GetPolicyServerUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicyServerUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolicyServerId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicyServerId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEnrollmentServerUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEnrollmentServerUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRequestIdString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestIdString(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPropertyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut EnrollmentPolicyServerPropertyFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPropertyFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUrlFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut PolicyServerUrlFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUrlFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAuthentication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509EnrollmentAuthFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAuthentication(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEnrollmentServerAuthentication<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyEnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509EnrollmentAuthFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEnrollmentServerAuthentication(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyEnrollmentPolicyServer_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            GetPolicyServerUrl: GetPolicyServerUrl::<Identity, Impl, OFFSET>,
            GetPolicyServerId: GetPolicyServerId::<Identity, Impl, OFFSET>,
            GetEnrollmentServerUrl: GetEnrollmentServerUrl::<Identity, Impl, OFFSET>,
            GetRequestIdString: GetRequestIdString::<Identity, Impl, OFFSET>,
            GetPropertyFlags: GetPropertyFlags::<Identity, Impl, OFFSET>,
            GetUrlFlags: GetUrlFlags::<Identity, Impl, OFFSET>,
            GetAuthentication: GetAuthentication::<Identity, Impl, OFFSET>,
            GetEnrollmentServerAuthentication: GetEnrollmentServerAuthentication::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyFriendlyName_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, strfriendlyname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn FriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyFriendlyName {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyFriendlyName_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyFriendlyName {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyFriendlyName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strfriendlyname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strfriendlyname)).into())
        }
        unsafe extern "system" fn FriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyFriendlyName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyFriendlyName_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            FriendlyName: FriendlyName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyKeyProvInfo_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, pvalue: ::core::option::Option<&IX509PrivateKey>) -> ::windows_core::Result<()>;
    fn PrivateKey(this: &Self::This) -> ::windows_core::Result<IX509PrivateKey>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyKeyProvInfo {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyKeyProvInfo_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyKeyProvInfo {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyKeyProvInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn PrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyKeyProvInfo_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PrivateKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyKeyProvInfo_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            PrivateKey: PrivateKey::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyRenewal_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, encoding: EncodingType, strrenewalvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromCertificateHash(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_Renewal(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyRenewal {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRenewal_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyRenewal {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRenewal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strrenewalvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strrenewalvalue)).into())
        }
        unsafe extern "system" fn InitializeFromCertificateHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRenewal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromCertificateHash(this, ::core::mem::transmute_copy(&machinecontext), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        unsafe extern "system" fn get_Renewal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRenewal_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Renewal(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyRenewal_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeFromCertificateHash: InitializeFromCertificateHash::<Identity, Impl, OFFSET>,
            get_Renewal: get_Renewal::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertyRequestOriginator_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, strrequestoriginator: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromLocalRequestOriginator(this: &Self::This) -> ::windows_core::Result<()>;
    fn RequestOriginator(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertyRequestOriginator {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRequestOriginator_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertyRequestOriginator {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRequestOriginator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strrequestoriginator: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strrequestoriginator)).into())
        }
        unsafe extern "system" fn InitializeFromLocalRequestOriginator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRequestOriginator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromLocalRequestOriginator(this).into())
        }
        unsafe extern "system" fn RequestOriginator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertyRequestOriginator_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestOriginator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertyRequestOriginator_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeFromLocalRequestOriginator: InitializeFromLocalRequestOriginator::<Identity, Impl, OFFSET>,
            RequestOriginator: RequestOriginator::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertPropertySHA1Hash_Impl: ::windows_core::BaseImpl + ICertProperty_Impl {
    fn Initialize(this: &Self::This, encoding: EncodingType, strrenewalvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_SHA1Hash(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertPropertySHA1Hash {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertProperty);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertySHA1Hash_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertPropertySHA1Hash {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertySHA1Hash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strrenewalvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strrenewalvalue)).into())
        }
        unsafe extern "system" fn get_SHA1Hash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertPropertySHA1Hash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SHA1Hash(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertPropertySHA1Hash_Vtbl {
            base__: <ICertProperty as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            get_SHA1Hash: get_SHA1Hash::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertRequest_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Submit(this: &Self::This, flags: i32, strrequest: &::windows_core::BSTR, strattributes: &::windows_core::BSTR, strconfig: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn RetrievePending(this: &Self::This, requestid: i32, strconfig: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn GetLastStatus(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetRequestId(this: &Self::This) -> ::windows_core::Result<i32>;
    fn GetDispositionMessage(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCACertificate(this: &Self::This, fexchangecertificate: i32, strconfig: &::windows_core::BSTR, flags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCertificate(this: &Self::This, flags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Submit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, strrequest: ::std::mem::MaybeUninit<::windows_core::BSTR>, strattributes: ::std::mem::MaybeUninit<::windows_core::BSTR>, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdisposition: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Submit(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strrequest), ::core::mem::transmute(&strattributes), ::core::mem::transmute(&strconfig)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RetrievePending<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, requestid: i32, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdisposition: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RetrievePending(this, ::core::mem::transmute_copy(&requestid), ::core::mem::transmute(&strconfig)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstatus: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstatus, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRequestId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prequestid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(prequestid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDispositionMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrdispositionmessage: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDispositionMessage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrdispositionmessage, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCACertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fexchangecertificate: i32, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, flags: i32, pstrcertificate: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCACertificate(this, ::core::mem::transmute_copy(&fexchangecertificate), ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrcertificate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pstrcertificate: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificate(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrcertificate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertRequest_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Submit: Submit::<Identity, Impl, OFFSET>,
            RetrievePending: RetrievePending::<Identity, Impl, OFFSET>,
            GetLastStatus: GetLastStatus::<Identity, Impl, OFFSET>,
            GetRequestId: GetRequestId::<Identity, Impl, OFFSET>,
            GetDispositionMessage: GetDispositionMessage::<Identity, Impl, OFFSET>,
            GetCACertificate: GetCACertificate::<Identity, Impl, OFFSET>,
            GetCertificate: GetCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertRequest2_Impl: ::windows_core::BaseImpl + ICertRequest_Impl {
    fn GetIssuedCertificate(this: &Self::This, strconfig: &::windows_core::BSTR, requestid: i32, strserialnumber: &::windows_core::BSTR) -> ::windows_core::Result<CR_DISP>;
    fn GetErrorMessageText(this: &Self::This, hrmessage: i32, flags: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCAProperty(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32, propindex: i32, proptype: i32, flags: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetCAPropertyFlags(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32) -> ::windows_core::Result<i32>;
    fn GetCAPropertyDisplayName(this: &Self::This, strconfig: &::windows_core::BSTR, propid: i32) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetFullResponseProperty(this: &Self::This, propid: FULL_RESPONSE_PROPERTY_ID, propindex: i32, proptype: CERT_PROPERTY_TYPE, flags: CERT_REQUEST_OUT_TYPE) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertRequest2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertRequest2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetIssuedCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, requestid: i32, strserialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdisposition: *mut CR_DISP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIssuedCertificate(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&requestid), ::core::mem::transmute(&strserialnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetErrorMessageText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hrmessage: i32, flags: i32, pstrerrormessagetext: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetErrorMessageText(this, ::core::mem::transmute_copy(&hrmessage), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrerrormessagetext, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, propindex: i32, proptype: i32, flags: i32, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAProperty(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid), ::core::mem::transmute_copy(&propindex), ::core::mem::transmute_copy(&proptype), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAPropertyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, ppropflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAPropertyFlags(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppropflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAPropertyDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, propid: i32, pstrdisplayname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAPropertyDisplayName(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute_copy(&propid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrdisplayname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFullResponseProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propid: FULL_RESPONSE_PROPERTY_ID, propindex: i32, proptype: CERT_PROPERTY_TYPE, flags: CERT_REQUEST_OUT_TYPE, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFullResponseProperty(this, ::core::mem::transmute_copy(&propid), ::core::mem::transmute_copy(&propindex), ::core::mem::transmute_copy(&proptype), ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertRequest2_Vtbl {
            base__: <ICertRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetIssuedCertificate: GetIssuedCertificate::<Identity, Impl, OFFSET>,
            GetErrorMessageText: GetErrorMessageText::<Identity, Impl, OFFSET>,
            GetCAProperty: GetCAProperty::<Identity, Impl, OFFSET>,
            GetCAPropertyFlags: GetCAPropertyFlags::<Identity, Impl, OFFSET>,
            GetCAPropertyDisplayName: GetCAPropertyDisplayName::<Identity, Impl, OFFSET>,
            GetFullResponseProperty: GetFullResponseProperty::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertRequest3_Impl: ::windows_core::BaseImpl + ICertRequest2_Impl {
    fn SetCredential(this: &Self::This, hwnd: i32, authtype: X509EnrollmentAuthFlags, strcredential: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetRequestIdString(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetIssuedCertificate2(this: &Self::This, strconfig: &::windows_core::BSTR, strrequestid: &::windows_core::BSTR, strserialnumber: &::windows_core::BSTR) -> ::windows_core::Result<CR_DISP>;
    fn GetRefreshPolicy(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertRequest3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertRequest2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertRequest3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetCredential<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwnd: i32, authtype: X509EnrollmentAuthFlags, strcredential: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCredential(this, ::core::mem::transmute_copy(&hwnd), ::core::mem::transmute_copy(&authtype), ::core::mem::transmute(&strcredential), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn GetRequestIdString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrrequestid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestIdString(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrrequestid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIssuedCertificate2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>, strrequestid: ::std::mem::MaybeUninit<::windows_core::BSTR>, strserialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, pdisposition: *mut CR_DISP) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIssuedCertificate2(this, ::core::mem::transmute(&strconfig), ::core::mem::transmute(&strrequestid), ::core::mem::transmute(&strserialnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRefreshPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequest3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRefreshPolicy(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertRequest3_Vtbl {
            base__: <ICertRequest2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetCredential: SetCredential::<Identity, Impl, OFFSET>,
            GetRequestIdString: GetRequestIdString::<Identity, Impl, OFFSET>,
            GetIssuedCertificate2: GetIssuedCertificate2::<Identity, Impl, OFFSET>,
            GetRefreshPolicy: GetRefreshPolicy::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICertRequestD_Impl: ::windows_core::BaseImpl {
    fn Request(this: &Self::This, dwflags: u32, pwszauthority: &::windows_core::PCWSTR, pdwrequestid: *mut u32, pdwdisposition: *mut u32, pwszattributes: &::windows_core::PCWSTR, pctbrequest: *const CERTTRANSBLOB, pctbcertchain: *mut CERTTRANSBLOB, pctbencodedcert: *mut CERTTRANSBLOB, pctbdispositionmessage: *mut CERTTRANSBLOB) -> ::windows_core::Result<()>;
    fn GetCACert(this: &Self::This, fchain: u32, pwszauthority: &::windows_core::PCWSTR) -> ::windows_core::Result<CERTTRANSBLOB>;
    fn Ping(this: &Self::This, pwszauthority: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICertRequestD {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertRequestD {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: u32, pwszauthority: ::windows_core::PCWSTR, pdwrequestid: *mut u32, pdwdisposition: *mut u32, pwszattributes: ::windows_core::PCWSTR, pctbrequest: *const CERTTRANSBLOB, pctbcertchain: *mut CERTTRANSBLOB, pctbencodedcert: *mut CERTTRANSBLOB, pctbdispositionmessage: *mut CERTTRANSBLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Request(this, ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute(&pwszauthority), ::core::mem::transmute_copy(&pdwrequestid), ::core::mem::transmute_copy(&pdwdisposition), ::core::mem::transmute(&pwszattributes), ::core::mem::transmute_copy(&pctbrequest), ::core::mem::transmute_copy(&pctbcertchain), ::core::mem::transmute_copy(&pctbencodedcert), ::core::mem::transmute_copy(&pctbdispositionmessage)).into())
        }
        unsafe extern "system" fn GetCACert<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fchain: u32, pwszauthority: ::windows_core::PCWSTR, pctbout: *mut CERTTRANSBLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCACert(this, ::core::mem::transmute_copy(&fchain), ::core::mem::transmute(&pwszauthority)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pctbout, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Ping<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszauthority: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Ping(this, ::core::mem::transmute(&pwszauthority)).into())
        }
        ICertRequestD_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Request: Request::<Identity, Impl, OFFSET>,
            GetCACert: GetCACert::<Identity, Impl, OFFSET>,
            Ping: Ping::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
pub trait ICertRequestD2_Impl: ::windows_core::BaseImpl + ICertRequestD_Impl {
    fn Request2(this: &Self::This, pwszauthority: &::windows_core::PCWSTR, dwflags: u32, pwszserialnumber: &::windows_core::PCWSTR, pdwrequestid: *mut u32, pdwdisposition: *mut u32, pwszattributes: &::windows_core::PCWSTR, pctbrequest: *const CERTTRANSBLOB, pctbfullresponse: *mut CERTTRANSBLOB, pctbencodedcert: *mut CERTTRANSBLOB, pctbdispositionmessage: *mut CERTTRANSBLOB) -> ::windows_core::Result<()>;
    fn GetCAProperty(this: &Self::This, pwszauthority: &::windows_core::PCWSTR, propid: i32, propindex: i32, proptype: i32) -> ::windows_core::Result<CERTTRANSBLOB>;
    fn GetCAPropertyInfo(this: &Self::This, pwszauthority: &::windows_core::PCWSTR, pcproperty: *mut i32, pctbpropinfo: *mut CERTTRANSBLOB) -> ::windows_core::Result<()>;
    fn Ping2(this: &Self::This, pwszauthority: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
}
impl ::windows_core::Iids for ICertRequestD2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertRequestD);
}
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertRequestD2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Request2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszauthority: ::windows_core::PCWSTR, dwflags: u32, pwszserialnumber: ::windows_core::PCWSTR, pdwrequestid: *mut u32, pdwdisposition: *mut u32, pwszattributes: ::windows_core::PCWSTR, pctbrequest: *const CERTTRANSBLOB, pctbfullresponse: *mut CERTTRANSBLOB, pctbencodedcert: *mut CERTTRANSBLOB, pctbdispositionmessage: *mut CERTTRANSBLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| {
                Impl::Request2(this, ::core::mem::transmute(&pwszauthority), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute(&pwszserialnumber), ::core::mem::transmute_copy(&pdwrequestid), ::core::mem::transmute_copy(&pdwdisposition), ::core::mem::transmute(&pwszattributes), ::core::mem::transmute_copy(&pctbrequest), ::core::mem::transmute_copy(&pctbfullresponse), ::core::mem::transmute_copy(&pctbencodedcert), ::core::mem::transmute_copy(&pctbdispositionmessage)).into()
            })
        }
        unsafe extern "system" fn GetCAProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszauthority: ::windows_core::PCWSTR, propid: i32, propindex: i32, proptype: i32, pctbpropertyvalue: *mut CERTTRANSBLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAProperty(this, ::core::mem::transmute(&pwszauthority), ::core::mem::transmute_copy(&propid), ::core::mem::transmute_copy(&propindex), ::core::mem::transmute_copy(&proptype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pctbpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAPropertyInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszauthority: ::windows_core::PCWSTR, pcproperty: *mut i32, pctbpropinfo: *mut CERTTRANSBLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetCAPropertyInfo(this, ::core::mem::transmute(&pwszauthority), ::core::mem::transmute_copy(&pcproperty), ::core::mem::transmute_copy(&pctbpropinfo)).into())
        }
        unsafe extern "system" fn Ping2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertRequestD2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszauthority: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Ping2(this, ::core::mem::transmute(&pwszauthority)).into())
        }
        ICertRequestD2_Vtbl {
            base__: <ICertRequestD as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Request2: Request2::<Identity, Impl, OFFSET>,
            GetCAProperty: GetCAProperty::<Identity, Impl, OFFSET>,
            GetCAPropertyInfo: GetCAPropertyInfo::<Identity, Impl, OFFSET>,
            Ping2: Ping2::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertServerExit_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn SetContext(this: &Self::This, context: i32) -> ::windows_core::Result<()>;
    fn GetRequestProperty(this: &Self::This, strpropertyname: &::windows_core::BSTR, propertytype: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetRequestAttribute(this: &Self::This, strattributename: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCertificateProperty(this: &Self::This, strpropertyname: &::windows_core::BSTR, propertytype: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetCertificateExtension(this: &Self::This, strextensionname: &::windows_core::BSTR, r#type: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetCertificateExtensionFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn EnumerateExtensionsSetup(this: &Self::This, flags: i32) -> ::windows_core::Result<()>;
    fn EnumerateExtensions(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn EnumerateExtensionsClose(this: &Self::This) -> ::windows_core::Result<()>;
    fn EnumerateAttributesSetup(this: &Self::This, flags: i32) -> ::windows_core::Result<()>;
    fn EnumerateAttributes(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn EnumerateAttributesClose(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertServerExit {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertServerExit {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContext(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn GetRequestProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, propertytype: i32, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestProperty(this, ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&propertytype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRequestAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strattributename: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrattributevalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestAttribute(this, ::core::mem::transmute(&strattributename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrattributevalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificateProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, propertytype: i32, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateProperty(this, ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&propertytype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificateExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strextensionname: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: i32, pvarvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateExtension(this, ::core::mem::transmute(&strextensionname), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificateExtensionFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateExtensionFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pextflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateExtensionsSetup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateExtensionsSetup(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn EnumerateExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrextensionname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateExtensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrextensionname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateExtensionsClose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateExtensionsClose(this).into())
        }
        unsafe extern "system" fn EnumerateAttributesSetup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateAttributesSetup(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn EnumerateAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrattributename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrattributename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateAttributesClose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerExit_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateAttributesClose(this).into())
        }
        ICertServerExit_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetContext: SetContext::<Identity, Impl, OFFSET>,
            GetRequestProperty: GetRequestProperty::<Identity, Impl, OFFSET>,
            GetRequestAttribute: GetRequestAttribute::<Identity, Impl, OFFSET>,
            GetCertificateProperty: GetCertificateProperty::<Identity, Impl, OFFSET>,
            GetCertificateExtension: GetCertificateExtension::<Identity, Impl, OFFSET>,
            GetCertificateExtensionFlags: GetCertificateExtensionFlags::<Identity, Impl, OFFSET>,
            EnumerateExtensionsSetup: EnumerateExtensionsSetup::<Identity, Impl, OFFSET>,
            EnumerateExtensions: EnumerateExtensions::<Identity, Impl, OFFSET>,
            EnumerateExtensionsClose: EnumerateExtensionsClose::<Identity, Impl, OFFSET>,
            EnumerateAttributesSetup: EnumerateAttributesSetup::<Identity, Impl, OFFSET>,
            EnumerateAttributes: EnumerateAttributes::<Identity, Impl, OFFSET>,
            EnumerateAttributesClose: EnumerateAttributesClose::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertServerPolicy_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn SetContext(this: &Self::This, context: i32) -> ::windows_core::Result<()>;
    fn GetRequestProperty(this: &Self::This, strpropertyname: &::windows_core::BSTR, propertytype: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetRequestAttribute(this: &Self::This, strattributename: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCertificateProperty(this: &Self::This, strpropertyname: &::windows_core::BSTR, propertytype: CERT_PROPERTY_TYPE) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetCertificateProperty(this: &Self::This, strpropertyname: &::windows_core::BSTR, propertytype: i32, pvarpropertyvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn GetCertificateExtension(this: &Self::This, strextensionname: &::windows_core::BSTR, r#type: CERT_PROPERTY_TYPE) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetCertificateExtensionFlags(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCertificateExtension(this: &Self::This, strextensionname: &::windows_core::BSTR, r#type: i32, extflags: i32, pvarvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn EnumerateExtensionsSetup(this: &Self::This, flags: i32) -> ::windows_core::Result<()>;
    fn EnumerateExtensions(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn EnumerateExtensionsClose(this: &Self::This) -> ::windows_core::Result<()>;
    fn EnumerateAttributesSetup(this: &Self::This, flags: i32) -> ::windows_core::Result<()>;
    fn EnumerateAttributes(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn EnumerateAttributesClose(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertServerPolicy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertServerPolicy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContext(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn GetRequestProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, propertytype: i32, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestProperty(this, ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&propertytype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetRequestAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strattributename: ::std::mem::MaybeUninit<::windows_core::BSTR>, pstrattributevalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetRequestAttribute(this, ::core::mem::transmute(&strattributename)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrattributevalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificateProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, propertytype: CERT_PROPERTY_TYPE, pvarpropertyvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateProperty(this, ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&propertytype)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarpropertyvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCertificateProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpropertyname: ::std::mem::MaybeUninit<::windows_core::BSTR>, propertytype: i32, pvarpropertyvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCertificateProperty(this, ::core::mem::transmute(&strpropertyname), ::core::mem::transmute_copy(&propertytype), ::core::mem::transmute_copy(&pvarpropertyvalue)).into())
        }
        unsafe extern "system" fn GetCertificateExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strextensionname: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: CERT_PROPERTY_TYPE, pvarvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateExtension(this, ::core::mem::transmute(&strextensionname), ::core::mem::transmute_copy(&r#type)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificateExtensionFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateExtensionFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pextflags, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCertificateExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strextensionname: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: i32, extflags: i32, pvarvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCertificateExtension(this, ::core::mem::transmute(&strextensionname), ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&extflags), ::core::mem::transmute_copy(&pvarvalue)).into())
        }
        unsafe extern "system" fn EnumerateExtensionsSetup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateExtensionsSetup(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn EnumerateExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrextensionname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateExtensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrextensionname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateExtensionsClose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateExtensionsClose(this).into())
        }
        unsafe extern "system" fn EnumerateAttributesSetup<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateAttributesSetup(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn EnumerateAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrattributename: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumerateAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrattributename, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumerateAttributesClose<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertServerPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumerateAttributesClose(this).into())
        }
        ICertServerPolicy_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetContext: SetContext::<Identity, Impl, OFFSET>,
            GetRequestProperty: GetRequestProperty::<Identity, Impl, OFFSET>,
            GetRequestAttribute: GetRequestAttribute::<Identity, Impl, OFFSET>,
            GetCertificateProperty: GetCertificateProperty::<Identity, Impl, OFFSET>,
            SetCertificateProperty: SetCertificateProperty::<Identity, Impl, OFFSET>,
            GetCertificateExtension: GetCertificateExtension::<Identity, Impl, OFFSET>,
            GetCertificateExtensionFlags: GetCertificateExtensionFlags::<Identity, Impl, OFFSET>,
            SetCertificateExtension: SetCertificateExtension::<Identity, Impl, OFFSET>,
            EnumerateExtensionsSetup: EnumerateExtensionsSetup::<Identity, Impl, OFFSET>,
            EnumerateExtensions: EnumerateExtensions::<Identity, Impl, OFFSET>,
            EnumerateExtensionsClose: EnumerateExtensionsClose::<Identity, Impl, OFFSET>,
            EnumerateAttributesSetup: EnumerateAttributesSetup::<Identity, Impl, OFFSET>,
            EnumerateAttributes: EnumerateAttributes::<Identity, Impl, OFFSET>,
            EnumerateAttributesClose: EnumerateAttributesClose::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertView_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn OpenConnection(this: &Self::This, strconfig: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn EnumCertViewColumn(this: &Self::This, fresultcolumn: CVRC_COLUMN) -> ::windows_core::Result<IEnumCERTVIEWCOLUMN>;
    fn GetColumnCount(this: &Self::This, fresultcolumn: CVRC_COLUMN, pccolumn: *mut i32) -> ::windows_core::Result<()>;
    fn GetColumnIndex(this: &Self::This, fresultcolumn: CVRC_COLUMN, strcolumnname: &::windows_core::BSTR, pcolumnindex: *mut i32) -> ::windows_core::Result<()>;
    fn SetResultColumnCount(this: &Self::This, cresultcolumn: i32) -> ::windows_core::Result<()>;
    fn SetResultColumn(this: &Self::This, columnindex: i32) -> ::windows_core::Result<()>;
    fn SetRestriction(this: &Self::This, columnindex: CERT_VIEW_COLUMN_INDEX, seekoperator: CERT_VIEW_SEEK_OPERATOR_FLAGS, sortorder: i32, pvarvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn OpenView(this: &Self::This) -> ::windows_core::Result<IEnumCERTVIEWROW>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertView {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertView {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OpenConnection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strconfig: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::OpenConnection(this, ::core::mem::transmute(&strconfig)).into())
        }
        unsafe extern "system" fn EnumCertViewColumn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fresultcolumn: CVRC_COLUMN, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumCertViewColumn(this, ::core::mem::transmute_copy(&fresultcolumn)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetColumnCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fresultcolumn: CVRC_COLUMN, pccolumn: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetColumnCount(this, ::core::mem::transmute_copy(&fresultcolumn), ::core::mem::transmute_copy(&pccolumn)).into())
        }
        unsafe extern "system" fn GetColumnIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fresultcolumn: CVRC_COLUMN, strcolumnname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pcolumnindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetColumnIndex(this, ::core::mem::transmute_copy(&fresultcolumn), ::core::mem::transmute(&strcolumnname), ::core::mem::transmute_copy(&pcolumnindex)).into())
        }
        unsafe extern "system" fn SetResultColumnCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, cresultcolumn: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetResultColumnCount(this, ::core::mem::transmute_copy(&cresultcolumn)).into())
        }
        unsafe extern "system" fn SetResultColumn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columnindex: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetResultColumn(this, ::core::mem::transmute_copy(&columnindex)).into())
        }
        unsafe extern "system" fn SetRestriction<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, columnindex: CERT_VIEW_COLUMN_INDEX, seekoperator: CERT_VIEW_SEEK_OPERATOR_FLAGS, sortorder: i32, pvarvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRestriction(this, ::core::mem::transmute_copy(&columnindex), ::core::mem::transmute_copy(&seekoperator), ::core::mem::transmute_copy(&sortorder), ::core::mem::transmute_copy(&pvarvalue)).into())
        }
        unsafe extern "system" fn OpenView<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OpenView(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertView_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OpenConnection: OpenConnection::<Identity, Impl, OFFSET>,
            EnumCertViewColumn: EnumCertViewColumn::<Identity, Impl, OFFSET>,
            GetColumnCount: GetColumnCount::<Identity, Impl, OFFSET>,
            GetColumnIndex: GetColumnIndex::<Identity, Impl, OFFSET>,
            SetResultColumnCount: SetResultColumnCount::<Identity, Impl, OFFSET>,
            SetResultColumn: SetResultColumn::<Identity, Impl, OFFSET>,
            SetRestriction: SetRestriction::<Identity, Impl, OFFSET>,
            OpenView: OpenView::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertView2_Impl: ::windows_core::BaseImpl + ICertView_Impl {
    fn SetTable(this: &Self::This, table: CVRC_TABLE) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertView2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertView);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertView2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetTable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertView2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, table: CVRC_TABLE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTable(this, ::core::mem::transmute_copy(&table)).into())
        }
        ICertView2_Vtbl { base__: <ICertView as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE, SetTable: SetTable::<Identity, Impl, OFFSET> }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertificateAttestationChallenge_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, encoding: EncodingType, strpendingfullcmcresponsewithchallenge: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn DecryptChallenge(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn RequestID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertificateAttestationChallenge {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertificateAttestationChallenge {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strpendingfullcmcresponsewithchallenge: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strpendingfullcmcresponsewithchallenge)).into())
        }
        unsafe extern "system" fn DecryptChallenge<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pstrenvelopedpkcs7reencryptedtoca: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DecryptChallenge(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrenvelopedpkcs7reencryptedtoca, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RequestID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrrequestid: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrrequestid, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertificateAttestationChallenge_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            DecryptChallenge: DecryptChallenge::<Identity, Impl, OFFSET>,
            RequestID: RequestID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertificateAttestationChallenge2_Impl: ::windows_core::BaseImpl + ICertificateAttestationChallenge_Impl {
    fn SetKeyContainerName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn put_KeyBlob(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertificateAttestationChallenge2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(ICertificateAttestationChallenge);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertificateAttestationChallenge2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetKeyContainerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyContainerName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn put_KeyBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificateAttestationChallenge2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_KeyBlob(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        ICertificateAttestationChallenge2_Vtbl {
            base__: <ICertificateAttestationChallenge as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetKeyContainerName: SetKeyContainerName::<Identity, Impl, OFFSET>,
            put_KeyBlob: put_KeyBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertificatePolicies_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICertificatePolicy>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICertificatePolicy>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertificatePolicies {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertificatePolicies {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        ICertificatePolicies_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertificatePolicy_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn PolicyQualifiers(this: &Self::This) -> ::windows_core::Result<IPolicyQualifiers>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertificatePolicy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertificatePolicy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PolicyQualifiers<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificatePolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PolicyQualifiers(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertificatePolicy_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            PolicyQualifiers: PolicyQualifiers::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertificationAuthorities_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICertificationAuthority>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICertificationAuthority>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn ComputeSiteCosts(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_ItemByName(this: &Self::This, strname: &::windows_core::BSTR) -> ::windows_core::Result<ICertificationAuthority>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertificationAuthorities {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertificationAuthorities {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn ComputeSiteCosts<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ComputeSiteCosts(this).into())
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthorities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&strname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertificationAuthorities_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            ComputeSiteCosts: ComputeSiteCosts::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICertificationAuthority_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_Property(this: &Self::This, property: EnrollmentCAProperty) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICertificationAuthority {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthority_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICertificationAuthority {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_Property<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICertificationAuthority_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, property: EnrollmentCAProperty, pvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Property(this, ::core::mem::transmute_copy(&property)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICertificationAuthority_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_Property: get_Property::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICryptAttribute_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn InitializeFromObjectId(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn InitializeFromValues(this: &Self::This, pattributes: ::core::option::Option<&IX509Attributes>) -> ::windows_core::Result<()>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn Values(this: &Self::This) -> ::windows_core::Result<IX509Attributes>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICryptAttribute {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttribute_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICryptAttribute {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromObjectId(this, ::windows_core::from_raw_borrowed(&pobjectid)).into())
        }
        unsafe extern "system" fn InitializeFromValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattributes: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromValues(this, ::windows_core::from_raw_borrowed(&pattributes)).into())
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Values<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Values(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICryptAttribute_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromObjectId: InitializeFromObjectId::<Identity, Impl, OFFSET>,
            InitializeFromValues: InitializeFromValues::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            Values: Values::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICryptAttributes_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICryptAttribute>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICryptAttribute>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_IndexByObjectId(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<i32>;
    fn AddRange(this: &Self::This, pvalue: ::core::option::Option<&ICryptAttributes>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICryptAttributes {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICryptAttributes {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn get_IndexByObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_IndexByObjectId(this, ::windows_core::from_raw_borrowed(&pobjectid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICryptAttributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRange(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        ICryptAttributes_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            get_IndexByObjectId: get_IndexByObjectId::<Identity, Impl, OFFSET>,
            AddRange: AddRange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICspAlgorithm_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn GetAlgorithmOid(this: &Self::This, length: i32, algflags: AlgorithmFlags) -> ::windows_core::Result<IObjectId>;
    fn DefaultLength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn IncrementLength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn LongName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Valid(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn MaxLength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn MinLength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Type(this: &Self::This) -> ::windows_core::Result<AlgorithmType>;
    fn Operations(this: &Self::This) -> ::windows_core::Result<AlgorithmOperationFlags>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICspAlgorithm {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICspAlgorithm {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn GetAlgorithmOid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, length: i32, algflags: AlgorithmFlags, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAlgorithmOid(this, ::core::mem::transmute_copy(&length), ::core::mem::transmute_copy(&algflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IncrementLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IncrementLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LongName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LongName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Valid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Valid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MaxLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MinLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut AlgorithmType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Operations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithm_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut AlgorithmOperationFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Operations(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICspAlgorithm_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            GetAlgorithmOid: GetAlgorithmOid::<Identity, Impl, OFFSET>,
            DefaultLength: DefaultLength::<Identity, Impl, OFFSET>,
            IncrementLength: IncrementLength::<Identity, Impl, OFFSET>,
            LongName: LongName::<Identity, Impl, OFFSET>,
            Valid: Valid::<Identity, Impl, OFFSET>,
            MaxLength: MaxLength::<Identity, Impl, OFFSET>,
            MinLength: MinLength::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            Operations: Operations::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICspAlgorithms_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICspAlgorithm>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICspAlgorithm>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_ItemByName(this: &Self::This, strname: &::windows_core::BSTR) -> ::windows_core::Result<ICspAlgorithm>;
    fn get_IndexByObjectId(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICspAlgorithms {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICspAlgorithms {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&strname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_IndexByObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspAlgorithms_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_IndexByObjectId(this, ::windows_core::from_raw_borrowed(&pobjectid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICspAlgorithms_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
            get_IndexByObjectId: get_IndexByObjectId::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICspInformation_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn InitializeFromName(this: &Self::This, strname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromType(this: &Self::This, r#type: X509ProviderType, palgorithm: ::core::option::Option<&IObjectId>, machinecontext: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn CspAlgorithms(this: &Self::This) -> ::windows_core::Result<ICspAlgorithms>;
    fn HasHardwareRandomNumberGenerator(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn IsHardwareDevice(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn IsRemovable(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn IsSoftwareDevice(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn Valid(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn MaxKeyContainerNameLength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Type(this: &Self::This) -> ::windows_core::Result<X509ProviderType>;
    fn Version(this: &Self::This) -> ::windows_core::Result<i32>;
    fn KeySpec(this: &Self::This) -> ::windows_core::Result<X509KeySpec>;
    fn IsSmartCard(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn GetDefaultSecurityDescriptor(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<::windows_core::BSTR>;
    fn LegacyCsp(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn GetCspStatusFromOperations(this: &Self::This, palgorithm: ::core::option::Option<&IObjectId>, operations: AlgorithmOperationFlags) -> ::windows_core::Result<ICspStatus>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICspInformation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICspInformation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromName(this, ::core::mem::transmute(&strname)).into())
        }
        unsafe extern "system" fn InitializeFromType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: X509ProviderType, palgorithm: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromType(this, ::core::mem::transmute_copy(&r#type), ::windows_core::from_raw_borrowed(&palgorithm), ::core::mem::transmute_copy(&machinecontext)).into())
        }
        unsafe extern "system" fn CspAlgorithms<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspAlgorithms(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HasHardwareRandomNumberGenerator<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HasHardwareRandomNumberGenerator(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsHardwareDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsHardwareDevice(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsRemovable<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsRemovable(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsSoftwareDevice<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSoftwareDevice(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Valid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Valid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MaxKeyContainerNameLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MaxKeyContainerNameLength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509ProviderType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Version<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Version(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509KeySpec) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySpec(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn IsSmartCard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSmartCard(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetDefaultSecurityDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetDefaultSecurityDescriptor(this, ::core::mem::transmute_copy(&machinecontext)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LegacyCsp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LegacyCsp(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCspStatusFromOperations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, palgorithm: *mut ::core::ffi::c_void, operations: AlgorithmOperationFlags, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCspStatusFromOperations(this, ::windows_core::from_raw_borrowed(&palgorithm), ::core::mem::transmute_copy(&operations)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICspInformation_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromName: InitializeFromName::<Identity, Impl, OFFSET>,
            InitializeFromType: InitializeFromType::<Identity, Impl, OFFSET>,
            CspAlgorithms: CspAlgorithms::<Identity, Impl, OFFSET>,
            HasHardwareRandomNumberGenerator: HasHardwareRandomNumberGenerator::<Identity, Impl, OFFSET>,
            IsHardwareDevice: IsHardwareDevice::<Identity, Impl, OFFSET>,
            IsRemovable: IsRemovable::<Identity, Impl, OFFSET>,
            IsSoftwareDevice: IsSoftwareDevice::<Identity, Impl, OFFSET>,
            Valid: Valid::<Identity, Impl, OFFSET>,
            MaxKeyContainerNameLength: MaxKeyContainerNameLength::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            Version: Version::<Identity, Impl, OFFSET>,
            KeySpec: KeySpec::<Identity, Impl, OFFSET>,
            IsSmartCard: IsSmartCard::<Identity, Impl, OFFSET>,
            GetDefaultSecurityDescriptor: GetDefaultSecurityDescriptor::<Identity, Impl, OFFSET>,
            LegacyCsp: LegacyCsp::<Identity, Impl, OFFSET>,
            GetCspStatusFromOperations: GetCspStatusFromOperations::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICspInformations_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICspInformation>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICspInformation>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddAvailableCsps(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_ItemByName(this: &Self::This, strname: &::windows_core::BSTR) -> ::windows_core::Result<ICspInformation>;
    fn GetCspStatusFromProviderName(this: &Self::This, strprovidername: &::windows_core::BSTR, legacykeyspec: X509KeySpec) -> ::windows_core::Result<ICspStatus>;
    fn GetCspStatusesFromOperations(this: &Self::This, operations: AlgorithmOperationFlags, pcspinformation: ::core::option::Option<&ICspInformation>) -> ::windows_core::Result<ICspStatuses>;
    fn GetEncryptionCspAlgorithms(this: &Self::This, pcspinformation: ::core::option::Option<&ICspInformation>) -> ::windows_core::Result<ICspAlgorithms>;
    fn GetHashAlgorithms(this: &Self::This, pcspinformation: ::core::option::Option<&ICspInformation>) -> ::windows_core::Result<IObjectIds>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICspInformations {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICspInformations {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn AddAvailableCsps<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAvailableCsps(this).into())
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppcspinformation: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&strname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcspinformation, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCspStatusFromProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strprovidername: ::std::mem::MaybeUninit<::windows_core::BSTR>, legacykeyspec: X509KeySpec, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCspStatusFromProviderName(this, ::core::mem::transmute(&strprovidername), ::core::mem::transmute_copy(&legacykeyspec)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCspStatusesFromOperations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, operations: AlgorithmOperationFlags, pcspinformation: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCspStatusesFromOperations(this, ::core::mem::transmute_copy(&operations), ::windows_core::from_raw_borrowed(&pcspinformation)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetEncryptionCspAlgorithms<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcspinformation: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetEncryptionCspAlgorithms(this, ::windows_core::from_raw_borrowed(&pcspinformation)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHashAlgorithms<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspInformations_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcspinformation: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHashAlgorithms(this, ::windows_core::from_raw_borrowed(&pcspinformation)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICspInformations_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            AddAvailableCsps: AddAvailableCsps::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
            GetCspStatusFromProviderName: GetCspStatusFromProviderName::<Identity, Impl, OFFSET>,
            GetCspStatusesFromOperations: GetCspStatusesFromOperations::<Identity, Impl, OFFSET>,
            GetEncryptionCspAlgorithms: GetEncryptionCspAlgorithms::<Identity, Impl, OFFSET>,
            GetHashAlgorithms: GetHashAlgorithms::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICspStatus_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pcsp: ::core::option::Option<&ICspInformation>, palgorithm: ::core::option::Option<&ICspAlgorithm>) -> ::windows_core::Result<()>;
    fn Ordinal(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetOrdinal(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn CspAlgorithm(this: &Self::This) -> ::windows_core::Result<ICspAlgorithm>;
    fn CspInformation(this: &Self::This) -> ::windows_core::Result<ICspInformation>;
    fn EnrollmentStatus(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentStatus>;
    fn DisplayName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICspStatus {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICspStatus {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcsp: *mut ::core::ffi::c_void, palgorithm: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pcsp), ::windows_core::from_raw_borrowed(&palgorithm)).into())
        }
        unsafe extern "system" fn Ordinal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Ordinal(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOrdinal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOrdinal(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn CspAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CspInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnrollmentStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnrollmentStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DisplayName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICspStatus_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Ordinal: Ordinal::<Identity, Impl, OFFSET>,
            SetOrdinal: SetOrdinal::<Identity, Impl, OFFSET>,
            CspAlgorithm: CspAlgorithm::<Identity, Impl, OFFSET>,
            CspInformation: CspInformation::<Identity, Impl, OFFSET>,
            EnrollmentStatus: EnrollmentStatus::<Identity, Impl, OFFSET>,
            DisplayName: DisplayName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ICspStatuses_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ICspStatus>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ICspStatus>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_ItemByName(this: &Self::This, strcspname: &::windows_core::BSTR, stralgorithmname: &::windows_core::BSTR) -> ::windows_core::Result<ICspStatus>;
    fn get_ItemByOrdinal(this: &Self::This, ordinal: i32) -> ::windows_core::Result<ICspStatus>;
    fn get_ItemByOperations(this: &Self::This, strcspname: &::windows_core::BSTR, stralgorithmname: &::windows_core::BSTR, operations: AlgorithmOperationFlags) -> ::windows_core::Result<ICspStatus>;
    fn get_ItemByProvider(this: &Self::This, pcspstatus: ::core::option::Option<&ICspStatus>) -> ::windows_core::Result<ICspStatus>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ICspStatuses {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ICspStatuses {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strcspname: ::std::mem::MaybeUninit<::windows_core::BSTR>, stralgorithmname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&strcspname), ::core::mem::transmute(&stralgorithmname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ItemByOrdinal<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ordinal: i32, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByOrdinal(this, ::core::mem::transmute_copy(&ordinal)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ItemByOperations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strcspname: ::std::mem::MaybeUninit<::windows_core::BSTR>, stralgorithmname: ::std::mem::MaybeUninit<::windows_core::BSTR>, operations: AlgorithmOperationFlags, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByOperations(this, ::core::mem::transmute(&strcspname), ::core::mem::transmute(&stralgorithmname), ::core::mem::transmute_copy(&operations)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ItemByProvider<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ICspStatuses_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcspstatus: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByProvider(this, ::windows_core::from_raw_borrowed(&pcspstatus)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ICspStatuses_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
            get_ItemByOrdinal: get_ItemByOrdinal::<Identity, Impl, OFFSET>,
            get_ItemByOperations: get_ItemByOperations::<Identity, Impl, OFFSET>,
            get_ItemByProvider: get_ItemByProvider::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IEnroll_Impl: ::windows_core::BaseImpl {
    fn createFilePKCS10WStr(this: &Self::This, dnname: &::windows_core::PCWSTR, usage: &::windows_core::PCWSTR, wszpkcs10filename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn acceptFilePKCS7WStr(this: &Self::This, wszpkcs7filename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn createPKCS10WStr(this: &Self::This, dnname: &::windows_core::PCWSTR, usage: &::windows_core::PCWSTR, ppkcs10blob: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn acceptPKCS7Blob(this: &Self::This, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn getCertContextFromPKCS7(this: &Self::This, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB) -> *mut super::CERT_CONTEXT;
    fn getMyStore(this: &Self::This) -> super::HCERTSTORE;
    fn getCAStore(this: &Self::This) -> super::HCERTSTORE;
    fn getROOTHStore(this: &Self::This) -> super::HCERTSTORE;
    fn enumProvidersWStr(this: &Self::This, dwindex: i32, dwflags: i32, pbstrprovname: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn enumContainersWStr(this: &Self::This, dwindex: i32, pbstr: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn freeRequestInfoBlob(this: &Self::This, pkcs7orpkcs10: &super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn MyStoreNameWStr(this: &Self::This, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetMyStoreNameWStr(this: &Self::This, szwname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn MyStoreTypeWStr(this: &Self::This, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetMyStoreTypeWStr(this: &Self::This, szwtype: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn MyStoreFlags(this: &Self::This, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn SetMyStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn CAStoreNameWStr(this: &Self::This, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetCAStoreNameWStr(this: &Self::This, szwname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CAStoreTypeWStr(this: &Self::This, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetCAStoreTypeWStr(this: &Self::This, szwtype: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn CAStoreFlags(this: &Self::This, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn SetCAStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn RootStoreNameWStr(this: &Self::This, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetRootStoreNameWStr(this: &Self::This, szwname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RootStoreTypeWStr(this: &Self::This, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetRootStoreTypeWStr(this: &Self::This, szwtype: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RootStoreFlags(this: &Self::This, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn SetRootStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn RequestStoreNameWStr(this: &Self::This, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetRequestStoreNameWStr(this: &Self::This, szwname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RequestStoreTypeWStr(this: &Self::This, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetRequestStoreTypeWStr(this: &Self::This, szwtype: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RequestStoreFlags(this: &Self::This, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn SetRequestStoreFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn ContainerNameWStr(this: &Self::This, szwcontainer: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetContainerNameWStr(this: &Self::This, szwcontainer: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ProviderNameWStr(this: &Self::This, szwprovider: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetProviderNameWStr(this: &Self::This, szwprovider: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn ProviderType(this: &Self::This, pdwtype: *mut i32) -> ::windows_core::Result<()>;
    fn SetProviderType(this: &Self::This, dwtype: i32) -> ::windows_core::Result<()>;
    fn KeySpec(this: &Self::This, pdw: *mut i32) -> ::windows_core::Result<()>;
    fn SetKeySpec(this: &Self::This, dw: i32) -> ::windows_core::Result<()>;
    fn ProviderFlags(this: &Self::This, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn SetProviderFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn UseExistingKeySet(this: &Self::This, fuseexistingkeys: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetUseExistingKeySet(this: &Self::This, fuseexistingkeys: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn GenKeyFlags(this: &Self::This, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn SetGenKeyFlags(this: &Self::This, dwflags: i32) -> ::windows_core::Result<()>;
    fn DeleteRequestCert(this: &Self::This, fdelete: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetDeleteRequestCert(this: &Self::This, fdelete: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn WriteCertToUserDS(this: &Self::This, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetWriteCertToUserDS(this: &Self::This, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn EnableT61DNEncoding(this: &Self::This, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetEnableT61DNEncoding(this: &Self::This, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn WriteCertToCSP(this: &Self::This, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetWriteCertToCSP(this: &Self::This, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SPCFileNameWStr(this: &Self::This, szw: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetSPCFileNameWStr(this: &Self::This, szw: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn PVKFileNameWStr(this: &Self::This, szw: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetPVKFileNameWStr(this: &Self::This, szw: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn HashAlgorithmWStr(this: &Self::This, szw: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetHashAlgorithmWStr(this: &Self::This, szw: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn RenewalCertificate(this: &Self::This, ppcertcontext: *mut *mut super::CERT_CONTEXT) -> ::windows_core::Result<()>;
    fn SetRenewalCertificate(this: &Self::This, pcertcontext: *const super::CERT_CONTEXT) -> ::windows_core::Result<()>;
    fn AddCertTypeToRequestWStr(this: &Self::This, szw: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddNameValuePairToSignatureWStr(this: &Self::This, name: &::windows_core::PCWSTR, value: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn AddExtensionsToRequest(this: &Self::This, pcertextensions: *mut super::CERT_EXTENSIONS) -> ::windows_core::Result<()>;
    fn AddAuthenticatedAttributesToPKCS7Request(this: &Self::This, pattributes: *mut super::CRYPT_ATTRIBUTES) -> ::windows_core::Result<()>;
    fn CreatePKCS7RequestFromRequest(this: &Self::This, prequest: *mut super::CRYPT_INTEGER_BLOB, psigningcertcontext: *const super::CERT_CONTEXT, ppkcs7blob: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IEnroll {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnroll {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn createFilePKCS10WStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dnname: ::windows_core::PCWSTR, usage: ::windows_core::PCWSTR, wszpkcs10filename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createFilePKCS10WStr(this, ::core::mem::transmute(&dnname), ::core::mem::transmute(&usage), ::core::mem::transmute(&wszpkcs10filename)).into())
        }
        unsafe extern "system" fn acceptFilePKCS7WStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, wszpkcs7filename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptFilePKCS7WStr(this, ::core::mem::transmute(&wszpkcs7filename)).into())
        }
        unsafe extern "system" fn createPKCS10WStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dnname: ::windows_core::PCWSTR, usage: ::windows_core::PCWSTR, ppkcs10blob: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createPKCS10WStr(this, ::core::mem::transmute(&dnname), ::core::mem::transmute(&usage), ::core::mem::transmute_copy(&ppkcs10blob)).into())
        }
        unsafe extern "system" fn acceptPKCS7Blob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptPKCS7Blob(this, ::core::mem::transmute_copy(&pblobpkcs7)).into())
        }
        unsafe extern "system" fn getCertContextFromPKCS7<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB) -> *mut super::CERT_CONTEXT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getCertContextFromPKCS7(this, ::core::mem::transmute_copy(&pblobpkcs7)))
        }
        unsafe extern "system" fn getMyStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::HCERTSTORE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getMyStore(this))
        }
        unsafe extern "system" fn getCAStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::HCERTSTORE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getCAStore(this))
        }
        unsafe extern "system" fn getROOTHStore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> super::HCERTSTORE {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getROOTHStore(this))
        }
        unsafe extern "system" fn enumProvidersWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: i32, dwflags: i32, pbstrprovname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::enumProvidersWStr(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&dwflags), ::core::mem::transmute_copy(&pbstrprovname)).into())
        }
        unsafe extern "system" fn enumContainersWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: i32, pbstr: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::enumContainersWStr(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&pbstr)).into())
        }
        unsafe extern "system" fn freeRequestInfoBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkcs7orpkcs10: super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::freeRequestInfoBlob(this, ::core::mem::transmute(&pkcs7orpkcs10)).into())
        }
        unsafe extern "system" fn MyStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MyStoreNameWStr(this, ::core::mem::transmute_copy(&szwname)).into())
        }
        unsafe extern "system" fn SetMyStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMyStoreNameWStr(this, ::core::mem::transmute(&szwname)).into())
        }
        unsafe extern "system" fn MyStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MyStoreTypeWStr(this, ::core::mem::transmute_copy(&szwtype)).into())
        }
        unsafe extern "system" fn SetMyStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMyStoreTypeWStr(this, ::core::mem::transmute(&szwtype)).into())
        }
        unsafe extern "system" fn MyStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::MyStoreFlags(this, ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetMyStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMyStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn CAStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CAStoreNameWStr(this, ::core::mem::transmute_copy(&szwname)).into())
        }
        unsafe extern "system" fn SetCAStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAStoreNameWStr(this, ::core::mem::transmute(&szwname)).into())
        }
        unsafe extern "system" fn CAStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CAStoreTypeWStr(this, ::core::mem::transmute_copy(&szwtype)).into())
        }
        unsafe extern "system" fn SetCAStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAStoreTypeWStr(this, ::core::mem::transmute(&szwtype)).into())
        }
        unsafe extern "system" fn CAStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CAStoreFlags(this, ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetCAStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn RootStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RootStoreNameWStr(this, ::core::mem::transmute_copy(&szwname)).into())
        }
        unsafe extern "system" fn SetRootStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRootStoreNameWStr(this, ::core::mem::transmute(&szwname)).into())
        }
        unsafe extern "system" fn RootStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RootStoreTypeWStr(this, ::core::mem::transmute_copy(&szwtype)).into())
        }
        unsafe extern "system" fn SetRootStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRootStoreTypeWStr(this, ::core::mem::transmute(&szwtype)).into())
        }
        unsafe extern "system" fn RootStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RootStoreFlags(this, ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetRootStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRootStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn RequestStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RequestStoreNameWStr(this, ::core::mem::transmute_copy(&szwname)).into())
        }
        unsafe extern "system" fn SetRequestStoreNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestStoreNameWStr(this, ::core::mem::transmute(&szwname)).into())
        }
        unsafe extern "system" fn RequestStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RequestStoreTypeWStr(this, ::core::mem::transmute_copy(&szwtype)).into())
        }
        unsafe extern "system" fn SetRequestStoreTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwtype: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestStoreTypeWStr(this, ::core::mem::transmute(&szwtype)).into())
        }
        unsafe extern "system" fn RequestStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RequestStoreFlags(this, ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetRequestStoreFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequestStoreFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn ContainerNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwcontainer: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ContainerNameWStr(this, ::core::mem::transmute_copy(&szwcontainer)).into())
        }
        unsafe extern "system" fn SetContainerNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwcontainer: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContainerNameWStr(this, ::core::mem::transmute(&szwcontainer)).into())
        }
        unsafe extern "system" fn ProviderNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwprovider: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProviderNameWStr(this, ::core::mem::transmute_copy(&szwprovider)).into())
        }
        unsafe extern "system" fn SetProviderNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szwprovider: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderNameWStr(this, ::core::mem::transmute(&szwprovider)).into())
        }
        unsafe extern "system" fn ProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwtype: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProviderType(this, ::core::mem::transmute_copy(&pdwtype)).into())
        }
        unsafe extern "system" fn SetProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwtype: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderType(this, ::core::mem::transmute_copy(&dwtype)).into())
        }
        unsafe extern "system" fn KeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdw: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::KeySpec(this, ::core::mem::transmute_copy(&pdw)).into())
        }
        unsafe extern "system" fn SetKeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dw: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeySpec(this, ::core::mem::transmute_copy(&dw)).into())
        }
        unsafe extern "system" fn ProviderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ProviderFlags(this, ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetProviderFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn UseExistingKeySet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fuseexistingkeys: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UseExistingKeySet(this, ::core::mem::transmute_copy(&fuseexistingkeys)).into())
        }
        unsafe extern "system" fn SetUseExistingKeySet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fuseexistingkeys: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUseExistingKeySet(this, ::core::mem::transmute_copy(&fuseexistingkeys)).into())
        }
        unsafe extern "system" fn GenKeyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GenKeyFlags(this, ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn SetGenKeyFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwflags: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetGenKeyFlags(this, ::core::mem::transmute_copy(&dwflags)).into())
        }
        unsafe extern "system" fn DeleteRequestCert<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fdelete: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteRequestCert(this, ::core::mem::transmute_copy(&fdelete)).into())
        }
        unsafe extern "system" fn SetDeleteRequestCert<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fdelete: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDeleteRequestCert(this, ::core::mem::transmute_copy(&fdelete)).into())
        }
        unsafe extern "system" fn WriteCertToUserDS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteCertToUserDS(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn SetWriteCertToUserDS<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWriteCertToUserDS(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn EnableT61DNEncoding<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableT61DNEncoding(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn SetEnableT61DNEncoding<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnableT61DNEncoding(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn WriteCertToCSP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::WriteCertToCSP(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn SetWriteCertToCSP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fbool: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetWriteCertToCSP(this, ::core::mem::transmute_copy(&fbool)).into())
        }
        unsafe extern "system" fn SPCFileNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SPCFileNameWStr(this, ::core::mem::transmute_copy(&szw)).into())
        }
        unsafe extern "system" fn SetSPCFileNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSPCFileNameWStr(this, ::core::mem::transmute(&szw)).into())
        }
        unsafe extern "system" fn PVKFileNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::PVKFileNameWStr(this, ::core::mem::transmute_copy(&szw)).into())
        }
        unsafe extern "system" fn SetPVKFileNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPVKFileNameWStr(this, ::core::mem::transmute(&szw)).into())
        }
        unsafe extern "system" fn HashAlgorithmWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HashAlgorithmWStr(this, ::core::mem::transmute_copy(&szw)).into())
        }
        unsafe extern "system" fn SetHashAlgorithmWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgorithmWStr(this, ::core::mem::transmute(&szw)).into())
        }
        unsafe extern "system" fn RenewalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcertcontext: *mut *mut super::CERT_CONTEXT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RenewalCertificate(this, ::core::mem::transmute_copy(&ppcertcontext)).into())
        }
        unsafe extern "system" fn SetRenewalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcertcontext: *const super::CERT_CONTEXT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRenewalCertificate(this, ::core::mem::transmute_copy(&pcertcontext)).into())
        }
        unsafe extern "system" fn AddCertTypeToRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, szw: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddCertTypeToRequestWStr(this, ::core::mem::transmute(&szw)).into())
        }
        unsafe extern "system" fn AddNameValuePairToSignatureWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: ::windows_core::PCWSTR, value: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddNameValuePairToSignatureWStr(this, ::core::mem::transmute(&name), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn AddExtensionsToRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pcertextensions: *mut super::CERT_EXTENSIONS) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddExtensionsToRequest(this, ::core::mem::transmute_copy(&pcertextensions)).into())
        }
        unsafe extern "system" fn AddAuthenticatedAttributesToPKCS7Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pattributes: *mut super::CRYPT_ATTRIBUTES) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAuthenticatedAttributesToPKCS7Request(this, ::core::mem::transmute_copy(&pattributes)).into())
        }
        unsafe extern "system" fn CreatePKCS7RequestFromRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prequest: *mut super::CRYPT_INTEGER_BLOB, psigningcertcontext: *const super::CERT_CONTEXT, ppkcs7blob: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CreatePKCS7RequestFromRequest(this, ::core::mem::transmute_copy(&prequest), ::core::mem::transmute_copy(&psigningcertcontext), ::core::mem::transmute_copy(&ppkcs7blob)).into())
        }
        IEnroll_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            createFilePKCS10WStr: createFilePKCS10WStr::<Identity, Impl, OFFSET>,
            acceptFilePKCS7WStr: acceptFilePKCS7WStr::<Identity, Impl, OFFSET>,
            createPKCS10WStr: createPKCS10WStr::<Identity, Impl, OFFSET>,
            acceptPKCS7Blob: acceptPKCS7Blob::<Identity, Impl, OFFSET>,
            getCertContextFromPKCS7: getCertContextFromPKCS7::<Identity, Impl, OFFSET>,
            getMyStore: getMyStore::<Identity, Impl, OFFSET>,
            getCAStore: getCAStore::<Identity, Impl, OFFSET>,
            getROOTHStore: getROOTHStore::<Identity, Impl, OFFSET>,
            enumProvidersWStr: enumProvidersWStr::<Identity, Impl, OFFSET>,
            enumContainersWStr: enumContainersWStr::<Identity, Impl, OFFSET>,
            freeRequestInfoBlob: freeRequestInfoBlob::<Identity, Impl, OFFSET>,
            MyStoreNameWStr: MyStoreNameWStr::<Identity, Impl, OFFSET>,
            SetMyStoreNameWStr: SetMyStoreNameWStr::<Identity, Impl, OFFSET>,
            MyStoreTypeWStr: MyStoreTypeWStr::<Identity, Impl, OFFSET>,
            SetMyStoreTypeWStr: SetMyStoreTypeWStr::<Identity, Impl, OFFSET>,
            MyStoreFlags: MyStoreFlags::<Identity, Impl, OFFSET>,
            SetMyStoreFlags: SetMyStoreFlags::<Identity, Impl, OFFSET>,
            CAStoreNameWStr: CAStoreNameWStr::<Identity, Impl, OFFSET>,
            SetCAStoreNameWStr: SetCAStoreNameWStr::<Identity, Impl, OFFSET>,
            CAStoreTypeWStr: CAStoreTypeWStr::<Identity, Impl, OFFSET>,
            SetCAStoreTypeWStr: SetCAStoreTypeWStr::<Identity, Impl, OFFSET>,
            CAStoreFlags: CAStoreFlags::<Identity, Impl, OFFSET>,
            SetCAStoreFlags: SetCAStoreFlags::<Identity, Impl, OFFSET>,
            RootStoreNameWStr: RootStoreNameWStr::<Identity, Impl, OFFSET>,
            SetRootStoreNameWStr: SetRootStoreNameWStr::<Identity, Impl, OFFSET>,
            RootStoreTypeWStr: RootStoreTypeWStr::<Identity, Impl, OFFSET>,
            SetRootStoreTypeWStr: SetRootStoreTypeWStr::<Identity, Impl, OFFSET>,
            RootStoreFlags: RootStoreFlags::<Identity, Impl, OFFSET>,
            SetRootStoreFlags: SetRootStoreFlags::<Identity, Impl, OFFSET>,
            RequestStoreNameWStr: RequestStoreNameWStr::<Identity, Impl, OFFSET>,
            SetRequestStoreNameWStr: SetRequestStoreNameWStr::<Identity, Impl, OFFSET>,
            RequestStoreTypeWStr: RequestStoreTypeWStr::<Identity, Impl, OFFSET>,
            SetRequestStoreTypeWStr: SetRequestStoreTypeWStr::<Identity, Impl, OFFSET>,
            RequestStoreFlags: RequestStoreFlags::<Identity, Impl, OFFSET>,
            SetRequestStoreFlags: SetRequestStoreFlags::<Identity, Impl, OFFSET>,
            ContainerNameWStr: ContainerNameWStr::<Identity, Impl, OFFSET>,
            SetContainerNameWStr: SetContainerNameWStr::<Identity, Impl, OFFSET>,
            ProviderNameWStr: ProviderNameWStr::<Identity, Impl, OFFSET>,
            SetProviderNameWStr: SetProviderNameWStr::<Identity, Impl, OFFSET>,
            ProviderType: ProviderType::<Identity, Impl, OFFSET>,
            SetProviderType: SetProviderType::<Identity, Impl, OFFSET>,
            KeySpec: KeySpec::<Identity, Impl, OFFSET>,
            SetKeySpec: SetKeySpec::<Identity, Impl, OFFSET>,
            ProviderFlags: ProviderFlags::<Identity, Impl, OFFSET>,
            SetProviderFlags: SetProviderFlags::<Identity, Impl, OFFSET>,
            UseExistingKeySet: UseExistingKeySet::<Identity, Impl, OFFSET>,
            SetUseExistingKeySet: SetUseExistingKeySet::<Identity, Impl, OFFSET>,
            GenKeyFlags: GenKeyFlags::<Identity, Impl, OFFSET>,
            SetGenKeyFlags: SetGenKeyFlags::<Identity, Impl, OFFSET>,
            DeleteRequestCert: DeleteRequestCert::<Identity, Impl, OFFSET>,
            SetDeleteRequestCert: SetDeleteRequestCert::<Identity, Impl, OFFSET>,
            WriteCertToUserDS: WriteCertToUserDS::<Identity, Impl, OFFSET>,
            SetWriteCertToUserDS: SetWriteCertToUserDS::<Identity, Impl, OFFSET>,
            EnableT61DNEncoding: EnableT61DNEncoding::<Identity, Impl, OFFSET>,
            SetEnableT61DNEncoding: SetEnableT61DNEncoding::<Identity, Impl, OFFSET>,
            WriteCertToCSP: WriteCertToCSP::<Identity, Impl, OFFSET>,
            SetWriteCertToCSP: SetWriteCertToCSP::<Identity, Impl, OFFSET>,
            SPCFileNameWStr: SPCFileNameWStr::<Identity, Impl, OFFSET>,
            SetSPCFileNameWStr: SetSPCFileNameWStr::<Identity, Impl, OFFSET>,
            PVKFileNameWStr: PVKFileNameWStr::<Identity, Impl, OFFSET>,
            SetPVKFileNameWStr: SetPVKFileNameWStr::<Identity, Impl, OFFSET>,
            HashAlgorithmWStr: HashAlgorithmWStr::<Identity, Impl, OFFSET>,
            SetHashAlgorithmWStr: SetHashAlgorithmWStr::<Identity, Impl, OFFSET>,
            RenewalCertificate: RenewalCertificate::<Identity, Impl, OFFSET>,
            SetRenewalCertificate: SetRenewalCertificate::<Identity, Impl, OFFSET>,
            AddCertTypeToRequestWStr: AddCertTypeToRequestWStr::<Identity, Impl, OFFSET>,
            AddNameValuePairToSignatureWStr: AddNameValuePairToSignatureWStr::<Identity, Impl, OFFSET>,
            AddExtensionsToRequest: AddExtensionsToRequest::<Identity, Impl, OFFSET>,
            AddAuthenticatedAttributesToPKCS7Request: AddAuthenticatedAttributesToPKCS7Request::<Identity, Impl, OFFSET>,
            CreatePKCS7RequestFromRequest: CreatePKCS7RequestFromRequest::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IEnroll2_Impl: ::windows_core::BaseImpl + IEnroll_Impl {
    fn InstallPKCS7Blob(this: &Self::This, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetSupportedKeySpec(this: &Self::This, pdwkeyspec: *mut i32) -> ::windows_core::Result<()>;
    fn GetKeyLen(this: &Self::This, fmin: super::super::super::Foundation::BOOL, fexchange: super::super::super::Foundation::BOOL, pdwkeysize: *mut i32) -> ::windows_core::Result<()>;
    fn EnumAlgs(this: &Self::This, dwindex: i32, algclass: i32, pdwalgid: *mut i32) -> ::windows_core::Result<()>;
    fn GetAlgNameWStr(this: &Self::This, algid: i32, ppwsz: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn SetReuseHardwareKeyIfUnableToGenNew(this: &Self::This, freusehardwarekeyifunabletogennew: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn ReuseHardwareKeyIfUnableToGenNew(this: &Self::This, freusehardwarekeyifunabletogennew: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetHashAlgID(this: &Self::This, hashalgid: i32) -> ::windows_core::Result<()>;
    fn HashAlgID(this: &Self::This, hashalgid: *mut i32) -> ::windows_core::Result<()>;
    fn SetHStoreMy(this: &Self::This, hstore: super::HCERTSTORE) -> ::windows_core::Result<()>;
    fn SetHStoreCA(this: &Self::This, hstore: super::HCERTSTORE) -> ::windows_core::Result<()>;
    fn SetHStoreROOT(this: &Self::This, hstore: super::HCERTSTORE) -> ::windows_core::Result<()>;
    fn SetHStoreRequest(this: &Self::This, hstore: super::HCERTSTORE) -> ::windows_core::Result<()>;
    fn SetLimitExchangeKeyToEncipherment(this: &Self::This, flimitexchangekeytoencipherment: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn LimitExchangeKeyToEncipherment(this: &Self::This, flimitexchangekeytoencipherment: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn SetEnableSMIMECapabilities(this: &Self::This, fenablesmimecapabilities: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn EnableSMIMECapabilities(this: &Self::This, fenablesmimecapabilities: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IEnroll2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IEnroll);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnroll2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InstallPKCS7Blob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InstallPKCS7Blob(this, ::core::mem::transmute_copy(&pblobpkcs7)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn GetSupportedKeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdwkeyspec: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetSupportedKeySpec(this, ::core::mem::transmute_copy(&pdwkeyspec)).into())
        }
        unsafe extern "system" fn GetKeyLen<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fmin: super::super::super::Foundation::BOOL, fexchange: super::super::super::Foundation::BOOL, pdwkeysize: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyLen(this, ::core::mem::transmute_copy(&fmin), ::core::mem::transmute_copy(&fexchange), ::core::mem::transmute_copy(&pdwkeysize)).into())
        }
        unsafe extern "system" fn EnumAlgs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, dwindex: i32, algclass: i32, pdwalgid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnumAlgs(this, ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&algclass), ::core::mem::transmute_copy(&pdwalgid)).into())
        }
        unsafe extern "system" fn GetAlgNameWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, algid: i32, ppwsz: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetAlgNameWStr(this, ::core::mem::transmute_copy(&algid), ::core::mem::transmute_copy(&ppwsz)).into())
        }
        unsafe extern "system" fn SetReuseHardwareKeyIfUnableToGenNew<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, freusehardwarekeyifunabletogennew: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReuseHardwareKeyIfUnableToGenNew(this, ::core::mem::transmute_copy(&freusehardwarekeyifunabletogennew)).into())
        }
        unsafe extern "system" fn ReuseHardwareKeyIfUnableToGenNew<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, freusehardwarekeyifunabletogennew: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ReuseHardwareKeyIfUnableToGenNew(this, ::core::mem::transmute_copy(&freusehardwarekeyifunabletogennew)).into())
        }
        unsafe extern "system" fn SetHashAlgID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashalgid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgID(this, ::core::mem::transmute_copy(&hashalgid)).into())
        }
        unsafe extern "system" fn HashAlgID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hashalgid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::HashAlgID(this, ::core::mem::transmute_copy(&hashalgid)).into())
        }
        unsafe extern "system" fn SetHStoreMy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hstore: super::HCERTSTORE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHStoreMy(this, ::core::mem::transmute_copy(&hstore)).into())
        }
        unsafe extern "system" fn SetHStoreCA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hstore: super::HCERTSTORE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHStoreCA(this, ::core::mem::transmute_copy(&hstore)).into())
        }
        unsafe extern "system" fn SetHStoreROOT<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hstore: super::HCERTSTORE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHStoreROOT(this, ::core::mem::transmute_copy(&hstore)).into())
        }
        unsafe extern "system" fn SetHStoreRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hstore: super::HCERTSTORE) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHStoreRequest(this, ::core::mem::transmute_copy(&hstore)).into())
        }
        unsafe extern "system" fn SetLimitExchangeKeyToEncipherment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flimitexchangekeytoencipherment: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLimitExchangeKeyToEncipherment(this, ::core::mem::transmute_copy(&flimitexchangekeytoencipherment)).into())
        }
        unsafe extern "system" fn LimitExchangeKeyToEncipherment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flimitexchangekeytoencipherment: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LimitExchangeKeyToEncipherment(this, ::core::mem::transmute_copy(&flimitexchangekeytoencipherment)).into())
        }
        unsafe extern "system" fn SetEnableSMIMECapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenablesmimecapabilities: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEnableSMIMECapabilities(this, ::core::mem::transmute_copy(&fenablesmimecapabilities)).into())
        }
        unsafe extern "system" fn EnableSMIMECapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, fenablesmimecapabilities: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::EnableSMIMECapabilities(this, ::core::mem::transmute_copy(&fenablesmimecapabilities)).into())
        }
        IEnroll2_Vtbl {
            base__: <IEnroll as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InstallPKCS7Blob: InstallPKCS7Blob::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            GetSupportedKeySpec: GetSupportedKeySpec::<Identity, Impl, OFFSET>,
            GetKeyLen: GetKeyLen::<Identity, Impl, OFFSET>,
            EnumAlgs: EnumAlgs::<Identity, Impl, OFFSET>,
            GetAlgNameWStr: GetAlgNameWStr::<Identity, Impl, OFFSET>,
            SetReuseHardwareKeyIfUnableToGenNew: SetReuseHardwareKeyIfUnableToGenNew::<Identity, Impl, OFFSET>,
            ReuseHardwareKeyIfUnableToGenNew: ReuseHardwareKeyIfUnableToGenNew::<Identity, Impl, OFFSET>,
            SetHashAlgID: SetHashAlgID::<Identity, Impl, OFFSET>,
            HashAlgID: HashAlgID::<Identity, Impl, OFFSET>,
            SetHStoreMy: SetHStoreMy::<Identity, Impl, OFFSET>,
            SetHStoreCA: SetHStoreCA::<Identity, Impl, OFFSET>,
            SetHStoreROOT: SetHStoreROOT::<Identity, Impl, OFFSET>,
            SetHStoreRequest: SetHStoreRequest::<Identity, Impl, OFFSET>,
            SetLimitExchangeKeyToEncipherment: SetLimitExchangeKeyToEncipherment::<Identity, Impl, OFFSET>,
            LimitExchangeKeyToEncipherment: LimitExchangeKeyToEncipherment::<Identity, Impl, OFFSET>,
            SetEnableSMIMECapabilities: SetEnableSMIMECapabilities::<Identity, Impl, OFFSET>,
            EnableSMIMECapabilities: EnableSMIMECapabilities::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait IEnroll4_Impl: ::windows_core::BaseImpl + IEnroll2_Impl {
    fn SetThumbPrintWStr(this: &Self::This, thumbprintblob: &super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn ThumbPrintWStr(this: &Self::This, thumbprintblob: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn SetPrivateKeyArchiveCertificate(this: &Self::This, pprivatekeyarchivecert: *const super::CERT_CONTEXT) -> ::windows_core::Result<()>;
    fn GetPrivateKeyArchiveCertificate(this: &Self::This) -> *mut super::CERT_CONTEXT;
    fn binaryBlobToString(this: &Self::This, flags: i32, pblobbinary: *mut super::CRYPT_INTEGER_BLOB, ppwszstring: *mut ::windows_core::PWSTR) -> ::windows_core::Result<()>;
    fn stringToBinaryBlob(this: &Self::This, flags: i32, pwszstring: &::windows_core::PCWSTR, pblobbinary: *mut super::CRYPT_INTEGER_BLOB, pdwskip: *mut i32, pdwflags: *mut i32) -> ::windows_core::Result<()>;
    fn addExtensionToRequestWStr(this: &Self::This, flags: i32, pwszname: &::windows_core::PCWSTR, pblobvalue: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn addAttributeToRequestWStr(this: &Self::This, flags: i32, pwszname: &::windows_core::PCWSTR, pblobvalue: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn addNameValuePairToRequestWStr(this: &Self::This, flags: i32, pwszname: &::windows_core::PCWSTR, pwszvalue: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn resetExtensions(this: &Self::This) -> ::windows_core::Result<()>;
    fn resetAttributes(this: &Self::This) -> ::windows_core::Result<()>;
    fn createRequestWStr(this: &Self::This, flags: CERT_CREATE_REQUEST_FLAGS, pwszdnname: &::windows_core::PCWSTR, pwszusage: &::windows_core::PCWSTR, pblobrequest: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn createFileRequestWStr(this: &Self::This, flags: CERT_CREATE_REQUEST_FLAGS, pwszdnname: &::windows_core::PCWSTR, pwszusage: &::windows_core::PCWSTR, pwszrequestfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn acceptResponseBlob(this: &Self::This, pblobresponse: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn acceptFileResponseWStr(this: &Self::This, pwszresponsefilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn getCertContextFromResponseBlob(this: &Self::This, pblobresponse: *mut super::CRYPT_INTEGER_BLOB, ppcertcontext: *mut *mut super::CERT_CONTEXT) -> ::windows_core::Result<()>;
    fn getCertContextFromFileResponseWStr(this: &Self::This, pwszresponsefilename: &::windows_core::PCWSTR, ppcertcontext: *mut *mut super::CERT_CONTEXT) -> ::windows_core::Result<()>;
    fn createPFXWStr(this: &Self::This, pwszpassword: &::windows_core::PCWSTR, pblobpfx: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn createFilePFXWStr(this: &Self::This, pwszpassword: &::windows_core::PCWSTR, pwszpfxfilename: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn setPendingRequestInfoWStr(this: &Self::This, lrequestid: i32, pwszcadns: &::windows_core::PCWSTR, pwszcaname: &::windows_core::PCWSTR, pwszfriendlyname: &::windows_core::PCWSTR) -> ::windows_core::Result<()>;
    fn enumPendingRequestWStr(this: &Self::This, lindex: i32, ldesiredproperty: PENDING_REQUEST_DESIRED_PROPERTY, ppproperty: *mut ::core::ffi::c_void) -> ::windows_core::Result<()>;
    fn removePendingRequestWStr(this: &Self::This, thumbprintblob: &super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn GetKeyLenEx(this: &Self::This, lsizespec: XEKL_KEYSIZE, lkeyspec: XEKL_KEYSPEC, pdwkeysize: *mut i32) -> ::windows_core::Result<()>;
    fn InstallPKCS7BlobEx(this: &Self::This, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB, plcertinstalled: *mut i32) -> ::windows_core::Result<()>;
    fn AddCertTypeToRequestWStrEx(this: &Self::This, ltype: ADDED_CERT_TYPE, pwszoidorname: &::windows_core::PCWSTR, lmajorversion: i32, fminorversion: super::super::super::Foundation::BOOL, lminorversion: i32) -> ::windows_core::Result<()>;
    fn getProviderTypeWStr(this: &Self::This, pwszprovname: &::windows_core::PCWSTR, plprovtype: *mut i32) -> ::windows_core::Result<()>;
    fn addBlobPropertyToCertificateWStr(this: &Self::This, lpropertyid: i32, lreserved: i32, pblobproperty: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::Result<()>;
    fn SetSignerCertificate(this: &Self::This, psignercert: *const super::CERT_CONTEXT) -> ::windows_core::Result<()>;
    fn SetClientId(this: &Self::This, lclientid: i32) -> ::windows_core::Result<()>;
    fn ClientId(this: &Self::This, plclientid: *mut i32) -> ::windows_core::Result<()>;
    fn SetIncludeSubjectKeyID(this: &Self::This, finclude: super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn IncludeSubjectKeyID(this: &Self::This, pfinclude: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for IEnroll4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IEnroll2);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnroll4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn SetThumbPrintWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thumbprintblob: super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThumbPrintWStr(this, ::core::mem::transmute(&thumbprintblob)).into())
        }
        unsafe extern "system" fn ThumbPrintWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thumbprintblob: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ThumbPrintWStr(this, ::core::mem::transmute_copy(&thumbprintblob)).into())
        }
        unsafe extern "system" fn SetPrivateKeyArchiveCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pprivatekeyarchivecert: *const super::CERT_CONTEXT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPrivateKeyArchiveCertificate(this, ::core::mem::transmute_copy(&pprivatekeyarchivecert)).into())
        }
        unsafe extern "system" fn GetPrivateKeyArchiveCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> *mut super::CERT_CONTEXT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetPrivateKeyArchiveCertificate(this))
        }
        unsafe extern "system" fn binaryBlobToString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pblobbinary: *mut super::CRYPT_INTEGER_BLOB, ppwszstring: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::binaryBlobToString(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pblobbinary), ::core::mem::transmute_copy(&ppwszstring)).into())
        }
        unsafe extern "system" fn stringToBinaryBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pwszstring: ::windows_core::PCWSTR, pblobbinary: *mut super::CRYPT_INTEGER_BLOB, pdwskip: *mut i32, pdwflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::stringToBinaryBlob(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pwszstring), ::core::mem::transmute_copy(&pblobbinary), ::core::mem::transmute_copy(&pdwskip), ::core::mem::transmute_copy(&pdwflags)).into())
        }
        unsafe extern "system" fn addExtensionToRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pwszname: ::windows_core::PCWSTR, pblobvalue: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addExtensionToRequestWStr(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pwszname), ::core::mem::transmute_copy(&pblobvalue)).into())
        }
        unsafe extern "system" fn addAttributeToRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pwszname: ::windows_core::PCWSTR, pblobvalue: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addAttributeToRequestWStr(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pwszname), ::core::mem::transmute_copy(&pblobvalue)).into())
        }
        unsafe extern "system" fn addNameValuePairToRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, pwszname: ::windows_core::PCWSTR, pwszvalue: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addNameValuePairToRequestWStr(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pwszname), ::core::mem::transmute(&pwszvalue)).into())
        }
        unsafe extern "system" fn resetExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::resetExtensions(this).into())
        }
        unsafe extern "system" fn resetAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::resetAttributes(this).into())
        }
        unsafe extern "system" fn createRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: CERT_CREATE_REQUEST_FLAGS, pwszdnname: ::windows_core::PCWSTR, pwszusage: ::windows_core::PCWSTR, pblobrequest: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createRequestWStr(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pwszdnname), ::core::mem::transmute(&pwszusage), ::core::mem::transmute_copy(&pblobrequest)).into())
        }
        unsafe extern "system" fn createFileRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: CERT_CREATE_REQUEST_FLAGS, pwszdnname: ::windows_core::PCWSTR, pwszusage: ::windows_core::PCWSTR, pwszrequestfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createFileRequestWStr(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&pwszdnname), ::core::mem::transmute(&pwszusage), ::core::mem::transmute(&pwszrequestfilename)).into())
        }
        unsafe extern "system" fn acceptResponseBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblobresponse: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptResponseBlob(this, ::core::mem::transmute_copy(&pblobresponse)).into())
        }
        unsafe extern "system" fn acceptFileResponseWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszresponsefilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::acceptFileResponseWStr(this, ::core::mem::transmute(&pwszresponsefilename)).into())
        }
        unsafe extern "system" fn getCertContextFromResponseBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblobresponse: *mut super::CRYPT_INTEGER_BLOB, ppcertcontext: *mut *mut super::CERT_CONTEXT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getCertContextFromResponseBlob(this, ::core::mem::transmute_copy(&pblobresponse), ::core::mem::transmute_copy(&ppcertcontext)).into())
        }
        unsafe extern "system" fn getCertContextFromFileResponseWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszresponsefilename: ::windows_core::PCWSTR, ppcertcontext: *mut *mut super::CERT_CONTEXT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getCertContextFromFileResponseWStr(this, ::core::mem::transmute(&pwszresponsefilename), ::core::mem::transmute_copy(&ppcertcontext)).into())
        }
        unsafe extern "system" fn createPFXWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszpassword: ::windows_core::PCWSTR, pblobpfx: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createPFXWStr(this, ::core::mem::transmute(&pwszpassword), ::core::mem::transmute_copy(&pblobpfx)).into())
        }
        unsafe extern "system" fn createFilePFXWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszpassword: ::windows_core::PCWSTR, pwszpfxfilename: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::createFilePFXWStr(this, ::core::mem::transmute(&pwszpassword), ::core::mem::transmute(&pwszpfxfilename)).into())
        }
        unsafe extern "system" fn setPendingRequestInfoWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lrequestid: i32, pwszcadns: ::windows_core::PCWSTR, pwszcaname: ::windows_core::PCWSTR, pwszfriendlyname: ::windows_core::PCWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::setPendingRequestInfoWStr(this, ::core::mem::transmute_copy(&lrequestid), ::core::mem::transmute(&pwszcadns), ::core::mem::transmute(&pwszcaname), ::core::mem::transmute(&pwszfriendlyname)).into())
        }
        unsafe extern "system" fn enumPendingRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lindex: i32, ldesiredproperty: PENDING_REQUEST_DESIRED_PROPERTY, ppproperty: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::enumPendingRequestWStr(this, ::core::mem::transmute_copy(&lindex), ::core::mem::transmute_copy(&ldesiredproperty), ::core::mem::transmute_copy(&ppproperty)).into())
        }
        unsafe extern "system" fn removePendingRequestWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, thumbprintblob: super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::removePendingRequestWStr(this, ::core::mem::transmute(&thumbprintblob)).into())
        }
        unsafe extern "system" fn GetKeyLenEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lsizespec: XEKL_KEYSIZE, lkeyspec: XEKL_KEYSPEC, pdwkeysize: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetKeyLenEx(this, ::core::mem::transmute_copy(&lsizespec), ::core::mem::transmute_copy(&lkeyspec), ::core::mem::transmute_copy(&pdwkeysize)).into())
        }
        unsafe extern "system" fn InstallPKCS7BlobEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pblobpkcs7: *mut super::CRYPT_INTEGER_BLOB, plcertinstalled: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InstallPKCS7BlobEx(this, ::core::mem::transmute_copy(&pblobpkcs7), ::core::mem::transmute_copy(&plcertinstalled)).into())
        }
        unsafe extern "system" fn AddCertTypeToRequestWStrEx<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ltype: ADDED_CERT_TYPE, pwszoidorname: ::windows_core::PCWSTR, lmajorversion: i32, fminorversion: super::super::super::Foundation::BOOL, lminorversion: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddCertTypeToRequestWStrEx(this, ::core::mem::transmute_copy(&ltype), ::core::mem::transmute(&pwszoidorname), ::core::mem::transmute_copy(&lmajorversion), ::core::mem::transmute_copy(&fminorversion), ::core::mem::transmute_copy(&lminorversion)).into())
        }
        unsafe extern "system" fn getProviderTypeWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszprovname: ::windows_core::PCWSTR, plprovtype: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::getProviderTypeWStr(this, ::core::mem::transmute(&pwszprovname), ::core::mem::transmute_copy(&plprovtype)).into())
        }
        unsafe extern "system" fn addBlobPropertyToCertificateWStr<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lpropertyid: i32, lreserved: i32, pblobproperty: *mut super::CRYPT_INTEGER_BLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::addBlobPropertyToCertificateWStr(this, ::core::mem::transmute_copy(&lpropertyid), ::core::mem::transmute_copy(&lreserved), ::core::mem::transmute_copy(&pblobproperty)).into())
        }
        unsafe extern "system" fn SetSignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psignercert: *const super::CERT_CONTEXT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignerCertificate(this, ::core::mem::transmute_copy(&psignercert)).into())
        }
        unsafe extern "system" fn SetClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, lclientid: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientId(this, ::core::mem::transmute_copy(&lclientid)).into())
        }
        unsafe extern "system" fn ClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, plclientid: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ClientId(this, ::core::mem::transmute_copy(&plclientid)).into())
        }
        unsafe extern "system" fn SetIncludeSubjectKeyID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, finclude: super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIncludeSubjectKeyID(this, ::core::mem::transmute_copy(&finclude)).into())
        }
        unsafe extern "system" fn IncludeSubjectKeyID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnroll4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pfinclude: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IncludeSubjectKeyID(this, ::core::mem::transmute_copy(&pfinclude)).into())
        }
        IEnroll4_Vtbl {
            base__: <IEnroll2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            SetThumbPrintWStr: SetThumbPrintWStr::<Identity, Impl, OFFSET>,
            ThumbPrintWStr: ThumbPrintWStr::<Identity, Impl, OFFSET>,
            SetPrivateKeyArchiveCertificate: SetPrivateKeyArchiveCertificate::<Identity, Impl, OFFSET>,
            GetPrivateKeyArchiveCertificate: GetPrivateKeyArchiveCertificate::<Identity, Impl, OFFSET>,
            binaryBlobToString: binaryBlobToString::<Identity, Impl, OFFSET>,
            stringToBinaryBlob: stringToBinaryBlob::<Identity, Impl, OFFSET>,
            addExtensionToRequestWStr: addExtensionToRequestWStr::<Identity, Impl, OFFSET>,
            addAttributeToRequestWStr: addAttributeToRequestWStr::<Identity, Impl, OFFSET>,
            addNameValuePairToRequestWStr: addNameValuePairToRequestWStr::<Identity, Impl, OFFSET>,
            resetExtensions: resetExtensions::<Identity, Impl, OFFSET>,
            resetAttributes: resetAttributes::<Identity, Impl, OFFSET>,
            createRequestWStr: createRequestWStr::<Identity, Impl, OFFSET>,
            createFileRequestWStr: createFileRequestWStr::<Identity, Impl, OFFSET>,
            acceptResponseBlob: acceptResponseBlob::<Identity, Impl, OFFSET>,
            acceptFileResponseWStr: acceptFileResponseWStr::<Identity, Impl, OFFSET>,
            getCertContextFromResponseBlob: getCertContextFromResponseBlob::<Identity, Impl, OFFSET>,
            getCertContextFromFileResponseWStr: getCertContextFromFileResponseWStr::<Identity, Impl, OFFSET>,
            createPFXWStr: createPFXWStr::<Identity, Impl, OFFSET>,
            createFilePFXWStr: createFilePFXWStr::<Identity, Impl, OFFSET>,
            setPendingRequestInfoWStr: setPendingRequestInfoWStr::<Identity, Impl, OFFSET>,
            enumPendingRequestWStr: enumPendingRequestWStr::<Identity, Impl, OFFSET>,
            removePendingRequestWStr: removePendingRequestWStr::<Identity, Impl, OFFSET>,
            GetKeyLenEx: GetKeyLenEx::<Identity, Impl, OFFSET>,
            InstallPKCS7BlobEx: InstallPKCS7BlobEx::<Identity, Impl, OFFSET>,
            AddCertTypeToRequestWStrEx: AddCertTypeToRequestWStrEx::<Identity, Impl, OFFSET>,
            getProviderTypeWStr: getProviderTypeWStr::<Identity, Impl, OFFSET>,
            addBlobPropertyToCertificateWStr: addBlobPropertyToCertificateWStr::<Identity, Impl, OFFSET>,
            SetSignerCertificate: SetSignerCertificate::<Identity, Impl, OFFSET>,
            SetClientId: SetClientId::<Identity, Impl, OFFSET>,
            ClientId: ClientId::<Identity, Impl, OFFSET>,
            SetIncludeSubjectKeyID: SetIncludeSubjectKeyID::<Identity, Impl, OFFSET>,
            IncludeSubjectKeyID: IncludeSubjectKeyID::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IEnumCERTVIEWATTRIBUTE_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Next(this: &Self::This, pindex: *mut i32) -> ::windows_core::Result<()>;
    fn GetName(this: &Self::This, pstrout: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetValue(this: &Self::This, pstrout: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: i32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumCERTVIEWATTRIBUTE>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IEnumCERTVIEWATTRIBUTE {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumCERTVIEWATTRIBUTE {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&pindex)).into())
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetName(this, ::core::mem::transmute_copy(&pstrout)).into())
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValue(this, ::core::mem::transmute_copy(&pstrout)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWATTRIBUTE_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumCERTVIEWATTRIBUTE_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IEnumCERTVIEWCOLUMN_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Next(this: &Self::This, pindex: *mut i32) -> ::windows_core::Result<()>;
    fn GetName(this: &Self::This, pstrout: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetDisplayName(this: &Self::This, pstrout: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetType(this: &Self::This, ptype: *mut i32) -> ::windows_core::Result<()>;
    fn IsIndexed(this: &Self::This, pindexed: *mut i32) -> ::windows_core::Result<()>;
    fn GetMaxLength(this: &Self::This, pmaxlength: *mut i32) -> ::windows_core::Result<()>;
    fn GetValue(this: &Self::This, flags: ENUM_CERT_COLUMN_VALUE_FLAGS, pvarvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: i32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumCERTVIEWCOLUMN>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IEnumCERTVIEWCOLUMN {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumCERTVIEWCOLUMN {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&pindex)).into())
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetName(this, ::core::mem::transmute_copy(&pstrout)).into())
        }
        unsafe extern "system" fn GetDisplayName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetDisplayName(this, ::core::mem::transmute_copy(&pstrout)).into())
        }
        unsafe extern "system" fn GetType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptype: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetType(this, ::core::mem::transmute_copy(&ptype)).into())
        }
        unsafe extern "system" fn IsIndexed<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindexed: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::IsIndexed(this, ::core::mem::transmute_copy(&pindexed)).into())
        }
        unsafe extern "system" fn GetMaxLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pmaxlength: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMaxLength(this, ::core::mem::transmute_copy(&pmaxlength)).into())
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: ENUM_CERT_COLUMN_VALUE_FLAGS, pvarvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValue(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pvarvalue)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWCOLUMN_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumCERTVIEWCOLUMN_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetDisplayName: GetDisplayName::<Identity, Impl, OFFSET>,
            GetType: GetType::<Identity, Impl, OFFSET>,
            IsIndexed: IsIndexed::<Identity, Impl, OFFSET>,
            GetMaxLength: GetMaxLength::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IEnumCERTVIEWEXTENSION_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Next(this: &Self::This, pindex: *mut i32) -> ::windows_core::Result<()>;
    fn GetName(this: &Self::This, pstrout: *mut ::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetFlags(this: &Self::This, pflags: *mut i32) -> ::windows_core::Result<()>;
    fn GetValue(this: &Self::This, r#type: CERT_PROPERTY_TYPE, flags: ENUM_CERT_COLUMN_VALUE_FLAGS, pvarvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Skip(this: &Self::This, celt: i32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumCERTVIEWEXTENSION>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IEnumCERTVIEWEXTENSION {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumCERTVIEWEXTENSION {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&pindex)).into())
        }
        unsafe extern "system" fn GetName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pstrout: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetName(this, ::core::mem::transmute_copy(&pstrout)).into())
        }
        unsafe extern "system" fn GetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pflags: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetFlags(this, ::core::mem::transmute_copy(&pflags)).into())
        }
        unsafe extern "system" fn GetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, r#type: CERT_PROPERTY_TYPE, flags: ENUM_CERT_COLUMN_VALUE_FLAGS, pvarvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetValue(this, ::core::mem::transmute_copy(&r#type), ::core::mem::transmute_copy(&flags), ::core::mem::transmute_copy(&pvarvalue)).into())
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWEXTENSION_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IEnumCERTVIEWEXTENSION_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            GetName: GetName::<Identity, Impl, OFFSET>,
            GetFlags: GetFlags::<Identity, Impl, OFFSET>,
            GetValue: GetValue::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IEnumCERTVIEWROW_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Next(this: &Self::This, pindex: *mut i32) -> ::windows_core::Result<()>;
    fn EnumCertViewColumn(this: &Self::This) -> ::windows_core::Result<IEnumCERTVIEWCOLUMN>;
    fn EnumCertViewAttribute(this: &Self::This, flags: i32) -> ::windows_core::Result<IEnumCERTVIEWATTRIBUTE>;
    fn EnumCertViewExtension(this: &Self::This, flags: i32) -> ::windows_core::Result<IEnumCERTVIEWEXTENSION>;
    fn Skip(this: &Self::This, celt: i32) -> ::windows_core::Result<()>;
    fn Reset(this: &Self::This) -> ::windows_core::Result<()>;
    fn Clone(this: &Self::This) -> ::windows_core::Result<IEnumCERTVIEWROW>;
    fn GetMaxIndex(this: &Self::This, pindex: *mut i32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IEnumCERTVIEWROW {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IEnumCERTVIEWROW {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Next<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Next(this, ::core::mem::transmute_copy(&pindex)).into())
        }
        unsafe extern "system" fn EnumCertViewColumn<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumCertViewColumn(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumCertViewAttribute<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumCertViewAttribute(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnumCertViewExtension<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: i32, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnumCertViewExtension(this, ::core::mem::transmute_copy(&flags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Skip<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, celt: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Skip(this, ::core::mem::transmute_copy(&celt)).into())
        }
        unsafe extern "system" fn Reset<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Reset(this).into())
        }
        unsafe extern "system" fn Clone<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppenum: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Clone(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppenum, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetMaxIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IEnumCERTVIEWROW_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetMaxIndex(this, ::core::mem::transmute_copy(&pindex)).into())
        }
        IEnumCERTVIEWROW_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Next: Next::<Identity, Impl, OFFSET>,
            EnumCertViewColumn: EnumCertViewColumn::<Identity, Impl, OFFSET>,
            EnumCertViewAttribute: EnumCertViewAttribute::<Identity, Impl, OFFSET>,
            EnumCertViewExtension: EnumCertViewExtension::<Identity, Impl, OFFSET>,
            Skip: Skip::<Identity, Impl, OFFSET>,
            Reset: Reset::<Identity, Impl, OFFSET>,
            Clone: Clone::<Identity, Impl, OFFSET>,
            GetMaxIndex: GetMaxIndex::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`"]
#[cfg(feature = "Win32_Foundation")]
pub trait INDESPolicy_Impl: ::windows_core::BaseImpl {
    fn Initialize(this: &Self::This) -> ::windows_core::Result<()>;
    fn Uninitialize(this: &Self::This) -> ::windows_core::Result<()>;
    fn GenerateChallenge(this: &Self::This, pwsztemplate: &::windows_core::PCWSTR, pwszparams: &::windows_core::PCWSTR) -> ::windows_core::Result<::windows_core::PWSTR>;
    fn VerifyRequest(this: &Self::This, pctbrequest: *mut CERTTRANSBLOB, pctbsigningcertencoded: *mut CERTTRANSBLOB, pwsztemplate: &::windows_core::PCWSTR, pwsztransactionid: &::windows_core::PCWSTR, pfverified: *mut super::super::super::Foundation::BOOL) -> ::windows_core::Result<()>;
    fn Notify(this: &Self::This, pwszchallenge: &::windows_core::PCWSTR, pwsztransactionid: &::windows_core::PCWSTR, disposition: X509SCEPDisposition, lasthresult: i32, pctbissuedcertencoded: *mut CERTTRANSBLOB) -> ::windows_core::Result<()>;
}
#[cfg(feature = "Win32_Foundation")]
impl ::windows_core::Iids for INDESPolicy {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(::windows_core::IUnknown);
}
#[cfg(feature = "Win32_Foundation")]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INDESPolicy_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for INDESPolicy {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INDESPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this).into())
        }
        unsafe extern "system" fn Uninitialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INDESPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Uninitialize(this).into())
        }
        unsafe extern "system" fn GenerateChallenge<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INDESPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwsztemplate: ::windows_core::PCWSTR, pwszparams: ::windows_core::PCWSTR, ppwszresponse: *mut ::windows_core::PWSTR) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GenerateChallenge(this, ::core::mem::transmute(&pwsztemplate), ::core::mem::transmute(&pwszparams)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppwszresponse, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn VerifyRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INDESPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pctbrequest: *mut CERTTRANSBLOB, pctbsigningcertencoded: *mut CERTTRANSBLOB, pwsztemplate: ::windows_core::PCWSTR, pwsztransactionid: ::windows_core::PCWSTR, pfverified: *mut super::super::super::Foundation::BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::VerifyRequest(this, ::core::mem::transmute_copy(&pctbrequest), ::core::mem::transmute_copy(&pctbsigningcertencoded), ::core::mem::transmute(&pwsztemplate), ::core::mem::transmute(&pwsztransactionid), ::core::mem::transmute_copy(&pfverified)).into())
        }
        unsafe extern "system" fn Notify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: INDESPolicy_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pwszchallenge: ::windows_core::PCWSTR, pwsztransactionid: ::windows_core::PCWSTR, disposition: X509SCEPDisposition, lasthresult: i32, pctbissuedcertencoded: *mut CERTTRANSBLOB) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Notify(this, ::core::mem::transmute(&pwszchallenge), ::core::mem::transmute(&pwsztransactionid), ::core::mem::transmute_copy(&disposition), ::core::mem::transmute_copy(&lasthresult), ::core::mem::transmute_copy(&pctbissuedcertencoded)).into())
        }
        INDESPolicy_Vtbl {
            base__: <::windows_core::IUnknown as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Uninitialize: Uninitialize::<Identity, Impl, OFFSET>,
            GenerateChallenge: GenerateChallenge::<Identity, Impl, OFFSET>,
            VerifyRequest: VerifyRequest::<Identity, Impl, OFFSET>,
            Notify: Notify::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IOCSPAdmin_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn OCSPServiceProperties(this: &Self::This) -> ::windows_core::Result<IOCSPPropertyCollection>;
    fn OCSPCAConfigurationCollection(this: &Self::This) -> ::windows_core::Result<IOCSPCAConfigurationCollection>;
    fn GetConfiguration(this: &Self::This, bstrservername: &::windows_core::BSTR, bforce: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SetConfiguration(this: &Self::This, bstrservername: &::windows_core::BSTR, bforce: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn GetMyRoles(this: &Self::This, bstrservername: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn Ping(this: &Self::This, bstrservername: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetSecurity(this: &Self::This, bstrservername: &::windows_core::BSTR, bstrval: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetSecurity(this: &Self::This, bstrservername: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetSigningCertificates(this: &Self::This, bstrservername: &::windows_core::BSTR, pcacertvar: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn GetHashAlgorithms(this: &Self::This, bstrservername: &::windows_core::BSTR, bstrcaid: &::windows_core::BSTR) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IOCSPAdmin {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOCSPAdmin {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn OCSPServiceProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OCSPServiceProperties(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn OCSPCAConfigurationCollection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OCSPCAConfigurationCollection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, bforce: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::GetConfiguration(this, ::core::mem::transmute(&bstrservername), ::core::mem::transmute_copy(&bforce)).into())
        }
        unsafe extern "system" fn SetConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, bforce: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetConfiguration(this, ::core::mem::transmute(&bstrservername), ::core::mem::transmute_copy(&bforce)).into())
        }
        unsafe extern "system" fn GetMyRoles<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, proles: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetMyRoles(this, ::core::mem::transmute(&bstrservername)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(proles, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Ping<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Ping(this, ::core::mem::transmute(&bstrservername)).into())
        }
        unsafe extern "system" fn SetSecurity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrval: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSecurity(this, ::core::mem::transmute(&bstrservername), ::core::mem::transmute(&bstrval)).into())
        }
        unsafe extern "system" fn GetSecurity<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSecurity(this, ::core::mem::transmute(&bstrservername)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetSigningCertificates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, pcacertvar: *const super::super::super::System::Variant::VARIANT, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSigningCertificates(this, ::core::mem::transmute(&bstrservername), ::core::mem::transmute_copy(&pcacertvar)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetHashAlgorithms<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPAdmin_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrservername: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrcaid: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetHashAlgorithms(this, ::core::mem::transmute(&bstrservername), ::core::mem::transmute(&bstrcaid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IOCSPAdmin_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            OCSPServiceProperties: OCSPServiceProperties::<Identity, Impl, OFFSET>,
            OCSPCAConfigurationCollection: OCSPCAConfigurationCollection::<Identity, Impl, OFFSET>,
            GetConfiguration: GetConfiguration::<Identity, Impl, OFFSET>,
            SetConfiguration: SetConfiguration::<Identity, Impl, OFFSET>,
            GetMyRoles: GetMyRoles::<Identity, Impl, OFFSET>,
            Ping: Ping::<Identity, Impl, OFFSET>,
            SetSecurity: SetSecurity::<Identity, Impl, OFFSET>,
            GetSecurity: GetSecurity::<Identity, Impl, OFFSET>,
            GetSigningCertificates: GetSigningCertificates::<Identity, Impl, OFFSET>,
            GetHashAlgorithms: GetHashAlgorithms::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IOCSPCAConfiguration_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Identifier(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CACertificate(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn HashAlgorithm(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetHashAlgorithm(this: &Self::This, newval: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SigningFlags(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetSigningFlags(this: &Self::This, newval: u32) -> ::windows_core::Result<()>;
    fn SigningCertificate(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetSigningCertificate(this: &Self::This, newval: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn ReminderDuration(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetReminderDuration(this: &Self::This, newval: u32) -> ::windows_core::Result<()>;
    fn ErrorCode(this: &Self::This) -> ::windows_core::Result<u32>;
    fn CSPName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn KeySpec(this: &Self::This) -> ::windows_core::Result<u32>;
    fn ProviderCLSID(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetProviderCLSID(this: &Self::This, newval: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ProviderProperties(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetProviderProperties(this: &Self::This, newval: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Modified(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn LocalRevocationInformation(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetLocalRevocationInformation(this: &Self::This, newval: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn SigningCertificateTemplate(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetSigningCertificateTemplate(this: &Self::This, newval: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CAConfig(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCAConfig(this: &Self::This, newval: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IOCSPCAConfiguration {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOCSPCAConfiguration {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Identifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Identifier(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CACertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CACertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgorithm(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn SigningFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SigningFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSigningFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSigningFlags(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn SigningCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SigningCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSigningCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSigningCertificate(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn ReminderDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReminderDuration(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetReminderDuration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReminderDuration(this, ::core::mem::transmute_copy(&newval)).into())
        }
        unsafe extern "system" fn ErrorCode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ErrorCode(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CSPName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CSPName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySpec(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProviderCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderCLSID(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderCLSID<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderCLSID(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn ProviderProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderProperties(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderProperties(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn Modified<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Modified(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn LocalRevocationInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LocalRevocationInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLocalRevocationInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLocalRevocationInformation(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn SigningCertificateTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SigningCertificateTemplate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSigningCertificateTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSigningCertificateTemplate(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn CAConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAConfig(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCAConfig<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfiguration_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAConfig(this, ::core::mem::transmute(&newval)).into())
        }
        IOCSPCAConfiguration_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Identifier: Identifier::<Identity, Impl, OFFSET>,
            CACertificate: CACertificate::<Identity, Impl, OFFSET>,
            HashAlgorithm: HashAlgorithm::<Identity, Impl, OFFSET>,
            SetHashAlgorithm: SetHashAlgorithm::<Identity, Impl, OFFSET>,
            SigningFlags: SigningFlags::<Identity, Impl, OFFSET>,
            SetSigningFlags: SetSigningFlags::<Identity, Impl, OFFSET>,
            SigningCertificate: SigningCertificate::<Identity, Impl, OFFSET>,
            SetSigningCertificate: SetSigningCertificate::<Identity, Impl, OFFSET>,
            ReminderDuration: ReminderDuration::<Identity, Impl, OFFSET>,
            SetReminderDuration: SetReminderDuration::<Identity, Impl, OFFSET>,
            ErrorCode: ErrorCode::<Identity, Impl, OFFSET>,
            CSPName: CSPName::<Identity, Impl, OFFSET>,
            KeySpec: KeySpec::<Identity, Impl, OFFSET>,
            ProviderCLSID: ProviderCLSID::<Identity, Impl, OFFSET>,
            SetProviderCLSID: SetProviderCLSID::<Identity, Impl, OFFSET>,
            ProviderProperties: ProviderProperties::<Identity, Impl, OFFSET>,
            SetProviderProperties: SetProviderProperties::<Identity, Impl, OFFSET>,
            Modified: Modified::<Identity, Impl, OFFSET>,
            LocalRevocationInformation: LocalRevocationInformation::<Identity, Impl, OFFSET>,
            SetLocalRevocationInformation: SetLocalRevocationInformation::<Identity, Impl, OFFSET>,
            SigningCertificateTemplate: SigningCertificateTemplate::<Identity, Impl, OFFSET>,
            SetSigningCertificateTemplate: SetSigningCertificateTemplate::<Identity, Impl, OFFSET>,
            CAConfig: CAConfig::<Identity, Impl, OFFSET>,
            SetCAConfig: SetCAConfig::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IOCSPCAConfigurationCollection_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn get_Item(this: &Self::This, index: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn get_ItemByName(this: &Self::This, bstridentifier: &::windows_core::BSTR) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn CreateCAConfiguration(this: &Self::This, bstridentifier: &::windows_core::BSTR, varcacert: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IOCSPCAConfiguration>;
    fn DeleteCAConfiguration(this: &Self::This, bstridentifier: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IOCSPCAConfigurationCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOCSPCAConfigurationCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstridentifier: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&bstridentifier)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateCAConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstridentifier: ::std::mem::MaybeUninit<::windows_core::BSTR>, varcacert: super::super::super::System::Variant::VARIANT, ppval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateCAConfiguration(this, ::core::mem::transmute(&bstridentifier), ::core::mem::transmute(&varcacert)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteCAConfiguration<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPCAConfigurationCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstridentifier: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteCAConfiguration(this, ::core::mem::transmute(&bstridentifier)).into())
        }
        IOCSPCAConfigurationCollection_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
            CreateCAConfiguration: CreateCAConfiguration::<Identity, Impl, OFFSET>,
            DeleteCAConfiguration: DeleteCAConfiguration::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IOCSPProperty_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Value(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn SetValue(this: &Self::This, newval: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Modified(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IOCSPProperty {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPProperty_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOCSPProperty {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Value<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Value(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, newval: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetValue(this, ::core::mem::transmute(&newval)).into())
        }
        unsafe extern "system" fn Modified<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPProperty_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Modified(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IOCSPProperty_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Name: Name::<Identity, Impl, OFFSET>,
            Value: Value::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            Modified: Modified::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IOCSPPropertyCollection_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn get_Item(this: &Self::This, index: i32) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn get_ItemByName(this: &Self::This, bstrpropname: &::windows_core::BSTR) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn CreateProperty(this: &Self::This, bstrpropname: &::windows_core::BSTR, pvarpropvalue: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<IOCSPProperty>;
    fn DeleteProperty(this: &Self::This, bstrpropname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromProperties(this: &Self::This, pvarproperties: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn GetAllProperties(this: &Self::This) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IOCSPPropertyCollection {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IOCSPPropertyCollection {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Item<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Item(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpropname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&bstrpropname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpropname: ::std::mem::MaybeUninit<::windows_core::BSTR>, pvarpropvalue: *const super::super::super::System::Variant::VARIANT, ppval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateProperty(this, ::core::mem::transmute(&bstrpropname), ::core::mem::transmute_copy(&pvarpropvalue)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DeleteProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpropname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteProperty(this, ::core::mem::transmute(&bstrpropname)).into())
        }
        unsafe extern "system" fn InitializeFromProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarproperties: *const super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromProperties(this, ::core::mem::transmute_copy(&pvarproperties)).into())
        }
        unsafe extern "system" fn GetAllProperties<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IOCSPPropertyCollection_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvarproperties: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAllProperties(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvarproperties, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IOCSPPropertyCollection_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            get_Item: get_Item::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
            CreateProperty: CreateProperty::<Identity, Impl, OFFSET>,
            DeleteProperty: DeleteProperty::<Identity, Impl, OFFSET>,
            InitializeFromProperties: InitializeFromProperties::<Identity, Impl, OFFSET>,
            GetAllProperties: GetAllProperties::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IObjectId_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn InitializeFromName(this: &Self::This, name: CERTENROLL_OBJECTID) -> ::windows_core::Result<()>;
    fn InitializeFromValue(this: &Self::This, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromAlgorithmName(this: &Self::This, groupid: ObjectIdGroupId, keyflags: ObjectIdPublicKeyFlags, algflags: AlgorithmFlags, stralgorithmname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Name(this: &Self::This) -> ::windows_core::Result<CERTENROLL_OBJECTID>;
    fn FriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetFriendlyName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Value(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetAlgorithmName(this: &Self::This, groupid: ObjectIdGroupId, keyflags: ObjectIdPublicKeyFlags) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IObjectId {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectId {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, name: CERTENROLL_OBJECTID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromName(this, ::core::mem::transmute_copy(&name)).into())
        }
        unsafe extern "system" fn InitializeFromValue<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromValue(this, ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn InitializeFromAlgorithmName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, groupid: ObjectIdGroupId, keyflags: ObjectIdPublicKeyFlags, algflags: AlgorithmFlags, stralgorithmname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromAlgorithmName(this, ::core::mem::transmute_copy(&groupid), ::core::mem::transmute_copy(&keyflags), ::core::mem::transmute_copy(&algflags), ::core::mem::transmute(&stralgorithmname)).into())
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut CERTENROLL_OBJECTID) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFriendlyName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Value<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Value(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAlgorithmName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, groupid: ObjectIdGroupId, keyflags: ObjectIdPublicKeyFlags, pstralgorithmname: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAlgorithmName(this, ::core::mem::transmute_copy(&groupid), ::core::mem::transmute_copy(&keyflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstralgorithmname, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IObjectId_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromName: InitializeFromName::<Identity, Impl, OFFSET>,
            InitializeFromValue: InitializeFromValue::<Identity, Impl, OFFSET>,
            InitializeFromAlgorithmName: InitializeFromAlgorithmName::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            FriendlyName: FriendlyName::<Identity, Impl, OFFSET>,
            SetFriendlyName: SetFriendlyName::<Identity, Impl, OFFSET>,
            Value: Value::<Identity, Impl, OFFSET>,
            GetAlgorithmName: GetAlgorithmName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IObjectIds_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IObjectId>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddRange(this: &Self::This, pvalue: ::core::option::Option<&IObjectIds>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IObjectIds {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IObjectIds {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn AddRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IObjectIds_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRange(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        IObjectIds_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            AddRange: AddRange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IPolicyQualifier_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn InitializeEncode(this: &Self::This, strqualifier: &::windows_core::BSTR, r#type: PolicyQualifierType) -> ::windows_core::Result<()>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn Qualifier(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Type(this: &Self::This) -> ::windows_core::Result<PolicyQualifierType>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IPolicyQualifier {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifier_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPolicyQualifier {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strqualifier: ::std::mem::MaybeUninit<::windows_core::BSTR>, r#type: PolicyQualifierType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute(&strqualifier), ::core::mem::transmute_copy(&r#type)).into())
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Qualifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Qualifier(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut PolicyQualifierType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IPolicyQualifier_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            Qualifier: Qualifier::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IPolicyQualifiers_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IPolicyQualifier>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IPolicyQualifier>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IPolicyQualifiers {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IPolicyQualifiers {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IPolicyQualifiers_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        IPolicyQualifiers_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ISignerCertificate_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL, verifytype: X509PrivateKeyVerify, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_Certificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn PrivateKey(this: &Self::This) -> ::windows_core::Result<IX509PrivateKey>;
    fn Silent(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSilent(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ParentWindow(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetParentWindow(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn UIContextMessage(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetUIContextMessage(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetPin(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SignatureInformation(this: &Self::This) -> ::windows_core::Result<IX509SignatureInformation>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ISignerCertificate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISignerCertificate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL, verifytype: X509PrivateKeyVerify, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&machinecontext), ::core::mem::transmute_copy(&verifytype), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        unsafe extern "system" fn get_Certificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Certificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PrivateKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Silent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Silent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSilent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSilent(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParentWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParentWindow(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn UIContextMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UIContextMessage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUIContextMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUIContextMessage(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SetPin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPin(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SignatureInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignatureInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISignerCertificate_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            get_Certificate: get_Certificate::<Identity, Impl, OFFSET>,
            PrivateKey: PrivateKey::<Identity, Impl, OFFSET>,
            Silent: Silent::<Identity, Impl, OFFSET>,
            SetSilent: SetSilent::<Identity, Impl, OFFSET>,
            ParentWindow: ParentWindow::<Identity, Impl, OFFSET>,
            SetParentWindow: SetParentWindow::<Identity, Impl, OFFSET>,
            UIContextMessage: UIContextMessage::<Identity, Impl, OFFSET>,
            SetUIContextMessage: SetUIContextMessage::<Identity, Impl, OFFSET>,
            SetPin: SetPin::<Identity, Impl, OFFSET>,
            SignatureInformation: SignatureInformation::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ISignerCertificates_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ISignerCertificate>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn Find(this: &Self::This, psignercert: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ISignerCertificates {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISignerCertificates {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn Find<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISignerCertificates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psignercert: *mut ::core::ffi::c_void, pisignercert: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Find(this, ::windows_core::from_raw_borrowed(&psignercert)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pisignercert, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISignerCertificates_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            Find: Find::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ISmimeCapabilities_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<ISmimeCapability>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&ISmimeCapability>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn AddFromCsp(this: &Self::This, pvalue: ::core::option::Option<&ICspInformation>) -> ::windows_core::Result<()>;
    fn AddAvailableSmimeCapabilities(this: &Self::This, machinecontext: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ISmimeCapabilities {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISmimeCapabilities {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn AddFromCsp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddFromCsp(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn AddAvailableSmimeCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, machinecontext: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddAvailableSmimeCapabilities(this, ::core::mem::transmute_copy(&machinecontext)).into())
        }
        ISmimeCapabilities_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            AddFromCsp: AddFromCsp::<Identity, Impl, OFFSET>,
            AddAvailableSmimeCapabilities: AddAvailableSmimeCapabilities::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait ISmimeCapability_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>, bitcount: i32) -> ::windows_core::Result<()>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn BitCount(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for ISmimeCapability {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapability_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for ISmimeCapability {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, bitcount: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pobjectid), ::core::mem::transmute_copy(&bitcount)).into())
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn BitCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: ISmimeCapability_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BitCount(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        ISmimeCapability_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            BitCount: BitCount::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX500DistinguishedName_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Decode(this: &Self::This, strencodedname: &::windows_core::BSTR, encoding: EncodingType, nameflags: X500NameFlags) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This, strname: &::windows_core::BSTR, nameflags: X500NameFlags) -> ::windows_core::Result<()>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_EncodedName(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX500DistinguishedName {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX500DistinguishedName_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX500DistinguishedName {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Decode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX500DistinguishedName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodedname: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, nameflags: X500NameFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Decode(this, ::core::mem::transmute(&strencodedname), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute_copy(&nameflags)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX500DistinguishedName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, nameflags: X500NameFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Encode(this, ::core::mem::transmute(&strname), ::core::mem::transmute_copy(&nameflags)).into())
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX500DistinguishedName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_EncodedName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX500DistinguishedName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_EncodedName(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX500DistinguishedName_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Decode: Decode::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
            get_EncodedName: get_EncodedName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509Attribute_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509Attribute {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attribute_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509Attribute {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pobjectid), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attribute_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509Attribute_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeArchiveKey_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncode(this: &Self::This, pkey: ::core::option::Option<&IX509PrivateKey>, encoding: EncodingType, strcaxcert: &::windows_core::BSTR, palgorithm: ::core::option::Option<&IObjectId>, encryptionstrength: i32) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_EncryptedKeyBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn EncryptionAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn EncryptionStrength(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeArchiveKey {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKey_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeArchiveKey {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkey: *mut ::core::ffi::c_void, encoding: EncodingType, strcaxcert: ::std::mem::MaybeUninit<::windows_core::BSTR>, palgorithm: *mut ::core::ffi::c_void, encryptionstrength: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pkey), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcaxcert), ::windows_core::from_raw_borrowed(&palgorithm), ::core::mem::transmute_copy(&encryptionstrength)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn get_EncryptedKeyBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_EncryptedKeyBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EncryptionAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncryptionAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EncryptionStrength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncryptionStrength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeArchiveKey_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            get_EncryptedKeyBlob: get_EncryptedKeyBlob::<Identity, Impl, OFFSET>,
            EncryptionAlgorithm: EncryptionAlgorithm::<Identity, Impl, OFFSET>,
            EncryptionStrength: EncryptionStrength::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeArchiveKeyHash_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncodeFromEncryptedKeyBlob(this: &Self::This, encoding: EncodingType, strencryptedkeyblob: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_EncryptedKeyHashBlob(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeArchiveKeyHash {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKeyHash_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeArchiveKeyHash {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncodeFromEncryptedKeyBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKeyHash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencryptedkeyblob: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncodeFromEncryptedKeyBlob(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencryptedkeyblob)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKeyHash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn get_EncryptedKeyHashBlob<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeArchiveKeyHash_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_EncryptedKeyHashBlob(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeArchiveKeyHash_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncodeFromEncryptedKeyBlob: InitializeEncodeFromEncryptedKeyBlob::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            get_EncryptedKeyHashBlob: get_EncryptedKeyHashBlob::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeClientId_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncode(this: &Self::This, clientid: RequestClientInfoClientId, strmachinednsname: &::windows_core::BSTR, strusersamname: &::windows_core::BSTR, strprocessname: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ClientId(this: &Self::This) -> ::windows_core::Result<RequestClientInfoClientId>;
    fn MachineDnsName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn UserSamName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ProcessName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeClientId {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeClientId {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, clientid: RequestClientInfoClientId, strmachinednsname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strusersamname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strprocessname: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&clientid), ::core::mem::transmute(&strmachinednsname), ::core::mem::transmute(&strusersamname), ::core::mem::transmute(&strprocessname)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn ClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut RequestClientInfoClientId) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ClientId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MachineDnsName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MachineDnsName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn UserSamName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UserSamName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProcessName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeClientId_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProcessName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeClientId_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            ClientId: ClientId::<Identity, Impl, OFFSET>,
            MachineDnsName: MachineDnsName::<Identity, Impl, OFFSET>,
            UserSamName: UserSamName::<Identity, Impl, OFFSET>,
            ProcessName: ProcessName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeCspProvider_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncode(this: &Self::This, keyspec: X509KeySpec, strprovidername: &::windows_core::BSTR, encoding: EncodingType, strsignature: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn KeySpec(this: &Self::This) -> ::windows_core::Result<X509KeySpec>;
    fn ProviderName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_Signature(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeCspProvider {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeCspProvider_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeCspProvider {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeCspProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keyspec: X509KeySpec, strprovidername: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, strsignature: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&keyspec), ::core::mem::transmute(&strprovidername), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strsignature)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeCspProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn KeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeCspProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509KeySpec) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySpec(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeCspProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Signature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeCspProvider_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Signature(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeCspProvider_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            KeySpec: KeySpec::<Identity, Impl, OFFSET>,
            ProviderName: ProviderName::<Identity, Impl, OFFSET>,
            get_Signature: get_Signature::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeExtensions_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncode(this: &Self::This, pextensions: ::core::option::Option<&IX509Extensions>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn X509Extensions(this: &Self::This) -> ::windows_core::Result<IX509Extensions>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeExtensions {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeExtensions_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeExtensions {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeExtensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pextensions: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pextensions)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeExtensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn X509Extensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeExtensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509Extensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeExtensions_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            X509Extensions: X509Extensions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeOSVersion_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncode(this: &Self::This, strosversion: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn OSVersion(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeOSVersion {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeOSVersion_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeOSVersion {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeOSVersion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strosversion: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute(&strosversion)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeOSVersion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn OSVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeOSVersion_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OSVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeOSVersion_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            OSVersion: OSVersion::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509AttributeRenewalCertificate_Impl: ::windows_core::BaseImpl + IX509Attribute_Impl {
    fn InitializeEncode(this: &Self::This, encoding: EncodingType, strcert: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_RenewalCertificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509AttributeRenewalCertificate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Attribute);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeRenewalCertificate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509AttributeRenewalCertificate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeRenewalCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strcert: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcert)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeRenewalCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn get_RenewalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509AttributeRenewalCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RenewalCertificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509AttributeRenewalCertificate_Vtbl {
            base__: <IX509Attribute as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            get_RenewalCertificate: get_RenewalCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509Attributes_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IX509Attribute>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IX509Attribute>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509Attributes {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509Attributes {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Attributes_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        IX509Attributes_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequest_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<()>;
    fn ResetForEncode(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetInnerRequest(this: &Self::This, level: InnerRequestLevel) -> ::windows_core::Result<IX509CertificateRequest>;
    fn Type(this: &Self::This) -> ::windows_core::Result<X509RequestType>;
    fn EnrollmentContext(this: &Self::This) -> ::windows_core::Result<X509CertificateEnrollmentContext>;
    fn Silent(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSilent(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ParentWindow(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetParentWindow(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn UIContextMessage(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetUIContextMessage(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SuppressDefaults(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSuppressDefaults(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn get_RenewalCertificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_RenewalCertificate(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ClientId(this: &Self::This) -> ::windows_core::Result<RequestClientInfoClientId>;
    fn SetClientId(this: &Self::This, value: RequestClientInfoClientId) -> ::windows_core::Result<()>;
    fn CspInformations(this: &Self::This) -> ::windows_core::Result<ICspInformations>;
    fn SetCspInformations(this: &Self::This, pvalue: ::core::option::Option<&ICspInformations>) -> ::windows_core::Result<()>;
    fn HashAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetHashAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn AlternateSignatureAlgorithm(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetAlternateSignatureAlgorithm(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequest {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequest {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Encode(this).into())
        }
        unsafe extern "system" fn ResetForEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetForEncode(this).into())
        }
        unsafe extern "system" fn GetInnerRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, level: InnerRequestLevel, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetInnerRequest(this, ::core::mem::transmute_copy(&level)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Type<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509RequestType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Type(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnrollmentContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnrollmentContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Silent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Silent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSilent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSilent(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParentWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParentWindow(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn UIContextMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UIContextMessage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUIContextMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUIContextMessage(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SuppressDefaults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SuppressDefaults(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSuppressDefaults<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSuppressDefaults(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_RenewalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RenewalCertificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_RenewalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_RenewalCertificate(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn ClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut RequestClientInfoClientId) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ClientId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: RequestClientInfoClientId) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClientId(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn CspInformations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspInformations(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCspInformations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCspInformations(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn HashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn AlternateSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlternateSignatureAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAlternateSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlternateSignatureAlgorithm(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequest_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRequest_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
            ResetForEncode: ResetForEncode::<Identity, Impl, OFFSET>,
            GetInnerRequest: GetInnerRequest::<Identity, Impl, OFFSET>,
            Type: Type::<Identity, Impl, OFFSET>,
            EnrollmentContext: EnrollmentContext::<Identity, Impl, OFFSET>,
            Silent: Silent::<Identity, Impl, OFFSET>,
            SetSilent: SetSilent::<Identity, Impl, OFFSET>,
            ParentWindow: ParentWindow::<Identity, Impl, OFFSET>,
            SetParentWindow: SetParentWindow::<Identity, Impl, OFFSET>,
            UIContextMessage: UIContextMessage::<Identity, Impl, OFFSET>,
            SetUIContextMessage: SetUIContextMessage::<Identity, Impl, OFFSET>,
            SuppressDefaults: SuppressDefaults::<Identity, Impl, OFFSET>,
            SetSuppressDefaults: SetSuppressDefaults::<Identity, Impl, OFFSET>,
            get_RenewalCertificate: get_RenewalCertificate::<Identity, Impl, OFFSET>,
            put_RenewalCertificate: put_RenewalCertificate::<Identity, Impl, OFFSET>,
            ClientId: ClientId::<Identity, Impl, OFFSET>,
            SetClientId: SetClientId::<Identity, Impl, OFFSET>,
            CspInformations: CspInformations::<Identity, Impl, OFFSET>,
            SetCspInformations: SetCspInformations::<Identity, Impl, OFFSET>,
            HashAlgorithm: HashAlgorithm::<Identity, Impl, OFFSET>,
            SetHashAlgorithm: SetHashAlgorithm::<Identity, Impl, OFFSET>,
            AlternateSignatureAlgorithm: AlternateSignatureAlgorithm::<Identity, Impl, OFFSET>,
            SetAlternateSignatureAlgorithm: SetAlternateSignatureAlgorithm::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestCertificate_Impl: ::windows_core::BaseImpl + IX509CertificateRequestPkcs10_Impl {
    fn CheckPublicKeySignature(this: &Self::This, ppublickey: ::core::option::Option<&IX509PublicKey>) -> ::windows_core::Result<()>;
    fn Issuer(this: &Self::This) -> ::windows_core::Result<IX500DistinguishedName>;
    fn SetIssuer(this: &Self::This, pvalue: ::core::option::Option<&IX500DistinguishedName>) -> ::windows_core::Result<()>;
    fn NotBefore(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetNotBefore(this: &Self::This, value: f64) -> ::windows_core::Result<()>;
    fn NotAfter(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetNotAfter(this: &Self::This, value: f64) -> ::windows_core::Result<()>;
    fn get_SerialNumber(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_SerialNumber(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SignerCertificate(this: &Self::This) -> ::windows_core::Result<ISignerCertificate>;
    fn SetSignerCertificate(this: &Self::This, pvalue: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestCertificate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestPkcs10);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestCertificate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CheckPublicKeySignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppublickey: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckPublicKeySignature(this, ::windows_core::from_raw_borrowed(&ppublickey)).into())
        }
        unsafe extern "system" fn Issuer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Issuer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIssuer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIssuer(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn NotBefore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NotBefore(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotBefore<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotBefore(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn NotAfter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NotAfter(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNotAfter<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNotAfter(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_SerialNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SerialNumber(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_SerialNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_SerialNumber(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignerCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignerCertificate(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        IX509CertificateRequestCertificate_Vtbl {
            base__: <IX509CertificateRequestPkcs10 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CheckPublicKeySignature: CheckPublicKeySignature::<Identity, Impl, OFFSET>,
            Issuer: Issuer::<Identity, Impl, OFFSET>,
            SetIssuer: SetIssuer::<Identity, Impl, OFFSET>,
            NotBefore: NotBefore::<Identity, Impl, OFFSET>,
            SetNotBefore: SetNotBefore::<Identity, Impl, OFFSET>,
            NotAfter: NotAfter::<Identity, Impl, OFFSET>,
            SetNotAfter: SetNotAfter::<Identity, Impl, OFFSET>,
            get_SerialNumber: get_SerialNumber::<Identity, Impl, OFFSET>,
            put_SerialNumber: put_SerialNumber::<Identity, Impl, OFFSET>,
            SignerCertificate: SignerCertificate::<Identity, Impl, OFFSET>,
            SetSignerCertificate: SetSignerCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestCertificate2_Impl: ::windows_core::BaseImpl + IX509CertificateRequestCertificate_Impl {
    fn InitializeFromTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn InitializeFromPrivateKeyTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, pprivatekey: ::core::option::Option<&IX509PrivateKey>, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn PolicyServer(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentPolicyServer>;
    fn Template(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplate>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestCertificate2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestCertificate);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestCertificate2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn InitializeFromPrivateKeyTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, pprivatekey: *mut ::core::ffi::c_void, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromPrivateKeyTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&pprivatekey), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn PolicyServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppolicyserver: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PolicyServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppolicyserver, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Template<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCertificate2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptemplate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Template(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptemplate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRequestCertificate2_Vtbl {
            base__: <IX509CertificateRequestCertificate as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplate: InitializeFromTemplate::<Identity, Impl, OFFSET>,
            InitializeFromPrivateKeyTemplate: InitializeFromPrivateKeyTemplate::<Identity, Impl, OFFSET>,
            PolicyServer: PolicyServer::<Identity, Impl, OFFSET>,
            Template: Template::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestCmc_Impl: ::windows_core::BaseImpl + IX509CertificateRequestPkcs7_Impl {
    fn InitializeFromInnerRequestTemplateName(this: &Self::This, pinnerrequest: ::core::option::Option<&IX509CertificateRequest>, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn TemplateObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn NullSigned(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn CryptAttributes(this: &Self::This) -> ::windows_core::Result<ICryptAttributes>;
    fn NameValuePairs(this: &Self::This) -> ::windows_core::Result<IX509NameValuePairs>;
    fn X509Extensions(this: &Self::This) -> ::windows_core::Result<IX509Extensions>;
    fn CriticalExtensions(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
    fn SuppressOids(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
    fn TransactionId(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetTransactionId(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn get_SenderNonce(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_SenderNonce(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SignatureInformation(this: &Self::This) -> ::windows_core::Result<IX509SignatureInformation>;
    fn ArchivePrivateKey(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetArchivePrivateKey(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn get_KeyArchivalCertificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_KeyArchivalCertificate(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn EncryptionAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetEncryptionAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn EncryptionStrength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetEncryptionStrength(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn get_EncryptedKeyHash(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SignerCertificates(this: &Self::This) -> ::windows_core::Result<ISignerCertificates>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestCmc {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestPkcs7);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestCmc {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromInnerRequestTemplateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinnerrequest: *mut ::core::ffi::c_void, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromInnerRequestTemplateName(this, ::windows_core::from_raw_borrowed(&pinnerrequest), ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn TemplateObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TemplateObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NullSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NullSigned(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CryptAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CryptAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NameValuePairs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NameValuePairs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn X509Extensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509Extensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CriticalExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CriticalExtensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SuppressOids<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SuppressOids(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TransactionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TransactionId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetTransactionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetTransactionId(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_SenderNonce<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SenderNonce(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_SenderNonce<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_SenderNonce(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SignatureInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignatureInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ArchivePrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ArchivePrivateKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetArchivePrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetArchivePrivateKey(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_KeyArchivalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_KeyArchivalCertificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_KeyArchivalCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_KeyArchivalCertificate(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn EncryptionAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncryptionAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEncryptionAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEncryptionAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn EncryptionStrength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncryptionStrength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEncryptionStrength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEncryptionStrength(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_EncryptedKeyHash<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_EncryptedKeyHash(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SignerCertificates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignerCertificates(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRequestCmc_Vtbl {
            base__: <IX509CertificateRequestPkcs7 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromInnerRequestTemplateName: InitializeFromInnerRequestTemplateName::<Identity, Impl, OFFSET>,
            TemplateObjectId: TemplateObjectId::<Identity, Impl, OFFSET>,
            NullSigned: NullSigned::<Identity, Impl, OFFSET>,
            CryptAttributes: CryptAttributes::<Identity, Impl, OFFSET>,
            NameValuePairs: NameValuePairs::<Identity, Impl, OFFSET>,
            X509Extensions: X509Extensions::<Identity, Impl, OFFSET>,
            CriticalExtensions: CriticalExtensions::<Identity, Impl, OFFSET>,
            SuppressOids: SuppressOids::<Identity, Impl, OFFSET>,
            TransactionId: TransactionId::<Identity, Impl, OFFSET>,
            SetTransactionId: SetTransactionId::<Identity, Impl, OFFSET>,
            get_SenderNonce: get_SenderNonce::<Identity, Impl, OFFSET>,
            put_SenderNonce: put_SenderNonce::<Identity, Impl, OFFSET>,
            SignatureInformation: SignatureInformation::<Identity, Impl, OFFSET>,
            ArchivePrivateKey: ArchivePrivateKey::<Identity, Impl, OFFSET>,
            SetArchivePrivateKey: SetArchivePrivateKey::<Identity, Impl, OFFSET>,
            get_KeyArchivalCertificate: get_KeyArchivalCertificate::<Identity, Impl, OFFSET>,
            put_KeyArchivalCertificate: put_KeyArchivalCertificate::<Identity, Impl, OFFSET>,
            EncryptionAlgorithm: EncryptionAlgorithm::<Identity, Impl, OFFSET>,
            SetEncryptionAlgorithm: SetEncryptionAlgorithm::<Identity, Impl, OFFSET>,
            EncryptionStrength: EncryptionStrength::<Identity, Impl, OFFSET>,
            SetEncryptionStrength: SetEncryptionStrength::<Identity, Impl, OFFSET>,
            get_EncryptedKeyHash: get_EncryptedKeyHash::<Identity, Impl, OFFSET>,
            SignerCertificates: SignerCertificates::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestCmc2_Impl: ::windows_core::BaseImpl + IX509CertificateRequestCmc_Impl {
    fn InitializeFromTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn InitializeFromInnerRequestTemplate(this: &Self::This, pinnerrequest: ::core::option::Option<&IX509CertificateRequest>, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn PolicyServer(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentPolicyServer>;
    fn Template(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplate>;
    fn CheckSignature(this: &Self::This, allowedsignaturetypes: Pkcs10AllowedSignatureTypes) -> ::windows_core::Result<()>;
    fn CheckCertificateSignature(this: &Self::This, psignercertificate: ::core::option::Option<&ISignerCertificate>, validatecertificatechain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestCmc2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestCmc);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestCmc2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn InitializeFromInnerRequestTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinnerrequest: *mut ::core::ffi::c_void, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromInnerRequestTemplate(this, ::windows_core::from_raw_borrowed(&pinnerrequest), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn PolicyServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppolicyserver: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PolicyServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppolicyserver, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Template<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptemplate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Template(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptemplate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CheckSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allowedsignaturetypes: Pkcs10AllowedSignatureTypes) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckSignature(this, ::core::mem::transmute_copy(&allowedsignaturetypes)).into())
        }
        unsafe extern "system" fn CheckCertificateSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestCmc2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, psignercertificate: *mut ::core::ffi::c_void, validatecertificatechain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckCertificateSignature(this, ::windows_core::from_raw_borrowed(&psignercertificate), ::core::mem::transmute_copy(&validatecertificatechain)).into())
        }
        IX509CertificateRequestCmc2_Vtbl {
            base__: <IX509CertificateRequestCmc as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplate: InitializeFromTemplate::<Identity, Impl, OFFSET>,
            InitializeFromInnerRequestTemplate: InitializeFromInnerRequestTemplate::<Identity, Impl, OFFSET>,
            PolicyServer: PolicyServer::<Identity, Impl, OFFSET>,
            Template: Template::<Identity, Impl, OFFSET>,
            CheckSignature: CheckSignature::<Identity, Impl, OFFSET>,
            CheckCertificateSignature: CheckCertificateSignature::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestPkcs10_Impl: ::windows_core::BaseImpl + IX509CertificateRequest_Impl {
    fn InitializeFromTemplateName(this: &Self::This, context: X509CertificateEnrollmentContext, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromPrivateKey(this: &Self::This, context: X509CertificateEnrollmentContext, pprivatekey: ::core::option::Option<&IX509PrivateKey>, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromPublicKey(this: &Self::This, context: X509CertificateEnrollmentContext, ppublickey: ::core::option::Option<&IX509PublicKey>, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromCertificate(this: &Self::This, context: X509CertificateEnrollmentContext, strcertificate: &::windows_core::BSTR, encoding: EncodingType, inheritoptions: X509RequestInheritOptions) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn CheckSignature(this: &Self::This, allowedsignaturetypes: Pkcs10AllowedSignatureTypes) -> ::windows_core::Result<()>;
    fn IsSmartCard(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn TemplateObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn PublicKey(this: &Self::This) -> ::windows_core::Result<IX509PublicKey>;
    fn PrivateKey(this: &Self::This) -> ::windows_core::Result<IX509PrivateKey>;
    fn NullSigned(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn ReuseKey(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn get_OldCertificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Subject(this: &Self::This) -> ::windows_core::Result<IX500DistinguishedName>;
    fn SetSubject(this: &Self::This, pvalue: ::core::option::Option<&IX500DistinguishedName>) -> ::windows_core::Result<()>;
    fn CspStatuses(this: &Self::This) -> ::windows_core::Result<ICspStatuses>;
    fn SmimeCapabilities(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSmimeCapabilities(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SignatureInformation(this: &Self::This) -> ::windows_core::Result<IX509SignatureInformation>;
    fn KeyContainerNamePrefix(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetKeyContainerNamePrefix(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CryptAttributes(this: &Self::This) -> ::windows_core::Result<ICryptAttributes>;
    fn X509Extensions(this: &Self::This) -> ::windows_core::Result<IX509Extensions>;
    fn CriticalExtensions(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
    fn SuppressOids(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
    fn get_RawDataToBeSigned(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_Signature(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCspStatuses(this: &Self::This, keyspec: X509KeySpec) -> ::windows_core::Result<ICspStatuses>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestPkcs10 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestPkcs10 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplateName(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn InitializeFromPrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, pprivatekey: *mut ::core::ffi::c_void, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromPrivateKey(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&pprivatekey), ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn InitializeFromPublicKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppublickey: *mut ::core::ffi::c_void, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromPublicKey(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppublickey), ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn InitializeFromCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, inheritoptions: X509RequestInheritOptions) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromCertificate(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute(&strcertificate), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute_copy(&inheritoptions)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn CheckSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, allowedsignaturetypes: Pkcs10AllowedSignatureTypes) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckSignature(this, ::core::mem::transmute_copy(&allowedsignaturetypes)).into())
        }
        unsafe extern "system" fn IsSmartCard<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsSmartCard(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn TemplateObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TemplateObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PublicKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PublicKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PrivateKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NullSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NullSigned(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ReuseKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReuseKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_OldCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_OldCertificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Subject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Subject(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSubject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSubject(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn CspStatuses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspStatuses(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SmimeCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SmimeCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSmimeCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSmimeCapabilities(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn SignatureInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignatureInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn KeyContainerNamePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeyContainerNamePrefix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetKeyContainerNamePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyContainerNamePrefix(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn CryptAttributes<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CryptAttributes(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn X509Extensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509Extensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CriticalExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CriticalExtensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SuppressOids<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SuppressOids(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawDataToBeSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawDataToBeSigned(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Signature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Signature(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCspStatuses<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, keyspec: X509KeySpec, ppcspstatuses: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCspStatuses(this, ::core::mem::transmute_copy(&keyspec)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcspstatuses, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRequestPkcs10_Vtbl {
            base__: <IX509CertificateRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplateName: InitializeFromTemplateName::<Identity, Impl, OFFSET>,
            InitializeFromPrivateKey: InitializeFromPrivateKey::<Identity, Impl, OFFSET>,
            InitializeFromPublicKey: InitializeFromPublicKey::<Identity, Impl, OFFSET>,
            InitializeFromCertificate: InitializeFromCertificate::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            CheckSignature: CheckSignature::<Identity, Impl, OFFSET>,
            IsSmartCard: IsSmartCard::<Identity, Impl, OFFSET>,
            TemplateObjectId: TemplateObjectId::<Identity, Impl, OFFSET>,
            PublicKey: PublicKey::<Identity, Impl, OFFSET>,
            PrivateKey: PrivateKey::<Identity, Impl, OFFSET>,
            NullSigned: NullSigned::<Identity, Impl, OFFSET>,
            ReuseKey: ReuseKey::<Identity, Impl, OFFSET>,
            get_OldCertificate: get_OldCertificate::<Identity, Impl, OFFSET>,
            Subject: Subject::<Identity, Impl, OFFSET>,
            SetSubject: SetSubject::<Identity, Impl, OFFSET>,
            CspStatuses: CspStatuses::<Identity, Impl, OFFSET>,
            SmimeCapabilities: SmimeCapabilities::<Identity, Impl, OFFSET>,
            SetSmimeCapabilities: SetSmimeCapabilities::<Identity, Impl, OFFSET>,
            SignatureInformation: SignatureInformation::<Identity, Impl, OFFSET>,
            KeyContainerNamePrefix: KeyContainerNamePrefix::<Identity, Impl, OFFSET>,
            SetKeyContainerNamePrefix: SetKeyContainerNamePrefix::<Identity, Impl, OFFSET>,
            CryptAttributes: CryptAttributes::<Identity, Impl, OFFSET>,
            X509Extensions: X509Extensions::<Identity, Impl, OFFSET>,
            CriticalExtensions: CriticalExtensions::<Identity, Impl, OFFSET>,
            SuppressOids: SuppressOids::<Identity, Impl, OFFSET>,
            get_RawDataToBeSigned: get_RawDataToBeSigned::<Identity, Impl, OFFSET>,
            get_Signature: get_Signature::<Identity, Impl, OFFSET>,
            GetCspStatuses: GetCspStatuses::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestPkcs10V2_Impl: ::windows_core::BaseImpl + IX509CertificateRequestPkcs10_Impl {
    fn InitializeFromTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn InitializeFromPrivateKeyTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, pprivatekey: ::core::option::Option<&IX509PrivateKey>, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn InitializeFromPublicKeyTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, ppublickey: ::core::option::Option<&IX509PublicKey>, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn PolicyServer(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentPolicyServer>;
    fn Template(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplate>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestPkcs10V2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestPkcs10);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestPkcs10V2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn InitializeFromPrivateKeyTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, pprivatekey: *mut ::core::ffi::c_void, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromPrivateKeyTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&pprivatekey), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn InitializeFromPublicKeyTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppublickey: *mut ::core::ffi::c_void, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromPublicKeyTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppublickey), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn PolicyServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppolicyserver: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PolicyServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppolicyserver, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Template<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptemplate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Template(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptemplate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRequestPkcs10V2_Vtbl {
            base__: <IX509CertificateRequestPkcs10 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplate: InitializeFromTemplate::<Identity, Impl, OFFSET>,
            InitializeFromPrivateKeyTemplate: InitializeFromPrivateKeyTemplate::<Identity, Impl, OFFSET>,
            InitializeFromPublicKeyTemplate: InitializeFromPublicKeyTemplate::<Identity, Impl, OFFSET>,
            PolicyServer: PolicyServer::<Identity, Impl, OFFSET>,
            Template: Template::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestPkcs10V3_Impl: ::windows_core::BaseImpl + IX509CertificateRequestPkcs10V2_Impl {
    fn AttestPrivateKey(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetAttestPrivateKey(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn get_AttestationEncryptionCertificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_AttestationEncryptionCertificate(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn EncryptionAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetEncryptionAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn EncryptionStrength(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetEncryptionStrength(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn ChallengePassword(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetChallengePassword(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn NameValuePairs(this: &Self::This) -> ::windows_core::Result<IX509NameValuePairs>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestPkcs10V3 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestPkcs10V2);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestPkcs10V3 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AttestPrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AttestPrivateKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAttestPrivateKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAttestPrivateKey(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn get_AttestationEncryptionCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_AttestationEncryptionCertificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_AttestationEncryptionCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_AttestationEncryptionCertificate(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn EncryptionAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncryptionAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEncryptionAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEncryptionAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn EncryptionStrength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EncryptionStrength(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetEncryptionStrength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetEncryptionStrength(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ChallengePassword<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ChallengePassword(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetChallengePassword<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetChallengePassword(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn NameValuePairs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V3_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NameValuePairs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRequestPkcs10V3_Vtbl {
            base__: <IX509CertificateRequestPkcs10V2 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AttestPrivateKey: AttestPrivateKey::<Identity, Impl, OFFSET>,
            SetAttestPrivateKey: SetAttestPrivateKey::<Identity, Impl, OFFSET>,
            get_AttestationEncryptionCertificate: get_AttestationEncryptionCertificate::<Identity, Impl, OFFSET>,
            put_AttestationEncryptionCertificate: put_AttestationEncryptionCertificate::<Identity, Impl, OFFSET>,
            EncryptionAlgorithm: EncryptionAlgorithm::<Identity, Impl, OFFSET>,
            SetEncryptionAlgorithm: SetEncryptionAlgorithm::<Identity, Impl, OFFSET>,
            EncryptionStrength: EncryptionStrength::<Identity, Impl, OFFSET>,
            SetEncryptionStrength: SetEncryptionStrength::<Identity, Impl, OFFSET>,
            ChallengePassword: ChallengePassword::<Identity, Impl, OFFSET>,
            SetChallengePassword: SetChallengePassword::<Identity, Impl, OFFSET>,
            NameValuePairs: NameValuePairs::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestPkcs10V4_Impl: ::windows_core::BaseImpl + IX509CertificateRequestPkcs10V3_Impl {
    fn ClaimType(this: &Self::This) -> ::windows_core::Result<KeyAttestationClaimType>;
    fn SetClaimType(this: &Self::This, value: KeyAttestationClaimType) -> ::windows_core::Result<()>;
    fn AttestPrivateKeyPreferred(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetAttestPrivateKeyPreferred(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestPkcs10V4 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestPkcs10V3);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V4_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestPkcs10V4 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ClaimType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut KeyAttestationClaimType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ClaimType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetClaimType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: KeyAttestationClaimType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetClaimType(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn AttestPrivateKeyPreferred<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AttestPrivateKeyPreferred(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAttestPrivateKeyPreferred<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs10V4_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAttestPrivateKeyPreferred(this, ::core::mem::transmute_copy(&value)).into())
        }
        IX509CertificateRequestPkcs10V4_Vtbl {
            base__: <IX509CertificateRequestPkcs10V3 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ClaimType: ClaimType::<Identity, Impl, OFFSET>,
            SetClaimType: SetClaimType::<Identity, Impl, OFFSET>,
            AttestPrivateKeyPreferred: AttestPrivateKeyPreferred::<Identity, Impl, OFFSET>,
            SetAttestPrivateKeyPreferred: SetAttestPrivateKeyPreferred::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestPkcs7_Impl: ::windows_core::BaseImpl + IX509CertificateRequest_Impl {
    fn InitializeFromTemplateName(this: &Self::This, context: X509CertificateEnrollmentContext, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromCertificate(this: &Self::This, context: X509CertificateEnrollmentContext, renewalrequest: super::super::super::Foundation::VARIANT_BOOL, strcertificate: &::windows_core::BSTR, encoding: EncodingType, inheritoptions: X509RequestInheritOptions) -> ::windows_core::Result<()>;
    fn InitializeFromInnerRequest(this: &Self::This, pinnerrequest: ::core::option::Option<&IX509CertificateRequest>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn RequesterName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetRequesterName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SignerCertificate(this: &Self::This) -> ::windows_core::Result<ISignerCertificate>;
    fn SetSignerCertificate(this: &Self::This, pvalue: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestPkcs7 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequest);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestPkcs7 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplateName(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn InitializeFromCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, renewalrequest: super::super::super::Foundation::VARIANT_BOOL, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, inheritoptions: X509RequestInheritOptions) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromCertificate(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&renewalrequest), ::core::mem::transmute(&strcertificate), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute_copy(&inheritoptions)).into())
        }
        unsafe extern "system" fn InitializeFromInnerRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pinnerrequest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromInnerRequest(this, ::windows_core::from_raw_borrowed(&pinnerrequest)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn RequesterName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequesterName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRequesterName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRequesterName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignerCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignerCertificate(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        IX509CertificateRequestPkcs7_Vtbl {
            base__: <IX509CertificateRequest as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplateName: InitializeFromTemplateName::<Identity, Impl, OFFSET>,
            InitializeFromCertificate: InitializeFromCertificate::<Identity, Impl, OFFSET>,
            InitializeFromInnerRequest: InitializeFromInnerRequest::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            RequesterName: RequesterName::<Identity, Impl, OFFSET>,
            SetRequesterName: SetRequesterName::<Identity, Impl, OFFSET>,
            SignerCertificate: SignerCertificate::<Identity, Impl, OFFSET>,
            SetSignerCertificate: SetSignerCertificate::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRequestPkcs7V2_Impl: ::windows_core::BaseImpl + IX509CertificateRequestPkcs7_Impl {
    fn InitializeFromTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn PolicyServer(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentPolicyServer>;
    fn Template(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplate>;
    fn CheckCertificateSignature(this: &Self::This, validatecertificatechain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRequestPkcs7V2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509CertificateRequestPkcs7);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7V2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRequestPkcs7V2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn PolicyServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppolicyserver: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PolicyServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppolicyserver, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Template<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptemplate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Template(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptemplate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CheckCertificateSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRequestPkcs7V2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, validatecertificatechain: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckCertificateSignature(this, ::core::mem::transmute_copy(&validatecertificatechain)).into())
        }
        IX509CertificateRequestPkcs7V2_Vtbl {
            base__: <IX509CertificateRequestPkcs7 as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplate: InitializeFromTemplate::<Identity, Impl, OFFSET>,
            PolicyServer: PolicyServer::<Identity, Impl, OFFSET>,
            Template: Template::<Identity, Impl, OFFSET>,
            CheckCertificateSignature: CheckCertificateSignature::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRevocationList_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, strencodeddata: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn Encode(this: &Self::This) -> ::windows_core::Result<()>;
    fn ResetForEncode(this: &Self::This) -> ::windows_core::Result<()>;
    fn CheckPublicKeySignature(this: &Self::This, ppublickey: ::core::option::Option<&IX509PublicKey>) -> ::windows_core::Result<()>;
    fn CheckSignature(this: &Self::This) -> ::windows_core::Result<()>;
    fn Issuer(this: &Self::This) -> ::windows_core::Result<IX500DistinguishedName>;
    fn SetIssuer(this: &Self::This, pvalue: ::core::option::Option<&IX500DistinguishedName>) -> ::windows_core::Result<()>;
    fn ThisUpdate(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetThisUpdate(this: &Self::This, value: f64) -> ::windows_core::Result<()>;
    fn NextUpdate(this: &Self::This) -> ::windows_core::Result<f64>;
    fn SetNextUpdate(this: &Self::This, value: f64) -> ::windows_core::Result<()>;
    fn X509CRLEntries(this: &Self::This) -> ::windows_core::Result<IX509CertificateRevocationListEntries>;
    fn X509Extensions(this: &Self::This) -> ::windows_core::Result<IX509Extensions>;
    fn CriticalExtensions(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
    fn SignerCertificate(this: &Self::This) -> ::windows_core::Result<ISignerCertificate>;
    fn SetSignerCertificate(this: &Self::This, pvalue: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<()>;
    fn get_CRLNumber(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_CRLNumber(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CAVersion(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetCAVersion(this: &Self::This, pvalue: i32) -> ::windows_core::Result<()>;
    fn BaseCRL(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn NullSigned(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn HashAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetHashAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn AlternateSignatureAlgorithm(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetAlternateSignatureAlgorithm(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SignatureInformation(this: &Self::This) -> ::windows_core::Result<IX509SignatureInformation>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_RawDataToBeSigned(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_Signature(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRevocationList {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRevocationList {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute(&strencodeddata), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn Encode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Encode(this).into())
        }
        unsafe extern "system" fn ResetForEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::ResetForEncode(this).into())
        }
        unsafe extern "system" fn CheckPublicKeySignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppublickey: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckPublicKeySignature(this, ::windows_core::from_raw_borrowed(&ppublickey)).into())
        }
        unsafe extern "system" fn CheckSignature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::CheckSignature(this).into())
        }
        unsafe extern "system" fn Issuer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Issuer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetIssuer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetIssuer(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn ThisUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ThisUpdate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetThisUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetThisUpdate(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn NextUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NextUpdate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNextUpdate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNextUpdate(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn X509CRLEntries<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509CRLEntries(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn X509Extensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509Extensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CriticalExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CriticalExtensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignerCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignerCertificate(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn get_CRLNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_CRLNumber(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_CRLNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_CRLNumber(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn CAVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCAVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCAVersion(this, ::core::mem::transmute_copy(&pvalue)).into())
        }
        unsafe extern "system" fn BaseCRL<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::BaseCRL(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NullSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NullSigned(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn HashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn AlternateSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlternateSignatureAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAlternateSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlternateSignatureAlgorithm(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn SignatureInformation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignatureInformation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawDataToBeSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawDataToBeSigned(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Signature<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationList_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Signature(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRevocationList_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            Encode: Encode::<Identity, Impl, OFFSET>,
            ResetForEncode: ResetForEncode::<Identity, Impl, OFFSET>,
            CheckPublicKeySignature: CheckPublicKeySignature::<Identity, Impl, OFFSET>,
            CheckSignature: CheckSignature::<Identity, Impl, OFFSET>,
            Issuer: Issuer::<Identity, Impl, OFFSET>,
            SetIssuer: SetIssuer::<Identity, Impl, OFFSET>,
            ThisUpdate: ThisUpdate::<Identity, Impl, OFFSET>,
            SetThisUpdate: SetThisUpdate::<Identity, Impl, OFFSET>,
            NextUpdate: NextUpdate::<Identity, Impl, OFFSET>,
            SetNextUpdate: SetNextUpdate::<Identity, Impl, OFFSET>,
            X509CRLEntries: X509CRLEntries::<Identity, Impl, OFFSET>,
            X509Extensions: X509Extensions::<Identity, Impl, OFFSET>,
            CriticalExtensions: CriticalExtensions::<Identity, Impl, OFFSET>,
            SignerCertificate: SignerCertificate::<Identity, Impl, OFFSET>,
            SetSignerCertificate: SetSignerCertificate::<Identity, Impl, OFFSET>,
            get_CRLNumber: get_CRLNumber::<Identity, Impl, OFFSET>,
            put_CRLNumber: put_CRLNumber::<Identity, Impl, OFFSET>,
            CAVersion: CAVersion::<Identity, Impl, OFFSET>,
            SetCAVersion: SetCAVersion::<Identity, Impl, OFFSET>,
            BaseCRL: BaseCRL::<Identity, Impl, OFFSET>,
            NullSigned: NullSigned::<Identity, Impl, OFFSET>,
            HashAlgorithm: HashAlgorithm::<Identity, Impl, OFFSET>,
            SetHashAlgorithm: SetHashAlgorithm::<Identity, Impl, OFFSET>,
            AlternateSignatureAlgorithm: AlternateSignatureAlgorithm::<Identity, Impl, OFFSET>,
            SetAlternateSignatureAlgorithm: SetAlternateSignatureAlgorithm::<Identity, Impl, OFFSET>,
            SignatureInformation: SignatureInformation::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
            get_RawDataToBeSigned: get_RawDataToBeSigned::<Identity, Impl, OFFSET>,
            get_Signature: get_Signature::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRevocationListEntries_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IX509CertificateRevocationListEntry>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IX509CertificateRevocationListEntry>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_IndexBySerialNumber(this: &Self::This, encoding: EncodingType, serialnumber: &::windows_core::BSTR) -> ::windows_core::Result<i32>;
    fn AddRange(this: &Self::This, pvalue: ::core::option::Option<&IX509CertificateRevocationListEntries>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRevocationListEntries {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRevocationListEntries {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn get_IndexBySerialNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, serialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_IndexBySerialNumber(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&serialnumber)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntries_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRange(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        IX509CertificateRevocationListEntries_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            get_IndexBySerialNumber: get_IndexBySerialNumber::<Identity, Impl, OFFSET>,
            AddRange: AddRange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateRevocationListEntry_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, encoding: EncodingType, serialnumber: &::windows_core::BSTR, revocationdate: f64) -> ::windows_core::Result<()>;
    fn get_SerialNumber(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn RevocationDate(this: &Self::This) -> ::windows_core::Result<f64>;
    fn RevocationReason(this: &Self::This) -> ::windows_core::Result<CRLRevocationReason>;
    fn SetRevocationReason(this: &Self::This, value: CRLRevocationReason) -> ::windows_core::Result<()>;
    fn X509Extensions(this: &Self::This) -> ::windows_core::Result<IX509Extensions>;
    fn CriticalExtensions(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateRevocationListEntry {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateRevocationListEntry {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, serialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, revocationdate: f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&serialnumber), ::core::mem::transmute_copy(&revocationdate)).into())
        }
        unsafe extern "system" fn get_SerialNumber<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SerialNumber(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RevocationDate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RevocationDate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RevocationReason<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut CRLRevocationReason) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RevocationReason(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetRevocationReason<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: CRLRevocationReason) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetRevocationReason(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn X509Extensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509Extensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CriticalExtensions<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateRevocationListEntry_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CriticalExtensions(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateRevocationListEntry_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            get_SerialNumber: get_SerialNumber::<Identity, Impl, OFFSET>,
            RevocationDate: RevocationDate::<Identity, Impl, OFFSET>,
            RevocationReason: RevocationReason::<Identity, Impl, OFFSET>,
            SetRevocationReason: SetRevocationReason::<Identity, Impl, OFFSET>,
            X509Extensions: X509Extensions::<Identity, Impl, OFFSET>,
            CriticalExtensions: CriticalExtensions::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateTemplate_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_Property(this: &Self::This, property: EnrollmentTemplateProperty) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateTemplate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateTemplate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_Property<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, property: EnrollmentTemplateProperty, pvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Property(this, ::core::mem::transmute_copy(&property)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateTemplate_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_Property: get_Property::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateTemplateWritable_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pvalue: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn Commit(this: &Self::This, commitflags: CommitTemplateFlags, strservercontext: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_Property(this: &Self::This, property: EnrollmentTemplateProperty) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn put_Property(this: &Self::This, property: EnrollmentTemplateProperty, value: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Template(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplate>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateTemplateWritable {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplateWritable_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateTemplateWritable {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplateWritable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn Commit<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplateWritable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, commitflags: CommitTemplateFlags, strservercontext: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Commit(this, ::core::mem::transmute_copy(&commitflags), ::core::mem::transmute(&strservercontext)).into())
        }
        unsafe extern "system" fn get_Property<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplateWritable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, property: EnrollmentTemplateProperty, pvalue: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Property(this, ::core::mem::transmute_copy(&property)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Property<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplateWritable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, property: EnrollmentTemplateProperty, value: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Property(this, ::core::mem::transmute_copy(&property), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Template<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplateWritable_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Template(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateTemplateWritable_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Commit: Commit::<Identity, Impl, OFFSET>,
            get_Property: get_Property::<Identity, Impl, OFFSET>,
            put_Property: put_Property::<Identity, Impl, OFFSET>,
            Template: Template::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509CertificateTemplates_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IX509CertificateTemplate>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_ItemByName(this: &Self::This, bstrname: &::windows_core::BSTR) -> ::windows_core::Result<IX509CertificateTemplate>;
    fn get_ItemByOid(this: &Self::This, poid: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<IX509CertificateTemplate>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509CertificateTemplates {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509CertificateTemplates {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn get_ItemByName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrname: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByName(this, ::core::mem::transmute(&bstrname)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_ItemByOid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509CertificateTemplates_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, poid: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByOid(this, ::windows_core::from_raw_borrowed(&poid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509CertificateTemplates_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            get_ItemByName: get_ItemByName::<Identity, Impl, OFFSET>,
            get_ItemByOid: get_ItemByOid::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509EndorsementKey_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn ProviderName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetProviderName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Length(this: &Self::This) -> ::windows_core::Result<i32>;
    fn Opened(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn AddCertificate(this: &Self::This, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RemoveCertificate(this: &Self::This, encoding: EncodingType, strcertificate: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn GetCertificateByIndex(this: &Self::This, manufactureronly: super::super::super::Foundation::VARIANT_BOOL, dwindex: i32, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCertificateCount(this: &Self::This, manufactureronly: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<i32>;
    fn ExportPublicKey(this: &Self::This) -> ::windows_core::Result<IX509PublicKey>;
    fn Open(this: &Self::This) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509EndorsementKey {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509EndorsementKey {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn ProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Length<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Length(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Opened<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Opened(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddCertificate(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        unsafe extern "system" fn RemoveCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strcertificate: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveCertificate(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strcertificate)).into())
        }
        unsafe extern "system" fn GetCertificateByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, manufactureronly: super::super::super::Foundation::VARIANT_BOOL, dwindex: i32, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateByIndex(this, ::core::mem::transmute_copy(&manufactureronly), ::core::mem::transmute_copy(&dwindex), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCertificateCount<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, manufactureronly: super::super::super::Foundation::VARIANT_BOOL, pcount: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCertificateCount(this, ::core::mem::transmute_copy(&manufactureronly)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pcount, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ExportPublicKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppublickey: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ExportPublicKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppublickey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Open<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Open(this).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EndorsementKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        IX509EndorsementKey_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            ProviderName: ProviderName::<Identity, Impl, OFFSET>,
            SetProviderName: SetProviderName::<Identity, Impl, OFFSET>,
            Length: Length::<Identity, Impl, OFFSET>,
            Opened: Opened::<Identity, Impl, OFFSET>,
            AddCertificate: AddCertificate::<Identity, Impl, OFFSET>,
            RemoveCertificate: RemoveCertificate::<Identity, Impl, OFFSET>,
            GetCertificateByIndex: GetCertificateByIndex::<Identity, Impl, OFFSET>,
            GetCertificateCount: GetCertificateCount::<Identity, Impl, OFFSET>,
            ExportPublicKey: ExportPublicKey::<Identity, Impl, OFFSET>,
            Open: Open::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509Enrollment_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
    fn InitializeFromTemplateName(this: &Self::This, context: X509CertificateEnrollmentContext, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeFromRequest(this: &Self::This, prequest: ::core::option::Option<&IX509CertificateRequest>) -> ::windows_core::Result<()>;
    fn CreateRequest(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Enroll(this: &Self::This) -> ::windows_core::Result<()>;
    fn InstallResponse(this: &Self::This, restrictions: InstallResponseRestrictionFlags, strresponse: &::windows_core::BSTR, encoding: EncodingType, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CreatePFX(this: &Self::This, strpassword: &::windows_core::BSTR, exportoptions: PFXExportOptions, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Request(this: &Self::This) -> ::windows_core::Result<IX509CertificateRequest>;
    fn Silent(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSilent(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ParentWindow(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetParentWindow(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn NameValuePairs(this: &Self::This) -> ::windows_core::Result<IX509NameValuePairs>;
    fn EnrollmentContext(this: &Self::This) -> ::windows_core::Result<X509CertificateEnrollmentContext>;
    fn Status(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentStatus>;
    fn get_Certificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_Response(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CertificateFriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCertificateFriendlyName(this: &Self::This, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CertificateDescription(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCertificateDescription(this: &Self::This, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn RequestId(this: &Self::This) -> ::windows_core::Result<i32>;
    fn CAConfigString(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509Enrollment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509Enrollment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn InitializeFromTemplateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplateName(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn InitializeFromRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prequest: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromRequest(this, ::windows_core::from_raw_borrowed(&prequest)).into())
        }
        unsafe extern "system" fn CreateRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateRequest(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Enroll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Enroll(this).into())
        }
        unsafe extern "system" fn InstallResponse<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, restrictions: InstallResponseRestrictionFlags, strresponse: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InstallResponse(this, ::core::mem::transmute_copy(&restrictions), ::core::mem::transmute(&strresponse), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn CreatePFX<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>, exportoptions: PFXExportOptions, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreatePFX(this, ::core::mem::transmute(&strpassword), ::core::mem::transmute_copy(&exportoptions), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Request(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Silent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Silent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSilent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSilent(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParentWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParentWindow(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn NameValuePairs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NameValuePairs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn EnrollmentContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnrollmentContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Status<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Status(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Certificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Certificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Response<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Response(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CertificateFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CertificateFriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCertificateFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCertificateFriendlyName(this, ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn CertificateDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CertificateDescription(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCertificateDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCertificateDescription(this, ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn RequestId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CAConfigString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CAConfigString(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509Enrollment_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeFromTemplateName: InitializeFromTemplateName::<Identity, Impl, OFFSET>,
            InitializeFromRequest: InitializeFromRequest::<Identity, Impl, OFFSET>,
            CreateRequest: CreateRequest::<Identity, Impl, OFFSET>,
            Enroll: Enroll::<Identity, Impl, OFFSET>,
            InstallResponse: InstallResponse::<Identity, Impl, OFFSET>,
            CreatePFX: CreatePFX::<Identity, Impl, OFFSET>,
            Request: Request::<Identity, Impl, OFFSET>,
            Silent: Silent::<Identity, Impl, OFFSET>,
            SetSilent: SetSilent::<Identity, Impl, OFFSET>,
            ParentWindow: ParentWindow::<Identity, Impl, OFFSET>,
            SetParentWindow: SetParentWindow::<Identity, Impl, OFFSET>,
            NameValuePairs: NameValuePairs::<Identity, Impl, OFFSET>,
            EnrollmentContext: EnrollmentContext::<Identity, Impl, OFFSET>,
            Status: Status::<Identity, Impl, OFFSET>,
            get_Certificate: get_Certificate::<Identity, Impl, OFFSET>,
            get_Response: get_Response::<Identity, Impl, OFFSET>,
            CertificateFriendlyName: CertificateFriendlyName::<Identity, Impl, OFFSET>,
            SetCertificateFriendlyName: SetCertificateFriendlyName::<Identity, Impl, OFFSET>,
            CertificateDescription: CertificateDescription::<Identity, Impl, OFFSET>,
            SetCertificateDescription: SetCertificateDescription::<Identity, Impl, OFFSET>,
            RequestId: RequestId::<Identity, Impl, OFFSET>,
            CAConfigString: CAConfigString::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509Enrollment2_Impl: ::windows_core::BaseImpl + IX509Enrollment_Impl {
    fn InitializeFromTemplate(this: &Self::This, context: X509CertificateEnrollmentContext, ppolicyserver: ::core::option::Option<&IX509EnrollmentPolicyServer>, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<()>;
    fn InstallResponse2(this: &Self::This, restrictions: InstallResponseRestrictionFlags, strresponse: &::windows_core::BSTR, encoding: EncodingType, strpassword: &::windows_core::BSTR, strenrollmentpolicyserverurl: &::windows_core::BSTR, strenrollmentpolicyserverid: &::windows_core::BSTR, enrollmentpolicyserverflags: PolicyServerUrlFlags, authflags: X509EnrollmentAuthFlags) -> ::windows_core::Result<()>;
    fn PolicyServer(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentPolicyServer>;
    fn Template(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplate>;
    fn RequestIdString(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509Enrollment2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Enrollment);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509Enrollment2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeFromTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, ppolicyserver: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromTemplate(this, ::core::mem::transmute_copy(&context), ::windows_core::from_raw_borrowed(&ppolicyserver), ::windows_core::from_raw_borrowed(&ptemplate)).into())
        }
        unsafe extern "system" fn InstallResponse2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, restrictions: InstallResponseRestrictionFlags, strresponse: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>, strenrollmentpolicyserverurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, strenrollmentpolicyserverid: ::std::mem::MaybeUninit<::windows_core::BSTR>, enrollmentpolicyserverflags: PolicyServerUrlFlags, authflags: X509EnrollmentAuthFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InstallResponse2(this, ::core::mem::transmute_copy(&restrictions), ::core::mem::transmute(&strresponse), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strpassword), ::core::mem::transmute(&strenrollmentpolicyserverurl), ::core::mem::transmute(&strenrollmentpolicyserverid), ::core::mem::transmute_copy(&enrollmentpolicyserverflags), ::core::mem::transmute_copy(&authflags)).into())
        }
        unsafe extern "system" fn PolicyServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppolicyserver: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PolicyServer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppolicyserver, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Template<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pptemplate: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Template(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pptemplate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn RequestIdString<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Enrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::RequestIdString(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509Enrollment2_Vtbl {
            base__: <IX509Enrollment as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeFromTemplate: InitializeFromTemplate::<Identity, Impl, OFFSET>,
            InstallResponse2: InstallResponse2::<Identity, Impl, OFFSET>,
            PolicyServer: PolicyServer::<Identity, Impl, OFFSET>,
            Template: Template::<Identity, Impl, OFFSET>,
            RequestIdString: RequestIdString::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509EnrollmentHelper_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn AddPolicyServer(this: &Self::This, strenrollmentpolicyserveruri: &::windows_core::BSTR, strenrollmentpolicyid: &::windows_core::BSTR, enrollmentpolicyserverflags: PolicyServerUrlFlags, authflags: X509EnrollmentAuthFlags, strcredential: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AddEnrollmentServer(this: &Self::This, strenrollmentserveruri: &::windows_core::BSTR, authflags: X509EnrollmentAuthFlags, strcredential: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Enroll(this: &Self::This, strenrollmentpolicyserveruri: &::windows_core::BSTR, strtemplatename: &::windows_core::BSTR, encoding: EncodingType, enrollflags: WebEnrollmentFlags) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Initialize(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509EnrollmentHelper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentHelper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509EnrollmentHelper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AddPolicyServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strenrollmentpolicyserveruri: ::std::mem::MaybeUninit<::windows_core::BSTR>, strenrollmentpolicyid: ::std::mem::MaybeUninit<::windows_core::BSTR>, enrollmentpolicyserverflags: PolicyServerUrlFlags, authflags: X509EnrollmentAuthFlags, strcredential: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddPolicyServer(this, ::core::mem::transmute(&strenrollmentpolicyserveruri), ::core::mem::transmute(&strenrollmentpolicyid), ::core::mem::transmute_copy(&enrollmentpolicyserverflags), ::core::mem::transmute_copy(&authflags), ::core::mem::transmute(&strcredential), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn AddEnrollmentServer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strenrollmentserveruri: ::std::mem::MaybeUninit<::windows_core::BSTR>, authflags: X509EnrollmentAuthFlags, strcredential: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddEnrollmentServer(this, ::core::mem::transmute(&strenrollmentserveruri), ::core::mem::transmute_copy(&authflags), ::core::mem::transmute(&strcredential), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn Enroll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strenrollmentpolicyserveruri: ::std::mem::MaybeUninit<::windows_core::BSTR>, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, enrollflags: WebEnrollmentFlags, pstrcertificate: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Enroll(this, ::core::mem::transmute(&strenrollmentpolicyserveruri), ::core::mem::transmute(&strtemplatename), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute_copy(&enrollflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrcertificate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&context)).into())
        }
        IX509EnrollmentHelper_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AddPolicyServer: AddPolicyServer::<Identity, Impl, OFFSET>,
            AddEnrollmentServer: AddEnrollmentServer::<Identity, Impl, OFFSET>,
            Enroll: Enroll::<Identity, Impl, OFFSET>,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509EnrollmentPolicyServer_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, bstrpolicyserverurl: &::windows_core::BSTR, bstrpolicyserverid: &::windows_core::BSTR, authflags: X509EnrollmentAuthFlags, fisuntrusted: super::super::super::Foundation::VARIANT_BOOL, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
    fn LoadPolicy(this: &Self::This, option: X509EnrollmentPolicyLoadOption) -> ::windows_core::Result<()>;
    fn GetTemplates(this: &Self::This) -> ::windows_core::Result<IX509CertificateTemplates>;
    fn GetCAsForTemplate(this: &Self::This, ptemplate: ::core::option::Option<&IX509CertificateTemplate>) -> ::windows_core::Result<ICertificationAuthorities>;
    fn GetCAs(this: &Self::This) -> ::windows_core::Result<ICertificationAuthorities>;
    fn Validate(this: &Self::This) -> ::windows_core::Result<()>;
    fn GetCustomOids(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
    fn GetNextUpdateTime(this: &Self::This) -> ::windows_core::Result<f64>;
    fn GetLastUpdateTime(this: &Self::This) -> ::windows_core::Result<f64>;
    fn GetPolicyServerUrl(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetPolicyServerId(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetFriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetIsDefaultCEP(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn GetUseClientId(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn GetAllowUnTrustedCA(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn GetCachePath(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetCacheDir(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn GetAuthFlags(this: &Self::This) -> ::windows_core::Result<X509EnrollmentAuthFlags>;
    fn SetCredential(this: &Self::This, hwndparent: i32, flag: X509EnrollmentAuthFlags, strcredential: &::windows_core::BSTR, strpassword: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn QueryChanges(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn InitializeImport(this: &Self::This, val: &super::super::super::System::Variant::VARIANT) -> ::windows_core::Result<()>;
    fn Export(this: &Self::This, exportflags: X509EnrollmentPolicyExportFlags) -> ::windows_core::Result<super::super::super::System::Variant::VARIANT>;
    fn Cost(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCost(this: &Self::This, value: u32) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509EnrollmentPolicyServer {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509EnrollmentPolicyServer {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, bstrpolicyserverurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, bstrpolicyserverid: ::std::mem::MaybeUninit<::windows_core::BSTR>, authflags: X509EnrollmentAuthFlags, fisuntrusted: super::super::super::Foundation::VARIANT_BOOL, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&bstrpolicyserverurl), ::core::mem::transmute(&bstrpolicyserverid), ::core::mem::transmute_copy(&authflags), ::core::mem::transmute_copy(&fisuntrusted), ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn LoadPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, option: X509EnrollmentPolicyLoadOption) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::LoadPolicy(this, ::core::mem::transmute_copy(&option)).into())
        }
        unsafe extern "system" fn GetTemplates<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptemplates: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetTemplates(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ptemplates, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAsForTemplate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptemplate: *mut ::core::ffi::c_void, ppcas: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAsForTemplate(this, ::windows_core::from_raw_borrowed(&ptemplate)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcas, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCAs<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppcas: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCAs(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppcas, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Validate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Validate(this).into())
        }
        unsafe extern "system" fn GetCustomOids<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppobjectids: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCustomOids(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppobjectids, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetNextUpdateTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdate: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetNextUpdateTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetLastUpdateTime<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pdate: *mut f64) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetLastUpdateTime(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdate, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolicyServerUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicyServerUrl(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetPolicyServerId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetPolicyServerId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetFriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetIsDefaultCEP<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetIsDefaultCEP(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetUseClientId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetUseClientId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAllowUnTrustedCA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAllowUnTrustedCA(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCachePath<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCachePath(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetCacheDir<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetCacheDir(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn GetAuthFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509EnrollmentAuthFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetAuthFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCredential<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, hwndparent: i32, flag: X509EnrollmentAuthFlags, strcredential: ::std::mem::MaybeUninit<::windows_core::BSTR>, strpassword: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCredential(this, ::core::mem::transmute_copy(&hwndparent), ::core::mem::transmute_copy(&flag), ::core::mem::transmute(&strcredential), ::core::mem::transmute(&strpassword)).into())
        }
        unsafe extern "system" fn QueryChanges<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::QueryChanges(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn InitializeImport<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, val: super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeImport(this, ::core::mem::transmute(&val)).into())
        }
        unsafe extern "system" fn Export<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, exportflags: X509EnrollmentPolicyExportFlags, pval: *mut super::super::super::System::Variant::VARIANT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Export(this, ::core::mem::transmute_copy(&exportflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Cost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Cost(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentPolicyServer_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCost(this, ::core::mem::transmute_copy(&value)).into())
        }
        IX509EnrollmentPolicyServer_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            LoadPolicy: LoadPolicy::<Identity, Impl, OFFSET>,
            GetTemplates: GetTemplates::<Identity, Impl, OFFSET>,
            GetCAsForTemplate: GetCAsForTemplate::<Identity, Impl, OFFSET>,
            GetCAs: GetCAs::<Identity, Impl, OFFSET>,
            Validate: Validate::<Identity, Impl, OFFSET>,
            GetCustomOids: GetCustomOids::<Identity, Impl, OFFSET>,
            GetNextUpdateTime: GetNextUpdateTime::<Identity, Impl, OFFSET>,
            GetLastUpdateTime: GetLastUpdateTime::<Identity, Impl, OFFSET>,
            GetPolicyServerUrl: GetPolicyServerUrl::<Identity, Impl, OFFSET>,
            GetPolicyServerId: GetPolicyServerId::<Identity, Impl, OFFSET>,
            GetFriendlyName: GetFriendlyName::<Identity, Impl, OFFSET>,
            GetIsDefaultCEP: GetIsDefaultCEP::<Identity, Impl, OFFSET>,
            GetUseClientId: GetUseClientId::<Identity, Impl, OFFSET>,
            GetAllowUnTrustedCA: GetAllowUnTrustedCA::<Identity, Impl, OFFSET>,
            GetCachePath: GetCachePath::<Identity, Impl, OFFSET>,
            GetCacheDir: GetCacheDir::<Identity, Impl, OFFSET>,
            GetAuthFlags: GetAuthFlags::<Identity, Impl, OFFSET>,
            SetCredential: SetCredential::<Identity, Impl, OFFSET>,
            QueryChanges: QueryChanges::<Identity, Impl, OFFSET>,
            InitializeImport: InitializeImport::<Identity, Impl, OFFSET>,
            Export: Export::<Identity, Impl, OFFSET>,
            Cost: Cost::<Identity, Impl, OFFSET>,
            SetCost: SetCost::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509EnrollmentStatus_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn AppendText(this: &Self::This, strtext: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Text(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetText(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Selected(this: &Self::This) -> ::windows_core::Result<EnrollmentSelectionStatus>;
    fn SetSelected(this: &Self::This, value: EnrollmentSelectionStatus) -> ::windows_core::Result<()>;
    fn Display(this: &Self::This) -> ::windows_core::Result<EnrollmentDisplayStatus>;
    fn SetDisplay(this: &Self::This, value: EnrollmentDisplayStatus) -> ::windows_core::Result<()>;
    fn Status(this: &Self::This) -> ::windows_core::Result<EnrollmentEnrollStatus>;
    fn SetStatus(this: &Self::This, value: EnrollmentEnrollStatus) -> ::windows_core::Result<()>;
    fn Error(this: &Self::This) -> ::windows_core::Result<::windows_core::HRESULT>;
    fn SetError(this: &Self::This, value: ::windows_core::HRESULT) -> ::windows_core::Result<()>;
    fn ErrorText(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509EnrollmentStatus {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509EnrollmentStatus {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn AppendText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strtext: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AppendText(this, ::core::mem::transmute(&strtext)).into())
        }
        unsafe extern "system" fn Text<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Text(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetText(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Selected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut EnrollmentSelectionStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Selected(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSelected<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: EnrollmentSelectionStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSelected(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Display<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut EnrollmentDisplayStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Display(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDisplay<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: EnrollmentDisplayStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDisplay(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Status<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut EnrollmentEnrollStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Status(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: EnrollmentEnrollStatus) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStatus(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Error<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Error(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetError<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::windows_core::HRESULT) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetError(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ErrorText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentStatus_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ErrorText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509EnrollmentStatus_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            AppendText: AppendText::<Identity, Impl, OFFSET>,
            Text: Text::<Identity, Impl, OFFSET>,
            SetText: SetText::<Identity, Impl, OFFSET>,
            Selected: Selected::<Identity, Impl, OFFSET>,
            SetSelected: SetSelected::<Identity, Impl, OFFSET>,
            Display: Display::<Identity, Impl, OFFSET>,
            SetDisplay: SetDisplay::<Identity, Impl, OFFSET>,
            Status: Status::<Identity, Impl, OFFSET>,
            SetStatus: SetStatus::<Identity, Impl, OFFSET>,
            Error: Error::<Identity, Impl, OFFSET>,
            SetError: SetError::<Identity, Impl, OFFSET>,
            ErrorText: ErrorText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509EnrollmentWebClassFactory_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn CreateObject(this: &Self::This, strprogid: &::windows_core::BSTR) -> ::windows_core::Result<::windows_core::IUnknown>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509EnrollmentWebClassFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentWebClassFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509EnrollmentWebClassFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509EnrollmentWebClassFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strprogid: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppiunknown: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateObject(this, ::core::mem::transmute(&strprogid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppiunknown, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509EnrollmentWebClassFactory_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateObject: CreateObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509Extension_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ObjectId(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn get_RawData(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Critical(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetCritical(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509Extension {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extension_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509Extension {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pobjectid), ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn ObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ObjectId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_RawData<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_RawData(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Critical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Critical(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCritical<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extension_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCritical(this, ::core::mem::transmute_copy(&value)).into())
        }
        IX509Extension_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            ObjectId: ObjectId::<Identity, Impl, OFFSET>,
            get_RawData: get_RawData::<Identity, Impl, OFFSET>,
            Critical: Critical::<Identity, Impl, OFFSET>,
            SetCritical: SetCritical::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionAlternativeNames_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, pvalue: ::core::option::Option<&IAlternativeNames>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AlternativeNames(this: &Self::This) -> ::windows_core::Result<IAlternativeNames>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionAlternativeNames {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAlternativeNames_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionAlternativeNames {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn AlternativeNames<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAlternativeNames_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlternativeNames(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionAlternativeNames_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            AlternativeNames: AlternativeNames::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionAuthorityKeyIdentifier_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, encoding: EncodingType, strkeyidentifier: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_AuthorityKeyIdentifier(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionAuthorityKeyIdentifier {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAuthorityKeyIdentifier_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionAuthorityKeyIdentifier {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAuthorityKeyIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strkeyidentifier: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strkeyidentifier)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAuthorityKeyIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn get_AuthorityKeyIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionAuthorityKeyIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_AuthorityKeyIdentifier(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionAuthorityKeyIdentifier_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            get_AuthorityKeyIdentifier: get_AuthorityKeyIdentifier::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionBasicConstraints_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, isca: super::super::super::Foundation::VARIANT_BOOL, pathlenconstraint: i32) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn IsCA(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn PathLenConstraint(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionBasicConstraints {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionBasicConstraints_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionBasicConstraints {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionBasicConstraints_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, isca: super::super::super::Foundation::VARIANT_BOOL, pathlenconstraint: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&isca), ::core::mem::transmute_copy(&pathlenconstraint)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionBasicConstraints_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn IsCA<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionBasicConstraints_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::IsCA(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn PathLenConstraint<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionBasicConstraints_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PathLenConstraint(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionBasicConstraints_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            IsCA: IsCA::<Identity, Impl, OFFSET>,
            PathLenConstraint: PathLenConstraint::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionCertificatePolicies_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, pvalue: ::core::option::Option<&ICertificatePolicies>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Policies(this: &Self::This) -> ::windows_core::Result<ICertificatePolicies>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionCertificatePolicies {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionCertificatePolicies_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionCertificatePolicies {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionCertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionCertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn Policies<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionCertificatePolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Policies(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionCertificatePolicies_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            Policies: Policies::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionEnhancedKeyUsage_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, pvalue: ::core::option::Option<&IObjectIds>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn EnhancedKeyUsage(this: &Self::This) -> ::windows_core::Result<IObjectIds>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionEnhancedKeyUsage {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionEnhancedKeyUsage_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionEnhancedKeyUsage {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionEnhancedKeyUsage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionEnhancedKeyUsage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn EnhancedKeyUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionEnhancedKeyUsage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::EnhancedKeyUsage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionEnhancedKeyUsage_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            EnhancedKeyUsage: EnhancedKeyUsage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionKeyUsage_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, usageflags: X509KeyUsageFlags) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn KeyUsage(this: &Self::This) -> ::windows_core::Result<X509KeyUsageFlags>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionKeyUsage {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionKeyUsage_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionKeyUsage {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionKeyUsage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, usageflags: X509KeyUsageFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&usageflags)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionKeyUsage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn KeyUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionKeyUsage_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509KeyUsageFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeyUsage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionKeyUsage_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            KeyUsage: KeyUsage::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionMSApplicationPolicies_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, pvalue: ::core::option::Option<&ICertificatePolicies>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Policies(this: &Self::This) -> ::windows_core::Result<ICertificatePolicies>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionMSApplicationPolicies {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionMSApplicationPolicies_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionMSApplicationPolicies {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionMSApplicationPolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionMSApplicationPolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn Policies<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionMSApplicationPolicies_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Policies(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionMSApplicationPolicies_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            Policies: Policies::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionSmimeCapabilities_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, pvalue: ::core::option::Option<&ISmimeCapabilities>) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SmimeCapabilities(this: &Self::This) -> ::windows_core::Result<ISmimeCapabilities>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionSmimeCapabilities {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSmimeCapabilities_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionSmimeCapabilities {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn SmimeCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSmimeCapabilities_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SmimeCapabilities(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionSmimeCapabilities_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            SmimeCapabilities: SmimeCapabilities::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionSubjectKeyIdentifier_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, encoding: EncodingType, strkeyidentifier: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_SubjectKeyIdentifier(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionSubjectKeyIdentifier {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSubjectKeyIdentifier_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionSubjectKeyIdentifier {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSubjectKeyIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strkeyidentifier: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strkeyidentifier)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSubjectKeyIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn get_SubjectKeyIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionSubjectKeyIdentifier_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_SubjectKeyIdentifier(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionSubjectKeyIdentifier_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            get_SubjectKeyIdentifier: get_SubjectKeyIdentifier::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionTemplate_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, ptemplateoid: ::core::option::Option<&IObjectId>, majorversion: i32, minorversion: i32) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn TemplateOid(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn MajorVersion(this: &Self::This) -> ::windows_core::Result<i32>;
    fn MinorVersion(this: &Self::This) -> ::windows_core::Result<i32>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionTemplate {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplate_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionTemplate {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ptemplateoid: *mut ::core::ffi::c_void, majorversion: i32, minorversion: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::windows_core::from_raw_borrowed(&ptemplateoid), ::core::mem::transmute_copy(&majorversion), ::core::mem::transmute_copy(&minorversion)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn TemplateOid<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TemplateOid(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MajorVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MajorVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn MinorVersion<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplate_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MinorVersion(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionTemplate_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            TemplateOid: TemplateOid::<Identity, Impl, OFFSET>,
            MajorVersion: MajorVersion::<Identity, Impl, OFFSET>,
            MinorVersion: MinorVersion::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509ExtensionTemplateName_Impl: ::windows_core::BaseImpl + IX509Extension_Impl {
    fn InitializeEncode(this: &Self::This, strtemplatename: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeDecode(this: &Self::This, encoding: EncodingType, strencodeddata: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn TemplateName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509ExtensionTemplateName {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509Extension);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplateName_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509ExtensionTemplateName {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn InitializeEncode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplateName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strtemplatename: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeEncode(this, ::core::mem::transmute(&strtemplatename)).into())
        }
        unsafe extern "system" fn InitializeDecode<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplateName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, strencodeddata: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeDecode(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&strencodeddata)).into())
        }
        unsafe extern "system" fn TemplateName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509ExtensionTemplateName_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::TemplateName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509ExtensionTemplateName_Vtbl {
            base__: <IX509Extension as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            InitializeEncode: InitializeEncode::<Identity, Impl, OFFSET>,
            InitializeDecode: InitializeDecode::<Identity, Impl, OFFSET>,
            TemplateName: TemplateName::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509Extensions_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IX509Extension>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IX509Extension>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn get_IndexByObjectId(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<i32>;
    fn AddRange(this: &Self::This, pvalue: ::core::option::Option<&IX509Extensions>) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509Extensions {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509Extensions {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn get_IndexByObjectId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, pindex: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_IndexByObjectId(this, ::windows_core::from_raw_borrowed(&pobjectid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pindex, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn AddRange<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509Extensions_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::AddRange(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        IX509Extensions_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            get_IndexByObjectId: get_IndexByObjectId::<Identity, Impl, OFFSET>,
            AddRange: AddRange::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509MachineEnrollmentFactory_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn CreateObject(this: &Self::This, strprogid: &::windows_core::BSTR) -> ::windows_core::Result<IX509EnrollmentHelper>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509MachineEnrollmentFactory {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509MachineEnrollmentFactory_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509MachineEnrollmentFactory {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateObject<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509MachineEnrollmentFactory_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strprogid: ::std::mem::MaybeUninit<::windows_core::BSTR>, ppihelper: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateObject(this, ::core::mem::transmute(&strprogid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppihelper, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509MachineEnrollmentFactory_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateObject: CreateObject::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509NameValuePair_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, strname: &::windows_core::BSTR, strvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Value(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Name(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509NameValuePair {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePair_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509NameValuePair {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePair_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strname: ::std::mem::MaybeUninit<::windows_core::BSTR>, strvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strname), ::core::mem::transmute(&strvalue)).into())
        }
        unsafe extern "system" fn Value<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePair_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Value(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Name<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePair_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Name(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509NameValuePair_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Value: Value::<Identity, Impl, OFFSET>,
            Name: Name::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509NameValuePairs_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IX509NameValuePair>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IX509NameValuePair>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509NameValuePairs {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509NameValuePairs {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509NameValuePairs_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        IX509NameValuePairs_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509PolicyServerListManager_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn get_ItemByIndex(this: &Self::This, index: i32) -> ::windows_core::Result<IX509PolicyServerUrl>;
    fn Count(this: &Self::This) -> ::windows_core::Result<i32>;
    fn _NewEnum(this: &Self::This) -> ::windows_core::Result<::windows_core::IUnknown>;
    fn Add(this: &Self::This, pval: ::core::option::Option<&IX509PolicyServerUrl>) -> ::windows_core::Result<()>;
    fn Remove(this: &Self::This, index: i32) -> ::windows_core::Result<()>;
    fn Clear(this: &Self::This) -> ::windows_core::Result<()>;
    fn Initialize(this: &Self::This, context: X509CertificateEnrollmentContext, flags: PolicyServerUrlFlags) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509PolicyServerListManager {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509PolicyServerListManager {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn get_ItemByIndex<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_ItemByIndex(this, ::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Count<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Count(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn _NewEnum<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::_NewEnum(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pval, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Add<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pval: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Add(this, ::windows_core::from_raw_borrowed(&pval)).into())
        }
        unsafe extern "system" fn Remove<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, index: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Remove(this, ::core::mem::transmute_copy(&index)).into())
        }
        unsafe extern "system" fn Clear<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Clear(this).into())
        }
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerListManager_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, flags: PolicyServerUrlFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute_copy(&flags)).into())
        }
        IX509PolicyServerListManager_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            get_ItemByIndex: get_ItemByIndex::<Identity, Impl, OFFSET>,
            Count: Count::<Identity, Impl, OFFSET>,
            _NewEnum: _NewEnum::<Identity, Impl, OFFSET>,
            Add: Add::<Identity, Impl, OFFSET>,
            Remove: Remove::<Identity, Impl, OFFSET>,
            Clear: Clear::<Identity, Impl, OFFSET>,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509PolicyServerUrl_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
    fn Url(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetUrl(this: &Self::This, pvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Default(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetDefault(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Flags(this: &Self::This) -> ::windows_core::Result<PolicyServerUrlFlags>;
    fn SetFlags(this: &Self::This, flags: PolicyServerUrlFlags) -> ::windows_core::Result<()>;
    fn AuthFlags(this: &Self::This) -> ::windows_core::Result<X509EnrollmentAuthFlags>;
    fn SetAuthFlags(this: &Self::This, flags: X509EnrollmentAuthFlags) -> ::windows_core::Result<()>;
    fn Cost(this: &Self::This) -> ::windows_core::Result<u32>;
    fn SetCost(this: &Self::This, value: u32) -> ::windows_core::Result<()>;
    fn GetStringProperty(this: &Self::This, propertyid: PolicyServerUrlPropertyID) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetStringProperty(this: &Self::This, propertyid: PolicyServerUrlPropertyID, pvalue: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn UpdateRegistry(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
    fn RemoveFromRegistry(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509PolicyServerUrl {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509PolicyServerUrl {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn Url<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Url(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUrl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUrl(this, ::core::mem::transmute(&pvalue)).into())
        }
        unsafe extern "system" fn Default<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Default(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefault<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefault(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Flags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut PolicyServerUrlFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Flags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: PolicyServerUrlFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn AuthFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509EnrollmentAuthFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AuthFlags(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAuthFlags<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: X509EnrollmentAuthFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAuthFlags(this, ::core::mem::transmute_copy(&flags)).into())
        }
        unsafe extern "system" fn Cost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Cost(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCost<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: u32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCost(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn GetStringProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propertyid: PolicyServerUrlPropertyID, ppvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetStringProperty(this, ::core::mem::transmute_copy(&propertyid)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetStringProperty<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, propertyid: PolicyServerUrlPropertyID, pvalue: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetStringProperty(this, ::core::mem::transmute_copy(&propertyid), ::core::mem::transmute(&pvalue)).into())
        }
        unsafe extern "system" fn UpdateRegistry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::UpdateRegistry(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn RemoveFromRegistry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PolicyServerUrl_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::RemoveFromRegistry(this, ::core::mem::transmute_copy(&context)).into())
        }
        IX509PolicyServerUrl_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            Url: Url::<Identity, Impl, OFFSET>,
            SetUrl: SetUrl::<Identity, Impl, OFFSET>,
            Default: Default::<Identity, Impl, OFFSET>,
            SetDefault: SetDefault::<Identity, Impl, OFFSET>,
            Flags: Flags::<Identity, Impl, OFFSET>,
            SetFlags: SetFlags::<Identity, Impl, OFFSET>,
            AuthFlags: AuthFlags::<Identity, Impl, OFFSET>,
            SetAuthFlags: SetAuthFlags::<Identity, Impl, OFFSET>,
            Cost: Cost::<Identity, Impl, OFFSET>,
            SetCost: SetCost::<Identity, Impl, OFFSET>,
            GetStringProperty: GetStringProperty::<Identity, Impl, OFFSET>,
            SetStringProperty: SetStringProperty::<Identity, Impl, OFFSET>,
            UpdateRegistry: UpdateRegistry::<Identity, Impl, OFFSET>,
            RemoveFromRegistry: RemoveFromRegistry::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509PrivateKey_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Open(this: &Self::This) -> ::windows_core::Result<()>;
    fn Create(this: &Self::This) -> ::windows_core::Result<()>;
    fn Close(this: &Self::This) -> ::windows_core::Result<()>;
    fn Delete(this: &Self::This) -> ::windows_core::Result<()>;
    fn Verify(this: &Self::This, verifytype: X509PrivateKeyVerify) -> ::windows_core::Result<()>;
    fn Import(this: &Self::This, strexporttype: &::windows_core::BSTR, strencodedkey: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn Export(this: &Self::This, strexporttype: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ExportPublicKey(this: &Self::This) -> ::windows_core::Result<IX509PublicKey>;
    fn ContainerName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetContainerName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ContainerNamePrefix(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetContainerNamePrefix(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ReaderName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetReaderName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn CspInformations(this: &Self::This) -> ::windows_core::Result<ICspInformations>;
    fn SetCspInformations(this: &Self::This, pvalue: ::core::option::Option<&ICspInformations>) -> ::windows_core::Result<()>;
    fn CspStatus(this: &Self::This) -> ::windows_core::Result<ICspStatus>;
    fn SetCspStatus(this: &Self::This, pvalue: ::core::option::Option<&ICspStatus>) -> ::windows_core::Result<()>;
    fn ProviderName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetProviderName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ProviderType(this: &Self::This) -> ::windows_core::Result<X509ProviderType>;
    fn SetProviderType(this: &Self::This, value: X509ProviderType) -> ::windows_core::Result<()>;
    fn LegacyCsp(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetLegacyCsp(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Algorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn KeySpec(this: &Self::This) -> ::windows_core::Result<X509KeySpec>;
    fn SetKeySpec(this: &Self::This, value: X509KeySpec) -> ::windows_core::Result<()>;
    fn Length(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetLength(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn ExportPolicy(this: &Self::This) -> ::windows_core::Result<X509PrivateKeyExportFlags>;
    fn SetExportPolicy(this: &Self::This, value: X509PrivateKeyExportFlags) -> ::windows_core::Result<()>;
    fn KeyUsage(this: &Self::This) -> ::windows_core::Result<X509PrivateKeyUsageFlags>;
    fn SetKeyUsage(this: &Self::This, value: X509PrivateKeyUsageFlags) -> ::windows_core::Result<()>;
    fn KeyProtection(this: &Self::This) -> ::windows_core::Result<X509PrivateKeyProtection>;
    fn SetKeyProtection(this: &Self::This, value: X509PrivateKeyProtection) -> ::windows_core::Result<()>;
    fn MachineContext(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetMachineContext(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn SecurityDescriptor(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetSecurityDescriptor(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_Certificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_Certificate(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn UniqueContainerName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Opened(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn DefaultContainer(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn Existing(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetExisting(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn Silent(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSilent(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn ParentWindow(this: &Self::This) -> ::windows_core::Result<i32>;
    fn SetParentWindow(this: &Self::This, value: i32) -> ::windows_core::Result<()>;
    fn UIContextMessage(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetUIContextMessage(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn SetPin(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn FriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetFriendlyName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Description(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetDescription(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509PrivateKey {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509PrivateKey {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Open<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Open(this).into())
        }
        unsafe extern "system" fn Create<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Create(this).into())
        }
        unsafe extern "system" fn Close<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Close(this).into())
        }
        unsafe extern "system" fn Delete<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Delete(this).into())
        }
        unsafe extern "system" fn Verify<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, verifytype: X509PrivateKeyVerify) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Verify(this, ::core::mem::transmute_copy(&verifytype)).into())
        }
        unsafe extern "system" fn Import<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strexporttype: ::std::mem::MaybeUninit<::windows_core::BSTR>, strencodedkey: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Import(this, ::core::mem::transmute(&strexporttype), ::core::mem::transmute(&strencodedkey), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn Export<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strexporttype: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, pstrencodedkey: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Export(this, ::core::mem::transmute(&strexporttype), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pstrencodedkey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ExportPublicKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pppublickey: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ExportPublicKey(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pppublickey, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ContainerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ContainerName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContainerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContainerName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn ContainerNamePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ContainerNamePrefix(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetContainerNamePrefix<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetContainerNamePrefix(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn ReaderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ReaderName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetReaderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetReaderName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn CspInformations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspInformations(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCspInformations<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCspInformations(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn CspStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CspStatus(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCspStatus<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCspStatus(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn ProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn ProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509ProviderType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProviderType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetProviderType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509ProviderType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetProviderType(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn LegacyCsp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::LegacyCsp(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLegacyCsp<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLegacyCsp(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Algorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Algorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn KeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509KeySpec) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeySpec(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetKeySpec<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509KeySpec) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeySpec(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Length<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Length(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetLength<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetLength(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ExportPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509PrivateKeyExportFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ExportPolicy(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExportPolicy<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509PrivateKeyExportFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExportPolicy(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn KeyUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509PrivateKeyUsageFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeyUsage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetKeyUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509PrivateKeyUsageFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyUsage(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn KeyProtection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509PrivateKeyProtection) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::KeyProtection(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetKeyProtection<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509PrivateKeyProtection) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetKeyProtection(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn MachineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::MachineContext(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetMachineContext<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetMachineContext(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn SecurityDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SecurityDescriptor(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSecurityDescriptor<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSecurityDescriptor(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn get_Certificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Certificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Certificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Certificate(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn UniqueContainerName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UniqueContainerName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Opened<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Opened(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DefaultContainer<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DefaultContainer(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Existing<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Existing(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetExisting<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetExisting(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn Silent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Silent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSilent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSilent(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn ParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParentWindow(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetParentWindow<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParentWindow(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn UIContextMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::UIContextMessage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetUIContextMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetUIContextMessage(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn SetPin<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPin(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn FriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetFriendlyName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Description<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Description(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDescription<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDescription(this, ::core::mem::transmute(&value)).into())
        }
        IX509PrivateKey_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Open: Open::<Identity, Impl, OFFSET>,
            Create: Create::<Identity, Impl, OFFSET>,
            Close: Close::<Identity, Impl, OFFSET>,
            Delete: Delete::<Identity, Impl, OFFSET>,
            Verify: Verify::<Identity, Impl, OFFSET>,
            Import: Import::<Identity, Impl, OFFSET>,
            Export: Export::<Identity, Impl, OFFSET>,
            ExportPublicKey: ExportPublicKey::<Identity, Impl, OFFSET>,
            ContainerName: ContainerName::<Identity, Impl, OFFSET>,
            SetContainerName: SetContainerName::<Identity, Impl, OFFSET>,
            ContainerNamePrefix: ContainerNamePrefix::<Identity, Impl, OFFSET>,
            SetContainerNamePrefix: SetContainerNamePrefix::<Identity, Impl, OFFSET>,
            ReaderName: ReaderName::<Identity, Impl, OFFSET>,
            SetReaderName: SetReaderName::<Identity, Impl, OFFSET>,
            CspInformations: CspInformations::<Identity, Impl, OFFSET>,
            SetCspInformations: SetCspInformations::<Identity, Impl, OFFSET>,
            CspStatus: CspStatus::<Identity, Impl, OFFSET>,
            SetCspStatus: SetCspStatus::<Identity, Impl, OFFSET>,
            ProviderName: ProviderName::<Identity, Impl, OFFSET>,
            SetProviderName: SetProviderName::<Identity, Impl, OFFSET>,
            ProviderType: ProviderType::<Identity, Impl, OFFSET>,
            SetProviderType: SetProviderType::<Identity, Impl, OFFSET>,
            LegacyCsp: LegacyCsp::<Identity, Impl, OFFSET>,
            SetLegacyCsp: SetLegacyCsp::<Identity, Impl, OFFSET>,
            Algorithm: Algorithm::<Identity, Impl, OFFSET>,
            SetAlgorithm: SetAlgorithm::<Identity, Impl, OFFSET>,
            KeySpec: KeySpec::<Identity, Impl, OFFSET>,
            SetKeySpec: SetKeySpec::<Identity, Impl, OFFSET>,
            Length: Length::<Identity, Impl, OFFSET>,
            SetLength: SetLength::<Identity, Impl, OFFSET>,
            ExportPolicy: ExportPolicy::<Identity, Impl, OFFSET>,
            SetExportPolicy: SetExportPolicy::<Identity, Impl, OFFSET>,
            KeyUsage: KeyUsage::<Identity, Impl, OFFSET>,
            SetKeyUsage: SetKeyUsage::<Identity, Impl, OFFSET>,
            KeyProtection: KeyProtection::<Identity, Impl, OFFSET>,
            SetKeyProtection: SetKeyProtection::<Identity, Impl, OFFSET>,
            MachineContext: MachineContext::<Identity, Impl, OFFSET>,
            SetMachineContext: SetMachineContext::<Identity, Impl, OFFSET>,
            SecurityDescriptor: SecurityDescriptor::<Identity, Impl, OFFSET>,
            SetSecurityDescriptor: SetSecurityDescriptor::<Identity, Impl, OFFSET>,
            get_Certificate: get_Certificate::<Identity, Impl, OFFSET>,
            put_Certificate: put_Certificate::<Identity, Impl, OFFSET>,
            UniqueContainerName: UniqueContainerName::<Identity, Impl, OFFSET>,
            Opened: Opened::<Identity, Impl, OFFSET>,
            DefaultContainer: DefaultContainer::<Identity, Impl, OFFSET>,
            Existing: Existing::<Identity, Impl, OFFSET>,
            SetExisting: SetExisting::<Identity, Impl, OFFSET>,
            Silent: Silent::<Identity, Impl, OFFSET>,
            SetSilent: SetSilent::<Identity, Impl, OFFSET>,
            ParentWindow: ParentWindow::<Identity, Impl, OFFSET>,
            SetParentWindow: SetParentWindow::<Identity, Impl, OFFSET>,
            UIContextMessage: UIContextMessage::<Identity, Impl, OFFSET>,
            SetUIContextMessage: SetUIContextMessage::<Identity, Impl, OFFSET>,
            SetPin: SetPin::<Identity, Impl, OFFSET>,
            FriendlyName: FriendlyName::<Identity, Impl, OFFSET>,
            SetFriendlyName: SetFriendlyName::<Identity, Impl, OFFSET>,
            Description: Description::<Identity, Impl, OFFSET>,
            SetDescription: SetDescription::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509PrivateKey2_Impl: ::windows_core::BaseImpl + IX509PrivateKey_Impl {
    fn HardwareKeyUsage(this: &Self::This) -> ::windows_core::Result<X509HardwareKeyUsageFlags>;
    fn SetHardwareKeyUsage(this: &Self::This, value: X509HardwareKeyUsageFlags) -> ::windows_core::Result<()>;
    fn AlternateStorageLocation(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetAlternateStorageLocation(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AlgorithmName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetAlgorithmName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn get_AlgorithmParameters(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_AlgorithmParameters(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn ParametersExportType(this: &Self::This) -> ::windows_core::Result<X509KeyParametersExportType>;
    fn SetParametersExportType(this: &Self::This, value: X509KeyParametersExportType) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509PrivateKey2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509PrivateKey);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509PrivateKey2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn HardwareKeyUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509HardwareKeyUsageFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HardwareKeyUsage(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHardwareKeyUsage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509HardwareKeyUsageFlags) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHardwareKeyUsage(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn AlternateStorageLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlternateStorageLocation(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAlternateStorageLocation<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlternateStorageLocation(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn AlgorithmName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlgorithmName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAlgorithmName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlgorithmName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn get_AlgorithmParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_AlgorithmParameters(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_AlgorithmParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_AlgorithmParameters(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn ParametersExportType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509KeyParametersExportType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ParametersExportType(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetParametersExportType<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PrivateKey2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: X509KeyParametersExportType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetParametersExportType(this, ::core::mem::transmute_copy(&value)).into())
        }
        IX509PrivateKey2_Vtbl {
            base__: <IX509PrivateKey as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            HardwareKeyUsage: HardwareKeyUsage::<Identity, Impl, OFFSET>,
            SetHardwareKeyUsage: SetHardwareKeyUsage::<Identity, Impl, OFFSET>,
            AlternateStorageLocation: AlternateStorageLocation::<Identity, Impl, OFFSET>,
            SetAlternateStorageLocation: SetAlternateStorageLocation::<Identity, Impl, OFFSET>,
            AlgorithmName: AlgorithmName::<Identity, Impl, OFFSET>,
            SetAlgorithmName: SetAlgorithmName::<Identity, Impl, OFFSET>,
            get_AlgorithmParameters: get_AlgorithmParameters::<Identity, Impl, OFFSET>,
            put_AlgorithmParameters: put_AlgorithmParameters::<Identity, Impl, OFFSET>,
            ParametersExportType: ParametersExportType::<Identity, Impl, OFFSET>,
            SetParametersExportType: SetParametersExportType::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509PublicKey_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, pobjectid: ::core::option::Option<&IObjectId>, strencodedkey: &::windows_core::BSTR, strencodedparameters: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn InitializeFromEncodedPublicKeyInfo(this: &Self::This, strencodedpublickeyinfo: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn Algorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn Length(this: &Self::This) -> ::windows_core::Result<i32>;
    fn get_EncodedKey(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn get_EncodedParameters(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ComputeKeyIdentifier(this: &Self::This, algorithm: KeyIdentifierHashAlgorithm, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509PublicKey {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509PublicKey {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pobjectid: *mut ::core::ffi::c_void, strencodedkey: ::std::mem::MaybeUninit<::windows_core::BSTR>, strencodedparameters: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&pobjectid), ::core::mem::transmute(&strencodedkey), ::core::mem::transmute(&strencodedparameters), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn InitializeFromEncodedPublicKeyInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strencodedpublickeyinfo: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeFromEncodedPublicKeyInfo(this, ::core::mem::transmute(&strencodedpublickeyinfo), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn Algorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Algorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Length<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut i32) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Length(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_EncodedKey<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_EncodedKey(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_EncodedParameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_EncodedParameters(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ComputeKeyIdentifier<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509PublicKey_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, algorithm: KeyIdentifierHashAlgorithm, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ComputeKeyIdentifier(this, ::core::mem::transmute_copy(&algorithm), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509PublicKey_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeFromEncodedPublicKeyInfo: InitializeFromEncodedPublicKeyInfo::<Identity, Impl, OFFSET>,
            Algorithm: Algorithm::<Identity, Impl, OFFSET>,
            Length: Length::<Identity, Impl, OFFSET>,
            get_EncodedKey: get_EncodedKey::<Identity, Impl, OFFSET>,
            get_EncodedParameters: get_EncodedParameters::<Identity, Impl, OFFSET>,
            ComputeKeyIdentifier: ComputeKeyIdentifier::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509SCEPEnrollment_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, prequest: ::core::option::Option<&IX509CertificateRequestPkcs10>, strthumbprint: &::windows_core::BSTR, thumprintencoding: EncodingType, strservercertificates: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<()>;
    fn InitializeForPending(this: &Self::This, context: X509CertificateEnrollmentContext) -> ::windows_core::Result<()>;
    fn CreateRequestMessage(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CreateRetrievePendingMessage(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn CreateRetrieveCertificateMessage(this: &Self::This, context: X509CertificateEnrollmentContext, strissuer: &::windows_core::BSTR, issuerencoding: EncodingType, strserialnumber: &::windows_core::BSTR, serialnumberencoding: EncodingType, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ProcessResponseMessage(this: &Self::This, strresponse: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<X509SCEPDisposition>;
    fn SetServerCapabilities(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn FailInfo(this: &Self::This) -> ::windows_core::Result<X509SCEPFailInfo>;
    fn SignerCertificate(this: &Self::This) -> ::windows_core::Result<ISignerCertificate>;
    fn SetSignerCertificate(this: &Self::This, pvalue: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<()>;
    fn OldCertificate(this: &Self::This) -> ::windows_core::Result<ISignerCertificate>;
    fn SetOldCertificate(this: &Self::This, pvalue: ::core::option::Option<&ISignerCertificate>) -> ::windows_core::Result<()>;
    fn get_TransactionId(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_TransactionId(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Request(this: &Self::This) -> ::windows_core::Result<IX509CertificateRequestPkcs10>;
    fn CertificateFriendlyName(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetCertificateFriendlyName(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Status(this: &Self::This) -> ::windows_core::Result<IX509EnrollmentStatus>;
    fn get_Certificate(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn Silent(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetSilent(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn DeleteRequest(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509SCEPEnrollment {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509SCEPEnrollment {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, prequest: *mut ::core::ffi::c_void, strthumbprint: ::std::mem::MaybeUninit<::windows_core::BSTR>, thumprintencoding: EncodingType, strservercertificates: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::windows_core::from_raw_borrowed(&prequest), ::core::mem::transmute(&strthumbprint), ::core::mem::transmute_copy(&thumprintencoding), ::core::mem::transmute(&strservercertificates), ::core::mem::transmute_copy(&encoding)).into())
        }
        unsafe extern "system" fn InitializeForPending<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeForPending(this, ::core::mem::transmute_copy(&context)).into())
        }
        unsafe extern "system" fn CreateRequestMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateRequestMessage(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateRetrievePendingMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateRetrievePendingMessage(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CreateRetrieveCertificateMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, context: X509CertificateEnrollmentContext, strissuer: ::std::mem::MaybeUninit<::windows_core::BSTR>, issuerencoding: EncodingType, strserialnumber: ::std::mem::MaybeUninit<::windows_core::BSTR>, serialnumberencoding: EncodingType, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateRetrieveCertificateMessage(this, ::core::mem::transmute_copy(&context), ::core::mem::transmute(&strissuer), ::core::mem::transmute_copy(&issuerencoding), ::core::mem::transmute(&strserialnumber), ::core::mem::transmute_copy(&serialnumberencoding), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProcessResponseMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strresponse: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, pdisposition: *mut X509SCEPDisposition) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProcessResponseMessage(this, ::core::mem::transmute(&strresponse), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetServerCapabilities<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetServerCapabilities(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn FailInfo<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut X509SCEPFailInfo) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FailInfo(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::SignerCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSignerCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSignerCertificate(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn OldCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::OldCertificate(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetOldCertificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetOldCertificate(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn get_TransactionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_TransactionId(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_TransactionId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_TransactionId(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Request<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Request(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn CertificateFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CertificateFriendlyName(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetCertificateFriendlyName<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetCertificateFriendlyName(this, ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn Status<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Status(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn get_Certificate<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Certificate(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn Silent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Silent(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetSilent<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetSilent(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn DeleteRequest<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::DeleteRequest(this).into())
        }
        IX509SCEPEnrollment_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeForPending: InitializeForPending::<Identity, Impl, OFFSET>,
            CreateRequestMessage: CreateRequestMessage::<Identity, Impl, OFFSET>,
            CreateRetrievePendingMessage: CreateRetrievePendingMessage::<Identity, Impl, OFFSET>,
            CreateRetrieveCertificateMessage: CreateRetrieveCertificateMessage::<Identity, Impl, OFFSET>,
            ProcessResponseMessage: ProcessResponseMessage::<Identity, Impl, OFFSET>,
            SetServerCapabilities: SetServerCapabilities::<Identity, Impl, OFFSET>,
            FailInfo: FailInfo::<Identity, Impl, OFFSET>,
            SignerCertificate: SignerCertificate::<Identity, Impl, OFFSET>,
            SetSignerCertificate: SetSignerCertificate::<Identity, Impl, OFFSET>,
            OldCertificate: OldCertificate::<Identity, Impl, OFFSET>,
            SetOldCertificate: SetOldCertificate::<Identity, Impl, OFFSET>,
            get_TransactionId: get_TransactionId::<Identity, Impl, OFFSET>,
            put_TransactionId: put_TransactionId::<Identity, Impl, OFFSET>,
            Request: Request::<Identity, Impl, OFFSET>,
            CertificateFriendlyName: CertificateFriendlyName::<Identity, Impl, OFFSET>,
            SetCertificateFriendlyName: SetCertificateFriendlyName::<Identity, Impl, OFFSET>,
            Status: Status::<Identity, Impl, OFFSET>,
            get_Certificate: get_Certificate::<Identity, Impl, OFFSET>,
            Silent: Silent::<Identity, Impl, OFFSET>,
            SetSilent: SetSilent::<Identity, Impl, OFFSET>,
            DeleteRequest: DeleteRequest::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509SCEPEnrollment2_Impl: ::windows_core::BaseImpl + IX509SCEPEnrollment_Impl {
    fn CreateChallengeAnswerMessage(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn ProcessResponseMessage2(this: &Self::This, flags: X509SCEPProcessMessageFlags, strresponse: &::windows_core::BSTR, encoding: EncodingType) -> ::windows_core::Result<X509SCEPDisposition>;
    fn ResultMessageText(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn DelayRetry(this: &Self::This) -> ::windows_core::Result<DelayRetryAction>;
    fn ActivityId(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
    fn SetActivityId(this: &Self::This, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509SCEPEnrollment2 {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(IX509SCEPEnrollment);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509SCEPEnrollment2 {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn CreateChallengeAnswerMessage<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::CreateChallengeAnswerMessage(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ProcessResponseMessage2<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, flags: X509SCEPProcessMessageFlags, strresponse: ::std::mem::MaybeUninit<::windows_core::BSTR>, encoding: EncodingType, pdisposition: *mut X509SCEPDisposition) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ProcessResponseMessage2(this, ::core::mem::transmute_copy(&flags), ::core::mem::transmute(&strresponse), ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResultMessageText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ResultMessageText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn DelayRetry<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut DelayRetryAction) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::DelayRetry(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ActivityId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ActivityId(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetActivityId<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollment2_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetActivityId(this, ::core::mem::transmute(&value)).into())
        }
        IX509SCEPEnrollment2_Vtbl {
            base__: <IX509SCEPEnrollment as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            CreateChallengeAnswerMessage: CreateChallengeAnswerMessage::<Identity, Impl, OFFSET>,
            ProcessResponseMessage2: ProcessResponseMessage2::<Identity, Impl, OFFSET>,
            ResultMessageText: ResultMessageText::<Identity, Impl, OFFSET>,
            DelayRetry: DelayRetry::<Identity, Impl, OFFSET>,
            ActivityId: ActivityId::<Identity, Impl, OFFSET>,
            SetActivityId: SetActivityId::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509SCEPEnrollmentHelper_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn Initialize(this: &Self::This, strserverurl: &::windows_core::BSTR, strrequestheaders: &::windows_core::BSTR, prequest: ::core::option::Option<&IX509CertificateRequestPkcs10>, strcacertificatethumbprint: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn InitializeForPending(this: &Self::This, strserverurl: &::windows_core::BSTR, strrequestheaders: &::windows_core::BSTR, context: X509CertificateEnrollmentContext, strtransactionid: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn Enroll(this: &Self::This, processflags: X509SCEPProcessMessageFlags) -> ::windows_core::Result<X509SCEPDisposition>;
    fn FetchPending(this: &Self::This, processflags: X509SCEPProcessMessageFlags) -> ::windows_core::Result<X509SCEPDisposition>;
    fn X509SCEPEnrollment(this: &Self::This) -> ::windows_core::Result<IX509SCEPEnrollment>;
    fn ResultMessageText(this: &Self::This) -> ::windows_core::Result<::windows_core::BSTR>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509SCEPEnrollmentHelper {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509SCEPEnrollmentHelper {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn Initialize<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strserverurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, strrequestheaders: ::std::mem::MaybeUninit<::windows_core::BSTR>, prequest: *mut ::core::ffi::c_void, strcacertificatethumbprint: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::Initialize(this, ::core::mem::transmute(&strserverurl), ::core::mem::transmute(&strrequestheaders), ::windows_core::from_raw_borrowed(&prequest), ::core::mem::transmute(&strcacertificatethumbprint)).into())
        }
        unsafe extern "system" fn InitializeForPending<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, strserverurl: ::std::mem::MaybeUninit<::windows_core::BSTR>, strrequestheaders: ::std::mem::MaybeUninit<::windows_core::BSTR>, context: X509CertificateEnrollmentContext, strtransactionid: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::InitializeForPending(this, ::core::mem::transmute(&strserverurl), ::core::mem::transmute(&strrequestheaders), ::core::mem::transmute_copy(&context), ::core::mem::transmute(&strtransactionid)).into())
        }
        unsafe extern "system" fn Enroll<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processflags: X509SCEPProcessMessageFlags, pdisposition: *mut X509SCEPDisposition) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::Enroll(this, ::core::mem::transmute_copy(&processflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn FetchPending<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, processflags: X509SCEPProcessMessageFlags, pdisposition: *mut X509SCEPDisposition) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::FetchPending(this, ::core::mem::transmute_copy(&processflags)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pdisposition, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn X509SCEPEnrollment<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::X509SCEPEnrollment(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn ResultMessageText<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SCEPEnrollmentHelper_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::ResultMessageText(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        IX509SCEPEnrollmentHelper_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            Initialize: Initialize::<Identity, Impl, OFFSET>,
            InitializeForPending: InitializeForPending::<Identity, Impl, OFFSET>,
            Enroll: Enroll::<Identity, Impl, OFFSET>,
            FetchPending: FetchPending::<Identity, Impl, OFFSET>,
            X509SCEPEnrollment: X509SCEPEnrollment::<Identity, Impl, OFFSET>,
            ResultMessageText: ResultMessageText::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
#[doc = "Required features: `\"Win32_Foundation\"`, `\"Win32_System_Com\"`, `\"Win32_System_Ole\"`, `\"Win32_System_Variant\"`"]
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
pub trait IX509SignatureInformation_Impl: ::windows_core::BaseImpl + super::super::super::System::Com::IDispatch_Impl {
    fn HashAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetHashAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn PublicKeyAlgorithm(this: &Self::This) -> ::windows_core::Result<IObjectId>;
    fn SetPublicKeyAlgorithm(this: &Self::This, pvalue: ::core::option::Option<&IObjectId>) -> ::windows_core::Result<()>;
    fn get_Parameters(this: &Self::This, encoding: EncodingType) -> ::windows_core::Result<::windows_core::BSTR>;
    fn put_Parameters(this: &Self::This, encoding: EncodingType, value: &::windows_core::BSTR) -> ::windows_core::Result<()>;
    fn AlternateSignatureAlgorithm(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetAlternateSignatureAlgorithm(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn AlternateSignatureAlgorithmSet(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn NullSigned(this: &Self::This) -> ::windows_core::Result<super::super::super::Foundation::VARIANT_BOOL>;
    fn SetNullSigned(this: &Self::This, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<()>;
    fn GetSignatureAlgorithm(this: &Self::This, pkcs7signature: super::super::super::Foundation::VARIANT_BOOL, signaturekey: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::Result<IObjectId>;
    fn SetDefaultValues(this: &Self::This) -> ::windows_core::Result<()>;
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl ::windows_core::Iids for IX509SignatureInformation {
    const IIDS: &'static [::windows_core::GUID] = ::windows_core::concat_iids!(super::super::super::System::Com::IDispatch);
}
#[cfg(all(feature = "Win32_Foundation", feature = "Win32_System_Com", feature = "Win32_System_Ole", feature = "Win32_System_Variant"))]
impl<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize> ::windows_core::Vtable<Identity, OFFSET> for IX509SignatureInformation {
    const VTABLE: Self::Vtable = {
        unsafe extern "system" fn HashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::HashAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetHashAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetHashAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn PublicKeyAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::PublicKeyAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetPublicKeyAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetPublicKeyAlgorithm(this, ::windows_core::from_raw_borrowed(&pvalue)).into())
        }
        unsafe extern "system" fn get_Parameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, pvalue: *mut ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::get_Parameters(this, ::core::mem::transmute_copy(&encoding)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn put_Parameters<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, encoding: EncodingType, value: ::std::mem::MaybeUninit<::windows_core::BSTR>) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::put_Parameters(this, ::core::mem::transmute_copy(&encoding), ::core::mem::transmute(&value)).into())
        }
        unsafe extern "system" fn AlternateSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlternateSignatureAlgorithm(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetAlternateSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetAlternateSignatureAlgorithm(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn AlternateSignatureAlgorithmSet<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::AlternateSignatureAlgorithmSet(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn NullSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pvalue: *mut super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::NullSigned(this) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(pvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetNullSigned<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, value: super::super::super::Foundation::VARIANT_BOOL) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetNullSigned(this, ::core::mem::transmute_copy(&value)).into())
        }
        unsafe extern "system" fn GetSignatureAlgorithm<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void, pkcs7signature: super::super::super::Foundation::VARIANT_BOOL, signaturekey: super::super::super::Foundation::VARIANT_BOOL, ppvalue: *mut *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| match Impl::GetSignatureAlgorithm(this, ::core::mem::transmute_copy(&pkcs7signature), ::core::mem::transmute_copy(&signaturekey)) {
                ::core::result::Result::Ok(ok__) => {
                    ::core::ptr::write(ppvalue, ::core::mem::transmute(ok__));
                    ::windows_core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            })
        }
        unsafe extern "system" fn SetDefaultValues<Identity: ::windows_core::ImplProvider<Impl = Impl>, Impl: IX509SignatureInformation_Impl, const OFFSET: usize>(this: *mut ::core::ffi::c_void) -> ::windows_core::HRESULT {
            Identity::call_impl::<_, OFFSET>(this, |this| Impl::SetDefaultValues(this).into())
        }
        IX509SignatureInformation_Vtbl {
            base__: <super::super::super::System::Com::IDispatch as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE,
            HashAlgorithm: HashAlgorithm::<Identity, Impl, OFFSET>,
            SetHashAlgorithm: SetHashAlgorithm::<Identity, Impl, OFFSET>,
            PublicKeyAlgorithm: PublicKeyAlgorithm::<Identity, Impl, OFFSET>,
            SetPublicKeyAlgorithm: SetPublicKeyAlgorithm::<Identity, Impl, OFFSET>,
            get_Parameters: get_Parameters::<Identity, Impl, OFFSET>,
            put_Parameters: put_Parameters::<Identity, Impl, OFFSET>,
            AlternateSignatureAlgorithm: AlternateSignatureAlgorithm::<Identity, Impl, OFFSET>,
            SetAlternateSignatureAlgorithm: SetAlternateSignatureAlgorithm::<Identity, Impl, OFFSET>,
            AlternateSignatureAlgorithmSet: AlternateSignatureAlgorithmSet::<Identity, Impl, OFFSET>,
            NullSigned: NullSigned::<Identity, Impl, OFFSET>,
            SetNullSigned: SetNullSigned::<Identity, Impl, OFFSET>,
            GetSignatureAlgorithm: GetSignatureAlgorithm::<Identity, Impl, OFFSET>,
            SetDefaultValues: SetDefaultValues::<Identity, Impl, OFFSET>,
        }
    };
    const VTABLE_REF: &'static Self::Vtable = &<Self as ::windows_core::Vtable<Identity, OFFSET>>::VTABLE;
}
